1************
 *NLETER 02 *
 ************
0                            MISD (EUROPE) NEWSLETTER
                             ------------------------
0   PREPARED BY : D.A. MOORCROFT                 NUMBER 2
                                                 1 APRIL 1973
0                       SPECIAL SORT/MERGE ISSUE
0   THIS NEWSLETTER DESCRIBES HOW TO WRITE AND USE COBOL USER EXIT
    ROUTINES FOR THE SORT/MERGE PROGRAM, AND, IN A SERIES OF APPEN-
    DICES, INCLUDES OTHER ITEMS OF GENERAL INTEREST ABOUT THE SORT/
    MERGE PROGRAM.  THE NEWSLETTER IS ORIENTED SPECIFICALLY TOWARDS
    USING EXIT ROUTINES WITH THE IBM PROGRAM PRODUCT SORT/MERGE
    (5734-SM1), BUT APPENDIX D OUTLINES THE RELEVANT DIFFERENCES
    BETWEEN THE PROGRAM PRODUCT AND THE BASIC SORT (3605-SM-023).
    FOR FURTHER INFORMATION, SEE THE PUBLICATIONS
0        OS SORT/MERGE PROGRAMMERS GUIDE              (SC33-4007)
         IBM SYSTEM/360 OPERATING SYSTEM SORT/MERGE   (GC28-6543)
0   CONTENTS :-
    --------
0   COBOL SORT EXIT ROUTINES.
0        INTRODUCTION TO SORT/MERGE EXITS AND THEIR APPLICATIONS
         PROGRAM DESCRIPTION AND GENERAL SORT/MERGE LOGIC
         FUNCTIONS OF USER EXIT ROUTINES
         COBOL PROGRAM REQUIREMENTS AND CONVENTIONS
         LINKAGE EDITOR REQUIREMENTS
         JCL REQUIREMENTS
         SORT CONTROL STATEMENTS NEEDED TO INVOKE EXIT ROUTINES
0   APPENDIX A :   DETAILED DESCRIPTION OF EACH SORT/MERGE EXIT ROUTINE.
0   APPENDIX B :   CALCULATING INTERMEDIATE DIRECT ACCESS STORAGE
                   REQUIREMENTS.
0   APPENDIX C :   VARIABLE-LENGTH RECORD CONSIDERATIONS.
0   APPENDIX D :   DIFFERENCES BETWEEN THE PROGRAM PRODUCT AND BASIC
                   SORT/MERGE PROGRAMS.
0   APPENDIX E :   EFFICIENCY CONSIDERATIONS.
0   APPENDIX F :   EXAMPLE OF AN E15 SORT EXIT.
1************
 * NLETER02 *
 ************
0   COBOL SORT EXITS
    ----------------
0   INTRODUCTION
    ------------
0   THERE ARE PROVISIONS IN THE IBM SORT/MERGE PROGRAMS FOR A NUMBER
    OF USER-CODED EXIT ROUTINES, WHICH MAY BE USED TO MANIPULATE AND
    MODIFY THE DATA.  TYPICAL APPLICATIONS OF THESE EXITS ARE :-
0   -    TO REJECT/REPORT ON/COMBINE DUPLICATE RECORDS.
0   -    BATCH BALANCING.
0   -    ERROR REPORTING.
0   -    CONTROL FIELD MODIFICATION SO THAT SPECIAL SUBSETS OF THE
         DATA MAY BE SORTED ON ADDITIONAL OR DIFFERENT FIELDS, OR SO
         THAT RECORDS OF DIFFERENT LAY-OUTS CAN BE SORTED EVEN WHEN
         THE SORT FIELDS ARE IN DIFFERENT POSITIONS IN THE VARIOUS
         RECORD TYPES.  (NOTE THAT THIS USUALLY INVOLVES INCREASING
         THE SIZE OF THE RECORDS FOR THE DURATION OF THE SORT, AND
         PLACING THE SORT FIELDS IN THE EXTENSION).
0   -    DATA COMPRESSION BY REMOVING REDUNDANT AND UNUSED FIELDS
         FROM THE RECORDS IN A SORT/PROCESS/LIST APPLICATION.
         (SAVINGS OF UP TO 70% OF CPU AND I/O TIME, AND CONSEQUENTLY
         JOB COST, CAN BE EFFECTED IN THIS WAY).
0   -    DATA FIELD MODIFICATION.
0   -    REJECTION OF RECORDS THAT WILL NOT BE SUBSEQUENTLY PROCESSED
         BY THE PROGRAMS FOLLOWING THE SORT.
0   THE ADVANTAGE OF USING SORT EXITS IS THE REDUCTION IN RUN TIME
    THAT RESULTS, EITHER BY REDUCING THE SIZE AND/OR NUMBER OF THE
    RECORDS, OR BY PERFORMING FUNCTIONS IN THE SORT THAT WOULD OTHER-
    WISE REQUIRE AN ADDITIONAL ONE OR TWO PASSES OF THE DATA.
0   THE MAIN DISADVANTAGE, IN THE PAST, OF USING SORT EXITS WAS THE
    NECESSITY OF WRITING THEM IN BASIC ASSEMBLER LANGUAGE, WITH THE
    CONSEQUENT PROBLEMS OF DOCUMENTATION AND MAINTENANCE, BUT NOW
    THAT IT IS POSSIBLE TO WRITE THEM IN COBOL THESE PROBLEMS HAVE
    BEEN REMOVED.  IT SHOULD BE NOTED, HOWEVER, THAT THE EXECUTION
    OF USER EXIT ROUTINES WILL INCREASE THE OVERALL SORT/MERGE
    EXECUTION TIME, AND ALSO THAT BECAUSE THE EXITS OCCUPY MAIN
    STORAGE THAT WOULD OTHERWISE BE AVAILABLE TO THE SORT, EXTRA
    MERGE PASSES OF THE DATA MAY BE NEEDED.
1************
 * NLETER02 *
 ************
0   PROGRAM DESCRIPTION
    -------------------
0   THE EXITS ARE LOCATED IN PARTICULAR PHASES OF THE SORT/MERGE
    PROGRAM, AND IT IS THUS NECESSARY TO HAVE A GENERAL UNDER-
    STANDING  OF THE WAY IN WHICH THE SORT/MERGE PROGRAM OPERATES.
0   THE SORT/MERGE IS A SEGMENTED PROGRAM (I.E. IT IS COMPOSED
    OF PARTS THAT CAN OPERATE INDEPENDENTLY), AND THERE ARE TWO
    LEVELS OF SEGMENTATION :
0   -    PHASES    - LARGE PROGRAM COMPONENTS THAT ACCOMPLISH A
                     SPECIFIK TASK.
0   -    MODULES   - THE INDEPENDENT ROUTINES OF WHICH PHASES ARE
                     COMPOSED.
0   THERE ARE FIVE PHASES, OF WHICH ONLY THE FIRST TWO PHASES
    (DEFINITION AND OPTIMIZATION) ARE INITIALISATION PHASES; EACH
    OF THE REMAINING PHASES (SORT, INTERMEDIATE MERGE, AND FINAL
    MERGE IS DIVIDED INTO TWO COMPONENTS :
0   -    ASSIGNMENT COMPONENT          (PHASE INITIALISATION)
0   -    RUNNING COMPONENT             (PHASE EXECUTION)
0   FIGURE 1 IS A PHASE-LEVEL FLOWCHART SHOWING THE VARIOUS USER
    EXITS THAT CAN BE TAKEN, THE PHASE IN WHICH THEY OCCUR, AND
    THE POSSIBLE FUNCTIONS OF THE ROUTINES WRITTEN FOR THESE EXITS.
0   FUNCTIONS OF USER EXIT ROUTINES
    -------------------------------
0   1.   OPENING DATA SETS AND INITIALISATION :- EXITS E11, E21
         AND E31 MAY BE USED TO OPEN DATA SETS AND PERFORM OTHER
         FORMS OF INITIALISATION, BUT THIS MAY ALSO BE ACCOMPLISHED
         BY MEANS OF FIRST-TIME SWITCHES IN THE RUNNING COMPONENT
         EXITS E15, E25 AND E35.  NOTE THAT EXITS E11, E21 AND
         E31 ARE OVERLAYED FOR USE AS BUFFER AREAS UNLESS THEY ARE
         LINK EDITED WITH THE OTHER EXITS IN THE PHASE.
0   2.   ADDING, DELETING, ALTERING RECORDS; TERMINATING THE SORT :-
         THESE FUNCTIONS MUST BE ASSOCIATED WITH THE EXITS E15,
         E25 AND E35.
0   3.   INTERMEDIATE STORAGE CAPACITY ERRORS :- EXIT E16 MAY BE
         USED TO DICTATE THE ACTION TAKEN BY SORT/MERGE IF IT
         DETERMINES THAT THE INTERMEDIATE STORAGE AVAILABLE IS
         INSUFFICIENT TO HANDLE THE INPUT DATA SET.
1************
 * NLETER02 *
 ************
0   4.   MODIFYING CONTROL FIELDS :- EXIT E61 MAY BE USED TO ALTER
         THE EXTRACTED CONTROL FIELDS BEFORE THE SORT/MERGE PROGRAM
         COMPARES THEM.  ONLY THE EXTRACTED IMAGE OF THE CONTROL
         FIELDS IS MODIFIED,NOT THE ORIGINAL FIELDS IN THE DATA
         RECORD.  IF THIS EXIT IS USED, THE SORT/MERGE ARRANGES
         THE MODIFIED CONTROL FIELDS IN ASCENDING SEQUENCE.
0   5.   CLOSING DATA SETS :- EXITS E17, E27 AND E37 MAY BE USED
         TO CLOSE DATA SETS AND PERFORM ANY NECESSARY HOUSEKEEPING,
         BUT THIS MAY ALSO BE ACCOMPLISHED BY MEANS OF A LAST-TIME
         SWITCH IN THE RUNNING COMPONENT EXITS E15, E25 AND E35.
1************
 * NLETER02 *
 ************
0   COBOL PROGRAM REQUIREMENTS AND CONVENTIONS
    ------------------------------------------
0   THE COBOL SORT EXIT ROUTINES  (WHICH ARE, IN EFFECT, SUB-PROGRAMS)
    CAN HAVE ANY(VALID) PROGRAM NAME BUT THE ENTRY POINT MUST BE
    NAMED MODULE.   I.E. THE FIRST THREE STATEMENTS IN THE PROCEDURE
    DIVISION MUST BE :
0        ENTER LINKAGE.
         ENTRY 'MODULE'  USING .....
         ENTER COBOL.
0   ALSO, THE AREA IN WHICH THE NEW OUTPUT RECORD IS CONSTRUCTED,
    OR TO WHICH IT IS MOVED, PRIOR TO RETURNING TO THE SORT MUST BE
    A FIELD IN WORKING-STORAGE, I.E. THE INPUT RECORD ITSELF SHOULD
    NOT BE MODIFIED.  (THIS APPLIES ONLY TO EXITS E15, E25 AND E35,
    WHICH ARE THE ONLY EXITS WHICH PASS DATA, OTHER THAN A RETURN
    CODE, BACK TO THE SORT).
0   REGARDLESS OF THE IDENTITY OF THE SORT EXIT, THE SORT EXIT
    INTERFACE ALWAYS PASSES FIVE LINKAGE FIELDS TO THE COBOL EXIT.
    THE ACTUAL CONTENTS OF THESE FIELDS VARY ACCORDING TO THE EXIT,
    AND ARE DEALT WITH IN DETAIL IN APPENDIX A, THOUGH NOT EVERY
    LINKAGE FIELD IS RELEVANT TO EVERY SORT EXIT  (SOME SORT EXITS
    USE NONE AT A11).  ALTHOUGH NOT ALWAYS USED, THE LAST TWO
    LINKAGE FIELDS ARE ALWAYS THE SAME, TO WHIT :-
0        4.   RETURN CODE FROM THE COBOL EXIT TO THE SORT/MERGE
              PROGRAM, COMPRISING TWO BYTES OF BINARY DATA
              (I.E. S999 COMPUTATIONAL).
0        5.   END-OF-DATA INDICATOR CONSISTING OF A ONE CHARACTER
              NUMBER.
0             THE EXCEPTIONS WILL BE DEALT WITH LATER, BUT, IN
              GENERAL, THE POSSIBLE VALUES AND MEANINGS OF THE
              RETURN CODE ARE AS FOLLOWS :
0        0    ALTER OR NO ACTION.  IF THE RECORD IS TO BE RETAINED
              UNCHANGED, MERELY MOVE IT TO THE OUTPUT AREA IN
              WORKING-STORAGE, OTHERWISE MOVE IT TO THE OUTPUT AREA
              MAKE THE NECESSARY MODIFICATIONS.
0        4    DELETE RECORD.  IT IS NOT NECESSARY TO MOVE THE INPUT
              RECORD TO THE OUTPUT AREA.
1************
 * NLETER02 *
 ************
0        8    DO NOT RETURN.  EXITS E15, E25 AND E35 ARE REPEATEDLY
              GIVEN CONTROL UNTIL THEY ISSUE A RETURN CODE OF 8.
              UNLESS RECORDS ARE TO BE INSERTED AFTER END-OF-DATA,
              AN 8 SHOULD BE RETURNED WHEN END-OF-DATA IS INDICATED
              BY LINKAGE FIELD 5.
0        12   INSERT RECORD.  IF A RECORD IS TO BE INSERTED BEFORE
              THE CURRENT RECORD PASSED BY THE SORT TO THE EXIT, THE
              NEW RECORD SHOULD BE PLACED IN THE OUTPUT AREA IN
              WORKING-STORAGE.  SORT/MERGE THEN RETURNS TO THE EXIT
              WITH THE SAME CURRENT RECORD AS BEFORE SO THAT MORE
              RECORDS MAY BE INSERTED, OR THE CURRENT RECORD
              MODIFIED.  INSERTIONS MAY BE MADE AFTER END-OF-DATA,
              BECAUSE THE SORT/MERGE WILL CONTINUE TO RETURN TO THE
              EXIT UNTIL IT RECEIVES A RETURN CODE OF 8.
0        16   TERMINATE SORT/MERGE.  IF SORT/MERGE RECEIVES A RETURN
              CODE OF 16, IT RETURNS CONTROL TO THE SUPERVISOR, ALSO
              WITH A RETURN CODE OF 16.
0        THE END-OF-DATA INDICATOR NORMALLY CONTAINS THE VALUE '0',
         BUT WHEN THE END-OF-DATA CONDITION IS REACHED, IT CONTAINS
         THE VALUE '1'.
0   BEFORE CONTROL IS RETURNED TO THE SORT/MERGE INTERFACE ROUTINE
    FROM EXITS E15, E25 OR E35, THE COBOL PROGRAM MUST EXECUTE THE
    FOLLOWING CODING :-
0             ENTER LINKAGE.
              CALL 'RESOLVE' USING OUTPUT-RECORD.
              ENTER COBOL.
0   WHERE OUTPUT-RECORD IS THE NAME OF THE FIELD IN WORKING-STORAGE
    IN WHICH THE RECORD TO BE RETURNED TO THE SORT/MERGE HAS BEEN
    BUILT, OR TO WHICH IT HAS BEEN MOVED.
0   IT IS ALSO NECESSARY FOR THE COBOL SUB-PROGRAM TO PLACE A VALUE
    INTO THE CODE FIELD PASSED BY THE SORT/MERGE INTERFACE.  BEAR
    IN MIND THAT THE MOST FREQUENTLY USED EXITS, E15 AND E35, WILL
    BE REPEATEDLY GIVEN CONTROL UNTIL THE SORT IS SPECIFICALLY TOLD
    NOT TO RETURN (BY A RETURN CODE OF 8).
0   THE COBOL SUB-PROGRAM RETURNS TO THE SORT/MERGE INTERFACE VIA
    THE NORMAL SUB-PROGRAM RETURN LINKAGE.
0   I.E.      ENTER LINKAGE.
              RETURN.
              ENTER COBOL.
1************
 * NLETER02 *
 ************
0   LINKAGE EDITOR REQUIREMENTS
    ---------------------------
0   BEFORE THE COBOL SUB-PROGRAM CAN BE INVOKED AS A USER EXIT
    ROUTINE BY THE SORT/MERGE PROGRAM IT MUST BE COMBINED WITH
    THE GENERAL PURPOSE SORT EXIT INTERFACE PROGRAM WHICH CREATES
    THE NECESSARY LINKAGE BETWEEN THE SORT/MERGE AND THE COBOL
    PROGRAM.  TO DO THIS, THE FOLLOWING LINKAGE EDITOR JCL AND
    CONTROL STATEMENTS SHOULD BE PLACED AFTER THE SOURCE DECK
    IN THE COBECL THAT CREATES THE EXECUTABLE SORT EXIT :-
0   //LKED.SYSLMOD  DD  DSN=LIBRARY-NAME,DISP=SHR
    //LKED.LINKLIB  DD  DSN=SYS2.LINKLIB,DISP=SHR
    //LKED.SYSIN    DD  *
              INCLUDE   LINKLIB(SORTEXIT)
              ENTRY     XXX
              NAME      MEMBER-NAME(R)
0   /*
0   WHERE XXX IS THE THREE-CHARACTER NAME OF THE EXIT TO BE
              ASSOCIATED WITH THIS SUB-PROGRAM   (EG E35)
0   AND  MEMBER-NAME IS THE NAME ASSIGNED TO THE SUB-PROGRAM
         (AND, CONSEQUENTLY, TO THE COMPOSITE EXIT).  THIS WILL
         NORMALLY BE THE NAME OF THE COBOL SUB-PROGRAM.
0   JCL REQUIREMENTS
    ----------------
0   IN ADDITION TO THE USUAL DD STATEMENTS
0             SORTLIB
              SYSOUT
              SYSIN
              SORTIN
              SORTOUT
              SORTWKXX
0   USUALLY SUPPLIED FOR A SORT, IT IS NECESSARY TO HAVE A STATEMENT
    OF THE FORM
0        //LIBRARY  DD  DSN=LIBRARY-NAME, DISP-SHR TO DEFINE THE
         LIBRARY ON WHICH THE SORT EXITS RESIDE.
1************
 * NLETER02 *
 ************
0   SORT CONTROL STATEMENTS
    -----------------------
0   FOLLOWING THE USUAL SORT (OR MERGE) CONTROL STATEMENTS, AN
    EXTRA ONE, AND PERHAPS TWO, CONTROL STATEMENTS ARE REQUIRED.
    THE FIRST OF THESE, THE RECORD STATEMENT, IS ONLY NEEDED IF
    AN EXIT ROUTINE CHANGES THE LENGTH OF THE RECORD, BUT IT CAN
    ALSO BE USED TO OPTIMISE SORT/MERGE PERFORMANCE IF VARIABLE
    LENGTH RECORDS ARE BEING PROCESSED.  (SEE THE SECTION ON
    VARIABLE LENGTH RECORD CONSIDERATIONS FOR A DESCRIPTION OF
    THE RECORD STATEMENT IN THIS CONTEXT).  THE FORMAT OF THE
    RECORD STATEMENT, WHEN USED TO DESCRIBE A FIXED LENGTH RECORD
    WHOSE SIZE IS ALTERED BY A SORT EXIT, IS
0        RECORD  TYPE=F, LENGTH=(L1, L2, L3)
0   WHERE
0        L1    IS THE LENGTH OF THE RECORD IN THE INPUT DATA SET.
              THIS VALUE MUST BE CODED IF THE RECORD STATEMENT IS
              USED, AND IT MUST BE THE SAME AS THAT SPECIFIED IN
              LRECL FOR THE INPUT DATA.
0        L2   IS THE LENGTH OF EACH RECORD WHEN HANDLED BY THE
              SORT PHASE.  IF L2 IS NOT SPECIFIED IT IS ASSUMED
              TO BE THE SAME AS L1.  A VALUE FOR L2 MUST BE SPECI-
              FIED IF THE LENGTH OF THE RECORD IS MODIFIED IN EXIT
              E15,                                            AND
0        L3   IS THE LENGTH OF EACH RECORD IN THE OUTPUT DATA SET.
              IF L3 IS NOT CODED, IT IS ASSUMED TO BE EQUAL TO
              L2 FOR A SORT, AND EQUAL TO L1 FOR A MERGE.  IF THE
              LENGTH OF THE RECORD IS ALTERED BY EXIT E35, A VALUE
              MUST BE SPECIFIED FOR L3.  THE VALUE OF L3 MUST BE
              THE SAME AS THAT SPECIFIED FOR LRECL IN THE SORTOUT
              DD STATEMENT.
0        THE OTHER CONTROL STATEMENT, WHICH MUST BE CODED WHEN
         SORT/MERGE EXITS ARE USED, IS THE MODS STATEMENT, THE
         FORMAT OF WHICH IS
0             MODS EXIT=(MEMBER-NAME,SIZE,LIBRARY,N),EXIT=.....
    WHERE EXIT IS THE THREE-CHARACTER NAME OF THE EXIT, SUCH AS E15
         MEMBER-NAME IS THE NAME OF THE EXIT ROUTINE ON THE LIBRARY
         SIZE IS THE LINK-EDITED SIZE OF THE SORT EXIT IN DECIMAL
         LIBRARY IS THE DD-NAME OF THE DD STATEMENT DEFINING THE
                  LIBRARY ON WHICH THE SORT EXIT RESIDES,
         N TELLS THE SORT/MERGE PROGRAM THAT NO FURTHER LINK EDITING
                  IS REQUIRED.
1************
 * NLETER02 *
 ************
0   THE SEQUENCE OF THE SORT/MERGE CONTROL STATEMENTS SHOULD BE
0        SORT   (OR MERGE)
         RECORD (OPTIONAL)
         MODS
0   NOTE THAT IF IT IS NECESSARY TO CONTINUE A CONTROL STATEMENT
    ON A SECOND CARD, THEN THE OPERAND FIELD OF THE PRECEDING CARD
    MAY BE TERMINATED EITHER AT ANY CONVENIENT COMMA OR IN COLUMN
    71 PART WAY THROUGH AN OPERAND, A NON-BLANK SHOULD BE CODED IN
    COLUMN 72, AND THE CONTINUATION OPERAND FIELD SHOULD BE STARTED
    IN COLUMN 16 OF THE CONTINUATION CARD WITH COLUMNS 1 - 15 BLANK.
1************
 * NLETER02 *
 ************
0                            APPENDIX A
                             ----------
0   A DETAILED DESCRIPTION OF THE USES AND REQUIREMENTS OF EACH
    SORT EXIT.
0        ASSIGNMENT COMPONENT EXITS  (E11, E21, E31)
         RECORD CHANGE EXIT   E15
         RECORD CHANGE EXIT   E25
         RECORD CHANGE EXIT   E35
         NMAX EXIT (E16)
         RUNNING COMPONENT TERMINATION EXITS (E17, E27, E37)
         CONTROL FIELD MODIFICATION EXIT  (E61)
1************
 * NLETER02 *
 ************
0   ASSIGNMENT COMPONENT EXITS  (E11, E21, E31)
    -------------------------------------------
0   PHASE IN WHICH USED :
0        E11  -    ASSIGNMENT COMPONENT OF SORT PHASE
         E21  -    ASSIGNMENT COMPONENT OF INTERMEDIATE MERGE PHASE
         E31  -    ASSIGNMENT COMPONENT OF FINAL MERGE PHASE
0   POSSIBLE USES :
0        TO OPEN DATA SETS NEEDED BY OTHER ROUTINES, OR PERFORM
         OTHER FORMS OF INITIALISATION.
0   LINKAGE :
0        NO FIELDS ARE PASSED ACROSS BY THE SORT/MERGE PROGRAM.
0   RETURN CODES :
0        NOT USED.
0   FURTHER CONSIDERATIONS :
0        1.   THESE ARE THE ONLY THREE ROUTINES THAT CAN BE DESIGNED
              FOR SEPARATE LINKAGE EDITING.
0        2.   THE FUNCTIONS OF THESE EXIT ROUTINES CAN ALSO BE PER-
              FORMED IN THE RUNNING COMPONENT EXITS E15, E25 AND E35
              BY MEANS OF A FIRST-TIME SWITCH, BUT THIS DECREASES
              THE AMOUNT OF MAIN STORAGE AVAILABLE TO THE SORT/MERGE
              PROGRAM.
1************
 * NLETER02 *
 ************
0   RECORD CHANGE EXIT E15
    ----------------------
0   PHASE IN WHICH USED :
0        IN THE SORT PHASE, BEFORE ANY RECORDS ARE SORTED.  (I.E.
         IMMEDIATELY AFTER THEY HAVE BEEN USED).
0   POSSIBLE USES :
0        ADD RECORDS TO THE INPUT DATA SET, CREATE THE ENTIRE
         INPUT DATA SET, DELETE RECORDS FROM THE INPUT DATA SET,
         MODIFY RECORDS IN THE INPUT DATA SET, TERMINATE THE SORT/
         MERGE PROGRAM.
0   LINKAGE :
0        FIELD 1 ; CURRENT RECORD
         FIELD 2 ; N/A
         FIELD 3 ; N/A
         FIELD 4 ; RETURN CODE
         FIELD 5 ; END-OF-DATA INDICATOR
0   RETURN CODES :
0        AS DESCRIBED IN THE SECTION 'COBOL PROGRAM REQUIREMENTS
         AND CONVENTIONS'.
0   RESTRICTIONS :
0        1.   CANNOT BE USED IN A MERGE OPERATION.
0   FURTHER CONSIDERATIONS :
0        A RETURN CODE OF 8 MUST BE USED TO INSTRUCT THE SORT/
         MERGE NOT TO RETURN TO THE EXIT WHEN ALL RECORDS HAVE
         BEEN PROCESSED AND/OR INSERTED.
1************
 * NLETER02 *
 ************
0        RECORD CHANGE EXIT E15 (CONTINUED)
         ----------------------
0        HINTS AND TECHNIQUES :
0        A COMMON USE OF AN E15 EXIT IS TO INCREASE THE LENGTH
         OF THE INPUT RECORD AND ADD A TRAILING SORT FIELD, THE
         CONTENTS OF WHICH DIFFER FROM RECORD TYPE TO RECORD TYPE.
         USUALLY, THIS ADDITIONAL FIELD IS REQUIRED ONLY FOR THE
         DURATION OF THE SORT, AND THE RECORD IS TRUNCATED BEFORE
         THE OUTPUT RECORD IS WRITTEN.  THE TRUNCATION ITSELF MAY BE
         ACCOMPLISHED BY MEANS OF THE RECORD STATEMENT, BUT IT IS
         ALSO NECESSARY TO TURN OFF THE SORT OUTPUT SEQUENCE TEST
         SWITCH WITH AN E35 EXIT (THE SORT WILL DETECT A SEQUENCE
         ERROR ON OUTPUT AND FAIL IF THIS IS NOT DONE).
         IF THE ONLY E35 EXIT PROCESSING REQUIRED IS TO SET OFF
         THIS SWITCH, THE SPECIAL E35 EXIT NAMED SORTNSEQ
         MAY BE USED.
0        THE SYSTEM LIBRARY SYS2.LINKLIB SHOULD BE CONCATERNATED
         WITH THE USER LIBRARY WHICH CONTAINS THE OTHER SORT EXITS,
         THUS
0        //LIBRARY  DD  DSN=USER.PROGLIB,DISP=SHR
         //         DD  DSN=SYS2.LINKLIB,DISP=SHR
0        AND THE SORT/MERGE CONTROL STATEMENTS SHOULD BE OF THE FORM
0                  SORT      FIELDS=(81,15,CH,A)
                   RECORD    TYPE=F,LENGTH=(80,95,80)
                   MODS      E15=(EXPAND,3800,LIBRARY,N),
                             E35=(SORTNSEQ,40,LIBRARY,N)
1************
 * NLETER02 *
 ************
0   RECORD CHANGE EXIT E25
    ----------------------
0   PHASE IN WHICH USED :
0        IN THE INTERMEDIATE MERGE PHASE, AFTER THE RECORDS HAVE
         BEEN MERGED.
0   POSSIBLE USES :
0        MODIFY OR DELETE RECORDS LEAVING THE INTERMEDIATE MERGE
         PHASE.
0   LINKAGE :
0        FIELD 1  ;  CURRENT RECORD
         FIELD 2  ;  PREVIOUS RECORD
         FIELD 3  ;  N/A
         FIELD 4  ;  RETURN CODE
         FIELD 5  ;  END-OF-DATA INDICATOR
0   RETURN CODES :
0        0,4 AND 16, AS DESCRIBED IN THE SECTION 'COBOL PROGRAM
         REQUIREMENTS AND CONVENTIONS'.
0   RESTRICTIONS :
0        1.   MODIFICATIONS MAY NOT BE MADE TO THE CONTROL FIELDS.
0        2.   STATUS INFORMATION CANNOT BE STORED WITHIN THE EXIT
              BECAUSE IT IS RELOADED INTO MAIN STORAGE FOR EVERY
              PASS OF THE INTERMEDIATE MERGE PHASE.
0        3.   CANNOT BE USED IN A MERGE-ONLY OPERATION.
0   FURTHER CONSIDERATIONS :
0        IF YOU ONLY WANT TO SUMMARISE (WITH NO DELETION) IT IS
         MORE EFFICIENT TO USE EXIT E35.
1************
 * NLETER02 *
 ************
0   RECORD CHANGE EXIT E35
    ----------------------
0   PHASE IN WHICH USED :
0        IN THE FINAL MERGE PHASE, AFTER THE RECORDS HAVE BEEN
         MERGED (I.E. IMMEDIATELY BEFORE THEY ARE WRITTEN TO
         SORTOUT).
0   POSSIBLE USES :
0        ADD TO, DELETE FROM, SUMMARISE, OR MODIFY RECORDS IN THE
         OUTPUT DATA SET.  TERMINATE THE SORT/MERGE.
0   LINKAGE :
0        FIELD 1 ; CURRENT RECORD
         FIELD 2 ; PREVIOUS RECORD
         FIELD 3 ; SEQUENCE CHECK SWITCH (S999 COMPUTATIONAL)
         FIELD 4 ; RETURN CODE
         FIELD 5 ; END-OF-DATA INDICATOR
0   RETURN CODES :
0        AS DESCRIBED IN THE SECTION 'COBOL PROGRAM REQUIREMENTS
         AND CONVENTIONS'.
0   FURTHER CONSIDERATIONS :
0        1.   THE SORT/MERGE PROGRAM PERFORMS A SEQUENCE CHECK ON THE
              OUTPUT RECORDS IF THE SEQUENCE CHECK SWITCH IS 0 (THE
              VALUE TO WHICH IT IS INITIALISED).  IF YOUR ROUTINE
              ALTERS CONTROL FIELDS IN SUCH A WAY THAT THE OUTPUT
              RECORDS WILL NOT COLLATE CORRECTLY, YOU SHOULD PLACE
              A VALUE OF 4 IN THE SWITCH.
0        2.   YOU CAN SUMMARISE RECORDS IN THE OUTPUT DATA SET BY
              MODIFYING THE PREVIOUS RECORD (WHICH MUST BE MODIFIED
              IN PLACE) AND, OPTIONALLY, DELETING THE CURRENT RECORD.
              IF IT IS DELETED, SORT/MERGE RETURNS TO YOUR ROUTINE
              WITH THE SAME PREVIOUS RECORD AND A NEW CURRENT RECORD
              SO THAT YOU CAN SUMMARISE FURTHER.
1************
 * NLETER02 *
 ************
0   NMAX EXIT (E16)
    ---------------
0   PHASE IN WHICH USED :
0        SORT PHASE.
0   POSSIBLE USES :
0        TO DECIDE WHAT ACTION THE SORT IS TO TAKE IF IT HAS
         EXCEEDED ITS CALCULATED ESTIMATE OF THE NUMBER OF
         RECORDS IT CAN HANDLE WITH A GIVEN AMOUNT OF MAIN
         AND INTERMEDIATE STORAGE.
0   LINKAGE :
0        NO FIELDS ARE PASSES ACROSS BY THE SORT/MERGE PROGRAM.
0   RETURN CODES :
0        0 - SORT CURRENT RECORDS ONLY.  YOU CAN SORT THE REMAINDER
             OF THE DATA SET ON ANOTHER RUN, USING THE SKIPREC
             OPERAND ON THE SORT STATEMENT TO SKIP THE RECORDS
             ALREADY SORTED, AND THEN MERGE THE TWO SORT OUTPUTS
             TO COMPLETE THE OPERATION.
             (MESSAGE IGH0541 CONTAINS THE NUMBER OF RECORDS
             SORTED).
0        4 - TRY TO SORT ADDITIONAL RECORDS.  ENOUGH SPACE MAY BE
             AVAILABLE FOR THE PROGRAM TO COMPLETE PROCESSING.
             IF ENOUGH IS NOT, SORT/MERGE GENERATES A MESSAGE
             AND TERMINATES.
0        8 - TERMINATE THE PROGRAM.
1************
 * NLETER02 *
 ************
0   RUNNING COMPONENT TERMINATION EXITS (E17, E27, E37)
    ---------------------------------------------------
0   PHASE IN WHICH USED :
0        E17  -    SORT PHASE
         E27  -    INTERMEDIATE MERGE PHASE
         E37  -    FINAL MERGE PHASE
0   POSSIBLE USES :
0        CLOSE DATA SETS USED BY OTHER ROUTINES AND PERFORM OTHER
         HOUSEKEEPING FUNCTIONS.  NOTE THAT THIS CAN BE ACCOMPLI-
         SHED BY LAST-TIME SWITCHES IN THE RUNNING COMPONENT EXITS
         E15, E25 AND E35.
0   LINKAGE :
0        NO FIELDS ARE PASSED ACROSS BY THE SORT/MERGE PROGRAM.
0   RETURN CODES :
0        NOT USED.
1************
 * NLETER02 *
 ************
0   CONTROL FIELD MODIFICATION EXIT (E61)
    -------------------------------------
0   PHASE IN WHICH USED :
0        THE ROUTINE IS LOADED WITH THE RUNNING COMPONENT OF EACH
         PHASE, AND RECEIVES CONTROL WHENEVER SORT/MERGE ENCOUN-
         TERS A CONTROL FIELD FOR WHICH AN E WAS CODED (INSTEAD
         OF AN A OR D) IN THE SORT STATEMENT SUB-PARAMETER
         SPECIFYING SEQUENCE.
0   POSSIBLE USES :
0        TO MODIFY CONTROL FIELDS.
0   LINKAGE :
0        FIELD 1 ; NUMBER OF THE CONTROL FIELD (S9(9) COMPUTATIONAL)
         FIELD 2 ; CONTROL FIELD
         FIELD 3 ; CONTROL FIELD LENGTH
         FIELD 4 ; N/A
         FIELD 5 ; N/A
0   RETURN CODES :
0        NOT USED.
0   FURTHER CONSIDERATIONS :
0        FOR ALL FIELDS EXCEPT BINARY, SORT/MERGE PASSES A FIELD
         EQUAL IN LENGTH TO THE SIZE SPECIFIED IN THE SORT OR
         MERGE STATEMENT.  FOR BINARY FIELDS, A WHOLE NUMBER OF
         BYTES ARE PASSES, PADDED WITH ZEROES AT BEGINNING AND/OR
         END AS NECESSARY.
0   RESTRICTIONS :
0        YOUR ROUTINE CANNOT ALTER THE LENGTH OF A CONTROL FIELD.
         IF THE LENGTH OF THE LOGICAL CONTROL FIELD SHOULD BE
         INCREASED, SPECIFY THE REQUIRED LENGTH IN THE RELEVANT
         SUB-PARAMETER OF THE SORT OR MERGE STATEMENT.
1************
 * NLETER02 *
 ************
0                            APPENDIX  B
                             -----------
0                  CALCULATING INTERMEDIATE STORAGE REQUIREMENTS.
1************
 * NLETER02 *
 ************
0   THE FOLLOWING FORMULAE GIVE THE TOTAL NUMBER OF TRACKS REQUIRED
    FOR DIRECT ACCESS INTERMEDIATE STORAGE.
0   BALANCED SORTING TECHNIQUE :       (UP TO 6 WORK AREAS)
0             T =  S * N
                 ------------     + 2N
                   K * (N - 1)
0   CRISS-CROSS SORTING TECHNIQUE      (MORE THAN 6 WORK AREAS)
0             T = 1.25 * S
                  ----------
                      K
0   WHERE     N IS THE NUMBER OF WORK AREAS
              S IS THE NUMBER OF INPUT RECORDS
              K = B
                  L
0                 L IS THE INPUT RECORD LENGTH
                  B IS 3400 FOR 2311
                      18000 FOR 2301
                       7000 FOR 2314
                      12000 FOR 3330
0   NOTE : USE ONLY THE INTEGER PORTION OF K - NEVER ROUND UPWARDS.
           IF K = 0 USE K = 1.
1************
 * NLETER02 *
 ************
0                            APPENDIX  C
                             -------------
0                  VARIABLE-LENGTH RECORD CONSIDERATIONS
1************
 * NLETER02 *
 ************
0   WHEN PROCESSING VARIABLE-LENGTH RECORDS, IT IS POSSIBLE TO
    OPTIMISE SORT/MERGE PROGRAM PERFORMANCE BY USING A RECORD
    CONTROL STATEMENT OF THE FORM.
0        RECORD  TYPE=V, LENGTH = ( L1, L2, L3, L4, L5 )
0   WHERE
0        L1   IS THE MAXIMUM LENGTH OF A RECORD IN THE INPUT DATA
              SET.  THIS VALUE MUST BE CODED IF A RECORD STATEMENT
              IS USED, AND IT MUST BE THE SAME AS THAT FOR LRECL
              IN THE INPUT DATA SET.
0        L2   IS THE MAXIMUM LENGTH OF THE RECORDS HANDLED BY THE
              SORT.  IF NOT SPECIFIED, IT IS ASSUMED TO BE EQUAL
              TO L1, BUT IT MUST BE SPECIFIED IF THE RECORD LENGTH
              IS ALTERED BY AN E15 EXIT.  NOT USED IN A MERGING
              APPLICATION.
0        L3   IS THE MAXIMUM LENGTH OF EACH RECORD IN THE OUTPUT
              DATA SET.  IF NOT SPECIFIED IT IS ASSUMED TO BE
              EQUAL TO L2 IN A SORT, AND TO L1 IN A MERGE.  IT
              MUST BE SPECIFIED IF THE RECORD LENGTHS ARE ALTERED
              BY AN E35 EXIT, AND IT MUST BE EQUAL TO THE VALUE
              OF LRECL FOR SORTOUT.
0        L4   IS THE MINIMUM LENGTH OF RECORDS IN THE INPUT DATA
              SET.  IF NOT SPECIFIED IT IS ASSUMED TO BE THE
              MINIMUM RECORD SIZE NECESSARY TO CONTAIN THE CONTROL
              FIELDS DEFINED IN THE SORT OR MERGE CONTROL STATE-
              MENT, OR THE MINIMUM RECORD LENGTH ALLOWED BY THE
              OPERATING SYSTEM, WHICHEVER IS GREATER.  NOT NEEDED
              FOR A MERGE.
0        L5   IS THE RECORD LENGTH THAT OCCURS MOST FREQUENTLY IN
              THE INPUT DATA SET (THE MODAL LENGTH).  THIS VALUE
              SHOULD BE USED TO HELP DEFINE A DATA SET BIASED TOWARD
              A PARTICULAR LENGTH.  IF NOT CODED, IT IS ASSUMED TO
              BE EQUAL TO THE AVERAGE OF THE MAXIMUM AND MINIMUM
              RECORD LENGTHS IN THE INPUT DATA SET.
1************
 * NLETER02 *
 ************
0                            APPENDIX  D
                             -----------
0   DIFFERENCES BETWEEN THE IBM/360 OPERATING SYSTEM SORT/MERGE
    PROGRAM PRODUCT (5734 - SM1) AND THE IBM/360 OPERATING SYSTEM
    SORT/MERGE (3605 - SM - 023).
1************
 * NLETER02 *
 ************
0   BECAUSE OF DIFFERENCES IN THE INTERNAL LOGIC OF THE TWO SORT/
    MERGE PROGRAMS, IT IS NECESSARY TO INVOKE THE LINKAGE EDITOR
    TO ENABLE THE SORT TO INVOKE EXIT ROUTINES OR A LIBRARY WHEN
    USING THE OLD SORT.  EXTRA JCL STATEMENTS ARE CONSEQUENTLY
    REQUIRED, AND THESE ARE :
0   //SYSPRINT  DD  DUMMY     (LINKAGE EDITOR OUTPUT)
    //SYSLIN    DD  UNIT=SYSDA,SPACE=(TRK,(1,1) )
    //SYSLMOD   DD  UNIT=SYSDA,SPACE=(CYL,(1,1,5))
    //SYSUT1    DD  SPACE=(CYL,(1,1)),
                UNIT=(SYSDA,SEP=(SORTLIB,SYSLMOD,SYSLIN))
    //SORTMODS  DD  UNIT=SYSDA,SPACE=(CYL,(1,,5))
0   THE MODS CONTROL STATEMENT NEEDS TO BE CODED SLIGHTLY DIFFERENTLY;
0        MODS  EXIT=(MEMBER-NAME,SIZE,LIBRARY),.....
0   I.E. THE FOURTH SUB-PARAMETER, N, IS OMITTED.  THIS CONSTITUTES
    THE INSTRUCTION TO THE SORT/MERGE PROGRAM TO INVOKE THE LINKAGE
    EDITOR.
0   THERE ARE ALSO TWO MINOR DIFFERENCES IN THE DETAILED FUNCTION
    OF THE SORT EXIT ROUTINES.  THESE ARE :
0   1.   EXITS E15, E25 AND E35 CANNOT RETURN A CODE OF 16, AND
         CONSEQUENTLY CANNOT TERMINATE THE SORT.
0   2.   THE CONTROL FIELD MODIFICATION EXIT (E61) IS PASSED ONLY
         THE FIRST TWO LINKAGE FIELDS (CONTROL FIELD NUMBER AND THE
         CONTROL FIELD ITSELF), AND NOT THE THIRD LINKAGE FIELD
         (WHICH CONTAINS THE LENGTH OF THE CONTROL FIELD WITH SM1).
1************
 * NLETER02 *
 ************
0                            APPENDIX  E
                             -----------
0                  EFFICIENCY CONSIDERATIONS
1************
 * NLETER02 *
 ************
0   1.   AS WITH ALL I/O OPERATIONS, THE PERFORMANCE OF THE SORT/
         MERGE PROGRAM CAN BE DRAMATICALLY IMPROVED BY BLOCKING
         THE INPUT AND OUTPUT DATA SETS.
0   2.   THE CPU TIME TAKEN BY THE SORT/MERGE PROGRAM INCREASES
         WITH THE COMPLEXITY OF THE SORT (OR MERGE) CONTROL
         STATEMENT.  CPU TIME CAN BE DECREASED BY, FOR EXAMPLE,
         DEFINING A FIXED, PACKED, OR ZONED DECIMAL DATA AS
         BINARY PROVIDED IT IS KNOWN TO BE ALWAYS POSITIVE, OR
         BY DEFINING ADJACENT CHARACTER OR BINARY FIELDS AS ONE
         PROVIDED THAT THEY ARE IN DESCENDING ORDER OF SIGNIFI-
         CANCE.  WHEN DESIGNING RECORD FORMATS, SPECIFY THE
         LOCATION AND FORMAT OF CONTROL FIELDS SUCH THAT THEY
         BEGIN AND END ON BYTE BOUNDARIES AND CONTAIN EBCDIC
         OR BINARY DATA, WHERE POSSIBLE.
0   3.   WITH ACCURATE INFORMATION ABOUT THE DATA SET SIZE, THE
         SORT/MERGE PROGRAM CAN MAKE THE MOST EFFICIENT USE OF
         MAIN AND INTERMEDIATE STORAGE.  IF YOU KNOW THE EXACT
         NUMBER OF RECORDS TO BE SORTED, PLACE THE INFORMATION
         IN THE SIZE PARAMETER OF THE SORT (OR MERGE) STATEMENT -
         E.G. SIZE = 34129.  IF YOU DO NOT KNOW THE EXACT SIZE,
         ESTIMATE IT AS CLOSELY AS POSSIBLE - E.G. SIZE=E34000.
0   4.   WHEN PROCESSING VARIABLE-LENGTH RECORDS, USE THE RECORD
         CONTROL STATEMENT IN ORDER TO ALLOW THE PROGRAM TO
         CALCULATE THE OPTIMUM SORT.  (SEE APPENDIX C FOR FURTHER
         INFORMATION).
0   5.   WHERE POSSIBLE, AVOID ASSIGNING THE BARE MINIMUM OF
         INTERMEDIATE STORAGE FOR A GIVEN APPLICATION, BECAUSE
         THE NUMBER OF INTERMEDIATE MERGE PHASES REQUIRED DEC-
         REASES AS THE AVAILABLE SPACE INCREASES.
0   6.   THE FOLLOWING CONSIDERATIONS APPLY TO WORK DATA SETS ON
         DIRECT ACCESS DEVICES :-
0        .    USE CHANNEL SEPARATION WHEREEVER POSSIBLE -
              I.E. UNIT=SYSDA,SEP=SORTWKXX,....
0        .    USE DEVICE SEPARATION WHEREVER POSSIBLE -
              I.E. UNIT=(SYSDA,SEP=SORTWKXX),....
0        .    ASSIGN WORK DATA SETS OF SIMILAR SIZES.
1************
 * NLETER02 *
 ************
0        .    WHEN USING THE BALANCED SORTING TECHNIQUE (UP TO 6
              SORT WORK AREAS) ASSIGN AS FEW DATA SETS AS POSSIBLE.
              AT LEAST 3 WORK AREAS ARE NEEDED, BUT 3 LARGE ONES
              ARE MORE EFFICIENT THAN 6 SMALLER ONES.
0        .    WHEN USING THE CRISS-CROSS SORTING TECHNIQUE (MORE
              THAN 6 SORT WORK AREAS) ASSIGN AS MANY WORK DATA
              SETS AS POSSIBLE - THE MAXIMUM IS 17 - BUT, IF
              POSSIBLE, NOT MORE THAN ONE TO EACH DEVICE.
0   BELOW IS AN EXAMPLE OF CHANNEL AND DEVICE SEPARATION ON OUR
    CURRENT CONFIGURATION (I.E. WITH TWO WORK PACKS OR BOTH
    CHANNELS 1 AND 2), WITH INPUT ON A MOUNTABLE DIRECT ACCESS
    DEVICE, AND OUTPUT AS A TEMPORARY DATA SET ON A DIRECT ACCESS
    DEVICE :
0   //SORTIN   DD   DSN=INPUT,DISP=SHR
    //         DCB=(RECFM=FB,LRECL=80,BLKSIZE=720)
    //SORTWK01 DD   UNIT=SYSDA,SEP=SORTIN,
    //         SPACE=(CYL,10,,CONTIG)
    //SORTWK02 DD    UNIT=SYSDA,SEP=SORTWK01,
    //         SPACE=(CYL,10,,CONTIG)
    //SORTWK03 DD    UNIT=(SYSDA,SEP=SORTWK01),AFF=SORTWK01,
    //         SPACE=(CYL,10,,CONTIG)
    //SORTOUT  DD    DSN=&&OUTPUT,DISP=(,PASS),
    //         UNIT=(SYSDA,SEP=SORTWK02),AFF=SORTWK02,
    //         DCB=(RECFM=FB,LRECL=80,BLKSIZE=720)
1************
 * NLETER02 *
 ************
0                            APPENDIX  F
                             -----------
0                  EXAMPLE OF AN  E15  EXIT  ROUTINE
1************
 * NLETER02 *
 ************
0                  JCL FOR THE SORT.
0
