1************
 * UT377    *
 ************
0UT377
 -----
01. PURPOSE
 ----------
0   THIS SUBROUTINE PROVIDES A FAST METHOD OF SEARCHING A
    TABLE OF INTEGER OR FLOATING POINT NUMBERS.
02. LIMITATIONS
 --------------
0   THE ENTRIES IN THE TABLE AND THE SEARCH ARGUMENT MUST
    BE OF THE SAME DATA FORM.  THEY MUST BE EITHER INTEGER
    OR SHORT FORM FLOATING POINT.
03. INPUT DATA
 -------------
0   NONE
04. OUTPUT DATA
 --------------
0   NONE
05. OPERATION
 ------------
0   THE SUBROUTINE IS, IN REALITY, TWO SUBROUTINES; ONE FOR
    INTEGER DATA AND ONE FOR FLOATING POINT (COMPUTATIONAL
    AND COMPUTATIONAL-1, RESPECTIVELY).  THEY HAVE DIFFERENT
    NAMES, UT3771 FOR INTEGER AND UT377F FOR FLOATING POINT.
    CALLING SEQUENCE:
0        FORTRAN:  CALL  UT377I(KABLE,LENGTH,ISRCH,INDEX)
                   CALL  UT377F(TABLE,LENGTH,ENTRY,INDEX)
0        COBOL:    CALL 'UT377I' USING TABLE, LENGTH, SEARCH, INDEX
                   CALL 'UT377F' USING TABLE, LENGTH, SEARCH, INDEX.
0   THE ARGUMENTS ARE:
0        TABLE     ADDRESS OF THE TABLE.  IN FORTRAN THE NAME OF A
          OR       ONE DIMENSION ARRAY; IN COBOL THE 01 ENTRY OF
         KABLE     THE TABLE, MUST BE FLOATING POINT OR INTEGER
                   DEPENDING ON THE SUBROUTINE NAME.
0        LENGTH    NUMBER OF ENTRIES IN THE TABLE.
0        SEARCH    NAME OF SEARCH ARGUMENT.  DATA FORM MUST AGREE
           OR      WITH ARGUMENT 1.
         ISRCH
           OR
         ENTRY
1************
 * UT377    *
 ************
0        INDEX     NAME OF INDEX RETURNED FROM THE SUBROUTINE.
                   WILL BE THE INDEX OF THE ENTRY IN THE TABLE
                   THAT EXACTLY MATCHES THE SEARCH ARGUMENT.
0                  IF SEARCH ARGUMENT IS NOT IN THE TABLE    INDEX=0
                   IF SEARCH LOWER THAN LOWEST TABLE ENTRY   INDEX=-1
                   IF SEARCH HIGHER THAN HIGHEST TABLE ENTRY INDEX=-2
06. EXAMPLE
 ----------
0   FORTRAN
0        DIMENSION FUNCT(240,3)
         DIMENSION TABLE(240)
         LENGTH=240
         INDEX=0
         .
         .
         .
         READ(2,2)  ENTRY,.....
         CALL UT377F(TABLE,LENGTH,ENTRY,INDEX)
         IF (INDEX.LT.1)GO TO 1O
         A=FUNCT(INDEX,1)
         B=FUNCT(INDEX,2)
         C=FUNCT(INDEX,3)
         .
         .
         .
    10 WRITE(6,11)
    11 FORMAT('UNABLE TO MATCH')
0   THIS EXAMPLE ILLUSTRATES PICKING UP THREE VARIABLES ASSOCIATED
    WITH THE ENTRY.  THE TWO ARRAYS ARE SYNCHRONIZED.  THE ENTRY IS
    READ FROM FORTRAN 2 AND THE THREE VARIABLES ARE FOUND IN THE
    ARRAY CALLED FUNCTION.
1************
 * UT377    *
 ************
0   COBOL
0   77   LENGTH    PICTURE 9(7)        COMPUTATIONAL VALUE 335.
    77   INDEX     PICTURE 9(7)        COMPUTATIONAL VALUE 0.
         .
         .
         .
    01   TABLE-OF-FUNCTIONS.
         03   FF   PICTURE   X(30)   OCCURS 335 TIMES.
    01   TABLE-OF-ARGUMENTS.
         03   AA   PICTURE  9(7)  COMPUTATIONAL
              OCCURS 335 TIMES.
         .
         .
         .
         ENTER LINKAGE.
         CALL 'UT377I' USING TABLE-OF-ARGUMENTS,
         LENGTH, SEARCH-ARGUMENT, INDEX.
         ENTER COBOL.
         .
         .
         .
0   THIS EXAMPLE SHOWS A METHOD OF PICKING UP THE FUNCTION FROM
    A SYNCHRONIZED PAIR OF TABLES.  ALL DATA ITEMS ARE INTEGER
    BINARY.
