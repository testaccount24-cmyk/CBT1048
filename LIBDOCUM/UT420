1************
 * UT420    *
 ************
0UT420
 -----
01. PURPOSE
 ----------
0   THIS SUBROUTINE EQUATES BITS OF A TABLE TO A NUMERIC CODE, AND
    THE STATUS OF THE BIT DETERMINES WHETHER OR NOT THE CODE IS
    VALID.  THE SUBROUTINE ALSO HAS THE FACILITY OF SETTING
    INDIVIDUAL BITS ON OR OFF.
02. LIMITATIONS
 --------------
0   1.   THE CODE TO BE VERIFIED MUST BE NUMERIC, AND IN UNSIGNED
         DISPLAY FORMAT (I.E. ALL DIGITS COMPRISING THE CODE MUST
         BE IN THE RANGE HEXADECIMAL F0 - F9).
0   2.   THE LARGEST CODE THAT THE SUBROUTINE CAN HANDLE IS FIVE
         DIGITS.
03. INPUT DATA
 -------------
0   NONE.
04. OUTPUT DATA
 --------------
0   NONE.
05. OPERATION
 ------------
0   THE CODING REQUIRED TO CALL THE SUBROUTINE FROM A COBOL PROGRAM
    IS
0   ENTER LINKAGE.
 -----------------
0   CALL 'UT420' USING DATA-NAME.
0   ENTER COBOL.
0   WHERE DATA-NAME IS A GROUP ITEM OF THE FOLLOWING FORMAT:
0   01   PARAMETER.
         03   OPERATION           PICTURE X.
         03   RESULT              PICTURE 9.
         03   ERROR-SWITCH        PICTURE 9.
         03   KODE                PICTURE 9(5).
         03   TABLE               PICTURE X(N).
0   IT IS THE PROGRAMMER'S RESPONSIBILITY TO MAKE THE TABLE LARGE
    ENOUGH TO ACCOMODATE ALL THE BIT ENTRIES REQUIRED, BECAUSE IF
    THE AREA DESIGNATED IS TOO SMALL, UT420 WILL ALTER, AND DETERMINE
    THE STATUS OF, BITS IN THE FIELDS FOLLOWING THE PARAMETER AREA.
    AS A GENERAL RULE, A THREE DIGIT CODE REQUIRES A 125 BYTE TABLE,
    A FOUR DIGIT CODE REQUIRES A 1250 BYTE TABLE, AND A FIVE DIGIT
    CODE REQUIRES A 12500 BYTE TABLE.  HOWEVER, IF IT IS KNOWN
    THAT CODES ABOVE A CERTAIN VALUE ARE INVALID, THE TABLE SIZE CAN
    BE REDUCED TO THE VALUE GIVEN BY THE EXPRESSION
                   SIZE = (UPPER LIMIT)/8
1************
 * UT420    *
 ************
0   THE SUBROUTINE CAN PERFORM FIVE OPERATIONS.  THESE ARE:-
0   1.   C - THE TABLE IS SET TO LOW-VALUES (I.E. EVERY BIT IS SET
         TO ZERO).  THE SIZE OF THE TABLE (IN BYTES) SHOULD BE
         PLACED IN KODE, AND THE UTILITY REJECTS ANY VALUE IN EXCESS
         OF 12,500, SETTING ERROR-SWITCH TO 3.  ON GOOD END OF THE
         OPERATION, ERROR-SWITCH IS SET TO ZERO AND RESULT IS SET TO
         ZERO TO INDICATE THE BITS ARE OFF.
0   2.   L - PROVIDES THE FACILITY OF SPECIFYING AN UPPER LIMIT FOR
         THE CODE BEYOND WHICH VALUES ARE INVALID.  THE LIMIT IS
         PLACED IN KODE.  IF ANY OF THE OPERATIONS S, O, OR V
         SPECIFY A CODE WHICH EXCEEDS THE LIMIT, ERROR-SWITCH IS SET
         TO 4, AND RESULT IS SET TO ZERO, IMPLYING THAT THE BIT IS
         OFF.
0   3.   O - THE BIT CORRESPONDING TO THE CODE SPECIFIED IN KODE IS
         SET TO ZERO, REGARDLESS OF ITS PREVIOUS STATUS, AND RESULT
         IS SET TO ZERO.
0   4.   S - THE BIT CORRESPONDING TO THE CODE SPECIFIED IN KODE
         IS SET TO ONE, REGARDLESS OF ITS PREVIOUS STATUS, AND
         RESULT IS SET TO 1.
0   5.   V - THE STATUS OF THE BIT CORRESPONDING TO THE CODE SPECIFIED
         IN KODE IS DETERMINED.  IF THE BIT IS EQUAL TO ZERO, RESULT
         IS SET TO O (I.E. THE CODE IS INVALID) AND IF THE BIT IS
         EQUAL TO ONE, RESULT IS SET TO 1 (I.E. THE CODE IS VALID).
0   FIVE DIFFERENT VALUES CAN BE RETURNED IN ERROR - SWITCH.
    THESE ARE:
0   0 -  GOOD END OF OPERATION.
0   1 -  SPECIFIED CODE IS NON-NUMERIC.  (NO ACTION IS TAKEN)
0   2 -  SPECIFIED OPERATION IS INVALID.  (NO ACTION IS TAKEN)
0   3 -  TABLE SIZE SPECIFIED FOR OPERATION C EXCEEDS THE MAXIMUM
         NO ACTION IS TAKEN.
0   4 -  THE CODE SPECIFIED FOR ANY OF THE OPERATIONS O, S, OR V
         EXCEEDS THE LIMIT.  THE OPERATION IS BY-PASSED, AND
         RESULT IS SET TO ZERO, TO IMPLY THAT THE BIT IS OFF
         (I.E. THE CODE IS INVALID).
0   NOTE
 -------
0   1.   UT420 TESTS THE INPUT CODE TO DETERMINE WHETHER OR NOT IT
         IS NUMERIC, AND IN SO DOING TRANSFORMS SPECES TO ZEROES,
         WITHIN THE FIELD KODE.
0   2.   THE INPUT CODE MUST BE RIGHT-ALIGNED IN THE FIELD KODE, SO
         IF IT IS DEFINED AS PICTURE X(5) IT IS NECESSARY TO
         SPECIFY JUSTIFIED RIGHT.
1************
 * UT420    *
 ************
0   RPG OPERATION
 ----------------
0   IF UT420 IS CALLED BY RPG IT IS NECESSARY TO DEFINE THE PARAMETER
    AREA IN A SERIES OF RLABLS, WITH THE FIRST FIELD NAMED VERTBL, AS
    SHOWN IN THE ATTACHED EXAMPLE.
0   THE FIRST TIME RPG PASSES CONTROL TO THE SUBROUTINE THE FIELDS
    RESULT AND ERRSWT MUST CONTAIN R AND P RESPECTIVELY TO INDICATE THAT
    RPG IS THE CALLING LANGUAGE.
1************
 * UT420    *
 ************
0    C                     RLABL          VERTBL  1        OPERATION
0    C                     RLABL          RESULT  10       RESULT
0    C                     RLABL          ERRSWT  10       ERROR-SWITCH
0    C                     RLABL          CODE    50       KODE
0    C                     RLABL          TABLE1256        TABLE
0    C                     RLABL          TABLE2256         1250
0    C                     RLABL          TABLE3256          BYTES
0    C                     RLABL          TABLE4256           LONG
0    C                     RLABL          TABLE5226
