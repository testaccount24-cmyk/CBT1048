1************
 * UT378    *
 ************
0UT378
 -----
01. PURPOSE
 ----------
0   THIS IS A TWO PURPOSE SUBROUTINE.  IT CAN RETRIEVE A
    SYSTEM PARAMETER THAT WAS PLACED IN THE COMMUNICATIONS
    REGION WITH THE PARM ENTRY IN THE EXEC CARD, AND IT CAN
    SET THE USER CONDITION CODE AND TERMINATE A JOB STEP.
    THE ABILITY TO PERFORM THESE TWO FUNCTIONS ALLOWS THE
    APPLICATIONS PROGRAMMER TO COMMUNICATE BETWEEN PROGRAMS
    VIA THE SYSTEM COMMUNICATION REGION.  THE RETRIEVING OF
    THE SYSTEM PARAMETER PERMITS THE PROGRAMMER TO ALTER
    THE MODE OF THE RUN BASED ON A CODE IN THE EXEC CARD.
    THE ABILITY TO SET THE CONDITION CODE PERMITS THE
    APPLICATIONS PROGRAMMER TO SELECTIVELY SKIP OR EXECUTE
    SUBSEQUENT JOB STEPS WITHIN A JOB.
02. LIMITATIONS
 --------------
0   1.   THE SETTING OF THE CONDITION CODE TRANSFERS CONTROL TO
         THE OPERATING SYSTEM, THEREFORE ALL END OF JOB HOUSE-
         KEEPING MUST COMPLETE BEFORE CALLING SETCOD.
0   2.   BOTH FUNCTIONS MUST BE CALLED FROM A MAIN PROGRAM.
03. INPUT DATA
 -------------
0   NONE
04. CUTPUT DATA
 --------------
0   NONE
05. OPERATION
 ------------
0   CALLING SEQUENCE FOR RETRIEVING THE SYSTEM PARAMETER:
0   1.   FORTRAN:       CALL GETPAR (J)
0   2.   COBOL:         CALL 'GETPAR' USING DATA-NAME.
0   THE FORTRAN VARIABLE MUST BE IN A FORMAT, THE COBOL DATA NAME
    MUST BE PICTURE X; THE LENGTH MUST EQUAL THE NUMBER OF CHARACTERS
    IN THE PARM ENTRY IN THE EXEC CARD.  THE CARD ENTRY MAY TAKE
    TWO FORMS.  IT MAY BE AN UNINTERRUPTED STRING OF ALPHANUMERIC
    CHARACTERS WITHOUT APOSTROPHES OR MAY BE ANY CHARACTERS LIMITED
    WITH APOSTROPHES 123ABC OR '12,AB,C'.
1************
 * UT378    *
 ************
0   CALLING SEQUENCE FOR SETTING THE CONDITION CODE AND
    TERMINATING THE STEP:
0        1.   FORTRAN:       CALL SETCOD (K)
0        2.   COBOL:         CALL 'SETCOD' USING DATA-NAME.
0   THE FORTRAN VARIABLE AND THE COBOL DATA-NAME MUST BE FULL
    WORD INTEGER BINARY AND PICTURE 9(7) COMPUTATIONAL RESPECTIVELY.
06. EXAMPLE
 ----------
0   1.   A PROGRAM IS RUN PERIODICALLY.  ON OCCASION THE CUSTOMER
         DESIRES AN ADDITIONAL REPORT.  THE GETPAR FUNCTION MAY BE
         UTILIZED.
0        //STEPN        EXEC           PGM=PX036,PARM=44
         .
         .
         .
         CALL 'GETPAR' USING PARAMETER.
         .
         .
         .
         IF PARAMETER = 44 GO TO REPORT-44.
0        IN THE ABOVE EXAMPLE IF THE PARM ENTRY IS NOT 44 THE
         SPECIAL REPORT DESIGNATED REPORT-44 WILL NOT BE MADE.
0        THE SUBROUTINE WILL RETURN THE EXACT NUMBER OF CHARACTERS
         IN THE PARM ENTRY IN THE CARD.  THE RECEIVING AREA IN THE
         MAIN PROGRAM MUST BE LARGE ENOUGH TO ACCOMODATE THE FULL
         ENTRY OR IT WILL SPILL OVER INTO THE FIELD TO THE RIGHT.
         THERE WILL BE NO WARNING.
0   2.   GIVEN A JOB STACK A,B,C AND D.  IF STEP A IS OUT OF
         BALANCE IT IS DESIRED TO SKIP STEPS B AND C AND RUN
         STEP D.
1************
 * UT378    *
 ************
0        //STEPA        EXEC           PGM=PX010
         .
         .
         .
         77 COND-CODE PICTURE 9(7) VALUE 30.
         .
         .
         .
         CALL 'SETCOD' USING COND-CODE.
         .
         .
         .
         //STEPB        EXEC           PGM=PX020,COND=(30,EQ,STEPA)
         .
         .
         .
         //STEPC        EXEC           PGM=PX030,COND=(30,EQ,STEPA)
         .
         .
         .
         //STEPD        EXEC           PGM=PX090,COND=(29,LT,STEPA)
0        THIS EXAMPLE ASSUMES THE CONDITION CODE TO BE ZERO IF
         STEP A IS IN BALANCE.  THIS WILL BE TRUE IF THE CALL
         TO SETCOD SHOWN IS THE ONLY ONE IN THE PROGRAM.
