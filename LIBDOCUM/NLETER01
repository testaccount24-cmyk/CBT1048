1************
 * NLETER01 *
 ************
                   MISD  (EUROPE)  NEWSLETTER
                   --------------------------
0   PREPARED BY : D.A. MOORCROFT                           NUMBER 1.
                                                           1 MARCH 1973.
0   THIS IS THE FIRST OF A SERIES OF INFORMATORY NEWS-
    LETTERS THAT WILL BE PUBLISHED APPROXIMATELY EVERY
    TWO MONTHS.  THE PURPOSE OF THE PERIODICAL IS TO
    DISSEMINATE INFORMATION REGARDING JCL, CODING HINTS,
    DEBUGGING TECHNIQUES, PROGRAM OPTIMISATION AND
    EFFICIENCY, AND ANY OTHER TOPICS GERMANE TO DATA
    PROCESSING IN GENERAL, AND THIS INSTALLATION IN
    PARTICULAR.
0   DIFFICULT THOUGH IT MAY BE FOR YOU TO BELIEVE, I
    DO NOT KNOW EVERYTHING - IN POINT OF FACT I DO NOT
    EVEN CLAIM TO KNOW EVERYTHING (OFTEN) - AND CON-
    SEQUENTLY CONTRIBUTIONS WILL BE GRATEFULLY ACCEPTED.
0   THE CONTENTS OF THIS THRILLING, ACTION-PACKED ISSUE
    ARE :
0             -  EFFICIENT SUBSCRIPTING
              -  ZEROISING ARRAYS
              -  BINARY CHOP TABLE SEARCH TECHNIQUE
              -  TECHNIQUES FOR PERFORMING IN-CORE SORTS
              -  PASSING TAPE DATA SETS
              -  CORRECT SORT WORK AREA JCL
              -  A POSSIBLE EFFECT OF A MISSING
                 DD STATEMENT
1************
 * NLETER01 *
 ************
0        SUBSCRIPTING   ( COBOL )
         ------------
0             WHERE POSSIBLE, A CONSTANT SUBSCRIPT SHOULD
         BE USED INSTEAD OF A VARIABLE (DATA-NAME) SUBS-
         CRIPT, BECAUSE CONSTANT SUBSCRIPTS ARE RESOLVED
         AT COMPILE TIME, WHILE VARIABLE SUBSCRIPTS ARE
         RESOLVED AT EXECUTION TIME, THUS OCCUPYING MORE
         CORE AND MORE TIME.
0        I.E.  USE NAME (5,9)
               NOT NAME (S1,S2)   WHERE POSSIBLE.
0             DATA NAMES USED AS SUBSCRIPTS SHOULD BE IN
         BINARY (COMPUTATIONAL) FORMAT, BECAUSE ANY DATA
         SUBSCRIPTS THAT ARE NOT BINARY ARE CONVERTED AT
         EXECUTION TIME INTO BINARY FORMAT, WHICH OCCUPIES
         MORE CORE AND MORE TIME.
0        I.E.  USE SUB 1 PICTURE S999  COMPUTATIONAL
               NOT SUB 1 PICTURE S999  COMPUTATIONAL - 3
               OR  SUB 1 PICTURE S999  DISPLAY.
1************
 * NLETER01 *
 ************
0        SORT WORK AREAS
         ---------------
0             WHEN OS ACTIONS A REQUEST FOR SPACE ON A
         DIRECT-ACCESS VOLUME, IT ATTEMPTS TO ALLOCATE
         SPACE IN CONTIGUOUS TRACKS OR CYLINDERS, BUT
         IF CONTIGUOUS SPACE IS NOT AVAILABLE, THE SYS-
         TEM SATISFIES THE SPACE REQUEST WITH UP TO
         FIVE NON-CONTIGUOUS BLOCKS OF SPACE.
0             DUE TO THE INTERNAL LOGIC OF THE SORT/
         MERGE PROGRAM, IT IS UNABLE TO UTILISE THE
         SPACE AVAILABLE IN ANY BUT THE FIRST EXTENT OF
         A SPACE ALLOCATION, AND CONSEQUENTLY THE NUMBER
         OF RECORDS THE SORT CAN HANDLE IS REDUCED IF
         THE SPACE REQUEST FOR A WORK AREA IS FRAGMENTED.
0             TO PREVENT THIS FROM OCCURING, THE CONTIG
         SUBPARAMETER OF THE PARAMETER SPACE SHOULD BE
         USED TO SPECIFY THAT THE SPACE REQUESTED MUST
         BE IN ONE CONTIGUOUS AREA.  HENCE, THE SPACE
         REQUEST SHOULD BE OF THE FORM:
0             SPACE = ( CYL,30,,CONTIG)
1************
 * NLETER01 *
 ************
0        PASSING TAPE DATA SETS
         ----------------------
0             TO MINIMISE OPERATOR INTERVENTION (AND CON-
         SEQUENTLY ELAPSED EXECUTION TIME) TAPE DATA SETS
         SHOULD BE PASSED FROM ONE STEP TO THE NEXT IN
         SITUATIONS WHERE THEY ARE TO BE USED LATER.
         FOR EXISTING DATA SETS THIS CAN BE ACCOMPLISHED
         BY CODING (OLD,PASS) IN THE DISP PARAMETER OF THE
         DD STATEMENT, BUT THIS DOES NOT APPLY WHEN A DATA
         SET IS BEING CREATED (AND, SPECIFICALLY, CATALOGUED).
         IT IS STILL POSSIBLE, HOWEVER, TO PREVENT THE TAPE
         FROM BEING UNLOADED BY CODING THE VOL PARAMETER IN
         THE FORM:
0                  VOL = (,RETAIN.....)
0        TYPICALLY, THEN, THE VOL PARAMETER WOULD BE OF THE
         FORM:
0                  VOL = (,RETAIN,REF=.....)
         OR        VOL = (,RETAIN,SER=.....)
         OR        VOL = (,RETAIN)               IF A DATA SET IS
         TO BE CREATED ON A SCRATCH TAPE.
0        NOTES:
         ------
0        1.   IF A MULTI-VOLUME TAPE DATA SET IS RETAINED,
              ONLY THE LAST TAPE OF THE SERIES WILL BE LEFT
              LOADED.
0        2.   THE RETAIN SUB-PARAMETER CAN BE USED TO ENSURE
              THAT A TAPE REMAINS LOADED IN SITUATIONS WHERE
              SUBSEQUENT STEPS WILL USE (OR CREATE) OTHER
              DATA SETS ON THE SAME TAPE VOLUME.
1************
 * NLETER01 *
 ************
0        ZEROISING ARRAYS ( COBOL)
         ----------------
0             IN COBOL IT IS NOT POSSIBLE TO SPECIFY A
         VALUE CLAUSE FOR A DATA NAME SUBJECT TO AN OCCURS
         CLAUSE.  CONSEQUENTLY, IT IS NOT POSSIBLE TO DEFINE
         THE ELEMENTS OF AN ARRAY OF ACCUMULATORS AS HAVING
         A VALUE OF ZERO, AND SO IT IS NECESSARY TO INITIA-
         LISE THE ELEMENTS OF THE ARRAY AT EXECUTION TIME.
         THIS IS MOST COMMONLY ACCOMPLISHED EITHER BY A TIME-
         CONSUMING LOOP, OR BY A TIME - AND CORE-CONSUMING
         SERIES OF MOVE INSTRUCTIONS, BUT IT CAN BE ACCOMPLI-
         SHED MUCH MORE ECONOMICALLY, AND EASILY BY INITIALI-
         SING ONLY THE FIRST ELEMENT TO ZERO, AND PROPAGATING
         THE VALUE THROUGH THE REMAINDER OF THE ARRAY, AS
         ILLUSTRATED BELOW.
0        EXAMPLE 1:
         ---------
0        THREE EQUAL LENGTH ACCUMULATORS OCCURING 18 TIMES.
0        DATA DIVISION
         -------------
0        01   X.
              03  A OCCURS 18 TIMES COMPUTATIONAL - 3.
                 05   A1   PICTURE  S9(15).
                 05   A2   PICTURE  S9(15).
                 05   A3   PICTURE  S9(15).
0        01   Z  REDEFINES  X.
                 03 FILLER PICTURE  X(8).
                 03 Y      PICTURE X(424).
0        PROCEDURE DIVISION
         ------------------
0        MOVE ZERO TO  A1 (1).
         MOVE  X   TO   Y.
1************
 * NLETER01 *
 ************
0        EXAMPLE 2:
         ----------
0        TWO UNEQUAL LENGTH ACCUMULATORS OCCURING 15 TIMES
         IN A TABLE OCCURING 10 TIMES.
0        DATA DIVISION
         -------------
0        01   A.
              03   B    OCCURS 10 TIMES.
                   05   C    OCCURS 15 TIMES COMPUTATIONAL-3.
                        07     D    PICTURE  S9(5).
                        07     E    PICTURE  S9(10)V99.
0        01   F    REDEFINES  A.
              03   FILLER PICTURE  X(10).
              03   G      PICTURE  X(1490).
0        PROCEDURE DIVISION
         ------------------
0        MOVE ZERO TO D (1,1).
         MOVE ZERO TO E (1,1).
         MOVE A TO G.
0        NOTES:
         -----
0        1.   THE FILLER IS THE LENGTH OF THE FIELD(S) WHICH ARE
              EXPLICITY INITIALISED IN THE PROCEDURE DIVISION.
0        2.   THE TWO 01 FIELDS MUST BE THE SAME LENGTH.
0        3.   THERE WILL BE A LEVEL W DIAGNOSTIC ON COMPILATION -
              RECEIVING FIELD SHORTER THAN MOVING FIELD.
0        4.   IT MAY BE NECESSARY TO ADD A 1 BYTE FILLER AFTER THE
              ARRAY, BECAUSE UNDER SOME COMPILERS ONE BYTE TOO MA-
              NY WILL BE MOVED IF THE ARRAY IS LONGER THAN 256 BYTES,
              THUS CORRUPTING STORAGE.
0        5.   THIS PRINCIPLE MAY BE APPLIED TO ANY SITUATION WHERE
              AN ARRAY IS TO BE INITIALISED TO A SPECIFIC VALUE.
1************
 * NLETER01 *
 ************
0        MISSING DD STATEMENTS
         ---------------------
0             IN MOST CASES, IF A DATA SET FOR WHICH THERE
         IS NO DD STATEMENT OPENED, THE SYSTEM WILL BRANCH
         THE LOCATION 4848 WITHIN THE SUPERVISOR.  IN THE
         HALCYON DAYS OF YORE, THIS INVARIABLY RESULTED IN
         AN OCI ABEND.  HOWEVER, ON OUR CURRENT SYSTEM
         (RELEASE 20,6) LOCATION 4848 HAPPEN TO BE AN UN-
         CONDITIONAL BRANCH INSTRUCTION OF SUCH A FORM THAT
         IT BECOMES A BRANCH TO ITSELF IF BRANCHED TO UNDER
         THE CONDITIONS OUTLINED ABOVE.  CONSEQUENTLY, IF
         A DATA SET FOR WHICH THERE IS NO DD STATEMENT IS
         OPENED, THE PARTITION ISSUING THE OPEN GOES INTO
         A SINGLE INSTRUCTION LOOP.
1************
 * NLETER01 *
 ************
0        BINARY CHOP TABLE SEARCH
         ------------------------
                                                 CONTRIBUTED BY PM FAYERS.
0             SEARCHING FOR MATCH IN AN IN-CORE TABLE IS MOST
         EASILY DONE BY SCANNING THE TABLE SEQUENTIALLY.
         HOWEVER, THIS IS A VERY INEFFICIENT AND TIME-CONSU-
         MING METHOD FOR TABLES IN EXCESS OF, FOR INSTANCE,
         20 ELEMENTS: FAR MORE EFFICIENT IS THE BINARY CHOP
         TECHNIQUE.  THIS TECHNIQUE, WHICH REQUIRES THE TABLE
         TO BE IN ASCENDING COLLATING SEQUENCE ON THE KEY FIELD,
         IS ILLUSTRATED BELOW.
0             THE REQUIRED WORKING - STORAGE ENTRIES ARE OF
         THE FORM:
0        77   HI        PICTURE   S999           COMPUTATIONAL.
         77   LO        PICTURE   S999           COMPUTATIONAL.
         77   MID       PICTURE   S999           COMPUTATIONAL.
         77   TABLEN    PICTURE   S999           COMPUTATIONAL  VALUE 200.
         77   ONE  N    PICTURE   S999           COMPUTATIONAL  VALUE 1.
         01   TEST-KEY  PICTURE   XXX.
         01   TABLE.
              03 ELEMENT OCCURS 200 TIMES.
                 05 TABLE-KEY PICTURE XXX.
                 05 TABLE-DATA PICTURE X(20).
0        WHERE TABLE IS THE IN-CORE TABLE TO BE SEARCHED,
         TABLEN IS THE NUMBER OF (USED) ENTRIES IN IT, AND
         TEST-KEY HOLDS THE KEY ON WHICH THE TABLE IS TO BE
         SEARCHED.
0                THE PROCEDURE DIVISION CODING SHOULD BE OF
                 THE FORM:
1************
 * NLETER01 *
 ************
0             ADD  TABLEN,  ONE  GIVING  HI.
              MOVE  ZERO  TO  LO
0        A1 - CHOP.
0             IF  HI  -  LO  =  1  GO  TO  A3-LOST.
              COMPUTE  MID  =  (HI  +  LO)/2.
              IF KEY-TABLE (MID) =  TEST-KEY GO TO A2-FOUND.
              IF KEY-TABLE (MID) <  TEST-KEY MOVE MID TO LO.
                                       ELSE MOVE MID TO III.
0             CO TO A1-CHOP.
0        A2 - FOUND.
             'MID' IS THE REQUIRED SUBSCRIPT.
0        A3 - LOST.
0             THE REQUIRED ENTRY IS NOT IN THE TABLE.
0             THE ADVANTAGE OF THIS METHOD IS THAT IT TAKES A
         MAXIMUM OF N ITERATIONS TO FIND THE MATCHING ELEMENT
         (IF PRESENT), WHERE N IS THE SMALLEST NUMBER SUCH THAT
         2N > TABLEN. (E.G. A TABLE COMPRISING 1000 ELEMENTS WILL
         REQUIRE A MAXIMUM OF 10 ITERATIONS TO FIND A SPECIFIC ENTRY).
         THE AVERAGE NUMBER OF ITERATIONS REQUIRED IS N - 1.
1************
 * NLETER01 *
 ************
                                                 CONTRIBUTED BY P.M. FAYERS.
0   INTERNAL SORTS IN PROGRAMS.
    --------------------------
         OCCASIONALLY AN IN-CORE TABLE OF DATA HAS TO BE SORTED
    WITHIN A PROGRAM. THE USUAL METHOD OF DOING THIS IS ALONG
    THE LINES "SCAN THROUGH, FIND THE LOWEST, TAKE IT OUT, RESET
    THE VALUE HIGH, REPEAT."
         ALTHOUGH THIS METHOD IS SIMPLE TO CODE, IT IS NOT TO BE
    RECOMMENDED FOR ANY BUT THE SMALLEST TABLES (I WOULD SUGGEST
    AN ABSOLUTE MAXIMUM OF 20 ENTRIES).
         FOR LARGER TABLES, I WOULD RECOMMEND ONE OF THE FOLLOWING
    TWO METHODS. THE FIRST REQUIRES TWO SORT WORK AREAS EACH OF THE
    SAME SIZE AS THE SOURCE ARRAY, AND IS RELATIVELY SIMPLE TO CODE.
    I WOULD RECOMMEND IT FOR TABLES UP TO 100 ENTRIES. THE SECOND
    METHOD, FOR LARGER TABLES, REQUIRES THREE SORT WORK AREAS AND IS
    MORE SOPHISTICATED, EVEN THOUGH IT WORKS ON THE SAME BASIC
    PRINCIPLE.
0   TWO WORK-AREA METHOD.
    --------------------
0                  WORK1     SOURCE    WORK2
                   -----     ------    -----
                               XXX
                               XXX
                               XXX
                               XXX
                               XXX
0   THE ALGORITHM IS AS FOLLOWS:
0   1)   MOVE THE FIRST ELEMENT OF THE SOURCE ARRAY TO THE FIRST
         ELEMENT OF WORK1.
0   2)   FOR EVERY OTHER ELEMENT OF THE SOURCE ARRAY, IF IT IS GREATER
         THAN OR EQUAL TO THE PREVIOUS ELEMENT, MOVE IT INTO THE SAME
         WORK ARRAY AS THE PREVIOUS ELEMENT, OTHERWISE MOVE IT TO THE
         OTHER WORK ARRAY.
0   3)   WHEN ALL THE ELEMENTS HAVE BEEN ALLOCATED IN THIS MANNER,
         MERGE THE WORK ARRAYS BACK INTO THE SOURCE ARRAY, SEQUENCE
         CHECKING WHILE DOING SO.
0   4)   IF THE ARRAY IS NOT NOW IN SEQUENCE, GO BACK TO STEP 1.
1************
 * NLETER01 *
 ************
0   A SIMPLE EXAMPLE SHOULD ILLUSTRATE THE CONCEPT:
                   WORK1     SOURCE    WORK2
                   -----     ------    -----
                     3          3        1
                     6          1        9
                                9        5                 PASS 1A  (SPLIT).
                                6        7
                                5
                                7
                   WORK1     SOURCE    WORK2
                   -----     ------    -----
                     3          1        1
                     6          3        9
                                6        5                 PASS 1B  (MERGE).
                                9        7
                                5
                                7
                   WORK1     SOURCE    WORK2
                   -----     ------    -----
                     1          1        5
                     3          3        7
                     6          6                          PASS 2A  (SPLIT).
                     9          9
                                5
                                7
                   WORK1     SOURCE    WORK2
                   -----     ------    -----
                     1          1        5
                     3          3        7
                     6          5                          PASS 2B  (MERGE).
                     9          6
                                7
                                9
0        THIS METHOD REQUIRES A MAXIMUM OF N + 1 PASSES, WHERE N IS
    THE SMALLEST INTEGER SUCH THAT 2N IS GREATER THAN THE SOURCE TABLE
    LENGTH.
1************
 * NLETER01 *
 ************
0   THREE WORK-AREA METHOD.
    ----------------------
              THIS METHOD IS AN EXTENSION OF THE PREVIOUS ONE, SO I SHALL NOT
    GIVE A RIGOROUS ALGORITHM, BUT MERLET EXPLAIN HOW IT WORKS.
0   1)   SPLIT THE SOURCE ARRAY BETWEEN WORK1 AND WORK2 EXACTLY AS IN
         THE PREVIOUS METHOD.
0   2)   NOW WE RENAME THE SOURCE ARRAY, AND CALL IT WORK4. THIS IS DONE
         TO EMPHASISE THE FACT THAT IT HAS NOW BECOME THE FOURTH WORK
         AREA, AND WILL NO LONGER CONTAIN THE ORIGINAL DATA.
0   3)   WE NOW MERGE WORK1 AND WORK2, AS IN THE PREVIOUS SORT METHOD,
         EXCEPT THAT EACH RECORD, INSTEAD OF BEING REPLACED IN THE SOURCE
         ARRAY AS IT IS TAKEN OFF WORK1 OR WORK2, IS PUT INTO EITHER
         WORK3 OR WORK4 USING THE SPLITTING METHOD YOU ARE NOW FAMILIAR
         WITH.
0   4)   HAVING MERGED AND RE-SPLIT THE DATA IN THIS WAY, WE NOW PASS
         THE DATA BACK FROM WORKS 3&4 TO WORKS 1&2, USING THE SAME METHOD.
0   5)   THIS IS REPEATED UNTIL THE FILE IS IN SEQUENCE.
0   TO ILLUSTRATE THIS METHOD, WE HAVE TO ADD A FEW MORE RECORDS TO
    OUR EXAMPLE DATA (THE EXAMPLE FOR THE PREVIOUS SORT IS SORTED IN
    ONE PASS BY THIS METHOD). ALSO, FOR CLARITY'S SAKE, I WILL SHOW
    THE DATA IN THE WORK AREAS SPREAD DOWN TO OPPOSITE THEIR SOURCE;
    IN REALITY, THESE WOULD BE IN LOCATIONS 1,2,3.... OF THE WORK ARRAYS.
                   WORK1     SOURCE    WORK2     WORK3
                   -----     ------    -----     -----
                     3          3
                                1        1
                                9        9
                     6          6
                                5        5
                                7        7
                     2          2
                    10         10
                                8        8
                     4          4
1************
 * NLETER01 *
 ************
0   AGAIN FOR CLARITY'S SAKE, I HAVE CHANGED THE POSITIONS OF THE AREAS
    FOR THE REMAINING PASSES.
0                  WORK1     WORK4     WORK3     WORK2
                   -----     -----     -----     -----
                                         1         1
                     3                   3
                     6                   6
                     2         2
                               9                   9
                                         5         5                 PASS 2.
                                         7         7
                                         8         8
                    10                  10
                     4         4
0                  WORK4     WORK2     WORK1     WORK3
                   -----     -----     -----     -----
                                         1         1
                     2                   2
                                         3         3
                                         6         6
                               5                   5
                               7                   7                 PASS 3.
                               8                   8
                     9         9
                     4                   4
                                        10        10
0                  WORK1     WORK3     WORK4     WORK2
                   -----     -----     -----     -----
                     1         1
                     2         2
                     3         3
                               5                   5
                     6         6
                     4                   4                           PASS 4.
                                         7         7
                                         8         8
                                         9         9
                    10                  10
0        THE NEXT PASS WILL EFFECTIVELY MERGE WORK3 AND WORK4 ALL ON TO
    WORK1, WHICH WILL THEN BE IN SEQUENCE. (NOTE THAT THERE IS NO NEED
    TO SEQUENCE CHECK DURING A PASS - AT THE END OF THE PASS, IF ONE
    OF THE RECEIVING AREAS IS EMPTY, THE DATA IS IN SEQUENCE ON THE OTHER).
0        THEN MOVING WORK1 BACK TO THE ORIGINAL SOURCE ARRAY COMPLETES
    THE SORT.
