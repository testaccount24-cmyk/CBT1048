***(ID)                            JES2B006
***(SUBSYSTEM)                     JES2
***(DESIGNER)                      D.A.MOORCROFT
***(AUTHOR)                        D.A.MOORCROFT
*
***(DATE WRITTEN)                  SECOND QUARTER 1977.
***(DATE TESTED)                   SECOND QUARTER 1977.
***(DATE INSTALLED)                SECOND QUARTER 1977.
*
***(ABSTRACT)
*
*        THIS ROUTINE IS A SERVICE ROUTINE THAT ACQUIRES AN APCE FROM
*         THE AVAILABLE QUEUE, INITIALISES IT AS APPROPRIATE, ASSIGNS IT
*         THE USER SPECIFIED NAME, AND CHAINS IT TO THE CALLER'S
*         PRIMARY APCE ( USING APCESNXT AS THE ANCHOR OF A PUSH-DOWN STACK ).
*        APCE'S ARE, IN ESSENCE, STORAGE POOLS FOR THE VARIOUS ROUTINES
*         TO PROVIDE THEM WITH RE-ENTRANT CAPABILITIES.  EVERY ROUTINE IS
*         ASSIGNED A PRIMARY APCE WHEN IT IS INVOKED, BUT IF MORE STORAGE
*         IS REQUIRED THEN IT MAY REQUEST ANY NUMBER OF SECONDARY APCE'S.
*
***(LOGIC SUMMARY)
*
*        1. REMOVE AN APCE FROM THE TOP OF THE AVAILABLE QUEUE ( USING
*           COMPARE AND SWAP TO ENSURE QUEUE INTEGRITY ).
*        2. INITIALISE THE APCE TO LOW-VALUES.
*        3. SET THE USER-ASSIGNED NAME IN THE APCENAME FIELD.
*        4. MOVE THE APCEMRCB FIELD IN THE PRIMARY APCE TO THE NEW APCE.
*        5. CHAIN THE NEW APCE ONTO THE APCESNXT FIELD IN THE PRIMARY APCE
*           ( USING IT AS THE ANCHOR OF A PUSH-DOWN STACK ).
*        6. SET THE APF1SEC FLAG IN THE PRIMARY APCE TO FLAG THAT IT HAS
*           SECONDARY APCE'S.
*
***(INSTALLATION)
*
*        THIS MOD. IS DYNAMICALLY LOADED AT INITILISATION TIME
*         UPON REQUEST VIA AN 'EXIT=' CONTROL CARD.
*
***(TESTING)
*
*        THIS MOD. CAN BE CONSIDERED AS GOOD, IF ALL THE OTHER
*         MODS USING IT ARE WORKING SUCCESSFULLY.
*
*        IF CURRENT VERSION OF THIS MOD. IS MODIFIED, THE ONLY WAY
*         TO TEST IT IS TO FORCE A DUMP AFTER $GETAPCE MACRO
*         AND CHECK IF 2NDRY APCE IS REALLY ACQUIRED.
