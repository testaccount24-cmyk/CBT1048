***(ID)                            JES2B005
***(SUBSYSTEM)                     JES2
***(DESIGNER)                      D.A.MOORCROFT
***(AUTHOR)                        J.E.ABBEY
*
***(DATE WRITTEN)                  APRIL 1977.
***(DATE TESTED)                   APRIL 1977.
***(DATE INSTALLED)                APRIL 1977.
*
***(ABSTRACT)
*
*        BECAUSE WE ONLY HAVE ACCESS TO A ( SLOW ) PRINTER, AND ONLY
*         FOR A RELATIVELY SMALL PROPORTION OF THE TIME, ON OUR TEST
*         SYSTEMS, THE TRADITIONAL METHOD OF DEBUGGING HASP/JES2 MODS
*         - START THE SYSTEM, GET A DUMP, WAIT FOR IT TO PRINT, CORRECT
*         THE ERROR, RESTART THE SYSTEM, ETC - IS UNACCEPTABLE TO US
*         BECAUSE OF THE GREAT ELAPSED TIME INVOLVED.
*        TO SPEED UP THE DEVELOPMENT PROCESS, IT IS NECESSARY TO HAVE
*         ACCESS TO PERTINENT INFORMATION AT THE TIME THE ERROR OCCURS,
*         AND SO THIS MODIFICATION WAS DEVISED.  THIS ROUTINE IS AN ESTAE
*         WHICH COMMUNICATES WITH THE OPERATOR VIA WTORS, AND SUPPLIES
*         THE FOLLOWING FACILITIES :-
*         . DISPLAYS THE PSW AND FAILING INSTRUCTION
*         . DISPLAY / ALTER REGISTERS
*         . DISPLAY / ALTER THE PSW
*         . DISPLAY / ALTER MAIN STORAGE ( WITHIN THE JES ADDRESS SPACE )
*         . IGNORE THE ABEND ( I.E. CONTINUE PROCESSING )
*         . PRODUCE A DUMP
*         . RETRY THE FAILING ROUTINE AFTER MODIFICATIONS
*
*        THIS ROUTINE IS LOADED AND ESTABLISHED AS AN ESTAE BY JES2B001
*         ( THE AUXILIARY INITIALISATION PROCESSOR ), AND IS LOGICALLY
*         'ABOVE' THE STANDARD JES2 ESTAE EXIT.
*
*        NOTE THAT WHILE THIS ESTAE WAS CONCEIVED PURELY FOR THE FASTER
*         DEVELOPMENT OF JES2 MODIFICATIONS, IT IS SO WRITTEN THAT IT
*         IS A GENERAL PURPOSE ESTAE, AND CAN BE USED IN ANY PROGRAM.
*         ( CLEVER, AREN'T WE ? ).
*
***(LOGIC SUMMARY)
*
*        SEE BELOW 'AUXCMM10' DOCUMENTATION.
*
***(INSTALLATION)
*
*        SEE BELOW 'AUXCMM10' DOCUMENTATION.
*
***(TESTING)
*
*        SEE BELOW 'AUXCMM10' DOCUMENTATION.
*
*
*        ***************
*        *             *
*        *   AUXCMM10  *
*        *             *
*        ***************
*
*
***(ID)                            AUXCMM10
***(SUBSYSTEM)                     COMMAND
***(DESIGNER)                      J.E.ABBEY
***(AUTHOR)                        J.E.ABBEY
*
***(DATE WRITTEN)                  APR 1977
***(DATE TESTED)                   APR 1977
***(DATE INSTALLED)                APR 1977
*
***(ABSTRACT)
*
*          THIS IS THE COMMAND PROCESSOR FOR THE 'ZAP' COMMAND
*        IT IS ATTACHED DIRECTLY BY THE COMMAND PROCESSOR AUXCOMM
*        WHEN ZAP IS ENTERED THROUGH THE CONSOLE. THE COMMAND IS
*        DESIGNED AS AN INTERACTIVE DEBUGGING AND DIAGNOSTIC TOOL
*        GIVING THE USER/OPERATOR OPPORTUNITY TO STOP AN ADDRESS SPACE IN
*        EXECUTION AND EXAMINE OR MODIFY THE CONTENTS OF ITS STORAGE
*        AND CONTROL BLOCKS.
*
***(LOGIC SUMMARY)
*
*          THE ROUTINE, BEING INTERACTIVE, IS ATTACHED AS AN INDEPENDANT
*        SUBTASK EITHER BY THE COMMUNICATIONS TASK (IF ENETERD VIA THE
*        MASTER CONSOLE) OR BY THE MONSANTO ADDRESS SPACE CONTROLLER (IF
*        ENTERED VIA THE MODIFY COMMAND).
*          IN EITHER CASE, THE PROCESSOR FIRST ESTABLISHES AN ENVIRONMENT
*        BY LOCATING THE JOB STEP TASK CONTROL BLOCK AND OUTPUTTING TO
*        THE CONSOLE THE CURRENT PSW, THE NEXT SEQUENTIAL INSTRUCTION,
*        THE NAME OF THE MODULE IN CONTROL AND THE OFFSET TO THE INSTRUCTION
*        FROM THE START OF THE PROGRAM.
*          THE OPERATOR IS THEN INVITED TO ENTER A REQUEST TO DO ONE OF THE
*        THINGS WITH THE ADDRESS SPACE:
*        1)    DUMP IT. THE ABEND CODE WILL BE SYSTEM FFF.
*        2)    CARRY ON. RESET THE ADDRESS SPACE AND LEAVE IT ALONE
*        3)    ENTER INTERACTIVE DISPLAY MODE.
*          FOR THE THIRD CASE ABOVE, THE OPERATOR IS AGAIN INVITED TO
*        INDICATE WHAT HE WOULD LIKE DISPLAYED OR ALTERED. HE HAS A
*        CHOICE OF:
*        1)    THE CURRENT PSW.
*        2)    ANY OF THE CURRENT GENERAL PURPOSE REGISTERS.
*        3)    ANY STORAGE ADDRESSABLE FROM THIS ADDRESS SPACE.
*          THE STORAGE ADDRESSES USED FOR ITEM 3 ABOVE ARE BASED ON AN
*        INTERNAL BASE ADDRESS WHICH CAN ALSO BE SET/ALTERED/DISPLAYED
*        BY THE OPERATOR AS DESIRED.
*          THE PROGRAM CODE IS VIRTUALLY IDENTICAL TO THAT USED FOR
*        THE JES INTERACTIVE ESTAE EXIT ROUTINE 'JES2B005'.
*
***(INSTALLATION)
*
*          THE MODULE, AS WITH AUXCMM04 AND AUXCMM06, IS LINKED AS AN
*        INDEPENDANT MODULE INTO SYS1.LINKLIB UNDER THE NAME AUXCMM10.
*        IT IS INVOKED FROM THERE BY THE COMMAND ROUTER AUXCOMM. AND
*        ATTACHED AS A SUBTASK.
*          JOB 'AUXCMM10' ON LIBRARYN.MVS WILL PERFORM THE NECCESSARY
*        COMPILE AND LINK TO INSTALL THE ROUTINE
*
***(TESTING)
*
*          THE COMMAND IS TESTED BY ENTERING 'ZAP' INTO THE CONSOLE
*        AND USING AS MANY OF THE OPERANDS AVAILABLE AS POSSIBLE.
*        THE ROUTINE INCLUDES THE INTERACTIVE ESTAE EXIT 'JES2B005'
*        AND ANY FAILURES WILL BE HANDLED BY THAT ROUTINE.(I.E. ATTEMPT
*        TO EXAMINE STORAGE NOT BELONGING TO THE CURRENT ADDRESS
*        SPACE).
