         TITLE 'BUDGIE3 - INTERNAL MACROS'                              3 000010
         MACRO                                                          3 000020
         $CB   &PRINT=OFF                                               3 000030
         PUSH PRINT                PRESERVE CURRENT PRINT STATUS        3 000040
         PRINT &PRINT              ESTABLISH NEW PRINT STATUS           3 000050
               TITLE 'CBPREFIX - CONTROL BLOCK PREFIX'                  3 000060
      CBPREFIX ,                   GENERATE DSECT                       3 000070
               TITLE '     - CSECT IDENTIFICATION PREFIX'               3 000080
       CSECTID ,                   GENERATE DSECT                       3 000090
               TITLE '     - GENERAL EQUATES'                           3 000100
       EQUATES ,                   GENERATE EQUATES                     3 000110
               TITLE '     - MONITOR RECORD FORMAT'                     3 000120
      MONITREC ,                   GENERATE DSECT                       3 000130
               TITLE '     - STORAGE POOL DEFINITION'                   3 000140
      POOLDEFN ,                   GENERATE DSECT                       3 000150
               TITLE 'RB   - REQUEST BLOCK'                             3 000160
         IHARB ,                   GENERATE DSECT                       3 000170
               TITLE '     - FORMAT OF ROUTINE DESCRIPTOR'              3 000180
        RTNDES ,                   GENERATE DSECT                       3 000190
         POP   PRINT               RESTORE ORIGINAL PRINT STATUS        3 000200
         MEND                                                           3 000210
         SPACE 5                                                        3 000220
         $CB   ,                   GENERATE MAPPING DSECTS              3 000230
         TITLE 'BUDGIE3 - CENTRAL CONTROL BLOCK'                        3 000240
*********************************************************************** 3 000250
*        CCB - CENTRAL CONTROL BLOCK                                  * 3 000260
*********************************************************************** 3 000270
         SPACE 1                                                        3 000280
BUDGIE3  CSECT                                                          3 000290
         ENTRY $IOERROR            I/O ERROR INTERFACE ROUTINE          3 000300
         WXTRN BUDGIE3A,BUDGIE3B,BUDGIE3C,BUDGIE3D,BUDGIE3E,BUDGIE3F    3 000310
         WXTRN BUDGIE3G,BUDGIE3H,BUDGIE3I,BUDGIE3J,BUDGIE3K,BUDGIE3L    3 000320
         WXTRN BUDGIE3M,BUDGIE3N,BUDGIE3O,BUDGIE3P,BUDGIE3Q,BUDGIE3R    3 000330
         WXTRN BUDGIE3S,BUDGIE3T,BUDGIE3U,BUDGIE3V,BUDGIE3W,BUDGIE3X    3 000340
         WXTRN BUDGIE3Y,BUDGIE3Z                                        3 000350
         WXTRN BDGEND3A,BDGEND3B,BDGEND3C,BDGEND3D,BDGEND3E,BDGEND3F    3 000360
         WXTRN BDGEND3G,BDGEND3H,BDGEND3I,BDGEND3J,BDGEND3K,BDGEND3L    3 000370
         WXTRN BDGEND3M,BDGEND3N,BDGEND3O,BDGEND3P,BDGEND3Q,BDGEND3R    3 000380
         WXTRN BDGEND3S,BDGEND3T,BDGEND3U,BDGEND3V,BDGEND3W,BDGEND3X    3 000390
         WXTRN BDGEND3Y,BDGEND3Z                                        3 000400
         WXTRN DCB01,DCB02,DCB03,DCB04,DCB05,DCB06,DCB07,DCB08,DCB09    3 000410
         WXTRN DCB10,DCB11,DCB12,DCB13,DCB14,DCB15,DCB16                3 000420
         USING BUDGIE3,R15         ESTABLISH TEMPORARY ADDRESSABILITY   3 000430
         NOP   *                   NO-OP TO FORCE DOUBLE WORD ALIGNMENT 3 000440
         B     $CCBEND             BR AROUND PRIMARY CONTROL BLOCK      3 000450
         DROP  R15                 DROP R15 FOR CCB DEFINITION          3 000460
         USING $SAVAREA,R13        ESTABLISH CSECT/CCB ADDRESSAILITY    3 000470
        VERSID ,                   GENERATE CSECT IDENTIFIER            3 000480
         CCB   DSECT=NO            GENERATE CENTRAL CONTROL BLOCK       3 000490
         TITLE 'BUDGIE3 - INITILISATION'                                3 000500
*********************************************************************** 3 000510
*        HOUSEKEEPING                                                 * 3 000520
*********************************************************************** 3 000530
         DROP  R13                 DROP CSECT ADDR'Y TEMPORARILY        3 000540
         USING BUDGIE3,R15         RE-ESTABLISH TEMPORARY ADDRESSABILIT 3 000550
         SPACE 1                                                        3 000560
         STM   R14,R12,12(R13)     PRESERVE REGISTERS IN SUPERVISORS SA 3 000570
         LA    R12,$SAVAREA        POINT R12 AT SAVE AREA               3 000580
         ST    R12,8(R13)          POINT LAST SAVE AREA AT THIS ONE     3 000590
         ST    R13,4(R12)          POINT THIS SAVE AREA AT LAST ONE     3 000600
         LR    R13,R12             POINT R13 AT CURRENT SAVE AREA       3 000610
         ST    R13,SAVER13         PRERVE R13 FOR EXITS                 3 000620
         LA    R11,2048(,R13)      ESTABLISH SECOND ...                 3 000630
         LA    R11,2048(,R11)       ... BASE REGISTER VALUE             3 000640
         ST    R11,SAVER11         PRERVE R11 FOR EXITS                 3 000650
         DROP  R15                 DROP TEMPORARY ADDRESSABILITY        3 000660
         SPACE 1                                                        3 000670
         USING $SAVAREA,R13,R11    ESTABLISH CSECT / CCB ADDRESSABILITY 3 000680
         SPACE 5                                                        3 000690
*        POOL OF FIELDS THAT MUST BE WITHIN 1ST BASE REGISTER'S RANGE.  3 000700
         SPACE 1                                                        3 000710
         B     CONTINUE            BRANCH AROUND THE POOL               3 000720
SAVER11  DC    F'0'                SAVE AREA FOR SECOND BASE FOR EXITS  3 000730
SAVER13  DC    F'0'                SAVE AREA FOR CCB/CSECT BASE FOR EXI 3 000740
CBALR4   DC    F'0'                RETURN ADDRESS FOR LAST CBAL         3 000750
CBALR12  DC    F'0'                CALLER'S BASE REGISTER FOR LAST CBAL 3 000760
CBALRTN  DC    F'0'                ROUTINE ADDRESS FOR LAST CBAL        3 000770
CBALRTD  DC    F'0'                ADDRESS OF ROUTINE DESCRIPTOR        3 000780
CONTINUE EQU   *                                                        3 000790
         EJECT                                                          3 000800
*********************************************************************** 3 000810
*        ESTABLISH ESTAE ENVIRONMENT                                  * 3 000820
*********************************************************************** 3 000830
         SPACE 1                                                        3 000840
         ESTAE $STAEXIT,           NAME OF ESTAE EXIT                  *3 000850
               PURGE=NONE,         ALLOW I/O TO CONTINUE               *3 000860
               ASYNCH=YES,         ALLOW ASYNCHRONOUS EXIT PROCESSING  *3 000870
               TERM=YES            INTERCEPT OPERATOR CANCEL, ETC       3 000880
         TITLE 'BUDGIE3 - MAIN-LINE LOGIC'                              3 000890
*********************************************************************** 3 000900
*        INITIALISATION                                               * 3 000910
*********************************************************************** 3 000920
         SPACE 1                                                        3 000930
         CBAL  R4,INITPH1          1ST PHASE OFINITIALISATION           3 000940
         CBAL  R4,INITPRM          PRM FIELD PROCESSING                 3 000950
         CBAL  R4,INITPH2          2ND PHASE OF INITIALISATION          3 000960
         CBAL  R4,READCC           PROCESS CONTROL CARDS                3 000970
         OI    $VBUDG3B,POOLGTM    ALLOW CSECT TO BE USED FOR GETMAINS  3 000980
         OI    $VBUDG3C,POOLGTM    ALLOW CSECT TO BE USED FOR GETMAINS  3 000990
         OI    $VBUDG3D,POOLGTM    ALLOW CSECT TO BE USED FOR GETMAINS  3 001000
         OI    $VBUDG3O,POOLGTM    ALLOW CSECT TO BE USED FOR GETMAINS  3 001010
         CBAL  R4,JOINCB           INTERCONNECT CONTROL BLOCKS          3 001020
         OI    $VBUDG3R,POOLGTM    ALLOW CSECT TO BE USED FOR GETMAINS  3 001030
         CBAL  R4,INITPH3          3RD PHASE OF INITIALISATION          3 001040
         OI    $VBUDG3A,POOLGTM    ALLOW CSECT TO BE USED FOR GETMAINS  3 001050
         TM    YPSWITCH,YPSWFREE   ARE CSECTS TO BE FREEMAINED          3 001060
         BZ    INIT01              BYPASS FREEMAIN IF NOT               3 001070
         TM    OSLEVEL,OSLPCP+OSLMFT IS IT PCP OR MFT OPERATING SYSTEM  3 001080
         BZ    INIT01              BYPASS ILLEGAL FREEMAIN IF NOT       3 001090
         L     R0,$VBUDG3A+4       GET SIZE OF CSECT                    3 001100
         L     R1,$VBUDG3A         GET ADDRESSS OF CSECT                3 001110
      FREEMAIN R,LV=(0),A=(1)      FREEMAIN INIT CSECT                  3 001120
         EJECT                                                          3 001130
*********************************************************************** 3 001140
*        INITIALISATION ( CONT'D )                                    * 3 001150
*********************************************************************** 3 001160
         SPACE 1                                                        3 001170
INIT01   CBAL  R4,READUT1          GET 1ST INPUT RECORD                 3 001180
         BNE   TERM                GO TO TERMINATION IF NO DATA         3 001190
         MVC   $PTRCB02,$FSTCB02   POINT AT 1ST C/B LEST PARM=NOBC      3 001200
         MVC   $NXTCB02,$FSTCB02   POINT AT 1ST C/B LEST PARM=NOBC      3 001210
         TM    BRSWITCH,SWBRNOBC   WAS NOBC SPECIFIED                   3 001220
         BO    MAINLNE3            BR IF YES TO INIT 'BATCH ' CARD      3 001230
         CBAL  R4,BCSCAN           TEST IF 1ST CARD IS BATCH CARD       3 001240
         BE    MAINLNE3            BR IF YES TO INIT BATCH              3 001250
         EJECT                                                          3 001260
*********************************************************************** 3 001270
*        INITIALISATION ( CONT'D ) - 1ST CARD NOT A BATCH CRD         * 3 001280
*********************************************************************** 3 001290
         SPACE 1                                                        3 001300
         LA    R5,10               ESTABLISH LOOP                       3 001310
INITL1   MVC   20(L'LINE01,R7),LINE01 MOVE LINE TO BUFFER               3 001320
         CBAL  R4,PRNTBBL          PRINT LINE                           3 001330
         BCT   R5,INITL1           LOOP BACK 10 TIMES                   3 001340
         ABEND 16                  1ST CARD NIT BATCH CARD SO ABEND     3 001350
         EJECT                                                          3 001360
*********************************************************************** 3 001370
*        MAIN-LINE LOGIC                                              * 3 001380
*********************************************************************** 3 001390
         SPACE 1                                                        3 001400
MAINLNE0 CBAL  R4,READUT1          GET INPUT RECORD                     3 001410
         BNE   MAINLNE1            BR IF EOF TO CLEAR LAST BATCH        3 001420
         TM    BRSWITCH,SWBRNOBC   IS IT PARM=NOBC                      3 001430
         BO    MAINLNE2            BYPOASS B/C TEST IF YES              3 001440
         CBAL  R4,BCSCAN           TEST IF RECORD IS A BTACH CARD       3 001450
         BE    MAINLNE1            GO TERMINATE LAST BATCH IS YES       3 001460
         MVI   $TSTTSTX,C'X'       SET EQUALITY TO SHOW DETAIL RECORD   3 001470
         B     MAINLNE2            GO PROCESS DETAIL RECORD             3 001480
         MVC   $NXTUT1,$NXTSCAN    PRESERVE NEXT BATCH NUMBER           3 001490
MAINLNE1 CBAL  R4,BATCHT           PERFORM TERMINATION PROCESSING FOR L 3 001500
         TM    SYSUT1+IOPSSW,IOSWEOF HAVE WE EXHAUSTED THE DATA         3 001510
         BO    TERM                GO TO TERMINATION IF YES             3 001520
MAINLNE3 CBAL  R4,BATCHI           PERFORM BATCH INITIALISSATION        3 001530
         MVI   $TSTTSTX,C'Y'       SHOW (B/C & KEYBREAK) OR (NOBC)      3 001540
         TM    BRSWITCH,SWBRKB     TEST IF KY BERAEK PROCESSING         3 001550
         BO    MAINLNE2            BR IF YES                            3 001560
         TM    BRSWITCH,SWBRNOBC   TEST IF NO BATCH CARD                3 001570
         BO    MAINLNE2            GO PROCESS IF YES                    3 001580
         MVI   $TSTTSTX,C'W'       SHOW NORMAL B/C PROCESSING REQUIRED  3 001590
         SPACE 1                                                        3 001600
MAINLNE2 CBAL  R4,DETAIL           PROCESS DETAIL RECORD                3 001610
         B     MAINLNE0            GO GET NEXT INPUT RECORD             3 001620
         SPACE 1                                                        3 001630
         EJECT                                                          3 001640
*********************************************************************** 3 001650
*        TERMINATION                                                  * 3 001660
*********************************************************************** 3 001670
         SPACE 1                                                        3 001680
TERM     CBAL  R4,TERMPH1          1ST PHASE OF TERMINATION             3 001690
         TM    AFSWITCH,AFSWFDMP   WAS USER 4 DUMP REQUESTED            3 001700
         BZ    TERMIN8             BR IF NOT                            3 001710
         ABEND 4,FULL              ABEND WITH USER 4 FOR DEBUGGING      3 001720
         SPACE 1                                                        3 001730
TERMIN8 PGMOUT RC=$COMPCDE         SET COMP CODE AND RETURN             3 001740
         TITLE 'PARROT - ESTABLISH ''CBAL'' LINKAGE TO SUB-ROUTINES'    3 001750
*********************************************************************** 3 001760
*        ESTABLISH CBAL LINKAGE                                       * 3 001770
*********************************************************************** 3 001780
         SPACE 1                                                        3 001790
*        THIS ROUTINE ESTABLISHES THE NECESSARY LINKAGE TO PASS CONTROL 3 001800
*         TO ( I.E. TO PERFORM ) A ROUTINE IN ANOTHER CSECT.  IT        3 001810
*         PERFROMS THE FOLLOWING FUCTIONS:-                             3 001820
*              . PRESERVES THE CURRENT SUB-CSECT BASE REGISTER IN CCB   3 001830
*              . DETERMINES AND ESTABLISHES BASE OF DESTINATION CSECT   3 001840
*              . BRANCHES TO THE REQUIRED ROUTINE                       3 001850
         SPACE 1                                                        3 001860
*        THIS ROUTINE UTILISES THE CCB FIELDS ASSOCIATED WITH THE       3 001870
*         REQUIRED ROUTINE, AND WHICH COMPRISE:-                        3 001880
*              . V(ROUTINE)                                             3 001890
*              . XL1'CSECT SUFFIX NUMBER'                               3 001900
*              . AL3(SAVE AREA FOR CURRENT SUB-CSECT BASE REGISTER )    3 001910
         SPACE 1                                                        3 001920
*        ON ENTRY TO THIS ROUTINE :-                                    3 001930
*              R4  - BAL RETURN ADDRESS                                 3 001940
*              R9  - POINTER TO CCB ROUTINE DEFINITION                  3 001950
*              R12 - CURRENT SUB-CSECT BASE REGISTER (AT TIME CBAL ISSU 3 001960
         SPACE 1                                                        3 001970
*        ON EXIT :-                                                     3 001980
*              R9  - ROUTINE ADDRESS                                    3 001990
*              R12 - NEW BASE REGISTER ( FOR ROUTINE TO BE BAL'ED )     3 002000
*        ALL OTHER REGISTERS ARE UNCHANGED                              3 002010
         SPACE 1                                                        3 002020
CBALINK  SUBIN ,                   ENTER ROUTINE                        3 002030
         ST    R12,CBALR12         PRESERVE CALLER'S BASE FOR DEBUGGING 3 002040
         ST    R9,CBALRTD          PRESERVE ADDRESS OF RTN DESCRIPTOR   3 002050
         STCM  R12,7,5(R9)         PRESERVE CURRENT BASE REGISTER VALUE 3 002060
         SLL   R12,32              ZEROISE R12 WITHOUT CHANGING C/C     3 002070
         IC    R12,4(R9)           RETRIEVE INDEX TO NEW CSECT BASE REG 3 002080
         SLL   R12,3               MULTIPLY BY 8 TO CONVERT TO INDEX    3 002090
         LA    R12,$VBUDG3A(R12)    POINT AT DESIRED CSECT DEFINITION   3 002100
         L     R12,0(R12)          RETRIEVE NEW SUBCSECT BASE REGISTER  3 002110
         L     R9,0(R9)            RETRIEVE ADDRESS OF DESIRED ROUTINE  3 002120
         ST    R4,CBALR4           PRESERVE RETURN ADDR FOR DEBUGGING   3 002130
         ST    R9,CBALRTN          PRESERVE ROUTINE ADDR FOR DEBUGGING  3 002140
         BR    R9                  GO TO THE DESIRED ROUTINE            3 002150
         SPACE 1                                                        3 002160
*        NOTE THAT THE ROUTINE TO WHICH CONTROL HAS JUST BEEN PASSED    3 002170
*         WILL RETURN CONTROL DIRECTLY TO THE INSTRUCTION FOLLOWING THE 3 002180
*         INITIATING 'CBAL', VIA R4 ( WHICH HAS NOT BEEN ALTERED ).     3 002190
         TITLE 'BUDGIE3 - STIMER EXIT TO INTERCEPT LOOPS'               3 002200
*********************************************************************** 3 002210
*        STIMEND - STIMER EXIT                                        * 3 002220
*********************************************************************** 3 002230
         SPACE 1                                                        3 002240
*        THIS ROUTINE RECEIVES CONTROL AS A RESULT OF A STIMER          3 002250
*         INTERRUPT, AND CONSEQUENTLY REGISTER CONTENTS ARE             3 002260
*         UNPREDICTABLE.  R15 CONTAINS THE ADDRESS OF THE ROUTINE       3 002270
*         ITSELF AT ENTRY, AND IS USED TO ESTABLISH TEMPORARY           3 002280
*         ADDRESSABILITY, UNTIL THE PROPER BASE REGISTER IS RESTORED.   3 002290
         SPACE 1                                                        3 002300
         USING $STIMEND,R15        ESTABLISH TEMPORARY ADDRESSABILITY   3 002310
STIMEND  SUBIN ,                   ENTER ROUITNE                        3 002320
         STM   R0,R15,STIMREGS     PRESERVE ALL REGISTERS FOR ANALYSIS  3 002330
         L     R13,SAVER13         RETRIEVE CSECT/CCB BASE REGISTER     3 002340
         DROP  R15                 DROP TEMPORARY ADDRESSABILITY        3 002350
         ABEND 72,FULL             ABNORMALLY TERMINATE                 3 002360
         SPACE 1                                                        3 002370
         DC    C' REGISTER CONTENTS AT ENTRY TO TIMER EXIT : '          3 002380
STIMREGS DC    16F'0'              REGISTER SAVE AREA FOR TIMER EXIT    3 002390
         TITLE 'BUDGIE3 - I/O ERROR INTERFACE ROUTINE'                  3 002400
*********************************************************************** 3 002410
*        I/O ERROR INTERFACE ROUTINE                                  * 3 002420
*********************************************************************** 3 002430
         SPACE 1                                                        3 002440
*        THE PURPOSE OF THIS ROUTINE, WHICH IS SPECIFIED AS THE SYNAD   3 002450
*         ROUTINE FOR ALL DCB'S, IS TO DETECT RECURSION PRIOR TO        3 002460
*         PASSING CONTROL TO THE I/O ERROR ANALYSIS ROUTINE ( IOERRTN   3 002470
*         IN CSECT BUDGIE3L ).  THIS ROUTINE IS IN THE NUCLEUS TO       3 002480
*         FACILITATE ADDRESSABILITY FROM ALL DIRECTIONS.                3 002490
         SPACE 1                                                        3 002500
IOEREXIT SUBIN ,                   ENTER INTERFACE ROUTINE              3 002510
         L     R5,SYSPRINT+IOPSRECA RETRIEVE SYSPRINT BUFFER ADDRESS    3 002520
         TM    SWERROR2,SWE2IOER   HAVE WE ALREADY HAD AN I/O ERROR     3 002530
         BZ    IOEREX2             BR IF NO PREVIOUS I/O ERROR          3 002540
         ABEND 84,FULL             RECURSIVE ERROR SO ABEND IMMEDIATELY 3 002550
IOEREX2  OI    SWERROR2,SWE2IOER   FLAG THAT I/O ERROR OCCURRED         3 002560
         CBAL  R4,IOERRTN          GO TO I/O ERROR ANALYSIS ROUTINE     3 002570
         TITLE 'BUDGIE3 - STAE EXIT INTERFACE ROUTINE'                  3 002580
*********************************************************************** 3 002590
*        STAE EXIT INTERFACE ROUTINE                                  * 3 002600
*********************************************************************** 3 002610
         SPACE 1                                                        3 002620
*        THE PURPOSE OF THIS ROUTINE IS TO RE-ESTABLISH BUDGIE3'S       3 002630
*         BASE REGISTERS AND TO MAKE SOME DEBUGGING DATA AVAILABLE      3 002640
*         PRIOR TO CALLING THE STAE ERROR ANALYSIS ROUTINE.             3 002650
         SPACE 1                                                        3 002660
         USING $STAEXIT,R15        ESTABLISH TEMPORARY ADDRESSABILITY   3 002670
STAEXIT  SUBIN ,                   ENTER INTERFACE ROUTINE              3 002680
         L     R13,SAVER13         RESTORE CCB/CSECT BASE REGISTER      3 002690
         DROP  R15                 DROP TEMPORARY ADDRESSABILITY        3 002700
         MVC   $CBALR12,CBALR12    MAKE DATA PERTAINING TO LAST CBAL .. 3 002710
         MVC   $CBALR4,CBALR4       ... AVAILABLE TO STAE ANALYSIS RTN  3 002720
         MVC   $CBALRTN,CBALRTN     ... BY MOVING IT TO THE CCB         3 002730
         CBAL  R4,STAE             GO TO STAE ERROR ANALYSIS ROUTINE    3 002740
         TITLE ' BUDGIE - SELF-MONITORING ROUTINE'                      3 002750
*********************************************************************** 3 002760
*        SELF-MONITORING ROUTINE:  MAIN-LINE                          * 3 002770
*********************************************************************** 3 002780
         SPACE 1                                                        3 002790
*        IN ORDER TO OPTIMISE BUDGIE CODE, IT IS NECESSARY TO DETERMINE 3 002800
*         WHERE IT SPENDS ITS TIME.  BECAUSE I HAVE NOT YES MODIFIED TH 3 002810
*         MFT PROBLEM PROGRAM MONITOR FOR MVS, THE FASTEST SOLUTION TO  3 002820
*         THIS PROBLEM IS TO HAVE BUDGIE MONITOR ITS OWN EXECUTION.     3 002830
         SPACE 1                                                        3 002840
*        THE ROUTINE ISSUES ( TASK ) STIMERS, AND, UPON REGAINING       3 002850
*         CONTROL, BUILDS A RECORD ( IN THE SAME FORMAT AS THE PROGRAM  3 002860
*         MONITOR ) IDENTIFYING THE NEXT SEQUENTIAL INSTRUCTION TO BE   3 002870
*         EXECUTED.  IF THE INSTRUCTION IS WITHIN BUDGIE CODE, THEN THE 3 002880
*         RECORD IDENTIFIES THE CSECT, AND CONTAINS THE DISPLACEMENT    3 002890
*         WITHIN THE CSECT OF THE INSTRUCTION, WHILE IF THE INSTRUCTION 3 002900
*         IS OUTSIDE BUDGIE CODE, THEN THE ( VIRTUAL ) ADDRESS OF THE   3 002910
*         INSTRUCTION IS PLACED IN THE RECORD.                          3 002920
         SPACE 1                                                        3 002930
*         THE RECORDS ARE WRITTEN TO 'SYSMONTR', AND SHOULD BE          3 002940
*          PROCESSED BY THE MONITOR POST-PROCESSOR 'MAPPGM02'.          3 002950
         SPACE 1                                                        3 002960
*        BY DEFAULT THE MONITORING INTERVAL IS 38 TIMER UNITS (1/1000   3 002970
*         SECS ), BUT THIS MAY BE MODIFIED BY THE PARM OPTION THAT      3 002980
*         TRIGGERS THE SELF-MONITORING FUNCTION :-                      3 002990
*              PARM='MONITOR(=NN)' NN - FACTOR BY WHICH INTERVAL MULTIP 3 003000
         EJECT                                                          3 003010
*********************************************************************** 3 003020
*        SELF-MONITORING ROUTINE:  MAIN-LINE ( CONT'D )               * 3 003030
*********************************************************************** 3 003040
         SPACE 1                                                        3 003050
         USING MONITREC,R5         ESTABLISH MONITORING RECORD ADDR'Y   3 003060
         USING $MONITOR,R15        ESTABLISH TEMPORARY ADDRESSABILITY   3 003070
         DROP  R13,R11             DROP BASIC ADDRESSABILITY            3 003080
MONITOR  SUBIN ,                   ENETR ROUTINE                        3 003090
         STM   R14,R12,12(R13)     PRESERVE REGISTERS IN CONTROL PGM SA 3 003100
         STM   R0,R15,MONREGS      PRESERVE REGISTERS IN MONITOR S/A    3 003110
         L     R13,SAVER13         RETRIEVE CSECT/CCB BASE REGISTER     3 003120
         L     R11,SAVER11         RETRIEVE SECOND BUDGIE BASE REGISTER 3 003130
         DROP  R15                 DROP TEMPORARY ADDRESSABILITY        3 003140
         USING CCBNTRY,R13,R11     RE-ESTABLISH BASIC ADDRESSABILITY    3 003150
         MVC   MONREGS2(72),0(R13) PRESERVE CURRENT BUDGIE S/A          3 003160
         L     R5,SYSMONTR+IOPSRECA RETRIEVE CURRENT RECORD ADDRESS     3 003170
         L     R3,$RBADDR          RETRIEVE ADDRESS OF BUDGIE'S RB      3 003180
         LA    R10,RBOPSW-RBBASIC+4(,R3) POINT AT NSI IN RB'S PSW       3 003190
         L     R3,0(,R10)          RETRIEVE ADDRESS OF NSI              3 003200
         LA    R3,0(,R3)           PURIFY ADDR OF NEXT SEQUENTIAL INSTR 3 003210
         ST    R3,MONRHADR         PRESERVE ADDRESS IN MONITOR RECORD   3 003220
         MVC   MONWA(3),MONRHADR+1 MOVE ADDRESS TO WORK AREA (NO 0C4)   3 003230
         UNPK  MONRADDR(7),MONWA(4) 'UNPACK' ADDRESS ELSEWHERE          3 003240
         TR    MONRADDR,MONHTABL-C'0' HEXPAND THE 'UNPACKED' ADDRESS    3 003250
         CBAL  R4,MONLOC8,LOOP=NO  DETERMINE WHICH CSECT CONTAINS ADDRE 3 003260
         CBAL  R4,MONINST,LOOP=NO  ISOLATE AND HEXPAND INSTRUCTION      3 003270
         CBAL  R4,PUTMON,LOOP=NO   WRITE MONITOR RECORD                 3 003280
         MVC   0(72,R13),MONREGS2  REFRESH BUDGIE'S SAVE AREA           3 003290
        STIMER TASK,$MONITOR,TUINTVL=$MONINT RE-ISSUE STIMER            3 003300
         LM    R0,R15,MONREGS      RESTROE REGISTERS AS AT ENTRY        3 003310
        SUBOUT RETURN=(R14)        RETURN TO THE CONTROL PROGRAM        3 003320
         DROP  R5                  DROP RECORD ADDRESSABILITY           3 003330
         EJECT                                                          3 003340
*********************************************************************** 3 003350
*        SELF-MONITORING ROUTINE:  DETERMINE CSECT CONTAINING INSTR   * 3 003360
*********************************************************************** 3 003370
         SPACE 1                                                        3 003380
         USING MONITREC,R5         ESTABLISH RECORD ADDRESSABILITY      3 003390
MONLOC8  SUBIN ,                   ENTER ROUTINE                        3 003400
         MVC   MONRLOCN,=X'0000'   ASSUMA INSTRUCTION IS BELOW BUDGIE   3 003410
         L     R1,MONRHADR         RETRIEVE INSTRUCTION ADDR FROM REC   3 003420
         LA    R1,0(,R1)           PURIFY INSTRUCTION ADDRESS           3 003430
         LA    R14,0(,R13)         POINT R14 AT START OF CCB (& BUDGIE) 3 003440
         S     R14,=A(CSIDLGTH)    POINT R14 AT PRIMARY PREFIX          3 003450
         CR    R1,R14              IS ADDRESS BELOW START OF BUDGIE     3 003460
         BL    MONLOC8X            GO TO EXIT IF BELOW START OF BUDGIE  3 003470
         L     R15,$VBUDG3A         GET ADDRESS OF END OF BUDGIE CSECT  3 003480
         LA    R15,0(,R15)         PURIFY ADDRESS OF UPPER BOUND        3 003490
         CR    R1,R15              IS INSTRUCTION WITHIN MAIN CSECT     3 003500
         BNH   MONLOC83            BR IF WITHIN MAIN BUDGIE CSECT       3 003510
         SR    R10,R10             ZEROISE WORK REGISTER                3 003520
         IC    R10,$NUMPOOL        GET NUMBER OF POOL/CSECT DEFINITIONS 3 003530
         LA    R2,$VBUDG3A          POINT AT 1ST CSECT DESCRIPTOR       3 003540
MONLOC81 LM    R14,R15,0(R2)       RETRIEVE CSECT ADDRESS AND LENGTH    3 003550
         TM    0(R2),MSPDCSCT      IS THIS A CSECT DEFINITION           3 003560
         BZ    MONLOC82            BR IF NOT TO GET NEXT DESCRIPTOR     3 003570
         LA    R14,0(,R14)         PURIFY CSCET START ADDRESS           3 003580
         LA    R15,0(R15,R14)      COMPUTE PURIFIED END ADDRESS         3 003590
         CR    R1,R14              IS INSTRUCTION BELOW START OF CSECT  3 003600
         BL    MONLOC82            GO GET NEXT DESCRIPTOR IF BELOW      3 003610
         CR    R1,R15              IS INSTRUCTION ABOVE END OF CSECT    3 003620
         BL    MONLOC83            BR IF ADDRESS WITHIN THIS CSECT      3 003630
MONLOC82 LA    R2,SPDLGTH(,R2)     INCREMENT TO NEXT DESCRIPTOR         3 003640
         BCT   R10,MONLOC81        LOOP BACK IF ANY DESCRIPTORS LEFT    3 003650
         MVC   MONRLOCN,=X'FFFF'   FLAG THAT INSTRUCTION IS ABOVE PARRO 3 003660
         B     MONLOC8X            GO TO ROUTINE EXIT                   3 003670
MONLOC83 SR    R1,R14              DETERMINE DISPLACEMENT WITHIN CSECT  3 003680
         ST    R1,MONWA            PRESERVE DISPLACEMENT                3 003690
         UNPK  MONRADDR(7),MONWA+1(4) 'UNPACK' ADDRESS INTO RECORD      3 003700
         TR    MONRADDR,MONHTABL-C'0' HEXPAND DISPLACEMENT INTO RECORD  3 003710
         USING CSECTID,R14         ESTABLISH CSECT PREFIX ADDRESSABILIT 3 003720
         MVC   MONRLOCN,CSIDNAME+6 ADD CSECT SUFFIX TO RECORD           3 003730
         DROP  R14                 DROP SCECT PREFIX ADDRESSABILITY     3 003740
MONLOC8X SUBOUT ,                  RETURN TO CALLER                     3 003750
         DROP  R5                  DROP RECORD ADDRESSABILITY           3 003760
         EJECT                                                          3 003770
*********************************************************************** 3 003780
*        SELF-MONITORING ROUTINE:  HEXPAND THE NEXT SEQUENTIAL INSTR  * 3 003790
*********************************************************************** 3 003800
         SPACE 1                                                        3 003810
         USING MONITREC,R5         ESTABLISH MONITOR RECORD ADDRESS'Y   3 003820
MONINST  SUBIN ,                   ENTER ROUTINE                        3 003830
         L     R3,MONRHADR         REFRESH INSTRUCTION ADDRESS          3 003840
         SR    R15,R15             ZEROISE WORK REGISTER                3 003850
         IC    R15,0(R3)           RETRIEVE 1ST BYTE OF INSTRUCTION     3 003860
         SRL   R15,6               ISOLATE BITS 0-1 OF THE INSTRUCT COD 3 003870
         STC   R15,BITS01          STORE BITS 0-1 OF INSTRUCTION CODE   3 003880
         TR    BITS01,LGTHTABL     DERIVE HEXPANDED EXECUTABLE INST LGT 3 003890
         UNPK  MONWA,0(7,R3)       'UNPACK' MAXIMUM INSTR + GASH BYTE   3 003900
         TR    MONWA,MONHTABL-C'0' TRANSLATE INTO HEXPANDED FORMAT      3 003910
         IC    R15,BITS01          RETRIEVE EXECUTABLE HEXPANDED LGTH   3 003920
         EX    R15,INSMVC          MOVE INSTRUCTION TO OUTPUT RECORD    3 003930
        SUBOUT ,                   RETURN TO CALLER                     3 003940
         DROP  R5                  DROP MONITOR RECORD ADDRESSABILITY   3 003950
         SPACE 5                                                        3 003960
MONREGS2 DS    18F                 SAVE AREA FOR BUDGIE'S SAVE AREA     3 003970
MONREGS  DS    16F                 SAVE AREA FOR REGISTERS AT ENTRY     3 003980
INSMVC   MVC   MONRINS-MONITREC(0,R5),MONWA MOVE INSTRUCTION IMAGE      3 003990
         DS    0F                  ENSURE ALIGNMENT                     3 004000
MONWA    DS    CL13                HEXPANSION WORK AREA                 3 004010
MONHTABL DC    C'0123456789ABCDEF' TABLE FOR HEXPANSION                 3 004020
LGTHTABL DC    X'0307070B'         TRANS TABLE FOR EXEC HEXPANDED INST  3 004030
BITS01   DC    C' '                WORK AREA FOR INSTRUCTION LENGTH     3 004040
         TITLE 'BUDGIE - DUMMY ROUTINE'                                 3 004050
*********************************************************************** 3 004060
*        DUMMY ROUTINE FOR MISSING CBAL'ED ROUTINES                   * 3 004070
*********************************************************************** 3 004080
         SPACE 1                                                        3 004090
*        THE PURPOSE OF THIS ROUTINE IS TO PREVENT AN ABEND IF A        3 004100
*         ROUTINE THAT HAS NOT YET BEEN WRITTEN IS INVOKED BY CBAL.     3 004110
*         THE INITIALISATION ROUTINE 'FINDRTNS' SUBSTITUTES THE ADDRESS 3 004120
*         OF THIS ROUTINE IN ANY ROUTINE DEFINITION THAT CONTAINS A     3 004130
*         ZERO ADDRESS, OR WHICH DEFINES A ROUTINE THAT CANNOT BE       3 004140
*         ASSOCIATED WITH ANY KNOWN CSECT.                              3 004150
         SPACE 1                                                        3 004160
NULLRTN  SUBIN ,                   ENTER ROUTINE                        3 004170
         OI    SWERROR,MERRCBAL    FLAG THAT NON-EXISTENT ROUTINE INVOK 3 004180
         USING RTNDNTRY,R9         ESTABLISH RTN DESCRIPTOR ADDR'Y      3 004190
         L     R9,CBALRTD          RETRIEVE ADDRESS OF ROTINE DESCRIPTO 3 004200
         OI    RTNDFLAG,RTNFCBAL   FLAG THAT ROUTINE ILLEGALLY INVOKED  3 004210
         OI    SWPARM,MPRMCBD      FORCE CONTROL BLOCK DUMP TO FIND RTN 3 004220
         DROP  R9                  DROP RTN DESCRIPTOR ADDR'Y           3 004230
        SUBOUT ,                   RETURN TO ( OPTIMISTIC ) CALLER      3 004240
         TITLE 'BUDGIE - DETERMINE WHICH CSECT CONTAINS EACH ROUTINE'   3 004250
*********************************************************************** 3 004260
*        DETERMINE WHICH CSECT CONTAINS EACH ROUTINE                  * 3 004270
*********************************************************************** 3 004280
         SPACE 1                                                        3 004290
*        THE CCB CONTAINS A ROUTINE DESCRIPTOR FOR EVERY ROUTINE THAT   3 004300
*         IS INVOKED ( BY CBAL ) FROM ANOTHER CSECT.  THE DESCRIPTORS   3 004310
*         ARE INITIALISED WITH ONLY THE ADDRESS OF THE ROUTINE, AND THE 3 004320
*         PURPOSE OF THIS ROUTINE IS TO DETERMINE WHICH CSECT CONTAINS  3 004330
*         EACH OF THE ROUTINES, AND TO SET THE APPROPRIATE SUBCSECT     3 004340
*         INDEX VALUE IN THE DESCRIPTOR.                                3 004350
*        THE ROUTINE ALSO DETECTS MISSING ROUTINES ( ZERO ADDRESS )     3 004360
*         AND UNRESOLVABLE ROUTINES ( ADDRESS NOT IN ANY KNOWN CSECT )  3 004370
*         AND SUBSTITUTES THE ADDRESS OF THE NULL ROUTINE FOR THEM.     3 004380
         SPACE 1                                                        3 004390
*        REGISTER USAGE:                                                3 004400
*         R1  - ADDRESS OF ROUTINE DESCRIPTOR                           3 004410
*         R2  - ADDRESS OF ROUTINE                                      3 004420
*         R3  - ADDRESS OF CSECT DESCRIPTOR                             3 004430
*         R5  - COUNT OF CSECT DEFINITIONS PROCESSED                    3 004440
*         R9  - LOOP CONTROL FOR COUNT OF CSECTS                        3 004450
*         R10 - LOOP CONTROL FOR COUNT OF ROUTINES                      3 004460
*         R14 - ADDRESS OF START OF CSECT                               3 004470
*         R15 - ADDRESS OF END OF CSECT                                 3 004480
         EJECT                                                          3 004490
*********************************************************************** 3 004500
*        DETERMINE WHICH CSECT CONTAINS EACH ROUTINE ( CONT'D )       * 3 004510
*********************************************************************** 3 004520
         SPACE 1                                                        3 004530
         USING RTNDNTRY,R1         ESTABLISH RTN DESCRIPTOR ADDR'Y      3 004540
FINDRTN  SUBIN SAVE=R4             PRESERVE RETURN ADDRESS              3 004550
         SR    R10,R10             ZEROISE WORK REGISTER FOR 'IC'       3 004560
         IC    R10,$NUMRTNS        SET R10 TO NO. OF RTNS TO PROCESS    3 004570
         L     R1,$ADRRTNS         POINT R1 AT 1ST RTN DESCRIPTOR       3 004580
         SR    R2,R2               ZEROISE WORK REGISTER                3 004590
         SR    R14,R14             ZEROISE WORK REGISTER                3 004600
         SR    R15,R15             ZEROISE WORK REGISTER                3 004610
FINDRTN2 ICM   R2,7,1(R1)          GET ADDRESS OF ROUTINE               3 004620
         BNZ   *+14                BR IF ROUTINE EXISTS                 3 004630
         MVC   1(3,R1),=AL3(NULLRTN) SUBSTITUE ADDRESS OF NULL ROUTINE  3 004640
         B     FINDRTN6            GO GET NEXT ROUTINE DESCRIPTOR       3 004650
         SR    R9,R9               ZEROISE WORK REGISTER FOR 'IC'       3 004660
         IC    R9,$NUMPOOL         SET TO LOOP THROUGH CSECT DEFINITION 3 004670
         L     R3,$ADRVCON         GET ADDRESS OF 1ST POOL/CSECT DEF'N  3 004680
         SR    R5,R5               ZEROISE COUNT OF DEFINITIONS         3 004690
FINDRTN3 TM    0(R3),MSPDCSCT      IS THIS A CSECT DEFINITON            3 004700
         BZ    FINDRTN4            BR IF NOT TO GET NEXT DESCRIPTOR     3 004710
         ICM   R14,7,1(R3)         GET ADDRESS OF STRAT OF CSECT        3 004720
         ICM   R15,7,5(R3)         GET ADDRESS OF END OF CSECT          3 004730
         CR    R2,R14              IS THE RTN BELOW START OF CSECT      3 004740
         BL    FINDRTN4            BR IF BELOW CSECT                    3 004750
         CR    R2,R15              IS THE RTN ABOVE THE CSECT           3 004760
         BL    FINDRTN5            BR IF RTN IS WITHIN CSECT            3 004770
FINDRTN4 LA    R3,SPDLGTH(,R3)     INCREMENT TO NEXT DESCRIPTOR         3 004780
         LA    R5,1(,R5)           INCREMENT COUNT OF DESCRIPTORS READ  3 004790
         BCT   R9,FINDRTN3         LOOP BACK IF ANY LEFT                3 004800
         MVC   1(3,R1),=AL3(NULLRTN) SUBSTITUE ADDR OF NULL RTN         3 004810
         OI    SWERROR2,MERRBRTN   FLAG THAT UNLOCATABLE RTN FOUND      3 004820
         OI    RTNDFLAG,RTNFBRTN    .. AND FLAG RTN DESCRIPTOR ALSO     3 004830
         B     FINDRTN6            GO GET NEXT RTN DESCRIPTOR           3 004840
FINDRTN5 STC   R5,4(R1)            STORE CSECT DEFINITON INDEX IN RTND  3 004850
FINDRTN6 LA    R1,RTNDLGTH(,R1)    INCREMENT TO NEXT RTN DESCRIPTOR     3 004860
         BCT   R10,FINDRTN2        LOOP BACK IF ANY LEFT                3 004870
         CBAL  R4,FNDSRTN          NOW PROCESS ANY RTNS IN CCB OVERFLOW 3 004880
        SUBOUT RESTORE=R4          RESTORE AND RETURN TO CALLER         3 004890
         DROP  R1                  DROP RTN DESCRIPTOR ADDRESSABILITY   3 004900
         EJECT                                                          3 004910
*********************************************************************** 3 004920
*        DETERMINE WHICH CSECT CONTAINS EACH ROUTINE ( CONT'D )       * 3 004930
*********************************************************************** 3 004940
         SPACE 1                                                        3 004950
*        NOW LOCATE ANY ROUTINES IN THE CCB 'OVERFLOW' AREA             3 004960
         SPACE 1                                                        3 004970
         USING RTNDNTRY,R1         ESTABLISH RTN DESCRIPTOR ADDR'Y      3 004980
FNDSRTN  SUBIN ,                   ENTER ROUTINE                        3 004990
         SR    R10,R10             ZEROISE WORK REGISTER FOR 'IC'       3 005000
         ICM   R10,1,$NUMSRTN      SET R10 TO NO. OF EXTRA RTNS         3 005010
         BZ    FNDSRTNX            GO TO EXIT IF NO SPARE ROUTINES      3 005020
         L     R1,$ADRSRTN         POINT R1 AT 1ST RTN DESCRIPTOR       3 005030
         SR    R2,R2               ZEROISE WORK REGISTER                3 005040
         SR    R14,R14             ZEROISE WORK REGISTER                3 005050
         SR    R15,R15             ZEROISE WORK REGISTER                3 005060
FNDSRTN2 ICM   R2,7,1(R1)          GET ADDRESS OF ROUTINE               3 005070
         BNZ   *+14                BR IF ROUTINE EXISTS                 3 005080
         MVC   1(3,R1),=AL3(NULLRTN) SUBSTITUE ADDRESS OF NULL ROUTINE  3 005090
         B     FNDSRTN6            GO GET NEXT ROUTINE DESCRIPTOR       3 005100
         SR    R9,R9               ZEROISE WORK REGISTER FOR 'IC'       3 005110
         IC    R9,$NUMPOOL         SET TO LOOP THROUGH CSECT DEFINITION 3 005120
         L     R3,$ADRVCON         GET ADDRESS OF 1ST POOL/CSECT DEF'N  3 005130
         SR    R5,R5               ZEROISE COUNT OF DEFINITIONS         3 005140
FNDSRTN3 TM    0(R3),MSPDCSCT      IS THIS A CSECT DEFINITON            3 005150
         BZ    FNDSRTN4            BR IF NOT TO GET NEXT DESCRIPTOR     3 005160
         ICM   R14,7,1(R3)         GET ADDRESS OF STRAT OF CSECT        3 005170
         ICM   R15,7,5(R3)         GET ADDRESS OF END OF CSECT          3 005180
         CR    R2,R14              IS THE RTN BELOW START OF CSECT      3 005190
         BL    FNDSRTN4            BR IF BELOW CSECT                    3 005200
         CR    R2,R15              IS THE RTN ABOVE THE CSECT           3 005210
         BL    FNDSRTN5            BR IF RTN IS WITHIN CSECT            3 005220
FNDSRTN4 LA    R3,SPDLGTH(,R3)     INCREMENT TO NEXT DESCRIPTOR         3 005230
         LA    R5,1(,R5)           INCREMENT COUNT OF DESCRIPTORS READ  3 005240
         BCT   R9,FNDSRTN3         LOOP BACK IF ANY LEFT                3 005250
         MVC   1(3,R1),=AL3(NULLRTN) SUBSTITUE ADDR OF NULL RTN         3 005260
         OI    SWERROR2,MERRBRTN   FLAG THAT UNLOCATABLE RTN FOUND      3 005270
         OI    RTNDFLAG,RTNFBRTN    .. AND FLAG RTN DESCRIPTOR ALSO     3 005280
         B     FNDSRTN6            GO GET NEXT RTN DESCRIPTOR           3 005290
FNDSRTN5 STC   R5,4(R1)            STORE CSECT DEFINITON INDEX IN RTND  3 005300
FNDSRTN6 LA    R1,RTNDLGTH(,R1)    INCREMENT TO NEXT RTN DESCRIPTOR     3 005310
         BCT   R10,FNDSRTN2        LOOP BACK IF ANY LEFT                3 005320
FNDSRTNX SUBOUT ,                   RETURN TO CALLER                    3 005330
         TITLE 'BUDGIE - DETERMINE SIZE OF ALL CSECTS'                  3 005340
*********************************************************************** 3 005350
*        DETERMINE SIZE OF ALL CSECTS                                 * 3 005360
*********************************************************************** 3 005370
         SPACE 1                                                        3 005380
*        THE CCB CONTAINS THE ADDRESS OF THE START AND END OF ALL       3 005390
*         THE SUB-SCECTS.  THIS ROUTINE REPLACES THE ENDING ADDRESS     3 005400
*         WITH THE LENGTH OF THE CSECT.  THIS IS TO ALLOW REDUNDANT     3 005410
*         CSECTS TO BE USED AS STORAGE POOLS, AND IT ALSO FACILITATES   3 005420
*         THE PROCESSING OF THE ESTAE ERROR ANALYSIS ROUTINE.           3 005430
         SPACE 1                                                        3 005440
CALCSIZ  SUBIN ,                   ENTER ROUTINE                        3 005450
         SR    R10,R10             ZEROISE WORK REGISTER                3 005460
         IC    R10,$NUMPOOL        SET NUMBER OF POOLS FOR LOOP         3 005470
         L     R9,$ADRVCON         POINT AT 1ST POOL/CSECT DEFINITION   3 005480
CALCSIZ1 LM    R1,R2,0(R9)         PICK UP START AND END ADDRESSES      3 005490
         TM    0(R9),MSPDCSCT      DOES POOL DESCRIBE A CSECT           3 005500
         BZ    CALCSIZ2            BR IF THIS IS NOT A CSECT            3 005510
         LA    R1,0(,R1)           PURIFY HIGH-ORDER BYTE OF START      3 005520
         LA    R2,0(,R2)           PURIFY HIGH-ORDER BYTE OF END        3 005530
         SR    R2,R1               DETERMINE SIZE OF CSECT              3 005540
         BNM   *+6                 BR IF RESULT >= 0                    3 005550
         SR    R2,R2               SOMETHING WRONG: ZEROISE -VE SIZE    3 005560
         STCM  R2,7,5(R9)          PRESERVE SIZE IN POOL DEFINITION     3 005570
CALCSIZ2 LA    R9,SPDLGTH(,R9)     INCREMENT TO NEXT POOL/CSECT DESCRIP 3 005580
         BCT   R10,CALCSIZ1        LOOP BACK IF ANY LEFT                3 005590
        SUBOUT ,                   RETURN TO CALLER                     3 005600
         EJECT                                                          3 005610
*********************************************************************** 3 005620
*        MAKE UNWANTED CSECTS AVAILABLE AS STORAGE POOLS              * 3 005630
*********************************************************************** 3 005640
         SPACE 1                                                        3 005650
*        THIS ROUTINE SETS FLAGS IN THE CSECT DESCRIPTORS IN THE CCB    3 005660
*         TO MAKE UNWANTED CSECTS AVAILABLE FOR USE AS STORAGE POOLS    3 005670
*         ( FOR GETMAIN AND WORKFILE PROCESSING ).                      3 005680
         SPACE 1                                                        3 005690
FREECS1  SUBIN ,                   ENTER ROUTINE                        3 005700
        SUBOUT ,                   RETURN TO CALLER                     3 005710
         EJECT                                                          3 005720
*********************************************************************** 3 005730
*        MAKE UNWANTED CSECTS AVAILABLE AS STORAGE POOLS ( PHASE 2 )  * 3 005740
*********************************************************************** 3 005750
         SPACE 1                                                        3 005760
FREECS2  SUBIN ,                   ENTER ROUTINE                        3 005770
         SR    R10,R10             ZEROISE WORK REGISTER                3 005780
         IC    R10,$NUMPOOL        SET NO. OF POOLS FOR LOOP            3 005790
         L     R9,$ADRVCON         PICK UP ADDR OF 1ST POOL/CSECT DEF'N 3 005800
FREECS21 TM    0(R9),MSPDFREE      MAY CSECT BE 'FREEMAINED'            3 005810
         BZ    *+8                 BR IF CSECT MAY NOT BE 'FREEMAINED'  3 005820
         OI    0(R9),MSPDUSE       FLAG THAT CSECT AVAILABLE AS POOL    3 005830
         LA    R9,SPDLGTH(,R9)     INCREMENT TO NEXT CSECT DEFINITION   3 005840
         BCT   R10,FREECS21        LOOP BACK IF ANY DEFINITIONS LEFT    3 005850
        SUBOUT ,                   RETURN TO CALLER                     3 005860
         TITLE 'BUDGIE3 - MISCELLANEOUS CONSTNTS AND FIELDS'            3 005870
         SPACE 1                                                        3 005880
LINE01   DC    C'BDG3*-001-C  1ST CARD READ IS NOT A BATCH CARD'        3 005890
         SPACE 1                                                        3 005900
         LTORG                                                          3 005910
LGTH     EQU   *                   END OF CSECT BUDGIE3                 3 005920
         DROP  R13                 DROP CSECT / CCB ADDRESSABILITY      3 005930
         END   BUDGIE3             ESTABLISH PRIMARY ENTRY POINT        3 005940
         SPACE 1                                                        3 005950
         REPRO                                                          3 005960
 IDENTIFY BUDGIE('MAIN-LINE LOGIC')                                     3 005970
         END                                                            3 005980
