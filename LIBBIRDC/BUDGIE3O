         TITLE 'BUDGIE3O - INTERNAL MACROS'                             O 000010
         MACRO                                                          O 000020
         $CB   &PRINT=OFF                                               O 000030
         PUSH PRINT                PRESERVE CURRENT PRINT STATUS        O 000040
         PRINT &PRINT              ESTABLISH NEW PRINT STATUS           O 000050
               TITLE 'CCB  - CENTRAL CONTROL BLOCK'                     O 000060
         CCB   ,                   GENERATE DSECT                       O 000070
               TITLE '     - GENERAL EQUATES'                           O 000080
       EQUATES ,                   GENERATE EQUATES                     O 000090
               TITLE '     - STORAGE POOL DEFINITION'                   O 000100
      POOLDEFN ,                   GENERATE DSECT                       O 000110
         POP   PRINT               RESTORE ORIGINAL PRINT STATUS        O 000120
         MEND                                                           O 000130
         SPACE 5                                                        O 000140
BUDGIE3O CSECT                                                          O 000150
         $CB   ,                   GENERATE DSECTS AND EQUATES          O 000160
         TITLE 'BUDGIE3O - PARM PROCESSING AND MISCELLANEOUS INIT'      O 000170
        SCSECT O                   DEFINE START OF CSECT BUDGIE3A       O 000180
         ENTRY GETMAIN             SUB-ALLOCATE STORAGE POOL / GETMAIN  O 000190
         ENTRY INITPRM             PARM FIELD PROCESSING                O 000200
         ENTRY PPLLPL              CONVERT PPLL TO PL                   O 000210
         ENTRY PPLPL               CONVERT PPL TO PL                    O 000220
         ENTRY PPPLLPL             CONVERT PPPLL TO PL                  O 000230
         ENTRY PPPLPL              CONVERT PPPL TO PL                   O 000240
         TITLE 'BUDGIE3O - PARM FIELD PROCESSING'                       O 000250
*********************************************************************** O 000260
*        PROCESS PARM                                                 * O 000270
*********************************************************************** O 000280
         SPACE 1                                                        O 000290
INITPRM  SUBIN SAVE=R4             PRESERVE RETURN ADDRESS              O 000300
PARM01   CBAL  R4,PARMGET          RETRIEVE SUBFIELD                    O 000310
         BNE   EOPARM              BRANCH IF PARM EXHAUESTED            O 000320
         CH    R3,=H'3'            TEST IF SUB-FIELD AT LEAST 4 LONG    O 000330
         BL    PARMABRV            GO TEST FOR ABBREVIATIONS IF NOT =>3 O 000340
         BE    PARM02              NO PARM HAS LEN 3 SO INVALID         O 000350
         CLC   0(3,R2),=C'CB='     TEST FOR CB POOL SPECIFICATION       O 000360
         BE    PARMCB              BRANCH IF YES TO PROCESS             O 000370
         CLC   0(3,R2),=C'MB='     TEST FOR MAX BLKSIZE SPECIFICATION   O 000380
         BE    PARMMB              BRANCH IF YES TO PROCESS             O 000390
         CLC   0(3,R2),=C'UL='     TEST FOR UNDERLINE SPECIFICATION     O 000400
         BE    PARMUL              BRANCH IF YESY TP PROCESS            O 000410
         CLC   0(3,R2),=C'NT='     IS IT TEST TYPE SPECIFICATION        O 000420
         BE    PARMNT              GO PROCESS IF YES                    O 000430
         CLC   0(4,R2),=C'NOBC'    IS IT 'NO BATCH CARD4                O 000440
         BE    PARMNOBC            GO PROCESS IF YES                    O 000450
         CLC   0(4,R2),=C'ID=('    IS IT SUBMITTOT ID                   O 000460
         BE    PARMID              GO PROCESS IF YES                    O 000470
         CLC   0(6,R2),=C'BCID=('  IS IT SUBMITTOR ID IN B/C ONLY       O 000480
         BE    PARMIDB             GO PROCESS IF YES                    O 000490
         CLC   0(5,R2),=C'FDUMP'   IS IT REQUEST FOR TERMINATION DUMP   O 000500
         BE    PARMFDMP            GO PROCESS IF YES                    O 000510
         CLC   0(5,R2),=C'ADUMP'   IS IT REQUEST FOR FULL DUMP          O 000520
         BE    PARMADMP            GO PROCESS IF YES                    O 000530
         CLC   0(5,R2),=C'NOSEQ'   IS IT REQUEST TO SUPPRESS SEQ CHECKI O 000540
         BE    PARMNSEQ            GO PROCESS IF YES                    O 000550
         CLC   0(4,R2),=C'RCNT'    IS IT REQUEST FOR RECORD COUNT       O 000560
         BE    PARMRCNT            GO PROCESS IF YES                    O 000570
         CLC   0(6,R2),=C'MS11=S'  IS IT MS11 ERROR SEVERITY LEVEL      O 000580
         BE    PARMMS11            GO PROCESS IF YES                    O 000590
         CLC   0(7,R2),=C'JUSTIFY' TEST IF RIGHT JUSTIFY REQUEST        O 000600
         BE    PARMJUST            GO PROCESS IF YES                    O 000610
         CLC   0(7,R2),=C'NOWEEK0' TEST FOR WEEK 0 SUPPRESSION          O 000620
         BE    PARMWK0             GO PROCESS IF YES                    O 000630
         CLC   0(7,R2),=C'BLSPACE' IS IT REQUEST FOR BLANK SPACING      O 000640
         BE    PARMBLSP            GO PROCESS IF YES                    O 000650
         CLC   0(7,R2),=C'CC19=98' IS IT CURR CODE 19 CONV REQUEST      O 000660
         BE    PARMCC19            GO PROCESS IF YES                    O 000670
         CLC   0(9,R2),=C'PUNCHSUSP' IS IT REQUET TO IGNORE SUSP IN LOG O 000680
         BE    PARMPUNS            GO PROCESS IF YES                    O 000690
         CLC   0(8,R2),=C'KEYBREAK' IS IT REQUEST TO CHANGE BNO ON KEYB O 000700
         BE    PARMKB              BR IF YES                            O 000710
         EJECT                                                          O 000720
*********************************************************************** O 000730
*        PROCESS PARM ( CONT'D )                                      * O 000740
*********************************************************************** O 000750
         SPACE 1                                                        O 000760
         CLC   0(9,R2),=C'MS11=PPPL' IS THIS PPPL REQUEST FOR MS11      O 000770
         BE    PARMPPPL            BR IF YES TO PROCESS                 O 000780
         CLC   0(9,R2),=C'NOISINDEX' IS IT NO MASTER INDEX REQUEST      O 000790
         BE    PARMNOIX            BR IF YES TO PROCESS                 O 000800
         CLC   0(7,R2),=C'UPARM=(' IS IT USER PARM                      O 000810
         BE    PARMUPRM            GO PROCESS IF YES                    O 000820
         CLC   0(4,R2),=C'COM='    IS THIS A COMMENT IDENTIFIER         O 000830
         BE    PARMCOM             BR IF YES TO PROCESS                 O 000840
         CLC   0(4,R2),=C'FREE'    IS THIS REQUEST TO FREEMAIN CSECTS   O 000850
         BE    PARMFREE            BR IF YES TO PROCESS                 O 000860
         CLC   0(3,R2),=C'MC='     IS THIS AMOUNT OF CORE TO ACQUIRE    O 000870
         BE    PARMMC              BR IF YES TO PROCESS                 O 000880
         CLC   0(3,R2),=C'SC='     IS THIS AMOUNT OF CORE TO PRESERVE   O 000890
         BE    PARMSC              BR IFYES TO PROCESS                  O 000900
         CLC   0(6,R2),=C'NOLOAD'  IS THIS REQUEST NOT TO PRELOAD       O 000910
         BE    PARMNL              BR IF YES TO PROCESS                 O 000920
         CLC   0(5,R2),=C'LCNT='   IS IT LINES/PAGE                     O 000930
         BE    PARMLCNT            BR IF YES TO PROCES                  O 000940
         CLC   0(5,R2),=C'SF=IN'   IS IT SUSP FILE=INPUT REQUEST        O 000950
         BE    PARMSFIN            GO PROCESS IF YES                    O 000960
         CLC   0(5,R2),=C'NOEOF'   IS I SUPPRESS /*EOF REQUEST          O 000970
         BE    PARMNEOF            GO PROCESS IF YES                    O 000980
         CLC   0(4,R2),=C'PPL+'    IS IT PPL OVERPUNCH AUTHORISATION    O 000990
         BE    PARMPLOP            GO PROCESS IF YES                    O 001000
         CLC   0(8,R2),=C'KEEPINDS' ARE INDS 56-99 TO BE PRESERVED      O 001010
         BE    PARMKIND            BR IF YES TO PROCESS                 O 001020
         CLC   0(6,R2),=C'SEQALL'  IS IT REQUEST FOR SEQ NOS IN ALL C/C O 001030
         BE    PARMSEQA            BR IF YES TO PROCESS                 O 001040
         CLC   0(8,R2),=C'NOABMESS' IS IT REQUEST TO SUPPRESS ABEND MSG O 001050
         BE    PARMNABM            BR IF YES TO PROCESS                 O 001060
         CLC   0(5,R2),=C'TIMER'   IS IT REQUEST FOR LOOP-FINDING TIMER O 001070
         BE    PARMTIMR            BR IF YES TO PROCESS                 O 001080
         CLC   0(4,R2),=C'TEST'    IS IT REQUEST FOR TESTING AIDS       O 001090
         BE    PARMTEST            BR IF YES TO PROCESS                 O 001100
         CLC   0(10,R2),=C'TURNAROUND' IS IT REQUEST FOR TURNAROUND DOC O 001110
         BE    PARMTURN            BR IF YES TO PROCESS                 O 001120
         CLC   0(8,R2),=C'MS11LABL'  IS IT FIELD LABEL REQUEST          O 001130
         BO    PARMMLAB            GO PROCESS IF YES                    O 001140
         CLC   0(9,R2),=C'NODELFLAG' IS IT REQUEST TO SUPPRESS DELETE   O 001150
         BE    PARMNDFL            GO PROCESS IF YES                    O 001160
         CLC   0(9,R2),=C'NODELRSEQ' IS IT REQUEST TO SUPPRESS RESEQ    O 001170
         BE    PARMNDRS            GO PROCESS IF YES                    O 001180
PARM02   MVC   5(L'LINE25,R5),LINE25 UNRECOGNISABLE MESSAGE TO LINE     O 001190
         MVC   5+L'LINE25(40,R5),$TSTAREA ADD PARM TO MESSAGE           O 001200
         CBAL  R4,PRINT            PRINT MESSAGE                        O 001210
         B     PARM01              GO GET NEXT SUBFIELD                 O 001220
EOPARM  SUBOUT RESTORE=R4          RESTORE AND RETURN                   O 001230
         EJECT                                                          O 001240
*********************************************************************** O 001250
*        PROCESS PARM ( CONT'D ) - RECOGNISE ABBREVIATIONS            * O 001260
*********************************************************************** O 001270
         SPACE 1                                                        O 001280
PARMABRV EQU   *                   RECOGNISE ABBREVIATED KEYWORDS       O 001290
         CLC   0(2,R2),=C'NB'      NO BATCH CARD                        O 001300
         BE    PARMNOBC            GO PROCESS IF YES                    O 001310
         CLC   0(2,R2),=C'FD'      REQUEST FOR TERMINATION DUMP         O 001320
         BE    PARMFDMP            GO PROCESS IF YES                    O 001330
         CLC   0(2,R2),=C'AD'      REQUEST FOR FULL DUMPS               O 001340
         BE    PARMADMP            GO PROCESS IF YES                    O 001350
         CLC   0(2,R2),=C'NS'      SUPPRESS SEQUEBCE CHECK              O 001360
         BE    PARMNSEQ            GO PROCESS IF YES                    O 001370
         CLC   0(1,R2),=C'F'       IS THIS REQUEST TO FREEMAIN CSECTS   O 001380
         BE    PARMFREE            BR IF YES TO PROCESS                 O 001390
         CLC   0(2,R2),=C'RC'      REQUEST FOR RECORD COUNT             O 001400
         BE    PARMRCNT            GO PROCESS IF YES                    O 001410
         CLC   0(1,R2),=C'J'       RIGHT JUSTIFY REQUEST                O 001420
         BE    PARMJUST            GO PROCESS IF YES                    O 001430
         CLC   0(2,R2),=C'N0'      SUPPRESS WEEK 0 IN UT458             O 001440
         BE    PARMWK0             GO PROCESS IF YES                    O 001450
         CLC   0(2,R2),=C'BL'      BLANK SPACING REQUEST                O 001460
         BE    PARMBLSP            GO PROCESS IF YES                    O 001470
         CLC   0(2,R2),=C'19'      CURR CODE 19 CONVERSION              O 001480
         BE    PARMCC19            GO PROCESS IF YES                    O 001490
         CLC   0(2,R2),=C'PS'      IGNORE SUSPENSE IN BATCH           O O 001500
         BE    PARMPUNS            GO PROCESS IF YES                    O 001510
         CLC   0(2,R2),=C'KB'      CHANGE BNO ON KEY BREAK              O 001520
         BE    PARMKB              GO PROCESS IF YES                    O 001530
         CLC   0(2,R2),=C'NX'      SUPPRESS MASTER ISAM INDICES         O 001540
         BE    PARMNOIX            GO PROCESS IF YES                    O 001550
         CLC   0(2,R2),=C'NL'      DO NOT PRELOAD USER EXEIT            O 001560
         BE    PARMNL              BR IF YES TO PROCESS                 O 001570
         CLC   0(2,R2),=C'MP'      S IT MS11=PPPL                       O 001580
         BE    PARMPPPL            BR IF YES TPPROCESS                  O 001590
         CLC   0(2,R2),=C'MS'      IS IT MS11=SOFT                      O 001600
         BE    PARMMS11            BR IF YES TO PROCESS                 O 001610
         CLC   0(2,R2),=C'SF'      IS IT SUSP FILE=INPUT REQUEST        O 001620
         BE    PARMSFIN            GO PROCESS IF YES                    O 001630
         CLC   0(2,R2),=C'NE'      IS IT SUPPRESS /*EOF RESUEST         O 001640
         BE    PARMNEOF            GO PROCESS IF YES                    O 001650
         CLC   0(2,R2),=C'P+'      IS IT PPL OVERPUNCH AUTHORISATION    O 001660
         BE    PARMPLOP            GO PROCESS IF YES                    O 001670
         CLC   0(2,R2),=C'KI'      ARE INDS 56-99 TO B PRESERVED        O 001680
         BE    PARMKIND            BR IF YES TO PROCESS                 O 001690
         CLC   0(2,R2),=C'SA'      IS IT REQUEST FOR SEQ NOS IN ALL C/C O 001700
         BE    PARMSEQA            BR IF YES TO PROCESS                 O 001710
         EJECT                                                          O 001720
*********************************************************************** O 001730
*        PROCESS PARM ( CONT'D ) - RECOGNISE ABBREVATIONS ( CONT'D )  * O 001740
*********************************************************************** O 001750
         SPACE 1                                                        O 001760
         CLC   0(2,R2),=C'NM'      IS IT REQUEST TO SUPPRESS ABEND MSGS O 001770
         BE    PARMNABM            BR IF YES TO PROCESS                 O 001780
         CLC   0(2,R2),=C'TI'      IS IT REQUEST FOR STIMER TO FIND LOO O 001790
         BE    PARMTIMR            BR IF YES TO PROCESS                 O 001800
         CLC   0(2,R2),=C'TE'      IS IT REQUEST FOR TESTING AIDS       O 001810
         BE    PARMTEST            BR IF YES TO PROCESS                 O 001820
         CLC   0(2,R2),=C'TU'      IS IT REQUEST FOR TURNAROUND DOCUMEN O 001830
         BE    PARMTURN            BR IF YES TO PROCESS                 O 001840
         CLC   0(2,R2),=C'ML'      IS IT A FIELD LABEL REQUEST          O 001850
         BE    PARMMLAB            GO PROCESS IF YES                    O 001860
         CLC   0(2,R2),=C'ND'      PARM=NODELFLAG ?                     O 001870
         BE    PARMNDFL            GO PROCESS IF YES                    O 001880
         CLC   0(2,R2),=C'NR'      PARM=NODELRSEQ ?                     O 001890
         BE    PARMNDRS            GO PROCESS IF YES                    O 001900
         B     PARM02              UNKNOWN PARM SO TELL                 O 001910
         EJECT                                                          O 001920
*********************************************************************** O 001930
*        PROCESS PARM ( CONT'D ) - CONTROL BLOCK STORAGE POOL         * O 001940
*********************************************************************** O 001950
         SPACE 1                                                        O 001960
PARMCB   LA    R1,3(,R2)           POINT R1 PAST 'CB='                  O 001970
         LR    R15,R3              SET R15 TO LENGTH OF SUBFIELD        O 001980
         SH    R15,=H'3'           REDUCE LENGTH TO ALLOW FOR 'CB=      O 001990
         CBAL  R4,NUMERIC          TEST IF PARM SUBFIELD NUMERIC        O 002000
         BE    PARM11              BRABCH IF YES                        O 002010
PARMCB01 MVC   5(L'LINE11,R5),LINE11 NON-NUMERIC MESSAGE TO LINE        O 002020
         MVC   5+L'LINE11(40,R5),$TSTAREA ADD PARM TO MESSAGE           O 002030
         CBAL  R4,PRINT            PRINT ERROR MESSAGE                  O 002040
         B     PARM01              GO GET NEXT SUBFIELD                 O 002050
PARM11   L     R1,$BVALUE          RETRIEVE BINARY VALUE                O 002060
         LA    R1,7(,R1)           ROUND SIZE UP TO ....                O 002070
         N     R1,GETMMASK         ... NEAREST FULLWORD                 O 002080
         ST    R1,$GETCORE+4       STORE STORAGE POOL LGTH              O 002090
EOPARM1  B     PARM01              GO GET NEXT SUBFIELD                 O 002100
         SPACE 5                                                        O 002110
*********************************************************************** O 002120
*        PROCESS PARM ( CONT'D ) - MS11 SEVERITY LEVEL                * O 002130
*********************************************************************** O 002140
         SPACE 1                                                        O 002150
PARMMS11 CLC   5(4,R2),=C'SOFT'    IS 'SOFT' SPECIFIED                  O 002160
         BNE   PARM02              TELL UNKNOWN IF NOT                  O 002170
         OI    APSWITCH,APSWMS1S   SET FLAG TO SHOW SOFT ERRORS         O 002180
         B     PARM01              GO GET NEXT SUBFIELD                 O 002190
         SPACE 5                                                        O 002200
*********************************************************************** O 002210
*        PROCESS PARM ( CONT'D ) - RIGHT JUSTIFY NUMERIC FIELDS       * O 002220
*********************************************************************** O 002230
         SPACE 1                                                        O 002240
PARMJUST OI    APSWITCH,APSWJUST   SET TO RIGHT JUSTIFY NUMERIC FIELDS  O 002250
         B     PARM01              GO GET NEXT SUBFIELD                 O 002260
         EJECT                                                          O 002270
*********************************************************************** O 002280
*        PROCESS PARM ( CONT'D ) - MAX BLKSIZE FOR WORKFILE           * O 002290
*********************************************************************** O 002300
         SPACE 1                                                        O 002310
PARMMB   LA    R1,3(,R2)           POINT PAST 'MB='                     O 002320
         LR    R15,R3              SET R15 TO LENGTH OF SUB-FIELD       O 002330
         SH    R15,=H'3'           REDUCE LENGTH TO ALLOW FOR 'MB='     O 002340
         CBAL  R4,NUMERIC          TEST IF PARM VALUE NUMERIC           O 002350
         BNE   PARMCB01            GO TELL OF ERROR IF NOT              O 002360
         MVC   $WRKMBLK,$BVALUE    SET MAX BLKSIZE FOR WORK FILE        O 002370
         B     PARM01                                                   O 002380
         SPACE 5                                                        O 002390
*********************************************************************** O 002400
*        PROCESS PARM ( CONT'D ) - NO BATCH CARD THIS RUN             * O 002410
*********************************************************************** O 002420
         SPACE 1                                                        O 002430
PARMNOBC OI    BRSWITCH,SWBRNOBC   SET 'NO BATCH CARD'                  O 002440
         B     PARMNSEQ            GO FORCE 'NSEQ' BECAUSE IMPLIED      O 002450
         SPACE 5                                                        O 002460
*********************************************************************** O 002470
*        PROCESS PARM ( CONT'D ) - PRINT RECORD COUNT                 * O 002480
*********************************************************************** O 002490
         SPACE 1                                                        O 002500
PARMRCNT OI    APSWITCH,APSWMS05   FORCE BALANCING TOTAL LINES          O 002510
         B     PARM01              GO GET NEXT SUB-FIELD                O 002520
         SPACE 5                                                        O 002530
*********************************************************************** O 002540
*        PROCESS PARM ( CONT'D ) - BLANK SPACING LINES                * O 002550
*********************************************************************** O 002560
         SPACE 1                                                        O 002570
PARMBLSP OI    PRINTSW,PRSWSPBL    FLAG TO FORCE BLANK SPAXING          O 002580
         B     PARM01              GO GET NEXT SUBFIELD                 O 002590
         EJECT                                                          O 002600
*********************************************************************** O 002610
*        PROCESS PARM ( CONT'D ) - UNDERLINE CHARACTER                * O 002620
*********************************************************************** O 002630
         SPACE 1                                                        O 002640
         SPACE 1                                                        O 002650
PARMUL   CH    R3,=H'4'            TEST IF FIELD LENGTH 4               O 002660
         BNE   PARM02              TELL OF ERROR IF NOT                 O 002670
         MVC   $UNDRLNE,3(R2)      MOVE CHARACTER TO UNDERLINE STORE    O 002680
         CLI   3(R2),C' '          TEST IF UNSERLINE CHAR A BLANK       O 002690
         BE    PARMULX             BR IF UNDERLINE NULLIFIED            O 002700
         CLI   3(R2),C'_'          TEST IF UNDER-SCORE SPECIFIED        O 002710
         BE    PARMULX             BR IF UNDELINE IS UNDERSCORE         O 002720
         OI    PSWITCH,PSWULINE    SHOW FORWARD SPACE NEED NOT BE FORCE O 002730
         MVI   $DTBSPCE,X'09'      IF UNDERLINE CHAR NOT '_' OR ' '     O 002740
*                                   THEN MUST SPACE 1 BEFORE MESSGES    O 002750
         ZAP   $ULNDECR,$ZERO      ZEROISE DECREMENT OF AUTO LINE COUNT O 002760
*                                   FOR CURRENT RECORD, SINCE WE ARE NO O 002770
*                                   LONGER PRINTING-NO-SPACE.           O 002780
PARMULX  B     PARM01              GO GET NEXT SUBFIELD                 O 002790
         SPACE 5                                                        O 002800
*********************************************************************** O 002810
*        PROCESS PARM ( CONT'D ) - CURR CODE 19 CONVERSION            * O 002820
*********************************************************************** O 002830
         SPACE 1                                                        O 002840
PARMCC19 OI    YPSWITCH,YPSWCC19   FLAG TO CONVERT CODE 19              O 002850
         B     PARM01              GO GET NEXT SUBFIELD                 O 002860
         SPACE 5                                                        O 002870
*********************************************************************** O 002880
*        PROCESS APRM ( CONT'D ) - NO /*EOF TO INTRDR                 * O 002890
*********************************************************************** O 002900
         SPACE 1                                                        O 002910
PARMNEOF OI    YPSWITCH,YPSWNEOF   FLAG TO SUPPRESS /*EOF CARD          O 002920
         B     PARM01              GO GET NEXT SUBFIELD                 O 002930
         EJECT                                                          O 002940
*********************************************************************** O 002950
*        PROCESS PARM ( CONT'D ) - NUMERIC TEST TYPE                  * O 002960
*********************************************************************** O 002970
         SPACE 1                                                        O 002980
PARMNT   MVC   $SFDFLT,SFNS       ASSUME NS TEST REQUESTED              O 002990
         MVC   $SFUDFLT,SFUS       ESTABLISH US FOR UNSIGNED FIELDS     O 003000
         CLC   3(2,R2),=C'NS'      TEST IF NS REQUESTED                 O 003010
         BE    PARM01              GO GET NEXT SUBFIELD IF YES          O 003020
         MVC   $SFDFLT,SFNN       ASSUME NN TEST REQUESTED              O 003030
         MVC   $SFUDFLT,SFNN       ESTABLISH NN FOR UNSIGNED FIELDS     O 003040
         CLC   3(2,R2),=C'NN'      TEST IF NN REQUESTED                 O 003050
         BE    PARM01              GO GET NEXT SUBFIELD IF YES          O 003060
         MVC   $SFDFLT,SFNB       ASSUME NB TEST REQUESTED              O 003070
         MVC   $SFUDFLT,SFUB       ESTABLISH UB FOR UNSIGNED FIELDS     O 003080
         CLC   3(2,R2),=C'NB'      TEST IF NB REQUESTED                 O 003090
         BE    PARM01              GO GET NEXT SUBFIELD IF YES          O 003100
         MVC   $SFDFLT,SFNM       ASSUME NM TEST REQUIRED               O 003110
         MVC   $SFUDFLT,SFNM       ASSUME NM TEST REQUIRED              O 003120
         CLC   3(2,R2),=C'NM'      TEST IF NM SPECIFIED                 O 003130
         BE    PARM01              GO GET NEXT SUBFIELD IF YES          O 003140
         MVC   $SFDFLT,SFUS       ASSUME US REQUESTED                   O 003150
         MVC   $SFUDFLT,SFUS       ESTABLISH US FOR UNSIGNED FIELDS     O 003160
         CLC   3(2,R2),=C'US'      TEST IF US SPECIFIED                 O 003170
         BE    PARM01              GO GET NEXT SUB-FIELD IF YES         O 003180
         MVC   $SFDFLT,SFUZ       ASSUME UZ REQUESTED                   O 003190
         MVC   $SFUDFLT,SFUZ       ESTABLISH UZ FOR UNSIGNED FIELDS     O 003200
         CLC   3(2,R2),=C'UZ'      TEST IF UZ SPECIFIED                 O 003210
         BE    PARM01              GO GET NEXT SUB-FIELD IF YES         O 003220
         MVC   $SFDFLT,SFUB       ASSUME UB REQUESTED                   O 003230
         MVC   $SFUDFLT,SFUB       ESTABLISH UB FOR UNSIGNED FIELDS     O 003240
         CLC   3(2,R2),=C'UB'      TEST IF UB SPECIFIED                 O 003250
         BE    PARM01              GO GET NEXT SUB-FIELD IF YES         O 003260
         MVC   $SFDFLT,SFNZ       ASSUME NZ TEST REQUESTED              O 003270
         MVC   $SFUDFLT,SFUZ       ESTABLISH UZ FOR UNSIGNED FIELDS     O 003280
         CLC   3(2,R2),=C'NZ'      TEST IF NZ REQUESTED                 O 003290
         BE    PARM01              GO GET NEXT SUBFIELD IF YES          O 003300
         B     PARM02              TELL OF UNRECOGNISABLE PARM          O 003310
         SPACE 5                                                        O 003320
*********************************************************************** O 003330
*        PROCESS PARM ( CONT4D ) - IGNORE SUSPENSE IN LOG             * O 003340
*********************************************************************** O 003350
         SPACE 1                                                        O 003360
PARMPUNS MVI   $LOGSUSP,C'R'       ALTER FLAG FROM 'R'S' TO 'R'         O 003370
         B     PARM01              GO GET NEXT SUBFIELD                 O 003380
         EJECT                                                          O 003390
*********************************************************************** O 003400
*        PROCESS PARM ( CONT'D ) - SUBMITTOR ID                       * O 003410
*********************************************************************** O 003420
         SPACE 1                                                        O 003430
PARMID   LR    R4,R3               PRESERVE PRM LENGTH                  O 003440
         LA    R1,4(,R2)           POINT PAST 'ID=('                    O 003450
         LR    R2,R3               MOVE LENGTH TO R2                    O 003460
         SH    R3,=H'4'            ALLOW FOR 'ID=('                     O 003470
         CH    R3,=H'4'            ENSURE NOT LESS THAN 3 BYTES LEFT    O 003480
         BL    PARM02              FORMAT WRONG - TELL UNRECOGNISABLE   O 003490
         LA    R15,0(,R1)          POINT R15 AT FIRST CHAR OF POSN      O 003500
PARMID00 CLI   0(R15),C','         HAVE WE REACHED DELIMITER            O 003510
         BE    PARMID01            BR IF YS                             O 003520
         CLI   0(R15),C')'         HAVE WE RUN OUT OF PARM              O 003530
         BE    PARM02              FORMAT ERRO IF YES                   O 003540
         LA    R15,1(,R15)         INCREMENT R15 TO NEXT POSN           O 003550
         B     PARMID00            LOOP BACK                            O 003560
PARMID01 SR    R15,R1              DETERMINE LENGTH OF NUMERIC SUBPARM  O 003570
         CBAL  R4,NUMERIC          ENSURE SUBPARM IS NUMERIC            O 003580
         BNE   PARMCB01            IF NOT - TELL PARM NONNUMERIC        O 003590
         CVB   R14,$WRKDUBL        CONVERT POSN TO BINARY               O 003600
         L     R4,=V(PARMIDP)      GET ADDRESS OF SAVE AREA             O 003610
         STC   R14,0(R4)           PRESERVE DESTINATION OF ID           O 003620
         AR    R1,R15              INCREMENT TO DELIIMITTING ','        O 003630
         LA    R1,1(,R1)           INCR START OF LITERAL ID             O 003640
         L     R4,=V(PARMIDC)      GET ADDRESS OF STORE                 O 003650
         MVC   0(8,R4),0(R1)       MOVE SUBNITTORS ID TO STORE          O 003660
         LA    R15,6(,R15)         INCR LGTH OF POSN FOR 'ID=(,)'       O 003670
         SR    R2,R15              DETERMINE LENGTH OF LITERAL ID       O 003680
         L     R4,=V(PARMIDL)      GET ADDRESS OF SAVE AEA              O 003690
         STC   R2,0(R4)            PRESERVE LENGTH OF LITERAL ID        O 003700
         LTR   R3,R3               ENSURE LGTH GREATER THAN $ZERO       O 003710
         BH    *+8                 PROCEED IF LNGTH GOOD                O 003720
         B     PARM02              TELL OF FORMAT ERROR                 O 003730
         OI    APSWITCH,APSWSID    INDICATE SUBMITTOR ID WANTED         O 003740
         B     PARM01              GO GET NEXT PARM FIELD               O 003750
         SPACE 5                                                        O 003760
*********************************************************************** O 003770
*        PROCESS PARM ( CONT'D ) - SUPPRESS WEEK 0                    * O 003780
*********************************************************************** O 003790
         SPACE 1                                                        O 003800
PARMWK0  L     R4,=V(WEEK0)        GET ADDRESS O CONSTANT               O 003810
         MVC   0(6,R4),0(R2)       REPLACE 'WEEK0 ' BY 'NOWEEK'         O 003820
         B     PARM01              GO GET NEWT PARM FIELD               O 003830
         EJECT                                                          O 003840
*********************************************************************** O 003850
*        PROCESS PARM ( CONT'D ) - SUBMITTOR ID IN B/C ONLY           * O 003860
*********************************************************************** O 003870
         SPACE 1                                                        O 003880
PARMIDB  LA    R2,2(,R2)           INCREMENT PAST 'BC'                  O 003890
         SH    R3,=H'2'            DECREMENT LENGTH TO ALLOW FOR 'BC'   O 003900
         OI    APSWITCH,APSWBCID   INDICATE BATCH CARD ID FOUND         O 003910
         B     PARMID              GO VALIDATE PARM & EXTRACT VALUES    O 003920
         SPACE 5                                                        O 003930
*********************************************************************** O 003940
*        PROCESS PARM ( CONT'D ) - DUMP IN TERMINATION                * O 003950
*********************************************************************** O 003960
         SPACE 1                                                        O 003970
PARMFDMP OI    AFSWITCH,AFSWFDMP   FLAG TO ABEND IN TERMINATION         O 003980
         B     PARM01              GO GET NEXT PARM FIELD               O 003990
         SPACE 5                                                        O 004000
*********************************************************************** O 004010
*        PROCESS PARM( CONT'D ) - ALLOW FULL DUMPS                    * O 004020
*********************************************************************** O 004030
         SPACE 1                                                        O 004040
PARMADMP OI    $ABNDCDE,FULLDUMP   FLAG TO PRODUCE FULL DUMPS ALWAYS    O 004050
         B     PARM01              GO GET NEXT PARM FIELD               O 004060
         SPACE 5                                                        O 004070
*********************************************************************** O 004080
*        PROCESS PARM ( CINT'D ) - SUPPRESS SYSUT1 SEQUENCE CHECK     * O 004090
*********************************************************************** O 004100
         SPACE 1                                                        O 004110
PARMNSEQ OI    APSWITCH,APSWNSEQ   FLAG THAT NO SEQUENCE CHECKS TO BE D O 004120
         B     PARM01              GO GET NEXT PARM FIELD               O 004130
         EJECT                                                          O 004140
*********************************************************************** O 004150
*        PROCESS PARM ( CONT'D ) - KEY BREAK PARM                     * O 004160
*********************************************************************** O 004170
         SPACE 1                                                        O 004180
PARMKB   OI    BRSWITCH,SWBRKB     SET ON 'KEYBREAK' FLAG               O 004190
         B     PARM01              GO GET NEXT SUBFIELD                 O 004200
         SPACE 5                                                        O 004210
*********************************************************************** O 004220
*        PROCESS PARM (CONT'D ) - PPPL PROCESSING FOR MS11            * O 004230
*********************************************************************** O 004240
         SPACE 1                                                        O 004250
PARMPPPL OI    SWINIT,SWMS11PL     FLAG TO PROCESS AS PPPL NOT PPLL     O 004260
         B     PARM01              GO GET NEXT PARM FIELD               O 004270
         SPACE 5                                                        O 004280
*********************************************************************** O 004290
*        PROCESS PARM ( CONT'D ) - NO IS MASTER INDEX                 * O 004300
*********************************************************************** O 004310
         SPACE 1                                                        O 004320
PARMNOIX OI    YPSWITCH,YPSWNOIX   FLAG TO SUPPRESS MASTER INDEXES      O 004330
         B     PARM01              GO GET NEXT PARM FIELD               O 004340
         SPACE 5                                                        O 004350
*********************************************************************** O 004360
*        PROCESS ARM ( CONT'D ) - IDENTIFY MS13 COMMENT               * O 004370
*********************************************************************** O 004380
         SPACE 1                                                        O 004390
PARMCOM  L     R4,=V(MS13COMM)     GET ADDRESS OF RELEVANT SAVE AREA    O 004400
         MVC   0(1,R4),4(R2)       MOVECHARACTER TO STORE               O 004410
         B     PARM01              GO GET NEXT SUBFIELD                 O 004420
         SPACE 5                                                        O 004430
*********************************************************************** O 004440
*        PROCESS PARM ( CONT'D ) - FREEMAIN REDUNDANT CSECTS          * O 004450
*********************************************************************** O 004460
         SPACE 1                                                        O 004470
PARMFREE OI    YPSWITCH,YPSWFREE   FLAG TO PERFROM FREEMAIN             O 004480
         B     PARM01              GO GET NEXT PARM SUBFIELD            O 004490
         EJECT                                                          O 004500
*********************************************************************** O 004510
*        PROCESS PARM ( CONT'D ) - USER PARM                          * O 004520
*********************************************************************** O 004530
         SPACE 1                                                        O 004540
PARMUPRM CH    R3,=H'11'           ENSURE LENGTH > 11 (UPARM=(,))       O 004550
         BNH   PARM02              GO TELL OF ERROR IF NOT              O 004560
         LA    R1,7(,R2)           POINT PAST 'UPARM=('                 O 004570
         LR    R2,R3               PRESERVE LENGTH IN R2                O 004580
         SH    R3,=H'7'            ALLOW FOR 'UPRM=('                   O 004590
         LR    R15,R1              POINT R15 AT 1ST DIGIT OF POSN       O 004600
PARMUP00 CLI   0(R15),C','         HAVE WE REACHED DELIMITER            O 004610
         BE    PARMUP01            BR IF YES                            O 004620
         CLI   0(R15),C')'         HAVE WE RUN OUT OF PARM              O 004630
         BE    PARM02              FORMAT ERROR IF YES                  O 004640
         LA    R15,1(,R15)         INCREMENT RU5 TO NEXT POSM           O 004650
         B     PARMUP00            LOOP BACK TO TEST FOR END            O 004660
PARMUP01 SR    R15,R1              DETEREMINE LNGH OF NUMERIC PARM      O 004670
         CBAL  R4,NUMERIC          ENSURE POSN IS NUMERIC               O 004680
         BNE   PARMCB01            IF NOT NUMERIC TELL OF ERROR         O 004690
         CVB   R14,$WRKDUBL        CONVERT POSN TO BUNARY               O 004700
         BCTR  R14,0               DECREMENT POSN TO DISPLACEMENT       O 004710
         L     R4,=V(UPARMDES)     GET ADDRESS OF STORE                 O 004720
         STH   R14,0(R4)           PRESERVE DISPLACEMENT OD DESTINATION O 004730
         LA    R1,1(R15,R1)        INCREMENT R1 TO POINT PAST DELIMITER O 004740
         L     R4,=V(UPARMADR)     GET ADDRESS OF STORE                 O 004750
         ST    R1,0(R4)            PRESERVE ADDRESS OF USER PARM        O 004760
         LA    R15,9(,R15)         INCREMENT LENGTH OF 'NNN' BY UPARM=  O 004770
         SR    R2,R15              DETERMINE LENGHT OF REMAINDER        O 004780
         BCTR  R2,0                DECREMENT LENGTH FOR EXECUTE         O 004790
         L     R4,=V(UPARMLEN)     GET ADDRESS OF SAVE AREA             O 004800
         STH   R2,0(R4)            PRESERVE EXECUTABLE LENGTH OF PARM   O 004810
         B     PARM01              GO GET NEXT PARM FIELD               O 004820
         SPACE 1                                                        O 004830
         SPACE 5                                                        O 004840
*********************************************************************** O 004850
*        PROCESS PARM ( CONT'D ) - DO NOT PRELOAD USER EXITS          * O 004860
*********************************************************************** O 004870
         SPACE 1                                                        O 004880
PARMNL   OI    YPSWITCH,YPSWNOLD   FLAG NOT TO PRELOAD                  O 004890
         B     PARM01              GO GET NEXT SUBFIELD                 O 004900
         EJECT                                                          O 004910
*********************************************************************** O 004920
*        PROCESS APRM ( CONT'D ) - CORE TO DYNAMICALLY ACQUIRE        * O 004930
*********************************************************************** O 004940
         SPACE 1                                                        O 004950
PARMMC   LA    R1,3(,R2)           POINT PAST 'MC='                     O 004960
         LR    R15,R3              SET R15 TO LENFTH OF SUB-FIELD       O 004970
         SH    R15,=H'3'           ALLOW FOR PARM ID                    O 004980
         CBAL  R4,NUMERIC          TEST IF PARM VALUE NUMERIC           O 004990
         BNE   PARMCB01            GO TELL OF ERROR IF NOT              O 005000
         EX    R15,SFPACK          PACK SUB-FIELD DATA                  O 005010
         CVB   R1,$WRKDUBL         CONVERT AMOUNT INTO BINARY           O 005020
         ST    R1,$GETMMC          PRESERVE AMOUNT TO BE ACQUIRED       O 005030
         B     PARM01              GO GET NEXT SUB-FIELD                O 005040
         SPACE 5                                                        O 005050
*********************************************************************** O 005060
*        PROCESS PARM ( CONT'D ) - CORE TO BE PRESERVED               * O 005070
*********************************************************************** O 005080
         SPACE 1                                                        O 005090
PARMSC   LA    R1,3(,R2)           POINT PAST 'SC='                     O 005100
         LR    R15,R3              SET R15 TO LENFTH OF SUB-FIELD       O 005110
         SH    R15,=H'3'           ALLOW FOR PARM ID                    O 005120
         CBAL  R4,NUMERIC          TEST IF PARM VALUE NUMERIC           O 005130
         BNE   PARMCB01            GO TELL OF ERROR IF NOT              O 005140
         L     R1,$BVALUE          RETRIEVE BINARY EQUIVALENT VALUE     O 005150
         L     R4,=V(GETMSC)       GET ADDRESS OF SAVE AREA             O 005160
         ST    R1,0(R4)            PRESERVE AMOUNT TO BE PRESERVED      O 005170
         B     PARM01              GO GET NEXT SUB-FIELD                O 005180
         SPACE 5                                                        O 005190
*********************************************************************** O 005200
*        PROCESS PARM ( CONT'D ) - PPL MAY HAVE OVERPUNCH             * O 005210
*********************************************************************** O 005220
         SPACE 1                                                        O 005230
PARMPLOP OI    YPSWITCH,YPSWPLOP   FLAG THAT OVERPUNCH VALID            O 005240
         B     PARM01              GO GET NEXT PARM SUBFIELD            O 005250
         EJECT                                                          O 005260
*********************************************************************** O 005270
*        PROCESS PARM ( CONT'D ) - LINES / PAGE                       * O 005280
*********************************************************************** O 005290
         SPACE 1                                                        O 005300
PARMLCNT LA    R1,5(,R2)           POINT PAST 'LCNT='                   O 005310
         LR    R15,R3              SET R15 TO LENGTH OFPARM FIELD       O 005320
         SH    R15,=H'5'           ALLOW FOR 'LCNT='                    O 005330
         CBAL  R4,NUMERIC          TEST IF PARM VALUE NUMERIC           O 005340
         BNE   PARMCB01            GO TELL OF ERROR IF NOT              O 005350
         ZAP   $PGELMIT,$PVALUE    SET LINES/PAGE IN WORK AREA          O 005360
         CP    $PGELMIT,=P'10'     ENSURE THAT LINE/PAGE IS AT LEAST 10 O 005370
*                                   OR A HEADING LOOP WILL RESULT       O 005380
         BH    *+10                BR IF NOT LESS THAN 10               O 005390
         ZAP   $PGELMIT,=P'60'     FOFCE VALUE BACK TO DEFAULT          O 005400
         B     PARM01              GO GET NEXT PARM SUBFIELD            O 005410
         SPACE 5                                                        O 005420
*********************************************************************** O 005430
*        PROCESS PARM ( CONT'D ) - SUSPENSE FILE = INPUT              * O 005440
*********************************************************************** O 005450
         SPACE 1                                                        O 005460
PARMSFIN OI    YPSWITCH,YPSWSFIN   SET FLAG FOR SF=IN                   O 005470
         B     PARM01              GO GET NEXTPARM SUB-FIOD             O 005480
         SPACE 5                                                        O 005490
*********************************************************************** O 005500
*        PROCESS PARM ( CONT'D ) - PRESERVE INDICATORS 56-99          * O 005510
*********************************************************************** O 005520
         SPACE 1                                                        O 005530
PARMKIND OI    AFSWITCH,AFSWKIND   FLAG TO PRESERVE INDICATORS          O 005540
         B     PARM01              GO GET NEXT PARM SUB-FIELD           O 005550
         SPACE 5                                                        O 005560
*********************************************************************** O 005570
*        PROCESS PARM ( CONT'D ) - SEQUENCE NUMBER ALL CONTROL CARDS  * O 005580
*********************************************************************** O 005590
         SPACE 1                                                        O 005600
PARMSEQA OI    AFSWITCH,AFSWSEQA   FLAG TO SEQ NO ALL CONTROL CARDS     O 005610
         B     PARM01              GO GET NEXT PARM SUBFIELD            O 005620
         EJECT                                                          O 005630
*********************************************************************** O 005640
*        PROCESS PARM ( CONT'D ) - SUPPRESS ABEND MESSAGES            * O 005650
*********************************************************************** O 005660
         SPACE 1                                                        O 005670
PARMNABM OI    AFSWITCH,AFSWNABM   FLAG THAT NO ABEND MESSAGES REQUIRED O 005680
         OI    $VBUDG3T,POOLUSE+POOLGTM ALLOW CSECT TO BE FREEMAINED ET O 005690
         B     PARM01              GO GET NEXT SUBFIELD                 O 005700
         SPACE 5                                                        O 005710
*********************************************************************** O 005720
*        PROCESS PARM ( CONT'D ) - INITIATE LOOP-CATCHING STIMER      * O 005730
*********************************************************************** O 005740
         SPACE 1                                                        O 005750
PARMTIMR OI    AFSWITCH,AFSWTIMR   FLAG THAT TIMER REQUIRED             O 005760
         B     PARM01              GO GET NEXT PARM SUBFIELD            O 005770
         SPACE 5                                                        O 005780
*********************************************************************** O 005790
*        PROCESS PARM ( CONT'D ) - MS11/12 CARDS CONTAIN LABELS ONLY  * O 005800
*********************************************************************** O 005810
         SPACE 1                                                        O 005820
PARMMLAB OI    AFSWITCH,AFSWMLAB   FLAG THAT FIELD LABELS ONLY IN MS11/ O 005830
         B     PARM01              GO GET NEXT PARM SUBFIELD            O 005840
         SPACE 5                                                        O 005850
*********************************************************************** O 005860
*        PROCESS PARM ( CONT'D ) - REQUEST FOR TESTING AIDS           * O 005870
*********************************************************************** O 005880
         SPACE 1                                                        O 005890
PARMTEST OI    AFSWITCH,AFSWTIMR   SET ON LOOP-DETECTING TIMER          O 005900
         OI    $ABNDCDE,FULLDUMP   FLAG TO PRODUCE FULL DUMP ALWAYS     O 005910
         B     PARM01              GO GET NEXT PARM SUBFIELD            O 005920
         SPACE 5                                                        O 005930
*********************************************************************** O 005940
*        PROCESS PARM ( CONT'D ) - REQUEST FOR TURNAROUND DOCUMENT    * O 005950
*********************************************************************** O 005960
         SPACE 1                                                        O 005970
PARMTURN OI    AFSWITCH,AFSWTURN   FLAG FOR TURNAROUND DOCUMENT         O 005980
         B     PARM01              GO GET NEWXT PARM SUBFIELD           O 005990
         EJECT                                                          O 006000
*********************************************************************** O 006010
*        PROCESS PARM ( CONT'D ) - SUPPRESS 'DELETE' FLAG             * O 006020
*********************************************************************** O 006030
         SPACE 1                                                        O 006040
PARMNDFL OI    A2SWITCH,A2SWNDFL   SET FLAG TO SUPPRESS 'DELETE'        O 006050
         B     PARM01              GO GET NEXT PARM SUBFIELD            O 006060
         SPACE 5                                                        O 006070
*********************************************************************** O 006080
*        PROCESS PARM ( CONT'D ) - SUPPRESS RESEQUENCING AFTER DELETE   O 006090
*********************************************************************** O 006100
         SPACE 1                                                        O 006110
PARMNDRS OI    A2SWITCH,A2SWNDRS   SET FLAG TO SUPPRESS RESEQUENCING    O 006120
         B     PARM01              GO GET NEXT PARM SUBFIELD            O 006130
         EJECT                                                          O 006140
*********************************************************************** O 006150
*        THIS SUB-ROUTINE RETRIEVES SUB-FIELDS FROM THE PARM          * O 006160
*         FIELD IN THE EXEC STATEMENT.  ON RETURN, R2 CONTAINS THE      O 006170
*         SUB-FIELD ADDRESS AND R3 CONTAINS THE LENGTH.  THE CONDITION  O 006180
*         CODE IS SET SUCH THAT THE USER CAN MAKE THE FOLLOWING TESTS - O 006190
*              BE  - PARM SUB-FIEOLD FOUNF                              O 006200
*              BNE - PARM IS EXHAUSTED                                  O 006210
*********************************************************************** O 006220
         SPACE 1                                                        O 006230
PARMGET  SUBIN SAVE=(R7,R8,R4,R11) PRESEVRE REGISTERS                   O 006240
         MVI   PARMTSTX,C'Y'       ASSUME PARM EXHUASTED                O 006250
         LM    R7,R8,PARMR7R9      RETRIEVE R7 & R8 VALUES              O 006260
         L     R11,PARMR7R9+8      RETRIEVE REG 11 VALUE.               O 006270
PARM1TME CBAL  R4,PARMINIT         1ST TIME ONLY, INITIALISE POINTERS   O 006280
PARMGET2 LA    R8,1                ESTABLISH BXLE INCREMENT             O 006290
         CR    R7,R11              TEST IF PARM EXHAUSTED               O 006300
         BH    PARMGX1             EXIT IF PARM EXHAUSTED               O 006310
PARMGET3 LR    R2,R7               POINT R2 AT START OF SUBFIELD        O 006320
PARMLOOP CLI   0(R7),C','          TEST FOR COMMA                       O 006330
PARMT1   BE    PARMLGTH            BRANCH IF YES UNLESS WAITING FOR '   O 006340
         CLI   0(R7),C'('          TEST FOR START OF PARENTHESIS        O 006350
         BNE   *+8                 BR IF NOT                            O 006360
         NI    PARMT1+1,X'0F'      NULLIFY ','TEST UNTIL END PARENTHESI O 006370
         CLI   0(R7),C')'          TEST FOR       PARENTHESIS           O 006380
         BNE   *+8                 BRANCH IF NOT                        O 006390
         OI    PARMT1+1,X'80'      ALLOW SCAN FOR COMMA                 O 006400
         LR    R9,R11              ESTABLISH R9 FOR BXLE                O 006410
         BXLE  R7,R8,PARMLOOP      TEST NEXT CHARACTER UNLESS END       O 006420
         SPACE 3                                                        O 006430
*********************************************************************** O 006440
*        CONT'D OVERLEAF                                              * O 006450
*********************************************************************** O 006460
         EJECT                                                          O 006470
*********************************************************************** O 006480
*        RETRIEVE PARM SUB-FIELDS ( CONT'D )                          * O 006490
*********************************************************************** O 006500
PARMLGTH LR    R3,R7               POINT AT END OF SUBFIELD             O 006510
         SR    R3,R2               DETERMINE SUBFIELD LENGTH            O 006520
         LA    R7,1(,R7)           POINT AT START OF NEXT SUBFIELD      O 006530
         STM   R7,R8,PARMR7R9      PRESERVE WORK REGISTERS              O 006540
         ST    R11,PARMR7R9+8      PRESERVE WORK REGISTERS              O 006550
         MVI   PARMTSTX,C'X'       SET TO SHOW SUB-FIELD FOUND          O 006560
         MVI   $TSTAREA,C' '       INSERT LEADING BLANK                 O 006570
         MVC   $TSTAREA+1(L'$TSTAREA-1),$TSTAREA & PROPAGATE            O 006580
         BCTR  R3,0                DECREMENT LENFTH FOR EXECUTE         O 006590
         LTRR  R3,R3               ENSURE NOT -VE (INPLIES ',,')        O 006600
         BM    *+8                 BYPASS EX IF -VE                     O 006610
         EX    R3,PARMMVC          MOVE SUB-PARM TO WORKAREA            O 006620
         LA    R3,1(,R3)           RE-ESTABLISH PARM FIELD LENGTH       O 006630
PARMGX1  CLI   PARMTSTX,C'X'       SE  CONDITION CODE                   O 006640
        SUBOUT RESTORE=(R7,R8,R11,R4) RESTORE & RETURN                  O 006650
         SPACE 1                                                        O 006660
PARMTSTX DC    C' '                COMPARAND TO SET CONDITION CODE      O 006670
PARMMVC  MVC   $TSTAREA(0),0(R2)   MOVE PARM TO $TSTAREA                O 006680
         EJECT                                                          O 006690
*********************************************************************** O 006700
*        INITIALISE PARM ROUTINE POINTERS                             * O 006710
*********************************************************************** O 006720
         SPACE 1                                                        O 006730
PARMINIT SUBIN SAVE=(R4)           PRESERVE REGISTERS                   O 006740
         MVC   PARM1TME(2),=X'4700' CONVERT CBALTO NOP                  O 006750
         L     R11,4(,R13)         RETRIEVE PREVIOUS SAVE AREA POINTER  O 006760
         L     R11,24(,R11)        RETRIEVE R11(PARM PTR) FROM SAVE ARE O 006770
         L     R11,0(,R11)         POINT R11 AT PARAMETER AREA          O 006780
         LH    R8,0(R11)           RETRIEVE COUNT FIELD                 O 006790
         LA    R7,2(,R11)          POINT R7 AT START OF DATA            O 006800
         LINE  LINE06,P=N          ASSUME NO PARM & SET UP MESSAGE      O 006810
         LTR   R8,R8               TEST IF PARM SUPPLIED                O 006820
         BZ    PARMP1              BRANCH IF NOT                        O 006830
         BCTR  R8,0                DECREMENT R8 FOR EXECUTE             O 006840
         LINE  LINE10,P=N          ADD MESSAGE                          O 006850
         CBAL  R4,PRINT            PRINT 'CONTENTS OF PARM ARE -'       O 006860
         MVC   5(L'LINE12,R5),LINE12 ADD MESSAGE TO LINE                O 006870
         EX    R8,PARMPMVC         ADD PARM TO MESSAGE                  O 006880
         LA    R8,1(,R8)           RESET R8 AFTER EXECUTE               O 006890
         LA    R15,5+L'LINE12(R8,R5) POINT PAST PARM IN LINE            O 006900
         MVI   0(R15),C''''        INSERT TRAILING QUOTE                O 006910
PARMP1   CBAL  R4,PRINT            PRINT LINE                           O 006920
         LTR   R8,R8               TEST IF PARM SUPPLIED                O 006930
         BZ    PARMGX1             EXIT IF NOT                          O 006940
         LA    R11,2(,R11)         POINT R11 AT START OF DATA           O 006950
         AR    R11,R8              POINT R11 AT EOD                     O 006960
         BCTR  R11,0               DECREMENT R11 FOR USE AS BXLE COMPAR O 006970
        SUBOUT RESTORE=(R4)        RETURN TO CALLER                     O 006980
         SPACE 1                                                        O 006990
PARMPMVC MVC   L'LINE12+5(0,R5),0(R7) MOVE PARM TO MESSAGE              O 007000
         TITLE 'BUDGIE3O - MISCELLANEOUS INITIALISATION ROUTINES'       O 007010
*********************************************************************** O 007020
*        GETMAIN ROUTINE - SUB-ALLOCATE POOLS OF STORAGE              * O 007030
*********************************************************************** O 007040
         SPACE 1                                                        O 007050
*        ON ENTRY:      R2 - LENGTH OF AREA REQUIRED                    O 007060
*        ON RETURN:     R1 - ADDRESS OF ALLOCATED AREA (LOW-VALUES INT) O 007070
         SPACE 1                                                        O 007080
         USING POOLDEFN,R15        ESTABLISH POOL ADDRESSABILITY        O 007090
GETMAIN  SUBIN SAVE=R4             GET CORE                             O 007100
         LA    R2,3(,R2)           POUND UP REQUEST TO ....             O 007110
         N     R2,GETMASK2          .... A FULLWORD MUPLTIPLE           O 007120
         L     R15,$ADRVCON        POINT R15 AT 1ST POOL DEFINITION     O 007130
         LH    R14,$POOLNO         GET MEX NUMBER OF AVAILABLE POOLS    O 007140
GETMAIN3 TM    POOLSW,POOLGTM      IS POOL AVAILABLE FOR GETMAINS       O 007150
         BZ    GETMAIN4            BR IF NOT TO GET NEXT POOL           O 007160
         TM    POOLSW,POOLWORK     IS POOL BEING USED BY WORKFILE       O 007170
         BO    GETMAIN4            BR TO GET NEXT POOL IF YES           O 007180
         L     R3,GETMNLEN         GET LENGTH OF THIS POOL              O 007190
         CR    R2,R3               TEST IF REQUIRED LENGTH WILL FIT     O 007200
         BNH   GETMAIN1            BR IF POOL LARGE ENOUGH              O 007210
GETMAIN4 LA    R15,POOLLGTH(,R15)  INCREMENT TO NEXT POOL               O 007220
         BCT   R14,GETMAIN3        LOOP BACK IF ANY LEFT                O 007230
         OI    SWERROR,SWEGETM     SET ON ERROR SWITCH                  O 007240
         LR    R0,R2               PLACE REQUIRED LENGTH IN R0          O 007250
         A     R2,$GETMXES         ADD PREVOUS GETMAIN EXCESS TO THIS   O 007260
         ST    R2,$GETMXES         PRESERFE UPDTED EXCESS AMOUNT        O 007270
         LR    R2,R0               RESTORE LENGT FOR SUBSEQUENT INITIL  O 007280
       GETMAIN R,LV=(0)            ACQUIRE CORE                         O 007290
         B     GETMAIN2            GO RECORD & INITIALISE               O 007300
GETMAIN1 SR    R3,R2               DECREMENT UNALLOCATED COUNTER        O 007310
         ST    R3,GETMNLEN         STORE RESIDUAL LENGTH                O 007320
         L     R1,GETMNPOS         GET ADDRESS OF START OF POOL         O 007330
         AR    R1,R3               INCREMENT TO START OF ALLOCATION     O 007340
GETMAIN2 L     R3,$GETMUSD         GET COUNT OF CORE ALLOCATED          O 007350
         AR    R3,R2               ADD THIS REQUEST ...                 O 007360
         ST    R3,$GETMUSD          ... AND STORE COUNT                 O 007370
         CBAL  R4,OOINIT           INITIALISE AREA TO LOW-VALUES        O 007380
        SUBOUT RESTORE=R4          RETURN TO CALLER                     O 007390
         DROP  R15                 DROP POOL C/B ADDRESSABILITY         O 007400
         TITLE 'INITIALISE AREA OF CORE TO LOW-VALUES'                  O 007410
*********************************************************************** O 007420
*        ROUTINE TO INITIALISE AN AREA OF CORE TO LOW-VALUES.         * O 007430
*         ON ENTRY, R1 POINTS AT THE AREA AND R2 CONTAINS THE         * O 007440
*         LENGTH.                                                     * O 007450
*********************************************************************** O 007460
         SPACE 1                                                        O 007470
OOINIT   SUBIN SAVE=(R1,R2,R4)     PRSERVE REGISTERS                    O 007480
OOINIT1  MVI   0(R1),X'00'         MOVE IN PROPAGATION CHARACTER        O 007490
         LA    R3,1(,R1)           POINT R3 AT R1 + 1                   O 007500
         BCTR  R2,0                DECREMENT LENGTH FOR OFFSET + 1      O 007510
         CBAL  R4,VARMOVE          PRRFORM VARIABLE LENGTH PROPAGATION  O 007520
        SUBOUT RESTORE=(R1,R2,R4)  RESTORE REGISTERS & RETURN           O 007530
         TITLE 'BUDGIE3O - PL CONVERSION ROUTINES'                      O 007540
*********************************************************************** O 007550
*        THIS SUBROUTINE CONVERTS A TWO-BYTE POSITION AND             * O 007560
*         ONE-BYTE LENGTH INTO TWO ONE-BYTE BINARY FIELDS.            * O 007570
*         IF AN INPUT FIELD IS NON-NUMERIC - LEADING BLANKS           * O 007580
*         AND ALL BLANK FIELDS ARE VALID - AN ERROR MESSAGE           * O 007590
*         IS WRITTEN AND THE JOB TERMINATED.  ON ENTRY R2             * O 007600
*         POINTS AT THE INPUT 'PPL' AND R3 POINTS AT THE              * O 007610
*         OUTPUT 'PL'.                                                * O 007620
*        NOTE THAT, IF PARM=PPL+ WAS SPECIFIED, A '-' OVERPUNCH ON    * O 007630
*         THE 1ST DIGIT REPESENTS A LEADING '1', AND '&' IS A '2'.    * O 007640
*********************************************************************** O 007650
         SPACE 1                                                        O 007660
PPLPL    SUBIN SAVE=R4             CONVERT EBCDIC PPL TO BINARY PL      O 007670
         MVI   PPLOP,X'FF'         ASSUME PPL HAS NO OVERPUNCH          O 007680
         TM    YPSWITCH,YPSWPLOP   IS OVERPUNCH VALID                   O 007690
         BZ    PPLPL01             BR IF NOT VALID                      O 007700
         CLI   0(R2),C' '          IS 1ST BYTE OF PPL BLANK             O 007710
         BE    PPLPL01             BR IF BLANK                          O 007720
         MVC   PPLOP,0(R2)         PRESERVE OVERPUNCH IF ANY            O 007730
         OI    0(R2),X'F0'         OVERRIDE OVERPUNCH IF ANY            O 007740
PPLPL01  EQU   *                   CONTINUE PROCESSING                  O 007750
         XC    0(2,R3),0(R3)       SET TO $ZERO LEST BLANK              O 007760
         LA    R1,0(,R2)           POINT R1 AT PP                       O 007770
         LA    R15,2               SET R15 TO LENGTH OF PP              O 007780
         CBAL  R4,NUMERIC          VERIFY FIELD IS NUMERIC              O 007790
         BH    PPLPLX              EXIT IF NON-NUMERIC                  O 007800
         BL    PPLPL02             BYPASS MATHS IF BLANK                O 007810
         PACK  $WRKDUBL,0(2,R2)    PACK PP                              O 007820
         CVB   R1,$WRKDUBL         CONVERT PP TO BINARY                 O 007830
         TM    PPLOP,X'20'         WQS THERE A '-' OVERPUNCH            O 007840
         BO    *+8                 BR IF NOT                            O 007850
         LA    R1,100(,R1)         INSERT LEADING '1' IFYES             O 007860
         TM    PPLOP,X'10'         WAS IT IN FACT A '&' OVERPUNCH       O 007870
         BO    *+8                 BR IF NOT                            O 007880
         LA    R1,100(,R1)         ADD A FURTHER 100 IF YES             O 007890
         STC   R1,0(R3)            STORE BINARY P                       O 007900
PPLPL02  LA    R1,2(,R2)           POINT R1 AT 'L'                      O 007910
         LA    R15,1               SET R15 TO LENGTH OF L               O 007920
         CBAL  R4,NUMERIC          VERIFY FIELD NUMERIC                 O 007930
         EJECT                                                          O 007940
*********************************************************************** O 007950
*        PPL TP PL CONVERSION ( CONT'D )                              * O 007960
*********************************************************************** O 007970
         SPACE 1                                                        O 007980
         BH    PPLPLX              EXIT IF NON-NUMERIC                  O 007990
         BL    *+18                BYPASS MATHS IF BLANK                O 008000
         PACK  $WRKDUBL,2(1,R2)    PACK L                               O 008010
         CVB   R1,$WRKDUBL         CONVERT L TO BINARY                  O 008020
         STC   R1,1(R3)            STORE BINARY L                       O 008030
         CBAL  R4,PLVERIF          ENSURE FIELD IS WITHIN BOUNDS        O 008040
PPLPLX SUBOUT RESTORE=R4           RESTORE AND RETURN TO CALLER         O 008050
         EJECT                                                          O 008060
*********************************************************************** O 008070
*        THIS SUB-ROUTINE CONVERTS A TWO-BYTE POSITION AND A          * O 008080
*         TWO-BYTE LENGTH INTO TWO ONE-BYTE BINARY FIELDS.            * O 008090
*         IF AN INPUT FIELD IS NON-NUMERIC - LEADING BLANKS           * O 008100
*         AND ALL BLANK FIELDS ARE VALID - AN ERROR MESSAGE           * O 008110
*         IS WRITTEN AND THE JOB TERMINATED.  ON ENTRY, R2            * O 008120
*         POINTS AT THE INPUT PPLL AND R3 POINTS AT THE               * O 008130
*         OUTPUT PL.                                                  * O 008140
*********************************************************************** O 008150
         SPACE 1                                                        O 008160
PPLLPL   SUBIN SAVE=R4             CONVERT EBCDIC PPLL TO BINARY PL     O 008170
         XC    0(2,R3),0(R3)       $ZEROISE RESULT LEST BLANK           O 008180
       NUMERIC (R2),2              VERIFY PP NUMERIC                    O 008190
         BH    PPLLPLX             EXIT IF NON-NUMERIC                  O 008200
         BL    *+18                BYPASS MATHS IF BLANK                O 008210
         PACK  $WRKDUBL,0(2,R2)    PACK PP                              O 008220
         CVB   R1,$WRKDUBL         CONVERT PP TO BINARY                 O 008230
         STC   R1,0(R3)            STORE BINARY P                       O 008240
       NUMERIC 2(,R2),2            VERIFY LL NUMERIC                    O 008250
         BH    PPLLPLX             EXIT IF NON-NUMERIC                  O 008260
         BL    *+18                BYPASS MATHS IF BLANK                O 008270
         PACK  $WRKDUBL,2(2,R2)    PACK LL                              O 008280
         CVB   R1,$WRKDUBL         CONVERT LL TO BINARY                 O 008290
         STC   R1,1(R3)            STORE BINARY L                       O 008300
         CBAL  R4,PLVERIF          ENSURE FIELD IS WITHIN BOUNDS        O 008310
PPLLPLX  EQU   *                   RETURN POINT FOR ERRORS IN USER RTN  O 008320
        SUBOUT RESTORE=R4          RETURN TO CALLER                     O 008330
         EJECT                                                          O 008340
*********************************************************************** O 008350
*        THIS SUB-ROUTINE CONVERTS A THREE-BYTE POSITION AND          * O 008360
*         A TWO-BYTE LENGTH INTO TWO ONE-BYTE BINARY FIELDS.          * O 008370
*         IF AN INPUT FIELD IS NON-NUMERIC - LEADING BLANKS           * O 008380
*         AND ALL BLANK FIELDS ARE VALID - AN ERROR MESSAGE           * O 008390
*         IS WRITTEN AND THE JOB TERMINATED.  ON ENTRY, R2            * O 008400
*         POINTS AT THE INPUT 'PPPLL' AND R3 POINTS AT THE            * O 008410
*         OUTPUT 'PL'.                                                * O 008420
*********************************************************************** O 008430
         SPACE 1                                                        O 008440
PPPLLPL  SUBIN SAVE=R4             CONVERT EBCDIC PPPLL TO PL           O 008450
         XC    0(2,R3),0(R3)       $ZEROISE RESULT LEST BLANK           O 008460
       NUMERIC (R2),3              VERIFY PPP NUMERIC                   O 008470
         BH    PPPLLPLX            EXIT IF NON-NUMERIC                  O 008480
         BL    *+18                BYPASS MATHS IF BLANK                O 008490
         PACK  $WRKDUBL,0(3,R2)    PACK PPP                             O 008500
         CVB   R1,$WRKDUBL         CONVERT PPP TO BINARY                O 008510
         STC   R1,0(R3)            STORE BINARY P                       O 008520
       NUMERIC 3(,R2),2            VERIFY LL IS NUMERIC                 O 008530
         BH    PPPLLPLX            EXIT IF NON-NUMERIC                  O 008540
         BL    *+18                BYPASS MATHS IF BLANK                O 008550
         PACK  $WRKDUBL,3(2,R2)    PACK LL                              O 008560
         CVB   R1,$WRKDUBL         CONVERT LL TO BINARY                 O 008570
         STC   R1,1(R3)            STORE BINARY L                       O 008580
         CBAL  R4,PLVERIF          ENSURE FIELD IS WITHIN BOUNDS        O 008590
PPPLLPLX SUBOUT RESTORE=R4         RESTORE AND RETURN                   O 008600
         EJECT                                                          O 008610
*********************************************************************** O 008620
*        THIS SUB-ROUTINE CONVERTS A THREE-BYTE POSITION AND A        * O 008630
*         ONE-BYTE LENGTH INTO TWO ONE-BYTE BINARY FIELDS.  IF AN     * O 008640
*         INPUT FIELD IS NON-NUMERIC - ALL BLANK FIELDS AND LEADIN    * O 008650
*         BLANKS ARE VALID - AN ERROR MESAGE IS WRITTEN AND THE JOB   * O 008660
*         IS TERMIAATED.  ON ENTRY, R2 POINTS AT THE INPUT 'PPPL',    * O 008670
*         AND R3 POINTS AT THE PUTPUT 'PL'.                           * O 008680
*********************************************************************** O 008690
         SPACE 1                                                        O 008700
PPPLPL   SUBIN SAVE=R4             PRESERVE RETURN ADDRESS              O 008710
         XC    0(2,R3),0(R3)       $ZEROISE RESULT LEST BLANK           O 008720
       NUMERIC (R2),3              VERIFY PPP IS NUMERIC                O 008730
         BH    PPPLPLX             EXIT IF NON-NUMERIC                  O 008740
         BL    *+18                BYPASS MATHS IF BLANK                O 008750
         PACK  $WRKDUBL,0(3,R2)    PACK PPP                             O 008760
         CVB   R1,$WRKDUBL         CONVERT PPP TO BINARY                O 008770
         STC   R1,0(R3)            STORE BINARY P                       O 008780
       NUMERIC 3(,R2),1            VERIFY THAT L IS NUMERIC             O 008790
         BH    PPPLPLX             EXIT IF NON-NUMERIC                  O 008800
         BL    *+18                BYPASS MATHS IF BLANK                O 008810
         PACK  $WRKDUBL,3(1,R2)    PACK 'L'                             O 008820
         CVB   R1,$WRKDUBL         CONVERT L TO BINARY                  O 008830
         STC   R1,1(R3)            STORE BINARY L                       O 008840
         CBAL  R4,PLVERIF          ENSURE FIELD IS WITHIN BOUNDS        O 008850
PPPLPLX SUBOUT RESTORE=R4          RESTORE AND RETURN                   O 008860
         EJECT                                                          O 008870
*********************************************************************** O 008880
*        ENSURE THAT PL IS WITHIN BOUNDS OF WORK AREA                 * O 008890
*********************************************************************** O 008900
         SPACE 1                                                        O 008910
*        THIS ROUTINE ENSURES THAT 'P + L - 1' DOES NOT EXCEED THE      O 008920
*         RECORD||WORK AREA LENGTH.                                     O 008930
         SPACE 1                                                        O 008940
PLVERIF  SUBIN SAVE=R4             PRESERVE RETURN ADDRESS              O 008950
         OC    0(2,R3),0(R3)       DOES PL EXIST                        O 008960
         BZ    PLVERIFX            EXIT IF NOT                          O 008970
         CLI   1(R3),0             SI LENGTH SPECIFIED AS ZERO          O 008980
         BNE   PLVERIF2            BR IF NOT ZERO LENGTH                O 008990
         LINE  LINE01              WARN OF ZERO LENGTH SPECIFICATION    O 009000
PLVERIF2 SR    R1,R1               ZEROISE WORK REGISTER                O 009010
         SR    R15,R15             ZEROISE WORK REGISTER                O 009020
         IC    R1,0(R3)            RETRIEVE 'P'                         O 009030
         CH    R1,=H'256'          DOES 'PPP' EXCEED ADDRESSABILITY LIM O 009040
         BNH   PLVERIF3            BR IF ADDRESSABILITY NOT EXCEEDED    O 009050
         LINE  LINE02              ISSUE ERROR MESSAGE                  O 009060
         B     PLVERIFE            GO FLAG AS CRITICAL ERROR            O 009070
PLVERIF3 IC    R15,1(R3)           RETRIEVE 'L'                         O 009080
         AR    R1,R15              ADD 'L' TO 'P'                       O 009090
         BCTR  R1,0                SUBTRACT 1 TO YIELD 'P + L - 1'      O 009100
         CH    R1,$RECLINT         IS THIS HIGHEST PP+L YET FOUND       O 009110
         BL    PLVERIFX            EXIT IF NOT HIGHEST PP+L YET FOUND   O 009120
         STH   R1,$RECLINT         PRESERVE NEW VALUE AS INTERNAL RECL  O 009130
         B     PLVERIFX            GO TO EXIT                           O 009140
PLVERIF1 CH    R1,$RECLUT2         DOES FIELD EXCEED RECORD LENGTH      O 009150
         BH    PLVERIFE            GO TELL OF ERROR IF YES              O 009160
         B     PLVERIFX            GO TO EXIT                           O 009170
PLVERIFE OI    SWERROR,SWEFLUSH    SET TO FLUSH AFTER C/C PROCESSING    O 009180
         MVI   $COMPCDE+1,COND16   SET COND CODE                        O 009190
         LINE  LINE09              PRINT ERROR MESSAGE                  O 009200
PLVERIFX SUBOUT RESTORE=R4         RESTORE AND RETURN TO CALLER         O 009210
         TITLE 'BUDGIE3O - EXECUTED INSTRUCTIONS'                       O 009220
*********************************************************************** O 009230
*        EXECUTED INSTRUCTIONS                                        * O 009240
*********************************************************************** O 009250
         SPACE 1                                                        O 009260
SFPACK   PACK  $WRKDUBL,0(0,R1)    EXECUTED PACK INSTRUCTION            O 009270
         TITLE 'BUDGIE3O - MISCELLANEOUS CONSTANTS AND FIELDS'          O 009280
PARMR7R9 DS    3F                  SAVE AREA FOR PARM REGS              O 009290
GETMMASK DC    X'FFFFFFF8'         SET OFF LOW ORDER 3 BITS             O 009300
GETMASK2 DC    X'FFFFFFFC'         SET OFF LOW ORDER 2 BITS             O 009310
         SPACE 1                                                        O 009320
LINE01   DC    C'PRTO-001-W  THE PRECEDING CONTROL CARD SPECIFIES A FIE*O 009330
               LD OF ZERO LENGTH: RESULTS ARE UNPREDICTABLE'            O 009340
LINE02   DC    C'PRTO-002-C  THE PRECEDING CONTROL CARD SPECIFIES A ''PPO 009350
               PP'' GREATER THAN 256: FIELD INACCESSIBLE'               O 009360
LINE06   DC    C'BDG3O-006-I  THERE IS NO PARM'                         O 009370
LINE09   DC    C'BDG3O-009-C  THE PRECEDING CONTROL CARD DEFINES A FIEL*O 009380
               D THAT EXTENDS BEYOND THE RECORD||WORK AREA'             O 009390
LINE10   DC    C'BDG3O-010-I  THE CONTENTS OF THE PARM FIELD ARE - '    O 009400
LINE11   DC    C'BDG3O-011-E  PARM SUBFIELD IS NON-NUMERIC - DEFAULT VA*O 009410
               LUE USED - '                                             O 009420
LINE12   DC    C'BDG3O-012-I   '''                                      O 009430
LINE25   DC    C'BDG3O-025-E  UNRECOGNISABLE OR INVALID SUB-FIELD IN TH*O 009440
               E PARM - '                                               O 009450
         SPACE 1                                                        O 009460
PPLOP    DS    CL1                 SAVE AREA FOR PPL OVERPUNCH          O 009470
SFNN     DC    X'0F'               USED TO ALTER DEFAULT NUMERIC TEST   O 009480
SFNS     DC    X'10'               USED TO ALTER DEFAULT NUMERIC TEST   O 009490
SFNZ     DC    X'11'               USED TO ALTER DEFAULT NUMERIC TEST   O 009500
SFNB     DC    X'12'               USED TO ALTER DEFAULT NUMERIC TEST   O 009510
SFNM     DC    X'4D'               USED TO ALTER DEFAULT NUMERIC TEST   O 009520
SFUS     DC    X'49'               USED TO ALTER DEFAULT NUMERIC TEST   O 009530
SFUZ     DC    X'4A'               USED TO ALTER DEFAULT NUMERIC TEST   O 009540
SFUB     DC    X'4B'               USED TO ALTER DEFAULT NUMERIC TEST   O 009550
         SPACE 1                                                        O 009560
        SCSEND O                   TERMINATE CSECT BUDGIE3A             O 009570
         END                                                            O 009580
         SPACE 1                                                        O 009590
         REPRO                                                          O 009600
 IDENTIFY BUDGIE30('INITIALISATION ROUTINES')                           O 009610
         END                                                            O 009620
