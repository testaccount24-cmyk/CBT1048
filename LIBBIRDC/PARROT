         MACRO                                                            000100
         $CB   &PRINT=OFF          MACRO TO GENERATE DSECTS               000200
         PUSH  PRINT               PRESERVE PRINT OPTIONS                 000300
         PRINT &PRINT              SET PRINT OPTIONS FOR DSECTS           000400
               EJECT                                                      000500
         CSECTID ,                 CSECT IDENTIFYING PREFIX               000600
               EJECT                                                      000700
         EQUATES ,                 GENERATE EQUATES                       000800
               EJECT                                                      000900
         IHARB ,                   REQUEST BLOCK                          001000
               EJECT                                                      001100
         MONITREC ,                MONITOR DATA RECORD                    001200
               EJECT                                                      001300
         RTNDES ,                  ROUTINE DESCRIPTOR DSECT               001400
               EJECT                                                      001500
         SPD   ,                   STORAGE POOL DEFINITION                001600
         POP   PRINT               RESTORE ORIGINAL PRINT OPTIONS         001700
         MEND                                                             001800
         EJECT                                                            001900
PARROT   CSECT ,                   PARROT MAIN MODULE                     002000
         SPACE 5                                                          002100
         $CB   ,                   GENERATE DSECTS AND EQUATES            002200
         TITLE 'PARROT - CENTRAL CONTROL BLOCK'                           002300
***********************************************************************   002400
*        CCB - CENTRAL CONTROL BLOCK                                  *   002500
***********************************************************************   002600
         SPACE 1                                                          002700
         ENTRY #IOERROR            SYSNAD EXIT AD-CON FOR DCB'S           002800
         ENTRY STIMREGS            REGISTER SAVE AREA FOR STIMER EXIT     002900
         SPACE 1                                                          003000
         WXTRN PARROTA,PARROTB,PARROTC,PARROTD,PARROTE,PARROTF            003100
         WXTRN PARROTG,PARROTH,PARROTI,PARROTJ,PARROTK,PARROTK1,PARROTL   003200
         WXTRN PARROTM,PARROTN,PARROTO,PARROTP,PARROTQ,PARROTR,PARROTS    003300
         WXTRN PARROTT,PARROTU,PARROTV,PARROTW,PARROTX,PARROTY,PARROTZ    003400
         WXTRN PARENDA,PARENDB,PARENDC,PARENDD,PARENDE,PARENDF,PARENDG    003500
         WXTRN PARENDH,PARENDI,PARENDJ,PARENDK,PARENDK1,PARENDL           003600
         WXTRN PARENDM,PARENDN,PARENDO,PARENDP,PARENDQ,PARENDR,PARENDS    003700
         WXTRN PARENDT,PARENDU,PARENDV,PARENDW,PARENDX,PARENDY,PARENDZ    003800
         WXTRN PARROTC1,PARROTC2,PARENDC1,PARENDC2,PARROTB1,PARENDB1      003900
         WXTRN PARROTA1,PARENDA1,PARROTA2,PARENDA2,PARROTC3,PARENDC3      004000
         WXTRN PARROTC4,PARENDC4,PARROTE1,PARENDE1,PARROTO1,PARENDO1      004100
         WXTRN PARROTA3,PARENDA3                                          004200
PARROT   CSECT                                                            004300
         USING PARROT,R15          ESTABLISH TEMPORARY ADDRESSABILITY     004400
         NOP   *                   NO-OP TO FORCE DOUBLE-WORD ALIGNMENT   004500
         B     $CCBEND             BR AROUND PRIMARY CNTROL BLOCK         004600
         DROP  R15                 DROP R15 FOR CCB DEFINITION            004700
         USING CCBNTRY,R13         ESTABLISH CSECT ADDR FOR CCB DEFIN'N   004800
        VERSID  ,                  GENERATE CCB PREFIX                    004900
         CCB   DSECT=NO            GENERATE CCB                           005000
         TITLE 'PARROT - INITILISATION'                                   005100
***********************************************************************   005200
*        HOUSEKEEPING                                                 *   005300
***********************************************************************   005400
         DROP  R13                 DROP CSECT ADDR'Y TEMPORARILY          005500
         USING PARROT,R15          RE-ESTABLISH TEMPORARY ADDRESSABILIY   005600
         SPACE 1                                                          005700
         STM   R14,R12,12(R13)     PRESERVE REGISTERS IN SUPERVISORS SA   005800
         LA    R12,$SAVAREA        POINT R12 AT SAVE AREA                 005900
         ST    R12,8(R13)          POINT LAST SAVE AREA AT THIS ONE       006000
         ST    R13,4(R12)          POINT THIS SAVE AREA AT LAST ONE       006100
         LR    R13,R12             POINT R13 AT CURRENT SAVE AREA         006200
         LA    R11,2048(,R13)      ESTABLISH ...                          006300
         LA    R11,2048(,R11)       ... SECOND BASE REGISTER              006400
         DROP  R15                 DROP TEMPORARY ADDRESSABILITY          006500
         SPACE 1                                                          006600
         USING CCBNTRY,R13,R11     ESTABLISH CCB/CSECT ADDRESSABILITY     006700
         SPACE 5                                                          006800
         ST    R13,SAVER13         PRESERVE CCB/CSECT BASE FOR TIMER XT   006900
         ST    R11,SAVER11         PRESERVE SECOND BASE REGISTER VALUE    007000
         SPACE 3                                                          007100
         B     CONTINUE            BRANCH AROUND WORK AREAS               007200
         SPACE 1                                                          007300
*        THESE FIELDS MUST BE ADDRESSABLE BY THE FIRST BASE REGISTER      007400
         SPACE 1                                                          007500
SAVER13  DC    F'0'                SAVE AREA OF CCB ADDRESS FOR EXITS     007600
SAVER11  DC    F'0'                SAVE AREA FOR SECOND PARROT BASE REG   007700
CBALREGS DC    20F'0'              SAVE AREA FOR PREVIOUS 5 CBAL'S        007800
CBALRTD  DC    F'0'                CBAL: ROUTINE DESCRIPTOR ADDRESS       007900
CBALRTN  DC    F'0'                CBAL: ROUTINE ADDRESS                  008000
CBALR12  DC    F'0'                CBAL: CALLER'S BASE REGISTER           008100
CBALR4   DC    F'0'                CBAL: CALLER'S RETURN ADDRESS          008200
CONTINUE EQU   *                   CONTINUE PROCESSING                    008300
         EJECT                                                            008400
***********************************************************************   008500
*        ESTABLISH ESTAE ENVIRONMENT                                  *   008600
***********************************************************************   008700
         SPACE 1                                                          008800
         TM    SWPARM2,MPRMNSTA    IS NOSTAE ZAPPED INTO CCB              008900
         BO    ESTAEX              THEN BYPASS ESTAE                      009000
         ESTAE $STAEXIT,           NAME OF ESTAE EXIT                  *  009100
               PURGE=NONE,         ALLOW I/O TO CONTINUE               *  009200
               ASYNCH=YES,         ALLOW ASYNCHRONOUS EXIT PROCESSING  *  009300
               TERM=YES            INTERCEPT OPERATOR CANCEL, ETC         009400
ESTAEX   EQU   *                   CONTINUE PROCESSING                    009500
         TITLE 'PARROT - MAIN-LINE LOGIC'                                 009600
***********************************************************************   009700
*        INITIALISATION                                               *   009800
***********************************************************************   009900
         SPACE 1                                                          010000
INITLNE0 OI    $STATUS,STATINIT    FLAG THAT INITIALISATION IN PROCESS    010100
        STIMER TASK,$STIMEND,DINTVL=$DINTVL SET TIMER LEST ERRORS         010200
         CBAL  R4,FINDRTN          DETERMINE WHICH CSECT CONTAINS RTNS    010300
         CBAL  R4,CALCSIZ          DETERMINE SIZE OF ALL CSECTS           010400
         CBAL  R4,INITPH1          1ST PHASE OF INITIALISATION            010500
         CBAL  R4,INITPRM          PARM FIELD PROCESSING                  010600
         CBAL  R4,READCC           READ CONTROL CARDS                     010700
         CBAL  R4,FREECS1          CONVERT UNWANTED CSECTS TO POOLS       010800
         CBAL  R4,JOINCB2          INTERCONNECT CONTROL BLOCKS            010900
         CBAL  R4,JOINCB           INTERCONNECT CONTROL BLOCKS CONT'D     011000
         CBAL  R4,INITPH2          2ND PHASE OF INITIALISATION            011100
         CBAL  R4,BLDFSAS          CONSTRUCT ANY REQUIRED FSA'S           011200
         CBAL  R4,FREECS2          CONVERT UNWANTED CSECTS TO POOLS       011300
         OI    $PROCESS,PROCKEYH   SIMULATE KEY-BREAK TRIGGERED HEADING   011400
         OI    $PROCESS,PROCINIT   SET 1ST-TIME SWITCH FOR MAIN-LINE      011500
        TTIMER CANCEL              CANCEL LOOP-DETECTING STIMER           011600
         NI    $STATUS,FF-STATINIT SET OFF INITIALISATION INDICATOR       011700
         EJECT                                                            011800
***********************************************************************   011900
*        INITIALISATION ( CONT'D )                                    *   012000
***********************************************************************   012100
         SPACE 1                                                          012200
         TM    SWPARM,MPRMMON      IS SELF-MONITORING REQUIRED            012300
         BZ    INITLNE1            BR IF NOT                              012400
         NI    SWPARM,FF-MPRMSTIM  SET OFF INCOMPATIBLE STIMER REQUEST    012500
         TM    SYSMONTR+IOPSSW,IOSWPRES ENSURE MONITOR DATA SET PRESENT   012600
         BZ    INITLNE1            BYPASS SETTING MONITOR IF NO D/S       012700
         CBAL  R4,PUTMON           RETRIEVE 1ST MONITOR BUFFER ADDRESS    012800
        STIMER TASK,$MONITOR,TUINTVL=$MONINT START MONITOR                012900
INITLNE1 EQU   *                   CONTINUE PROCESSING                    013000
         EJECT                                                            013100
***********************************************************************   013200
*        MAIN-LINE LOGIC                                              *   013300
***********************************************************************   013400
         SPACE 1                                                          013500
MAINLNE0 EQU   *                   START OF MAIN-LINE LOGIC               013600
         CBAL  R4,GETIREC          GET NEXT REQUIRED INPUT RCORD          013700
         BNE   MAINLNE1            EXIT IF EOD                            013800
         CBAL  R4,PUTUT2           WRITE OUT SELECTED RECORD              013900
         CBAL  R4,KEYBRAK          PERFROM KEY BREAK PROCESSING           014000
         CBAL  R4,DETAIL           PERFORM DETAIL RECORD PROCESSING       014100
         NI    $PROCESS,FF-PROCINIT SET OFF MAIN-LINE 1ST-TIME SWITCH     014200
         XC    $INDS(6),$INDS      SET OFF INDICATORS 00-47               014300
         B     MAINLNE0            GO GET NEXT INPUT RECORD               014400
MAINLNE1 EQU   *                   CONTINUE PROCESSING                    014500
         OI    $STATUS,STATEOD     FLAG THAT EOD ON INPUT HAS OCCURRED    014600
         OI    $STATUS2,STAT2EOF   SET SECONDARY FLAG FOR EOF.            014700
         MVC   $PTRKBD,$KBDKBD     SET KEY BREAK KBD ADDRESS TO 1ST       014800
         CP    $ARECCNT,$ZERO      WERE ANY RECORDS PROCESSED             014900
         BNE   MAINLNE2            BR IF RECORDS WERE SELECTED            015000
         CBAL  R4,DETLHD           PRINT HEADINGS: NOT YET DONE           015100
MAINLNE2 CBAL  R4,KEYBRAK          PERFORM EOF TOTAL PROCESSING           015200
         CBAL  R4,TW80TOT          PERFORM FILE TOTAL TWENTY80 ANALYSIS   015300
         EJECT                                                            015400
***********************************************************************   015500
*        TERMINATION                                                  *   015600
***********************************************************************   015700
         SPACE 1                                                          015800
TERMLNE1 EQU   *                   CONTINUE PROCESSING                    015900
        TTIMER CANCEL              CANCEL ANY STIMERS (MONITOR OR LOOP)   016000
         CBAL  R4,TERMPH1          1ST PHASE OF TERMINATION               016100
        PGMOUT RC=$COMPCDE         SET COND CODE AND RETURN               016200
         TITLE 'PARROT - ESTABLISH ''CBAL'' LINKAGE TO SUB-ROUTINES'      016300
***********************************************************************   016400
*        ESTABLISH CBAL LINKAGE                                       *   016500
***********************************************************************   016600
         SPACE 1                                                          016700
*        THIS ROUTINE ESTABLISHES THE NECESSARY LINKAGE TO PASS CONTROL   016800
*         TO ( I.E. TO PERFORM ) A ROUTINE IN ANOTHER CSECT.  IT          016900
*         PERFROMS THE FOLLOWING FUCTIONS:-                               017000
*              . PRESERVES THE CURRENT SUB-CSECT BASE REGISTER IN CCB     017100
*              . DETERMINES AND ESTABLISHES BASE OF DESTINATION CSECT     017200
*              . BRANCHES TO THE REQUIRED ROUTINE                         017300
         SPACE 1                                                          017400
*        THIS ROUTINE UTILISES THE CCB FIELDS ASSOCIATED WITH THE         017500
*         REQUIRED ROUTINE, AND WHICH COMPRISE:-                          017600
*              . V(ROUTINE)                                               017700
*              . XL1'CSECT SUFFIX NUMBER'                                 017800
*              . AL3(SAVE AREA FOR CURRENT SUB-CSECT BASE REGISTER )      017900
         SPACE 1                                                          018000
*        ON ENTRY TO THIS ROUTINE :-                                      018100
*              R4  - BAL RETURN ADDRESS                                   018200
*              R9  - POINTER TO CCB ROUTINE DEFINITION                    018300
*              R12 - CURRENT SUB-CSECT BASE REGISTER (AT TIME CBAL ISSU   018400
         SPACE 1                                                          018500
*        ON EXIT :-                                                       018600
*              R9  - ROUTINE ADDRESS                                      018700
*              R12 - NEW BASE REGISTER ( FOR ROUTINE TO BE BAL'ED )       018800
*        ALL OTHER REGISTERS ARE UNCHANGED                                018900
         SPACE 1                                                          019000
CBALINK  SUBIN ,                   ENTER ROUTINE                          019100
         MVC   CBALREGS(80),CBALREGS+16 SHUFFLE UP LAST 5 DEBUGGING FIE   019200
         ST    R12,CBALR12         PRESERVE CALLER'S BASE FOR DEBUGGING   019300
         ST    R9,CBALRTD          PRESERVE ADDRESS OF RTN DESCRIPTOR     019400
         STCM  R12,7,5(R9)         PRESERVE CURRENT BASE REGISTER VALUE   019500
         SLL   R12,32              ZEROISE R12 WITHOUT CHANGING C/C       019600
         IC    R12,4(R9)           RETRIEVE INDEX TO NEW CSECT BASE REG   019700
         SLL   R12,3               MULTIPLY BY 8 TO CONVERT TO INDEX      019800
         LA    R12,$VPARTA(R12)    POINT AT DESIRED CSECT DEFINITION      019900
         L     R12,0(R12)          RETRIEVE NEW SUBCSECT BASE REGISTER    020000
         L     R9,0(R9)            RETRIEVE ADDRESS OF DESIRED ROUTINE    020100
         ST    R4,CBALR4           PRESERVE RETURN ADDR FOR DEBUGGING     020200
         ST    R9,CBALRTN          PRESERVE ROUTINE ADDR FOR DEBUGGING    020300
         BR    R9                  GO TO THE DESIRED ROUTINE              020400
         SPACE 1                                                          020500
*        NOTE THAT THE ROUTINE TO WHICH CONTROL HAS JUST BEEN PASSED      020600
*         WILL RETURN CONTROL DIRECTLY TO THE INSTRUCTION FOLLOWING THE   020700
*         INITIATING 'CBAL', VIA R4 ( WHICH HAS NOT BEEN ALTERED ).       020800
         TITLE 'PARROT - STIMER EXIT TO INTERCEPT LOOPS'                  020900
***********************************************************************   021000
*        STIMEND - STIMER EXIT                                        *   021100
***********************************************************************   021200
         SPACE 1                                                          021300
*        THIS ROUTINE RECEIVES CONTROL AS A RESULT OF A STIMER            021400
*         INTERRUPT, AND CONSEQUENTLY REGISTER CONTENTS ARE               021500
*         UNPREDICTABLE.  R15 CONTAINS THE ADDRESS OF THE ROUTINE         021600
*         ITSELF AT ENTRY, AND IS USED TO ESTABLISH TEMPORARY             021700
*         ADDRESSABILITY, UNTIL THE PROPER BASE REGISTER IS RESTORED.     021800
         SPACE 1                                                          021900
*         THIS ROUTINE PRESERVES THE CURRENT CBAL CONTROL DATA FOR        022000
*         SUBSEQUENT RETRIEVAL BY THE ESTAE ANALYSIS ROUTINES.  ( IF      022100
*         THIS IS NOT DONE, THE ESTAE ROUTINES LABOUR UNDER THE           022200
*         MISAPPREHENSION THAT THE LAST PERTINENT CBAL WAS TO THE ABEND   022300
*         ROUTINE, AND THAT IS NOT A GREAT DEAL OF USE TO ME ).           022400
         SPACE 1                                                          022500
         DROP  R13,R11             DROP BASIC ADDRESSABILITY              022600
STIMEND  SUBIN ,                   ENTER ROUITNE                          022700
         USING $STIMEND,R15        ESTABLISH TEMPORARY ADDRESSABILITY     022800
         STM   R0,R15,STIMREGS     PRESERVE ALL REGISTERS FOR ANALYSIS    022900
         L     R13,SAVER13         RETRIEVE CSECT/CCB BASE REGISTER       023000
         L     R11,SAVER11         RETRIEVE SECOND PARROT BASE REGISTER   023100
         DROP  R15                 DROP TEMPORARY ADDRESSABILITY          023200
         USING CCBNTRY,R13,R11     RE-ESTABLISH BASIC ADDRESSABILITY      023300
         MVC   STIMR12,CBALR12     PRESERVE CURRENT CBAL BASE ADDRESS     023400
         MVC   STIMRTD,CBALRTD     PRESERVE CURRENT CBAL ROUTINE DESC'R   023500
         MVC   STIMRTN,CBALRTN     PRESERVE CURRENT CBAL ROUTINE ADDRSS   023600
         MVC   STIMR4,CBALR4       PRESERVE CURRENT CBAL RETURN ADDRESS   023700
         ABEND 28,FULL             ABNORMALLY TERMINATE                   023800
         SPACE 1                                                          023900
         DS    0F                  ENSURE ALIGNMENT OF MESSAGE & S/A      024000
         DC    C' REGISTER CONTENTS AT ENTRY TO TIMER EXIT : '            024100
STIMREGS DS    16F                 REGISTER SAVE AREA FOR TIMER EXIT      024200
STIMR12  DS    F                   SAVE AREA FOR CBAL BASE REGISTER       024300
STIMRTD  DS    F                   SAVE AREA FOR CBAL ROUTINE DESC'R      024400
STIMRTN  DS    F                   SAVE AREA FOR CBAL ROUTINE ADDR        024500
STIMR4   DS    F                   SAVE AREA FOR CBAL RETURN ADDRESS      024600
         TITLE 'PARROT - ESTAE EXIT INTERFACE ROUTINE'                    024700
***********************************************************************   024800
*        ESTAE EXIT INTERFACE ROUTINE                                 *   024900
***********************************************************************   025000
         SPACE 1                                                          025100
*        THE PURPOSE OF THIS ROUTINE IS TO RE-ESTABLISH PARROT'S          025200
*         ADDRESSABILITY PRIOR TO CALLING THE ERROR ANALYSIS ROUTINE      025300
*         ( 'STAE' IN CSECT PARROTS ), AND TO PRESERVE IN THE CCB ALL     025400
*         INFORMATION PERTAINING TO THE LAST CBAL.                        025500
         SPACE 1                                                          025600
         DROP  R13,R11             DROP BASIC ADDRESSABILITY              025700
STAEXIT  SUBIN ,                   ENTER INTERFACE ROUTINE                025800
         USING $STAEXIT,R15        ESTABLISH TEMPORARY ADDRESSABILITY     025900
         STM   R0,R15,STAEREGS     PRESERVE REGS AT ENTRY TO ESTAE EXIT   026000
         LA    R10,STAEREGS        POINT R11 AT SAVE AREA FOR LATER       026100
         L     R13,SAVER13         RESTORE CCB/CSECT BASE REGISTER        026200
         L     R11,SAVER11         RETRIEVE SECOND PARROT BASE REGISTER   026300
         DROP  R15                 DROP TEMPORARY ADDRESSABILITY          026400
         USING CCBNTRY,R13,R11     RE-ESTABLISH BASIC ADDRESSABILITY      026500
         MVC   $CBALR12,CBALR12    PRESERVE LAST CBAL CALLER'S BASE       026600
         MVC   $CBALRTD,CBALRTD    PRESERVE LAST CBAL RTN DESCRIPTOR      026700
         MVC   $CBALRTN,CBALRTN    PRESERVE LAST CBAL RTN ADDRESS         026800
         MVC   $CBALR4,CBALR4      PRESERVE LAST CBAL RETURN ADDRESS      026900
         LA    R11,CBALREGS        POINT REG11 AT CBAL DEBUG AREA         027000
         CBAL  R4,STAE             GO TO STAE ERRO ANALYSIS ROUTINE       027100
         SPACE 1                                                          027200
*        NOTE THAT CONTROL IS NOT RETURNED FROM THE ERROR ANALYSIS        027300
*         ROUTINE.  WHEN IT HAS COMPLETED PROCESSING, CONTROL IS PASSED   027400
*         TO THE SYSTEM ABDUMP ROUTINES.                                  027500
*        UNDER SOME CIRCUMSTANCES, THE ESTAE ERROR ANALYSIS ROUTINE       027600
*         WILL ATTEMPT A RETRY.  IN THAT CASE, CONTROL WILL BE PASSED     027700
*         ( BY THE SYSTEM ABEND ROUTINES ) TO THE INSTRUCTION AFTER       027800
*         THE FAILING INSTRUCTION.                                        027900
         SPACE 5                                                          028000
STAEREGS DS    16F                 REGISTER SAVE AREA FOR ESTAE EXIT      028100
         TITLE 'PARROT - I/O ERROR EXIT INTERFACE ROUTINE'                028200
***********************************************************************   028300
*        I/O ERROR EXIT INTERFACE ROUTINE                             *   028400
***********************************************************************   028500
         SPACE 1                                                          028600
*        THE PURPOSE OF THIS ROUTINE, WHICH IS SPECIFIED AS THE SYNAD     028700
*         ROUTINE FOR ALL DCB'S, IS TO RE-ESTABLISH PARROT'S              028800
*         ADDRESSABILITY PRIOR TO CALLING THE ERROR ANALYSIS ROUTINE.     028900
*         THIS INTERFACE ALSO DETECTS I/O ERROR RECURSION, AND ABENDS     029000
*         IN THAT EVENT.                                                  029100
         SPACE 1                                                          029200
         DROP  R13,R11             DROP BASIC ADDRESSABILITY              029300
IOEREXIT SUBIN ,                   ENTER ROUTINE                          029400
         USING $IOERROR,R15        ESTABLISH TEMPORARY ADDRESSABILITY     029500
         L     R13,SAVER13         RETRIEVE CCB/CSECT BASE REGISTER       029600
         L     R11,SAVER11         RETRIEVE SECOND PARRTO BASE REGISTER   029700
         DROP  R15                 FROP TEMPORARY ADDRESSABILITY          029800
         USING CCBNTRY,R13,R11     RE-ESTABLISH BASIC ADDRESSABILITY      029900
         L     R5,SYSPRINT+IOPSRECA RETRIEVE SYSPRINT BUFFER ADDRESS      030000
         TM    SWERROR,MERRIOER    HAVE WE ALREADY HAD AN I/O ERROR       030100
         BZ    IOEREX2             BR IF NO PREVIOUS I/O ERROR            030200
         ABEND 84,FULL             RECURSIVE ERROR SO ABEND IMMEDIATELY   030300
IOEREX2  OI    SWERROR,MERRIOER    FLAG THAT I/O ERROR HAS OCCURRED       030400
         CBAL  R4,IOERRTN          GO TO I/O ERROR ANALYSIS ROUTINE       030500
         SPACE 1                                                          030600
*        NOTE THAT CONTROL IS NOT RETURNED FROM THE ERROR ANALYSIS        030700
*         ROUTINE, BECAUSE WHEN IT HAS COMPLETED PROCESSING, IT ABENDS    030800
*         ( WITH A U076 ) TO ENSURE THAT THE ERROR IS NOT OVERLOOKED.     030900
         TITLE ' PARROT - SELF-MONITORING ROUTINE'                        031000
***********************************************************************   031100
*        SELF-MONITORING ROUTINE:  MAIN-LINE                          *   031200
***********************************************************************   031300
         SPACE 1                                                          031400
*        IN ORDER TO OPTIMISE PARROT CODE, IT IS NECESSARY TO DETERMINE   031500
*         WHERE IT SPENDS ITS TIME.  BECAUSE I HAVE NOT YES MODIFIED TH   031600
*         MFT PROBLEM PROGRAM MONITOR FOR MVS, THE FASTEST SOLUTION TO    031700
*         THIS PROBLEM IS TO HAVE PARROT MONITOR ITS OWN EXECUTION.       031800
         SPACE 1                                                          031900
*        THE ROUTINE ISSUES ( TASK ) STIMERS, AND, UPON REGAINING         032000
*         CONTROL, BUILDS A RECORD ( IN THE SAME FORMAT AS THE PROGRAM    032100
*         MONITOR ) IDENTIFYING THE NEXT SEQUENTIAL INSTRUCTION TO BE     032200
*         EXECUTED.  IF THE INSTRUCTION IS WITHIN PARROT CODE, THEN THE   032300
*         RECORD IDENTIFIES THE CSECT, AND CONTAINS THE DISPLACEMENT      032400
*         WITHIN THE CSECT OF THE INSTRUCTION, WHILE IF THE INSTRUCTION   032500
*         IS OUTSIDE PARROT CODE, THEN THE ( VIRTUAL ) ADDRESS OF THE     032600
*         INSTRUCTION IS PLACED IN THE RECORD.                            032700
         SPACE 1                                                          032800
*         THE RECORDS ARE WRITTEN TO 'SYSMONTR', AND SHOULD BE            032900
*          PROCESSED BY THE MONITOR POST-PROCESSOR 'MAPPGM02'.            033000
         SPACE 1                                                          033100
*        BY DEFAULT THE MONITORING INTERVAL IS 38 TIMER UNITS (1/1000     033200
*         SECS ), BUT THIS MAY BE MODIFIED BY THE PARM OPTION THAT        033300
*         TRIGGERS THE SELF-MONITORING FUNCTION :-                        033400
*              PARM='MONITOR(=NN)' NN - FACTOR BY WHICH INTERVAL MULTIP   033500
         EJECT                                                            033600
***********************************************************************   033700
*        SELF-MONITORING ROUTINE:  MAIN-LINE ( CONT'D )               *   033800
***********************************************************************   033900
         SPACE 1                                                          034000
         USING MONITREC,R5         ESTABLISH MONITORING RECORD ADDR'Y     034100
         USING $MONITOR,R15        ESTABLISH TEMPORARY ADDRESSABILITY     034200
         DROP  R13,R11             DROP BASIC ADDRESSABILITY              034300
MONITOR  SUBIN ,                   ENETR ROUTINE                          034400
         STM   R14,R12,12(R13)     PRESERVE REGISTERS IN CONTROL PGM SA   034500
         STM   R0,R15,MONREGS      PRESERVE REGISTERS IN MONITOR S/A      034600
         L     R13,SAVER13         RETRIEVE CSECT/CCB BASE REGISTER       034700
         L     R11,SAVER11         RETRIEVE SECOND PARROT BASE REGISTER   034800
         DROP  R15                 DROP TEMPORARY ADDRESSABILITY          034900
         USING CCBNTRY,R13,R11     RE-ESTABLISH BASIC ADDRESSABILITY      035000
         MVC   MONREGS2(72),0(R13) PRESERVE CURRENT PARROT S/A            035100
         L     R5,SYSMONTR+IOPSRECA RETRIEVE CURRENT RECORD ADDRESS       035200
         L     R3,$RBADDR          RETRIEVE ADDRESS OF PARROT'S RB        035300
         LA    R10,RBOPSW-RBBASIC+4(,R3) POINT AT NSI IN RB'S PSW         035400
         L     R3,0(,R10)          RETRIEVE ADDRESS OF NSI                035500
         LA    R3,0(,R3)           PURIFY ADDR OF NEXT SEQUENTIAL INSTR   035600
         ST    R3,MONRHADR         PRESERVE ADDRESS IN MONITOR RECORD     035700
         MVC   MONWA(3),MONRHADR+1 MOVE ADDRESS TO WORK AREA (NO 0C4)     035800
         UNPK  MONRADDR(7),MONWA(4) 'UNPACK' ADDRESS ELSEWHERE            035900
         TR    MONRADDR,MONHTABL-C'0' HEXPAND THE 'UNPACKED' ADDRESS      036000
         CBAL  R4,MONLOC8,LOOP=NO  DETERMINE WHICH CSECT CONTAINS ADDRE   036100
         CBAL  R4,MONINST,LOOP=NO  ISOLATE AND HEXPAND INSTRUCTION        036200
         CBAL  R4,PUTMON,LOOP=NO   WRITE MONITOR RECORD                   036300
         MVC   0(72,R13),MONREGS2  REFRESH PARROT'S SAVE AREA             036400
        STIMER TASK,$MONITOR,TUINTVL=$MONINT RE-ISSUE STIMER              036500
         LM    R0,R15,MONREGS      RESTROE REGISTERS AS AT ENTRY          036600
        SUBOUT RETURN=(R14)        RETURN TO THE CONTROL PROGRAM          036700
         DROP  R5                  DROP RECORD ADDRESSABILITY             036800
         EJECT                                                            036900
***********************************************************************   037000
*        SELF-MONITORING ROUTINE:  DETERMINE CSECT CONTAINING INSTR   *   037100
***********************************************************************   037200
         SPACE 1                                                          037300
         USING MONITREC,R5         ESTABLISH RECORD ADDRESSABILITY        037400
MONLOC8  SUBIN ,                   ENTER ROUTINE                          037500
         MVC   MONRLOCN,=X'0000'   ASSUMA INSTRUCTION IS BELOW PARROT     037600
         L     R1,MONRHADR         RETRIEVE INSTRUCTION ADDR FROM REC     037700
         LA    R1,0(,R1)           PURIFY INSTRUCTION ADDRESS             037800
         LA    R14,0(,R13)         POINT R14 AT START OF CCB (& PARROT)   037900
         S     R14,=A(CSIDLGTH)    POINT R14 AT PRIMARY PREFIX            038000
         CR    R1,R14              IS ADDRESS BELOW START OF PARROT       038100
         BL    MONLOC8X            GO TO EXIT IF BELOW START OF PARROT    038200
         L     R15,$VPARTA         GET ADDRESS OF END OF PARROT CSECT     038300
         LA    R15,0(,R15)         PURIFY ADDRESS OF UPPER BOUND          038400
         CR    R1,R15              IS INSTRUCTION WITHIN MAIN CSECT       038500
         BNH   MONLOC83            BR IF WITHIN MAIN PARROT CSECT         038600
         SR    R10,R10             ZEROISE WORK REGISTER                  038700
         IC    R10,$NUMPOOL        GET NUMBER OF POOL/CSECT DEFINITIONS   038800
         LA    R2,$VPARTA          POINT AT 1ST CSECT DESCRIPTOR          038900
MONLOC81 LM    R14,R15,0(R2)       RETRIEVE CSECT ADDRESS AND LENGTH      039000
         TM    0(R2),MSPDCSCT      IS THIS A CSECT DEFINITION             039100
         BZ    MONLOC82            BR IF NOT TO GET NEXT DESCRIPTOR       039200
         LA    R14,0(,R14)         PURIFY CSCET START ADDRESS             039300
         LA    R15,0(R15,R14)      COMPUTE PURIFIED END ADDRESS           039400
         CR    R1,R14              IS INSTRUCTION BELOW START OF CSECT    039500
         BL    MONLOC82            GO GET NEXT DESCRIPTOR IF BELOW        039600
         CR    R1,R15              IS INSTRUCTION ABOVE END OF CSECT      039700
         BL    MONLOC83            BR IF ADDRESS WITHIN THIS CSECT        039800
MONLOC82 LA    R2,SPDLGTH(,R2)     INCREMENT TO NEXT DESCRIPTOR           039900
         BCT   R10,MONLOC81        LOOP BACK IF ANY DESCRIPTORS LEFT      040000
         MVC   MONRLOCN,=X'FFFF'   FLAG THAT INSTRUCTION IS ABOVE PARRO   040100
         B     MONLOC8X            GO TO ROUTINE EXIT                     040200
MONLOC83 SR    R1,R14              DETERMINE DISPLACEMENT WITHIN CSECT    040300
         ST    R1,MONWA            PRESERVE DISPLACEMENT                  040400
         UNPK  MONRADDR(7),MONWA+1(4) 'UNPACK' ADDRESS INTO RECORD        040500
         TR    MONRADDR,MONHTABL-C'0' HEXPAND DISPLACEMENT INTO RECORD    040600
         USING CSECTID,R14         ESTABLISH CSECT PREFIX ADDRESSABILIT   040700
         MVC   MONRLOCN,CSIDNAME+6 ADD CSECT SUFFIX TO RECORD             040800
         DROP  R14                 DROP SCECT PREFIX ADDRESSABILITY       040900
MONLOC8X SUBOUT ,                  RETURN TO CALLER                       041000
         DROP  R5                  DROP RECORD ADDRESSABILITY             041100
         EJECT                                                            041200
***********************************************************************   041300
*        SELF-MONITORING ROUTINE:  HEXPAND THE NEXT SEQUENTIAL INSTR  *   041400
***********************************************************************   041500
         SPACE 1                                                          041600
         USING MONITREC,R5         ESTABLISH MONITOR RECORD ADDRESS'Y     041700
MONINST  SUBIN ,                   ENTER ROUTINE                          041800
         L     R3,MONRHADR         REFRESH INSTRUCTION ADDRESS            041900
         SR    R15,R15             ZEROISE WORK REGISTER                  042000
         IC    R15,0(R3)           RETRIEVE 1ST BYTE OF INSTRUCTION       042100
         SRL   R15,6               ISOLATE BITS 0-1 OF THE INSTRUCT COD   042200
         STC   R15,BITS01          STORE BITS 0-1 OF INSTRUCTION CODE     042300
         TR    BITS01,LGTHTABL     DERIVE HEXPANDED EXECUTABLE INST LGT   042400
         UNPK  MONWA,0(7,R3)       'UNPACK' MAXIMUM INSTR + GASH BYTE     042500
         TR    MONWA,MONHTABL-C'0' TRANSLATE INTO HEXPANDED FORMAT        042600
         IC    R15,BITS01          RETRIEVE EXECUTABLE HEXPANDED LGTH     042700
         EX    R15,INSMVC          MOVE INSTRUCTION TO OUTPUT RECORD      042800
        SUBOUT ,                   RETURN TO CALLER                       042900
         DROP  R5                  DROP MONITOR RECORD ADDRESSABILITY     043000
         SPACE 5                                                          043100
MONREGS2 DS    18F                 SAVE AREA FOR PARROT'S SAVE AREA       043200
MONREGS  DS    16F                 SAVE AREA FOR REGISTERS AT ENTRY       043300
INSMVC   MVC   MONRINS-MONITREC(0,R5),MONWA MOVE INSTRUCTION IMAGE        043400
         DS    0F                  ENSURE ALIGNMENT                       043500
MONWA    DS    CL13                HEXPANSION WORK AREA                   043600
MONHTABL DC    C'0123456789ABCDEF' TABLE FOR HEXPANSION                   043700
LGTHTABL DC    X'0307070B'         TRANS TABLE FOR EXEC HEXPANDED INST    043800
BITS01   DC    C' '                WORK AREA FOR INSTRUCTION LENGTH       043900
         TITLE 'PARROT - DUMMY ROUTINE'                                   044000
***********************************************************************   044100
*        DUMMY ROUTINE FOR MISSING CBAL'ED ROUTINES                   *   044200
***********************************************************************   044300
         SPACE 1                                                          044400
*        THE PURPOSE OF THIS ROUTINE IS TO PREVENT AN ABEND IF A          044500
*         ROUTINE THAT HAS NOT YET BEEN WRITTEN IS INVOKED BY CBAL.       044600
*         THE INITIALISATION ROUTINE 'FINDRTNS' SUBSTITUTES THE ADDRESS   044700
*         OF THIS ROUTINE IN ANY ROUTINE DEFINITION THAT CONTAINS A       044800
*         ZERO ADDRESS, OR WHICH DEFINES A ROUTINE THAT CANNOT BE         044900
*         ASSOCIATED WITH ANY KNOWN CSECT.                                045000
         SPACE 1                                                          045100
NULLRTN  SUBIN ,                   ENTER ROUTINE                          045200
         OI    SWERROR,MERRCBAL    FLAG THAT NON-EXISTENT ROUTINE INVOK   045300
         USING RTNDNTRY,R9         ESTABLISH RTN DESCRIPTOR ADDR'Y        045400
         L     R9,CBALRTD          RETRIEVE ADDRESS OF ROTINE DESCRIPTO   045500
         OI    RTNDFLAG,RTNFCBAL   FLAG THAT ROUTINE ILLEGALLY INVOKED    045600
         OI    SWPARM,MPRMCBD      FORCE CONTROL BLOCK DUMP TO FIND RTN   045700
         DROP  R9                  DROP RTN DESCRIPTOR ADDR'Y             045800
        SUBOUT ,                   RETURN TO ( OPTIMISTIC ) CALLER        045900
         TITLE 'PARROT - DETERMINE WHICH CSECT CONTAINS EACH ROUTINE'     046000
***********************************************************************   046100
*        DETERMINE WHICH CSECT CONTAINS EACH ROUTINE                  *   046200
***********************************************************************   046300
         SPACE 1                                                          046400
*        THE CCB CONTAINS A ROUTINE DESCRIPTOR FOR EVERY ROUTINE THAT     046500
*         IS INVOKED ( BY CBAL ) FROM ANOTHER CSECT.  THE DESCRIPTORS     046600
*         ARE INITIALISED WITH ONLY THE ADDRESS OF THE ROUTINE, AND THE   046700
*         PURPOSE OF THIS ROUTINE IS TO DETERMINE WHICH CSECT CONTAINS    046800
*         EACH OF THE ROUTINES, AND TO SET THE APPROPRIATE SUBCSECT       046900
*         INDEX VALUE IN THE DESCRIPTOR.                                  047000
*        THE ROUTINE ALSO DETECTS MISSING ROUTINES ( ZERO ADDRESS )       047100
*         AND UNRESOLVABLE ROUTINES ( ADDRESS NOT IN ANY KNOWN CSECT )    047200
*         AND SUBSTITUTES THE ADDRESS OF THE NULL ROUTINE FOR THEM.       047300
         SPACE 1                                                          047400
*        REGISTER USAGE:                                                  047500
*         R1  - ADDRESS OF ROUTINE DESCRIPTOR                             047600
*         R2  - ADDRESS OF ROUTINE                                        047700
*         R3  - ADDRESS OF CSECT DESCRIPTOR                               047800
*         R5  - COUNT OF CSECT DEFINITIONS PROCESSED                      047900
*         R9  - LOOP CONTROL FOR COUNT OF CSECTS                          048000
*         R10 - LOOP CONTROL FOR COUNT OF ROUTINES                        048100
*         R14 - ADDRESS OF START OF CSECT                                 048200
*         R15 - ADDRESS OF END OF CSECT                                   048300
         EJECT                                                            048400
***********************************************************************   048500
*        DETERMINE WHICH CSECT CONTAINS EACH ROUTINE ( CONT'D )       *   048600
***********************************************************************   048700
         SPACE 1                                                          048800
         USING RTNDNTRY,R1         ESTABLISH RTN DESCRIPTOR ADDR'Y        048900
FINDRTN  SUBIN SAVE=R4             PRESERVE RETURN ADDRESS                049000
         SR    R10,R10             ZEROISE WORK REGISTER FOR 'IC'         049100
         IC    R10,$NUMRTNS        SET R10 TO NO. OF RTNS TO PROCESS      049200
         L     R1,$ADRRTNS         POINT R1 AT 1ST RTN DESCRIPTOR         049300
         SR    R2,R2               ZEROISE WORK REGISTER                  049400
         SR    R14,R14             ZEROISE WORK REGISTER                  049500
         SR    R15,R15             ZEROISE WORK REGISTER                  049600
FINDRTN2 ICM   R2,7,1(R1)          GET ADDRESS OF ROUTINE                 049700
         BNZ   *+14                BR IF ROUTINE EXISTS                   049800
         MVC   1(3,R1),=AL3(NULLRTN) SUBSTITUE ADDRESS OF NULL ROUTINE    049900
         B     FINDRTN6            GO GET NEXT ROUTINE DESCRIPTOR         050000
         SR    R9,R9               ZEROISE WORK REGISTER FOR 'IC'         050100
         IC    R9,$NUMPOOL         SET TO LOOP THROUGH CSECT DEFINITION   050200
         L     R3,$ADRVCON         GET ADDRESS OF 1ST POOL/CSECT DEF'N    050300
         SR    R5,R5               ZEROISE COUNT OF DEFINITIONS           050400
FINDRTN3 TM    0(R3),MSPDCSCT      IS THIS A CSECT DEFINITON              050500
         BZ    FINDRTN4            BR IF NOT TO GET NEXT DESCRIPTOR       050600
         ICM   R14,7,1(R3)         GET ADDRESS OF STRAT OF CSECT          050700
         ICM   R15,7,5(R3)         GET ADDRESS OF END OF CSECT            050800
         CR    R2,R14              IS THE RTN BELOW START OF CSECT        050900
         BL    FINDRTN4            BR IF BELOW CSECT                      051000
         CR    R2,R15              IS THE RTN ABOVE THE CSECT             051100
         BL    FINDRTN5            BR IF RTN IS WITHIN CSECT              051200
FINDRTN4 LA    R3,SPDLGTH(,R3)     INCREMENT TO NEXT DESCRIPTOR           051300
         LA    R5,1(,R5)           INCREMENT COUNT OF DESCRIPTORS READ    051400
         BCT   R9,FINDRTN3         LOOP BACK IF ANY LEFT                  051500
         MVC   1(3,R1),=AL3(NULLRTN) SUBSTITUE ADDR OF NULL RTN           051600
         OI    SWERROR,MERRBRTN    FLAG THAT UNLOCATABLE RTN FOUND        051700
         OI    RTNDFLAG,RTNFBRTN    .. AND FLAG RTN DESCRIPTOR ALSO       051800
         B     FINDRTN6            GO GET NEXT RTN DESCRIPTOR             051900
FINDRTN5 STC   R5,4(R1)            STORE CSECT DEFINITON INDEX IN RTND    052000
FINDRTN6 LA    R1,RTNDLGTH(,R1)    INCREMENT TO NEXT RTN DESCRIPTOR       052100
         BCT   R10,FINDRTN2        LOOP BACK IF ANY LEFT                  052200
         CBAL  R4,FNDSRTN          NOW PROCESS ANY RTNS IN CCB OVERFLOW   052300
        SUBOUT RESTORE=R4          RESTORE AND RETURN TO CALLER           052400
         DROP  R1                  DROP RTN DESCRIPTOR ADDRESSABILITY     052500
         EJECT                                                            052600
***********************************************************************   052700
*        DETERMINE WHICH CSECT CONTAINS EACH ROUTINE ( CONT'D )       *   052800
***********************************************************************   052900
         SPACE 1                                                          053000
*        NOW LOCATE ANY ROUTINES IN THE CCB 'OVERFLOW' AREA               053100
         SPACE 1                                                          053200
         USING RTNDNTRY,R1         ESTABLISH RTN DESCRIPTOR ADDR'Y        053300
FNDSRTN  SUBIN ,                   ENTER ROUTINE                          053400
         SR    R10,R10             ZEROISE WORK REGISTER FOR 'IC'         053500
         ICM   R10,1,$NUMSRTN      SET R10 TO NO. OF EXTRA RTNS           053600
         BZ    FNDSRTNX            GO TO EXIT IF NO SPARE ROUTINES        053700
         L     R1,$ADRSRTN         POINT R1 AT 1ST RTN DESCRIPTOR         053800
         SR    R2,R2               ZEROISE WORK REGISTER                  053900
         SR    R14,R14             ZEROISE WORK REGISTER                  054000
         SR    R15,R15             ZEROISE WORK REGISTER                  054100
FNDSRTN2 ICM   R2,7,1(R1)          GET ADDRESS OF ROUTINE                 054200
         BNZ   *+14                BR IF ROUTINE EXISTS                   054300
         MVC   1(3,R1),=AL3(NULLRTN) SUBSTITUE ADDRESS OF NULL ROUTINE    054400
         B     FNDSRTN6            GO GET NEXT ROUTINE DESCRIPTOR         054500
         SR    R9,R9               ZEROISE WORK REGISTER FOR 'IC'         054600
         IC    R9,$NUMPOOL         SET TO LOOP THROUGH CSECT DEFINITION   054700
         L     R3,$ADRVCON         GET ADDRESS OF 1ST POOL/CSECT DEF'N    054800
         SR    R5,R5               ZEROISE COUNT OF DEFINITIONS           054900
FNDSRTN3 TM    0(R3),MSPDCSCT      IS THIS A CSECT DEFINITON              055000
         BZ    FNDSRTN4            BR IF NOT TO GET NEXT DESCRIPTOR       055100
         ICM   R14,7,1(R3)         GET ADDRESS OF STRAT OF CSECT          055200
         ICM   R15,7,5(R3)         GET ADDRESS OF END OF CSECT            055300
         CR    R2,R14              IS THE RTN BELOW START OF CSECT        055400
         BL    FNDSRTN4            BR IF BELOW CSECT                      055500
         CR    R2,R15              IS THE RTN ABOVE THE CSECT             055600
         BL    FNDSRTN5            BR IF RTN IS WITHIN CSECT              055700
FNDSRTN4 LA    R3,SPDLGTH(,R3)     INCREMENT TO NEXT DESCRIPTOR           055800
         LA    R5,1(,R5)           INCREMENT COUNT OF DESCRIPTORS READ    055900
         BCT   R9,FNDSRTN3         LOOP BACK IF ANY LEFT                  056000
         MVC   1(3,R1),=AL3(NULLRTN) SUBSTITUE ADDR OF NULL RTN           056100
         OI    SWERROR,MERRBRTN    FLAG THAT UNLOCATABLE RTN FOUND        056200
         OI    RTNDFLAG,RTNFBRTN    .. AND FLAG RTN DESCRIPTOR ALSO       056300
         B     FNDSRTN6            GO GET NEXT RTN DESCRIPTOR             056400
FNDSRTN5 STC   R5,4(R1)            STORE CSECT DEFINITON INDEX IN RTND    056500
FNDSRTN6 LA    R1,RTNDLGTH(,R1)    INCREMENT TO NEXT RTN DESCRIPTOR       056600
         BCT   R10,FNDSRTN2        LOOP BACK IF ANY LEFT                  056700
FNDSRTNX SUBOUT ,                   RETURN TO CALLER                      056800
         TITLE 'PARROT - DETERMINE SIZE OF ALL CSECTS'                    056900
***********************************************************************   057000
*        DETERMINE SIZE OF ALL CSECTS                                 *   057100
***********************************************************************   057200
         SPACE 1                                                          057300
*        THE CCB CONTAINS THE ADDRESS OF THE START AND END OF ALL         057400
*         THE SUB-SCECTS.  THIS ROUTINE REPLACES THE ENDING ADDRESS       057500
*         WITH THE LENGTH OF THE CSECT.  THIS IS TO ALLOW REDUNDANT       057600
*         CSECTS TO BE USED AS STORAGE POOLS, AND IT ALSO FACILITATES     057700
*         THE PROCESSING OF THE ESTAE ERROR ANALYSIS ROUTINE.             057800
         SPACE 1                                                          057900
CALCSIZ  SUBIN ,                   ENTER ROUTINE                          058000
         SR    R10,R10             ZEROISE WORK REGISTER                  058100
         IC    R10,$NUMPOOL        SET NUMBER OF POOLS FOR LOOP           058200
         L     R9,$ADRVCON         POINT AT 1ST POOL/CSECT DEFINITION     058300
CALCSIZ1 LM    R1,R2,0(R9)         PICK UP START AND END ADDRESSES        058400
         TM    0(R9),MSPDCSCT      DOES POOL DESCRIBE A CSECT             058500
         BZ    CALCSIZ2            BR IF THIS IS NOT A CSECT              058600
         LA    R1,0(,R1)           PURIFY HIGH-ORDER BYTE OF START        058700
         LA    R2,0(,R2)           PURIFY HIGH-ORDER BYTE OF END          058800
         SR    R2,R1               DETERMINE SIZE OF CSECT                058900
         BNM   *+6                 BR IF RESULT >= 0                      059000
         SR    R2,R2               SOMETHING WRONG: ZEROISE -VE SIZE      059100
         STCM  R2,7,5(R9)          PRESERVE SIZE IN POOL DEFINITION       059200
CALCSIZ2 LA    R9,SPDLGTH(,R9)     INCREMENT TO NEXT POOL/CSECT DESCRIP   059300
         BCT   R10,CALCSIZ1        LOOP BACK IF ANY LEFT                  059400
        SUBOUT ,                   RETURN TO CALLER                       059500
         EJECT                                                            059600
***********************************************************************   059700
*        MAKE UNWANTED CSECTS AVAILABLE AS STORAGE POOLS              *   059800
***********************************************************************   059900
         SPACE 1                                                          060000
*        THIS ROUTINE SETS FLAGS IN THE CSECT DESCRIPTORS IN THE CCB      060100
*         TO MAKE UNWANTED CSECTS AVAILABLE FOR USE AS STORAGE POOLS      060200
*         ( FOR GETMAIN AND WORKFILE PROCESSING ).                        060300
         SPACE 1                                                          060400
FREECS1  SUBIN ,                   ENTER ROUTINE                          060500
*        OI    $VPARTA,MSPDUSE     FLAG THAT CSECT AVAILABLE AS POOL      060600
         OI    $VPARTA1,MSPDUSE    FLAG  THAT CSECT AVAILABLE AS POOL     060700
         OI    $VPARTA2,MSPDUSE    FLAG  THAT CSECT AVAILABLE AS POOL     060800
         OI    $VPARTB,MSPDUSE     FLAG THAT CSECT AVAILABLE AS POOL      060900
         OI    $VPARTB1,MSPDUSE    FLAG  THAT CSECT AVAILABLE AS POOL     061000
         OI    $VPARTC,MSPDUSE     FLAG THAT CSECT AVAILABLE AS POOL      061100
         OI    $VPARTC1,MSPDUSE    FLAG  THAT CSECT AVAILABLE AS POOL     061200
         OI    $VPARTC2,MSPDUSE    FLAG  THAT CSECT AVAILABLE AS POOL     061300
         OI    $VPARTC3,MSPDUSE    FLAG  THAT CSECT AVAILABLE AS POOL     061400
         OI    $VPARTC4,MSPDUSE    FLAG  THAT CSECT AVAILABLE AS POOL     061500
        SUBOUT ,                   RETURN TO CALLER                       061600
         EJECT                                                            061700
***********************************************************************   061800
*        MAKE UNWANTED CSECTS AVAILABLE AS STORAGE POOLS ( PHASE 2 )  *   061900
***********************************************************************   062000
         SPACE 1                                                          062100
FREECS2  SUBIN ,                   ENTER ROUTINE                          062200
         OI    $VPARTO,MSPDUSE     FLAG THAT CSECT AVAILABLE AS POOL      062300
         SR    R10,R10             ZEROISE WORK REGISTER                  062400
         IC    R10,$NUMPOOL        SET NO. OF POOLS FOR LOOP              062500
         L     R9,$ADRVCON         PICK UP ADDR OF 1ST POOL/CSECT DEF'N   062600
FREECS21 TM    0(R9),MSPDFREE      MAY CSECT BE 'FREEMAINED'              062700
         BZ    *+8                 BR IF CSECT MAY NOT BE 'FREEMAINED'    062800
         OI    0(R9),MSPDUSE       FLAG THAT CSECT AVAILABLE AS POOL      062900
         LA    R9,SPDLGTH(,R9)     INCREMENT TO NEXT CSECT DEFINITION     063000
         BCT   R10,FREECS21        LOOP BACK IF ANY DEFINITIONS LEFT      063100
        SUBOUT ,                   RETURN TO CALLER                       063200
         TITLE 'PARROT - MISCELLANEOUS CONSTANTS AND FIELDS'              063300
         SPACE 1                                                          063400
         LTORG                                                            063500
LGTH     EQU   *                   END OF CSECT PARROT                    063600
         DROP  R13                 DROP CSECT / CCB ADDRESSABILITY        063700
         END   PARROT              ESTABLISH ENTRY POINT                  063800
