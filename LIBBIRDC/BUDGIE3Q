         TITLE 'BUDGIE3Q - INTERNAL MACROS'                             Q 000010
         MACRO                                                          Q 000020
         $CB   &PRINT=OFF                                               Q 000030
         PUSH PRINT                PRESERVE CURRENT PRINT STATUS        Q 000040
         PRINT &PRINT              ESTABLISH NEW PRINT STATUS           Q 000050
               TITLE 'CB13 - CB13 CONTROL BLOCK'                        Q 000060
         CB13  ,                   GENERATE DSECT                       Q 000070
               TITLE 'CB36 - CB36 CONTROL BLOCK'                        Q 000080
         CB36  ,                   GENERATE DSECT                       Q 000090
               TITLE 'CCB  - CENTRAL CONTROL BLOCK'                     Q 000100
         CCB   ,                   GENERATE DSECT                       Q 000110
               TITLE '     - BATCH BALANCING REPORT LINES'              Q 000120
      DETAILBB ,                   GENERATE DSECTS                      Q 000130
               TITLE '     - GENERAL EQUATES'                           Q 000140
       EQUATES ,                   GENERATE EQUATES                     Q 000150
         POP   PRINT               RESTORE ORIGINAL PRINT STATUS        Q 000160
         MEND                                                           Q 000170
         SPACE 5                                                        Q 000180
BUDGIE3Q CSECT                                                          Q 000190
         $CB   ,                   GENERATE DSECTS AND EQUATES          Q 000200
         TITLE 'BUDGIE3Q - PERFORM MATHEMATICAL OPERATION'              Q 000210
        SCSECT Q                   DEFINE START OF CSECT BUDGIE3Q       Q 000220
         ENTRY CTESTC7             PERFORM MATHEMATICAL OPERATION       Q 000230
         TITLE 'BUDGIE3Q - PERFORM MATHEMATICAL OPERATION'              Q 000240
*********************************************************************** Q 000250
*        C7 - PERFORM MATHEMATICAL OPERATIPN                          * Q 000260
*********************************************************************** Q 000270
         SPACE 1                                                        Q 000280
         USING CB13NTRY,R8         ESTABLISH CB13 ADDRESSABLIITY        Q 000290
         USING CB36NTRY,R10        ESTABLISH CB36 ADDRESSABILITY        Q 000300
CTESTC7  SUBIN SAVE=(R4,R10)       PRESERVE REGISTERS                   Q 000310
         LR    R10,R2              POINT R10 AT CB36                    Q 000320
         USING DETAILBB,R7         ESTABLISH PRINTLINE ADDRESSABILITY   Q 000330
        BBMESS 21                  SET UP DEFAULT ERROR MESSAGE         Q 000340
         DROP  R7                  DROP PRINTLINE ADDRESSABILITY        Q 000350
         MVC   $ULINEPL,CB36POS1    SET UP TO UNDERLINE OP1 IF NOT NUM  Q 000360
         PTR   CB36POS1,CB36LEN1   GET ADDR & LGTH OF 1ST OPERAND       Q 000370
         TM    CB36SW,SW36PCK1     IS OPERAND PACKED                    Q 000380
         BO    TESTC701            BR IF YES                            Q 000390
         EX    R1,TESTPACK         ASSUME IT IS NUMERIC & PCK IT        Q 000400
         EX    R1,TESTMVC          MOVE FIELD TO WORK AREA              Q 000410
         LA    R15,$TSTAREA        PONT R15 AT WORK AREA                Q 000420
         AR    R15,R1              POINT R15 AT END OF FIELD            Q 000430
         CBAL  R4,TESTSN           ENSURE OPERAND IS NUMERIC            Q 000440
         BH    TESTC7Y             GO FLAG AS ERROR IF NOT              Q 000450
         BE    *+10                BYPASS ZAP IF FLD NOT BLANK          Q 000460
         ZAP   $WRKPACK,$ZERO       ZERPISE WORK FIELD FOR BL OPERAND   Q 000470
         B     *+8                 BR AROUND PACKED MOVE                Q 000480
TESTC701 EX    R1,TESTZAP          MOVE  PACKED FLD TO WORK AREA        Q 000490
         ZAP   $WRKPCKL,$WRKPACK   MOVE VALUE TO LARGER WORK AREA       Q 000500
         L     R2,CB13CBXX         RETRIEVE CB36 ADDRESS(LOST IN TRT)   Q 000510
         EJECT                                                          Q 000520
*********************************************************************** Q 000530
*        C7 - PERFROM MATHEMATICAL OPERATION 7 CONT'D )               * Q 000540
*********************************************************************** Q 000550
         SPACE 1                                                        Q 000560
         TM    CB36SW,SW36LIT      IS 2ND OPERAND A SUPPLIED LITERAL    Q 000570
         BZ    *+14                BR IF NOT LITERAL                    Q 000580
         ZAP   $WRKPACK,CB36LIT    MOVE LITERAL TO WORK AREA            Q 000590
         B     TESTC7A2            BR TO PERFORM MATHS                  Q 000600
         MVC   $ULINEPL,CB36POS2    SET TO UNDERLINE OP2 IF NOT NUM     Q 000610
         PTR   CB36POS2,CB36LEN2   GET ADDR & LGTH OF 2ND OPERAND       Q 000620
         TM    CB36SW,SW36PCK2     ID OPERAND PACKED                    Q 000630
         BO    TESTC702            BR IF PACKED                         Q 000640
         EX    R1,TESTPACK         ASSUME OPERAND IS NUMERIC & PACK IT  Q 000650
         EX    R1,TESTMVC          MOVE FLD TO TEST WORK AREA           Q 000660
         LA    R15,$TSTAREA        POINT R15 AT WORK AREA               Q 000670
         AR    R15,R1              POINT R15 AT END OF FILED            Q 000680
         CBAL  R4,TESTSN           ENSURE 2ND OPERAND IS NUMERIC        Q 000690
         BH    TESTC7Y             GO FLAG AS ERROR IF NOT NUMERIC      Q 000700
         BE    *+10                BYPASS ZAP IF NOT BLANK OPERAND      Q 000710
         ZAP   $WRKPACK,$ZERO       ZEROISE FOR BLANK OPERAND           Q 000720
         B     *+8                 BR AOUND PACKED MOVE                 Q 000730
TESTC702 EX    R1,TESTZAP          MOVE PACKED FLD TO WORK AREA         Q 000740
         L     R2,CB13CBXX         RETRUEVE CB36 ADRS ( LOST IN TRT )   Q 000750
TESTC7A2 CBAL  R4,MATHSINT         PERFORM MATHEMATICAL OPERATION       Q 000760
         ZAP   $WA2,$RESULT        PUT INTERMED RESULT IN WORK AREA     Q 000770
         MVC   $WA2NDEC,$RESNDEC   PRESERVE NDEC OF INTERMED RESULT     Q 000780
         ZAP   $WA1,$ZERO           ZEROISE 1ST W/A                     Q 000790
         MVC   $WA1NDEC,CB36NDC3   SET DESIRED NDEC FOR FINAL RESULT    Q 000800
         EJECT                                                          Q 000810
*********************************************************************** Q 000820
*        C7 - PERFORM MATHEMATICAL OPERATION ( CONT'D )               * Q 000830
*********************************************************************** Q 000840
         SPACE 1                                                        Q 000850
         USING DETAILBB,R7         ESTABLISH PRINTLINE ADDRESSABILITY   Q 000860
        BBMESS 22                  ASSUME SIGNIFICANCE LOSS             Q 000870
         DROP  R7                  DROP PRINTLINE ADDRESSABILITY        Q 000880
         MVC   $ULINEPL,CB36POS3    POINT AT RESULT FIELD FOR UNDERLINE Q 000890
         LA    R1,$WA1+8           POINT R1 AT 1ST OPERAND              Q 000900
         LA    R2,$WA2+8           POINT R2 AT 2ND OPERAND              Q 000910
         BAL   R4,ALIGN1           SUPPLY REQUESTED OUTPUT ALIGNMENT    Q 000920
         BNE   TESTC7Y             BR IF SIGNIFICANCE OVERFLOW TO FLAG  Q 000930
         BAL   R4,ADDRTN           OBTAIN RESULT WITH DESIRED NDEC      Q 000940
         ZAP   $WRKPACK,$WA1       MOVE ALIGNED RESULT TO NEW W/A       Q 000950
         SR    R1,R1               ZEROISE WORJ REGISTER                Q 000960
         IC    R1,CB36RNDN         INSERT NO OF DIGITS TO ROUND         Q 000970
         TM    CB36SW,SW36RND      IS ROUNDING REQUIRED                 Q 000980
         BZ    TESTC703            BR IF NO ORUNDING                    Q 000990
         MH    R1,=H'3'            CONVERT NO TO INNDEX FOR TABLES      Q 001000
         LA    R15,RNDTAB1         POINT AT TABLE OF INCREMENTS         Q 001010
         AR    R15,R1              POINT AT RELEVANT TAVLE ELEMNT       Q 001020
         MVN   $WRKPCKL(1),$WRKPACK+7 PRESERVE SIGN                     Q 001030
         OI    $WRKPACK+7,X'0F'    FORCE POSITVE FOR ABSOLUTE ROUNDING  Q 001040
         AP    $WRKPACK,0(3,R15)   ADD ROUNDING INCREMENT               Q 001050
         MVN   $WRKPACK+7(1),$WRKPCKL RESTORE ORIGINAL SIGN             Q 001060
         LA    R15,RNDTAB2         POINT AT TABLE OF MASKS              Q 001070
         AR    R15,R1              POINT AT CORRECT TABLE ELEMENT       Q 001080
         NC    $WRKPACK+5(3),0(R15) ZEROISE LOW ORDER DIGITS            Q 001090
TESTC703 PTR   CB36POS3,CB36LEN3   GET ADDR & LEGH OF RRESULT FLD       Q 001100
         EJECT                                                          Q 001110
*********************************************************************** Q 001120
*        C7 - PERFORM MATHEMATICAL OPERATION                          * Q 001130
*********************************************************************** Q 001140
         SPACE 1                                                        Q 001150
         SLL   R1,4                MOVE LGTH FOR PD EXECUTE             Q 001160
         TM    $WRKPACK+7,X'03'    IS THE SIGN A 'C'                    Q 001170
         BNZ   *+8                 BR I NOT                             Q 001180
         OI    $WRKPACK+7,X'03'    CHANGE TO 'F' FOR EBCDIC CLARITY     Q 001190
         TM    CB36SW,SW36PCK3     IS OUTPUT REQUIRED PACKED            Q 001200
         BZ    TESTC704            BR IF NOT                            Q 001210
         EX    R1,PACKOUT          MOVE RESULT TO OUTPUT FIELD          Q 001220
         B     TESTC705            GO PROCESS REMAINDER                 Q 001230
TESTC704 EX    R1,UNPKOUT          UNPACK RESULT INTO OUTPUT            Q 001240
TESTC705 TM    CB36SW,SW36REM      IS REMAINDER REQUIRED                Q 001250
         BZ    TESTC707            BYPASS RTN IF NOT                    Q 001260
         SPACE 1                                                        Q 001270
*        $WA1 CONTAINS THE RESULT WITH APPROPRIATE ALIGNMENT            Q 001280
         SPACE 1                                                        Q 001290
         MP    $WA1,$WA4+8(8)      MULTIPLY QUOTIENT BY DIVISOR         Q 001300
         LH    R15,$WA1NDEC        GET NDEC OF QUOTIENT                 Q 001310
         AH    R15,$WA4NDEC        ADD NDEC OF DIVISOR FOR NEW NDEC     Q 001320
         STH   R15,$WA1NDEC        PRESERVE NEW NDEC                    Q 001330
         LA    R1,$WA1+8           POINT R1 AT QUOTIENT*DIVISOR         Q 001340
         LA    R2,$WA3+8           POINT R3 AT ORIGINAL VALUE           Q 001350
         BAL   R4,ALIGN1           ALIBN LIKE NEW RESULT                Q 001360
         SP    $WA3,$WA1           COMPUTE REM = ORIGINAL - QUOT*DIVS   Q 001370
         MVC   $REMNDEC,$WA3NDEC   SAVE NDEC OF REMAINDER               Q 001380
         ZAP   $REMANDR,$WA3       PRESERVE COMPUTED REMAINDER          Q 001390
         ZAP   $WA2,$REMANDR       PUT REMAINDER IN WORK AREA           Q 001400
         MVC   $WA2NDEC,$REMNDEC   PRESERVE NDEC OF REMIANDER           Q 001410
         ZAP   $WA1,$ZERO           ZEROISE 1ST W/A                     Q 001420
         MVC   $WA1NDEC,CB36NDC4   SET DESIRED NDEC IN 1ST W/A          Q 001430
         LA    R1,$WA1+8           POINT R1 AT 1ST OPERAND              Q 001440
         LA    R2,$WA2+8           POINT R2 AT 2ND OPERAND              Q 001450
         BAL   R4,ALIGN1           SUPPLY REQUESTED ALIGNMENT OFREMAIND Q 001460
         BAL   R4,ADDRTN           OBTAIN REMAINDER WITH DESIRED NDEC   Q 001470
         ZAP   $WRKPACK,$WA1       MONE ALIGNED REMAINDER TO NEW W/A    Q 001480
         EJECT                                                          Q 001490
*********************************************************************** Q 001500
*        C7 - PERFORM MATHEMATICAL ( CONTW'D )                        * Q 001510
*********************************************************************** Q 001520
         SPACE 1                                                        Q 001530
         PTR   CB36POS4,CB36LEN4   GET ADDR & LGTH OF REMAINDER OUTPUT  Q 001540
         SLL   R1,4                MOVE LENGTH FOR PD EXECUTE           Q 001550
         TM    $WRKPACK+7,X'03'    IS THE SIGN 'C'                      Q 001560
         BNZ   *+8                 BR IF NOT                            Q 001570
         OI    $WRKPACK+7,X'03'    CHANGE TO 'F' FOR EBCDIC CLARITY     Q 001580
         TM    CB36SW,SW36REMP     IS REMAINDER DESIRED PACKED          Q 001590
         BZ    TESTC706            BR IF NOR                            Q 001600
         EX    R1,PACKOUT          MOVE REMIANDER TO PUTOUT FLD         Q 001610
         B     TESTC707            BYPASS UNPACKED MOVE                 Q 001620
TESTC706 EX    R1,UNPKOUT          UNPACK REMAINDER INTO OUTPUT FLD     Q 001630
TESTC707 B     TESTC7X             PREPARE TO LEAVE                     Q 001640
TESTC7Y  MVI   $TSTTSTX,C'Y'       SHOW MATHS FAILED                    Q 001650
         ZAP   $WRKPACK,$ZERO       ZEROISE RESULT BEACUSE OF ERROR     Q 001660
         B     TESTC703            GO PLACE ZERO IN RESLT FIELD         Q 001670
TESTC7X SUBOUT RESTORE=(R4,R10)    RESTORE AND RETURN                   Q 001680
         EJECT                                                          Q 001690
*********************************************************************** Q 001700
*        PREPARE TO LINK TO MATHS ROUTINES                            * Q 001710
*********************************************************************** Q 001720
         SPACE 1                                                        Q 001730
MATHSINT SUBIN SAVE=R4             PRESERVE  RETURN ADDRESS             Q 001740
         ZAP   OP1,$WRKPCKL        PUT 1ST VALUE INTO OPERAND 1 FIELD   Q 001750
         ZAP   OP2,$WRKPACK        PUT 2ND VALUE INTO OPERAND 2 FIELD   Q 001760
         MVC   OP1NDEC,CB36NDC1    SET NDEC FOR OPERAND 1               Q 001770
         MVC   OP2NDEC,CB36NDC2    SET NDEC FOR OPERAND 2               Q 001780
         SR    R15,R15             ZEROISE WORK REGISTER                Q 001790
         IC    R15,CB36OPCD        SET INTERNAL REPRESENTATION OF MATHS Q 001800
         LA    R1,OP1              POINT R1 AT OPERAND 1                Q 001810
         LA    R2,OP2              POINT R2 AT OPERAND 2                Q 001820
         CBAL  R4,MATHS            PERFORM NECESSARY ROUTINES           Q 001830
         ZAP   $WRKPACK,$RESULT    MOVE RESULT TO INTERMED FLD          Q 001840
        SUBOUT RESTORE=R4          RESTORE & RETURN TO CALLER           Q 001850
         EJECT                                                          Q 001860
*********************************************************************** Q 001870
*        MATHS ROUTINES                                               * Q 001880
*********************************************************************** Q 001890
         SPACE 1                                                        Q 001900
* MAXDEC       - MAXIMISE NO OF DECIMAL PLACES WITHOUT LOSING SIGNIFICA Q 001910
* MINDEC       - MINIMISE NO OF DECIMAL PLACES WITHOUT LOSING DATA      Q 001920
* ALIGN        - ALIGN DECIMAL PLACES WITHOUT LOSING SIGNIFICANCE       Q 001930
* ALIGN1       - GIVE 2ND OPERAND DECIMAL ALIGNMENT OF 1ST              Q 001940
* SIGNIF       - REDUCE 16-BYT PACKED DECIMAL FLD TO 15 SIGNIFAC DIGITS Q 001950
* GETNDEC      - COMPUTE NDEC AS SIGNED BINARY NUMBER IN R15            Q 001960
* CNTDIG       - COUNT NO OF SIGNIFICANT DIGITS IN EXCESS OF 15         Q 001970
         SPACE 1                                                        Q 001980
*        THESE ROUTINES MAY LOOK SOMEWHAT PECULIAR AND EXCESSIVE FOR    Q 001990
*         BUDGIEO'S REQUIREMENTS, BUT THEY ARE IN FACT A TEST OF THE    Q 002000
*         MATHS ROUTINES THAT I INTEND TO USE IN THE BAL PARROT.        Q 002010
         SPACE 1                                                        Q 002020
* ADD          - ADD OPERAND 2 TO OPERAND 1                             Q 002030
* SUB          - SUBTRAT OPERAND 2 FROM OPERAND 1                       Q 002040
* DIVIDE       - DIVIDE OPERAND 1 BY OPERAND 2                          Q 002050
* MULT         - MULTIPLY OPERAND 1 BY OPERAND 2                        Q 002060
* ZEROADD      - MOVE OPERAND 2 TO OPERAND 1                            Q 002070
* EXP          - RAISE OPERAND 1 TO THE POWER OF OPERAND 2              Q 002080
         EJECT                                                          Q 002090
*********************************************************************** Q 002100
*        MATHS - SET UP WORK AREAS AND INITIATE PROCESSING            * Q 002110
*********************************************************************** Q 002120
         SPACE 1                                                        Q 002130
*        ON ENTRY: R1  - ADDRESS OF OPERAND 1 : 8-BYTE PD + 1-BYTE NDEC Q 002140
*                  R2  - ADDRESS OF OPERAND 2 : 8-BYTE PD + 1-BYTE NDEC Q 002150
*                  R15 - INTERNAL REPRESANTATION OF MATHS OPERATION     Q 002160
*        ON RETURN: $RESULT & $RESNDEC CONTAIN THE RESULT VALUE         Q 002170
         SPACE 1                                                        Q 002180
*        NOTE: INPUT FIELDS ARE UNTOUCHED BY HUMAN HANDS, EXCEPT FOR    Q 002190
*         THE 'ZEROADD' OPERATION.                                      Q 002200
         SPACE 1                                                        Q 002210
MATHS    SUBIN SAVE=R4             PRESERVE RETURN ADDRESS              Q 002220
         ZAP   $WA1,0(8,R1)        MOVE 1ST OPERAND TO WORK AREA        Q 002230
         ZAP   $WA2,0(8,R2)        MOVE 2ND OPERAND TO WORK AREA        Q 002240
         MVC   $WA1NDEC,8(R1)      MOVE NDEC OF 1ST OPERAND TO WORK ARE Q 002250
         MVC   $WA2NDEC,8(R2)      MOBE NDEC OF 2ND OPERAND TO W/A      Q 002260
         ZAP   $REMANDR,$ZERO       ZEROISE REMAINDER LEST NOT DIVIDE   Q 002270
         XC    $REMNDEC,$REMNDEC   SET FO 0 PLACES OF DECIMALS          Q 002280
         SLL   R15,2               MULTIPLY INT REP OF OPERATION BY 4 . Q 002290
*                                   .. TO CONVERT IT TO INDEX FOR THE   Q 002300
*                                   .. INDEXED BRANCH TO THE ROUTINE    Q 002310
         LA    R4,MATHSX           SET ETURN ADDRESS FOR ROUTINES       Q 002320
*                                   (U.E. SIMULATE A 'CBAL' )           Q 002330
         B     *(R15)              BR TO APPROPRIATE RUTINE             Q 002340
         B     ADDRTN              PERFORM ADDITION                     Q 002350
         B     SUBRTN              PERFORM SUBTRACTION                  Q 002360
         B     MULTRTN             GO FORTH AND MULTIPLY                Q 002370
         B     DIVRTN              DIVIDE AND CONQUER                   Q 002380
*        B     EXPRTN              EXPONENTIATION                       Q 002390
*        B     ZAPRTN              ZERO AND ADD                         Q 002400
MATHSX  SUBOUT RESTORE=R4          RETORE & RETURN TO CALLER            Q 002410
         EJECT                                                          Q 002420
*********************************************************************** Q 002430
*        ADD - $WA2 TO $WA1                                           * Q 002440
*********************************************************************** Q 002450
         SPACE 1                                                        Q 002460
ADDRTN   SUBIN SAVE=R4             PRESERVE RETURN ADDRESS              Q 002470
         LA    R1,$WA1+8           POINT R1 AT 8-BYTE 1ST OPERAND       Q 002480
         LA    R2,$WA2+8           POINT R2 AT 8-BYTE 2ND OPERAND       Q 002490
         BAL   R4,ALIGN            ALIGN OPERANDS WITHOUT LOSING SIGNIF Q 002500
         AP    $WA1,$WA2           ADD SECOND OPERAND TO 1ST            Q 002510
         ZAP   $RESULT,$WA1        MOVE RESULT TO OUTPUT FIELD          Q 002520
         MVC   $RESNDEC,$WA1NDEC   SET NDEC FOR RESULT                  Q 002530
        SUBOUT RESTORE=R4          RESTORE REGISTERS AND RETURN TO CALL Q 002540
         SPACE 5                                                        Q 002550
*********************************************************************** Q 002560
*        SUBTRACT - $WA2 FROM $WA1                                    * Q 002570
*********************************************************************** Q 002580
         SPACE 1                                                        Q 002590
SUBRTN   SUBIN SAVE=R4             PRESERVE RETURN ADDRESS              Q 002600
         LA    R1,$WA1+8           POINT R1 AT 1ST 8-BYTE OPERAND       Q 002610
         LA    R2,$WA2+8           POINT R2 AT 2ND 8-BYTE OPERAND       Q 002620
         BAL   R4,ALIGN            ALIGN DECIMALS                       Q 002630
         SP    $WA1,$WA2           SUBTRACT 2ND OPERAND FROM 1ST        Q 002640
         ZAP   $RESULT,$WA1        MOVE RESULT TO RESULT FIELD          Q 002650
         MVC   $RESNDEC,$WA1NDEC   SET NDEC FOR RESULT FIELD            Q 002660
        SUBOUT RESTORE=R4          RESTORE & RETURN TO CALLER           Q 002670
         EJECT                                                          Q 002680
*********************************************************************** Q 002690
*        ZEROADD - MOVE 2ND OPERAND TO 1ST OPERAND                    * Q 002700
*********************************************************************** Q 002710
         SPACE 1                                                        Q 002720
*        ON ENTRY: R1 - RECEIVING FIELD ( 8-BYET PD + 1)                Q 002730
*                  R2 - SOURCE FIELD    ( 8-BYET PD + 1)                Q 002740
         SPACE 1                                                        Q 002750
ZEROADD  SUBIN SAVE=R4             PRESERVE RETURN ADDRESS              Q 002760
         ZAP   0(8,R1),$ZERO       ZEROISE RECEIVING FIELD              Q 002770
         BAL   R4,ALIGN            ALIGN DECIMALS                       Q 002780
         ZAP   0(8,R1),0(8,R2)     ZAP SOURCE INTO DESTINATION          Q 002790
        SUBOUT RESTORE=R4          RESTORE &  RETURN TP CALLER          Q 002800
         EJECT                                                          Q 002810
*********************************************************************** Q 002820
*        MULTIPLY - $WA1 BY $WA2                                      * Q 002830
*********************************************************************** Q 002840
         SPACE 1                                                        Q 002850
MULTRTN  SUBIN SAVE=R4             PRESRRVE RETURN ADDRESS              Q 002860
         LH    R15,$WA1NDEC        GET NDEC OF 1ST OPERAND              Q 002870
         AH    R15,$WA2NDEC        ADD NDEC OF 2ND OPERAND              Q 002880
*                                   TO COMPATE NDEC OF RESULT FIELD     Q 002890
         STH   R15,$RESNDEC        PRESERVE NDEC FOR RESULT             Q 002900
         MP    $WA1,$WA2+8(8)      MULTIPLY 1ST OPERAND BY 2ND          Q 002910
         ZAP   $RESULT,$WA1        MOVE RSULT TO RESULR FIELD           Q 002920
         LA    R1,$RESULT          POINT AT RESULT FIELD                Q 002930
         BAL   R4,SIGNIF           REDUCE TO 15 SIGNIFICAT DIGITS       Q 002940
        SUBOUT RESTORE=R4          RETORE & RETURN TO CALLER            Q 002950
         EJECT                                                          Q 002960
*********************************************************************** Q 002970
*        DIVIDE - $WA1 BY $WA2                                        * Q 002980
*********************************************************************** Q 002990
         SPACE 1                                                        Q 003000
DIVRTN   SUBIN SAVE=R4             PRESERVE RETURN ADDRSS               Q 003010
         ZAP   $WA3,$WA1           RESERVE ORIGINAL VALUE               Q 003020
         MVC   $WA3NDEC,$WA1NDEC   PRESERVE NDEC OF ORIGINAL VALUE      Q 003030
         ZAP   $WA4,$WA2           PRESERVE ALUE OF DIVISOR             Q 003040
         MVC   $WA4NDEC,$WA2NDEC   PRESERVE NDEC OF DIVISOR             Q 003050
         LA    R1,$WA1             POINT AT 1ST OPERAND                 Q 003060
         BAL   R4,MAXDEC           MAXIMISE DECIMAL PLACES              Q 003070
         LA    R1,$WA2             POINT AT 2ND OPERAND                 Q 003080
         BAL   R4,MINDEC           MINIMISE DECIMALS WITHOUT LOSING DAT Q 003090
         CP    $WA2+8(8),$ZERO     IS DIVISOR ZERO                      Q 003100
         BNE   DIVRTN1             BR IF NOT ZERO                       Q 003110
         ZAP   $RESULT,$ZERO       FORCE RESULT TO ZERO                 Q 003120
         B     DIVRTN2             GO PROCESS FAKE RESULT               Q 003130
DIVRTN1  DP    $WA1,$WA2+8(8)      DIVIDE 1ST OPERAND BY SECOND         Q 003140
         ZAP   $RESULT,$WA1(8)     MOVE RESULT TO RESULT FIELD          Q 003150
DIVRTN2  LH    R15,$WA1NDEC        RETRIEVE NDEC OF 1ST OPERAND         Q 003160
         SH    R15,$WA2NDEC        SUBTRCT NDEC OF 2ND OPERAND          Q 003170
*                                   TO COMPATE NDEC OF RESULT           Q 003180
         STH   R15,$RESNDEC        PRESERVE NDEC FOR RESULT             Q 003190
         ZAP   $REMANDR,$WA1+8(8)  MOVEREMIANDER TO REMAINDER FLD       Q 003200
        SUBOUT RESTORE=R4          RESTORE & RETURN TO CALLER           Q 003210
         EJECT                                                          Q 003220
*********************************************************************** Q 003230
*        ALIGN - ALIGN DECIMALS WHILE PRESRVING MAX SIGNIFICANCE      * Q 003240
*********************************************************************** Q 003250
         SPACE 1                                                        Q 003260
*        ON ENTRY: R1 - OPERAND 1 ( 8-BYTE PD + 1-BYTE NDEC )           Q 003270
*                  R2 - OPERAND 2 ( 8-BYTE PD + 1-BYTE NDEC )           Q 003280
         SPACE 1                                                        Q 003290
ALIGN    SUBIN SAVE=R4             PRESERVE RETURN ADDRESS              Q 003300
         CLC   8(2,R1),8(R2)       IS DECIMAL ALIGNMENT ALREADT SAME    Q 003310
         BE    ALIGNX              EXIT FROM ROUTINE IF YES             Q 003320
         LH    R14,8(,R1)          RETRIEVE NDEC FOR 1ST OPERAND IN R14 Q 003330
         LH    R15,8(,R2)          RETRIEVE NDEC FOR 2ND OPERAND IN R15 Q 003340
         CR    R14,R15             DOES 1ST OPERAND HAVE LARGSET NUMBER Q 003350
         BH    ALIGN01             BR IF 1ST OPERAND HS LARGSET NO OD D Q 003360
         XR    R14,R15             REVERSE CONTENTS OF ...              Q 003370
         XR    R15,R14              ... R14 AND R15 ...                 Q 003380
         XR    R14,R15              ... WITH 3 EXCLUSIVE OR'S           Q 003390
         XR    R1,R2               REVERSE CONTENT ...                  Q 003400
         XR    R2,R1                ... OF REGISTERS 1 & 2              Q 003410
         XR    R1,R2                ... WITH 3 EXCLUSIVE 3OR'S          Q 003420
ALIGN01  STH   R14,$PDWANDC        SET NDEC FOR WORK AREA               Q 003430
         ZAP   $PDWA,0(8,R2)       MOVE OPERAND WITH LEAST PLACES TO W/ Q 003440
         SR    R14,R15             COMPATE HOW MANY PLACES TO SHIFT     Q 003450
         SRP   $PDWA,0(R14),5      SHIFT X PLACES TO THE LEFT           Q 003460
         CLC   $PDWA(8),$LOWVALU   HAS SHIFT YIELDED > 15 DIGITS        Q 003470
         BNE   ALIGN02             BR IF > 15 DIGITS                    Q 003480
         ZAP   0(8,R2),$PDWA       MOVE SHIFTED VALUE TO OPERAND        Q 003490
         MVC   8(2,R2),8(R1)       SET ADJUSTED NDEC FOR OPERAND        Q 003500
         B     ALIGNX              BR TO ROUTINE EXIT                   Q 003510
ALIGN02  LA    R14,$PDWA           POINT AT WORK AREA                   Q 003520
         BAL   R4,CNTDIG           CALCULATE HOW MANY XCES DIGITS THERE Q 003530
         LH    R15,$PDWANDC        RETRIEVE NDEC FOR WORK AREA          Q 003540
         SR    R15,R14             COMPUTE NEW NDEC AFTER RIGHT SHIFT   Q 003550
         STH   R15,8(,R1)          PRESERVE NEW NDEC FOR 1ST OPERAND    Q 003560
         STH   R14,8(,R2)          PRSSERVE NEW NDEC FOR 2ND OPERAND    Q 003570
         TM    CB36SW,SW36NRND     IS ALL ROUNDING SUPPRESSED           Q 003580
         BZ    *+20                BR IF RUNDING NOT SUPPRESSED         Q 003590
         SRP   0(8,R1),0(R14),0    SHIFT 1ST OPERAND AS NECESSARY       Q 003600
         SRP   $PDWA,0(R14),0      SHIFT 2ND OPERAND INTIN W/A          Q 003610
         B     *+16                BYPASS ROUNDED SHIFTS                Q 003620
         SRP   0(8,R1),0(R14),5    SHIFT & ROUND 1ST OPERAND AS NECESSA Q 003630
         SRP   $PDWA,0(R14),5      SHIFT & ROUND 2NE OPERAND IN W/A     Q 003640
         ZAP   0(8,R2),$PDWA       MOVE 2ND OPERND BACK TO SOURCE       Q 003650
ALIGNX  SUBOUT RESTORE=R4          RESTORE & RETURN TO CALLER           Q 003660
         EJECT                                                          Q 003670
*********************************************************************** Q 003680
*        ALIGN1 - ADJUST 2ND OPERAND TO DECAIMAL ALIGNMENT OF 1ST     * Q 003690
*********************************************************************** Q 003700
         SPACE 1                                                        Q 003710
*        ON ENTRY: R1 - 1ST OPERAND ( 8-BYTE PD + 1-BYTE NDEC )         Q 003720
*                  R2 - 2ND OPERAND ( 8-BYTE PD + 1-BYTE NDEC )         Q 003730
         SPACE 1                                                        Q 003740
*        ON RETURN :                                                    Q 003750
*                  BE  - ALIGNMENT COMPLETED                            Q 003760
*                  BNE - LOSS OF SIGNIFICANCE WOULD RESULT - BYPASSED   Q 003770
         SPACE 1                                                        Q 003780
ALIGN1   SUBIN SAVE=R4             PPRESERVE RETURN ADDRESSS            Q 003790
         MVI   ALIGN1T+1,$X        ASSUME ALIGNMENT ALREADY CORRECT     Q 003800
         CLC   8(2,R1),8(R2)       IS ALIGNMENT ALREADY THE SAME        Q 003810
         BE    ALIGN1T             EXIT IF ALIGNMENT ALRAEDY CORRECT    Q 003820
         MVI   ALIGN1T+1,$Y        ASSUME WE WILL LOOSE SIGNIFICANCE    Q 003830
         ZAP   $PDWA,0(8,R2)       MOVE 2ND OPERAND TO WORK AREA        Q 003840
         LH    R14,8(,R1)          RETRIEVE NDEC FOR 1ST OPERAND        Q 003850
         SH    R14,8(,R2)          SUBTRACT NDEC FOR 2ND OPERAND        Q 003860
*        THIS DETERMINES DIRECTION & AMOUNT OF SHIFT                    Q 003870
         TM    CB36SW,SW36NRND     IS ALL ROUNDING SUPPRESSED           Q 003880
         BZ    *+14                BR IF NOT                            Q 003890
         SRP   $PDWA,0(R14),0      SHIFT AS NECESSARY                   Q 003900
         B     *+10                BYPASS ROUNDED SHIFT                 Q 003910
         SRP   $PDWA,0(R14),5      SHIFT AND ROUND AS NESACSARY         Q 003920
         CLC   $PDWA(8),$LOWVALU   ARE THERE NOW MORE THAN 15 DIGITS    Q 003930
         BNE   ALIGN1T             BYPASS PERMANENT SHIFT IF >15 DIGITS Q 003940
         MVI   ALIGN1T+1,$X        SHOW THAT ALIGNMENT COMPLETED        Q 003950
         ZAP   0(8,R2),$PDWA       MOVESHIFTED VALUE T SIURCE FIELD     Q 003960
         MVC   8(2,R2),8(R1)       SET NDEC OF 2ND OPERAND TO THAT OF 1 Q 003970
ALIGN1T  CLI   *,$X                SET COND CODE FOR CALLER             Q 003980
        SUBOUT RESTORE=R4          RETURN TO CALLER                     Q 003990
         EJECT                                                          Q 004000
*********************************************************************** Q 004010
*        MINDEC - MINIMISE NO OF DECIMAL PLACES WITHOUT LOSING DATA   * Q 004020
*********************************************************************** Q 004030
         SPACE 1                                                        Q 004040
*        ON ENTRY: R1 - 16-BYTE PD + 1-BYTE NDEC                        Q 004050
         SPACE 1                                                        Q 004060
MINDEC   SUBIN SAVE=R4             PRESERVE RETURN ADDRESS              Q 004070
         CP    0(16,R1),$ZERO       IS VALUE ZERO                       Q 004080
         BE    MINDECX             BYPASS ROUTINE IF ZERO VALUE         Q 004090
         LH    R15,16(,R1)         RETRIEVE NDEC FOR 1ST OPERAND        Q 004100
MINDEC1  TM    15(R1),X'F0'        IS JUNIOR DIGIT NON-ZERO             Q 004110
         BNZ   MINDEC2             BR IF NON-ZERO DIGIT                 Q 004120
         SRP   0(16,R1),RSHIFT1(R0),5 SHIFT 1 DIGIT TO RIGHT            Q 004130
         BCTR  R15,0               DEVREMENT NDEC COUNT                 Q 004140
         B     MINDEC1             LOP BACK TO TEST NEW LAST DIGIT      Q 004150
MINDEC2  STH   R15,16(R1)          PRESERVE UPDATED NDEC                Q 004160
MINDECX SUBOUT RESTORE=R4          RETURN TO CALLER                     Q 004170
         EJECT                                                          Q 004180
*********************************************************************** Q 004190
*        MAXDEC - MAXIMISE NO F DECIAMALS WITHOUT LOSING SIGNIFICANCE * Q 004200
*********************************************************************** Q 004210
         SPACE 1                                                        Q 004220
*        ON ENTRY: R1 - 16-BYTE PD + 1-BYT NDEC                         Q 004230
         SPACE 1                                                        Q 004240
MAXDEC   SUBIN SAVE=R4             PRESEREV RETURN ADDRESS              Q 004250
         CP    0(16,R1),$ZERO       IS VALUE ZERO                       Q 004260
         BE MAXDECX                BYPASS ROUTINE IF ZERO VALUE         Q 004270
         LA    R14,8(,R1)          POINT R14 AT LAST 8 BYTES OF PD FLD  Q 004280
         BAL   R4,CNTDIG           DETERMINE NO OF SIGNIFICANT DIGITS   Q 004290
         SPACE 1                                                        Q 004300
*        DUE TO THE NATURE OF 'CNTDIG', R14 WILL CONTAIN ZERO IF THE    Q 004310
*         SOURCE FIELD CONTAINS ONLY 1 DIGIT, AND IT IMMEDIATELY        Q 004320
*         PRECEDES THE SIGN.  THIS WILL RESULT IN AN INCORRECT 16 DIGIT Q 004330
*         LEFT SHIFT, AND A POTENTIAL 0CB ABEND IN THE DIVIDE ROUTINE,  Q 004340
*         SO WE MUST DETECT AND ADJUST.                                 Q 004350
         SPACE 1                                                        Q 004360
         LTR   R14,R14             TEST IF R14 CONTAINS ZERO            Q 004370
         BNZ   *+12                BR IF NOT 0 TO NORMAL ADJUST FOR SHI Q 004380
         LA    R14,14              ESTABLISH CORRECT 14 DIGIT SHIFT     Q 004390
         B     *+10                BR OVER OTHER ADJUSTMENT             Q 004400
         SPACE 1                                                        Q 004410
         LCR   R14,R14             REVERSE SIGN OF NDEC ...             Q 004420
         LA    R14,16(,R14)         ... AND ADD 16 TO NEGATIVE NO       Q 004430
*                                  THIS YIELDS NO OF LEADING ZEROES     Q 004440
         SRP   0(16,R1),0(R14),5   MOVE TO LEFT BY NO OF LEADING ZEROES Q 004450
         AH    R14,16(,R1)         ADD PRIOR NDEC TO NO OF DIGITS MOVED Q 004460
         STH   R14,16(,R1)         PRESERVE ADJUSTED NDEC               Q 004470
MAXDECX SUBOUT RESTORE=R4          RESORE & RETURN TP CALLER            Q 004480
         EJECT                                                          Q 004490
*********************************************************************** Q 004500
*        SIGNIF - REDUCE FIELD TO 15 SIGNIFICANT DIGITS               * Q 004510
*********************************************************************** Q 004520
         SPACE 1                                                        Q 004530
*        ON ENTRY: R1 - 16-BYTE PD + 1-BYTE NDEC                        Q 004540
*        ON EXIT:  BE  - FIELD ADJUSTED TO 15 CHARACTERS                Q 004550
*                  BNE - NO ADJUSTMENT REQUIRED                         Q 004560
         SPACE 1                                                        Q 004570
SIGNIF   SUBIN SAVE=R4             PRESERVE RETURN ADDRESS              Q 004580
         MVI   SIGNIFT+1,$Y        ASSUME NO ADJUSTMENT REQUIRED        Q 004590
         CLC   0(8,R1),$LOWVALU    TEST IF > 15 DIGITS NOW PRSEENT      Q 004600
         BE    SIGNIFT             BR IF NO ADJUSTMENT REQUIRED         Q 004610
         MVI   SIGNIFT+1,$X        SHOW THAT ADJUSTMENT WAS MADE        Q 004620
         LR    R14,R1              POINT R14 AT FLD                     Q 004630
         BAL   R4,CNTDIG           DETERMINE HOW MANY DIGITS TO SHIFT   Q 004640
         LCR   R14,R14             REVERSE SIGN FO PURPOSE OF 'SRP'     Q 004650
         TM    CB36SW,SW36NRND     IS ALL RUNDING SUPPRESSED            Q 004660
         BZ    *+14                BR IF ROUNDED                        Q 004670
         SRP   0(16,R1),0(R14),0   SHIFT OUT EXCESS DIGITS              Q 004680
         B     *+10                BYPASS ROUNDED SHIFT                 Q 004690
         SRP   0(16,R1),0(R14),5   SHIFT OUT EXCES DIGITS AND ROUND     Q 004700
         AH    R14,16(,R1)         ADD NDEC TO ADJUST FOR EARLIER 'SRP' Q 004710
         STH   R14,16(,R1)         PRESERVE ADJUSTED NDE                Q 004720
SIGNIFT  CLI   *,$X                SET CONDITION CODE FOR CALLER        Q 004730
        SUBOUT RESTORE=R4          RETURN TO CALLER                     Q 004740
         EJECT                                                          Q 004750
*********************************************************************** Q 004760
*        CNTDIG - COUNT NO OF DIGITS > 15 IN 16-BYTE FIELD            * Q 004770
*********************************************************************** Q 004780
         SPACE 1                                                        Q 004790
*        ON ENTRY: R14 - ADDRESS OF 16-BYTE PG FIELD                    Q 004800
*        ON RETURN R14 - COUNT OF NO OF SIGNIFICANT DIGITS IN 1ST 8 BYT Q 004810
         SPACE 1                                                        Q 004820
*        THE FOLLOWING ROUTINE EWAMINES THE FIRST 8 BYTES OF THE PD     Q 004830
*         FIELD AND DEVELOPS A RATHER CLEVER LITTLE ALGORITHM TO        Q 004840
*         DETERMINE THE NUMBER OF SIGNIFICANT DIGITS THEREIN.           Q 004850
*        THE ALTERNATIVE TO THIS ALGORITHM IS AN 'SRP' LOOP.  THE       Q 004860
*         ALGORITHM IS INCREASINGLY MORE EFFICIENT AS THE NUMBER OF     Q 004870
*         SIGNIFICANT DIGITS IS LESS, AND IS ONLY OUT-PERFORMED BY THE  Q 004880
*         LOOP IN THE CASE OF 16 SIGNIFICANT DIGITS ( AN UNLIKELY       Q 004890
*         OCCURRENCE ).                                                 Q 004900
         SPACE 1                                                        Q 004910
*        THE ALGORITHM IS                                               Q 004920
*              N = (((8-D)*2)+1)-F                                      Q 004930
*        WHERE N IS NO OF SIGNIFICANT DIGITS ( IN THE RANGE 1 - 16 )    Q 004940
*              D IS THE DISPLACEMENT OF THE 1ST NON-ZERO BYTE ( 0 - 7 ) Q 004950
*              F IS THE FUNCTION BYTE RETURNED BY 'TRT' ( X'01' OR X'02 Q 004960
         SPACE 1                                                        Q 004970
CNTDIG   SUBIN SAVE=(R1,R2)        PRESERVE REGISTER CONTENTS           Q 004980
         SR    R2,R2               ZEROISE WORK REGISTER                Q 004990
         TRT   0(8,R14),PDTABLE    EXAMINE 1ST 8 BYTES FOR NON-ZERO     Q 005000
         BE    CNTDIG0             IF ALL BYTES ZERO THEN NO SIGNIF     Q 005010
         SR    R1,R14              DETERMINE DISPLACEMENT OF NONZERO BY Q 005020
         LCR   R1,R1               REVERSE THIS DISPLACEMENT (-D) ...   Q 005030
         LA    R1,8(,R1)            ... AND ADD 8 TO YIELD (8-D)        Q 005040
         SLL   R1,1                MULTIPLY (8-D) BY 2                  Q 005050
         LA    R1,1(,R1)           INCREMENT BY 1 TO YOELD (((8-D)*2)+1 Q 005060
         SR    R1,R2               SUBTRACT FUCTION BYTE FROM TRT       Q 005070
*                                  THIS GIVES (((8-D)*2)+1)-F           Q 005080
         LR    R14,R1              SET NO OF SIGNIF DIGITS IN R14       Q 005090
         B     *+6                 BR TO ROUTINE EXIT                   Q 005100
CNTDIG0  SR    R14,R14             ZEROISE R14 IF ALL ZEROES            Q 005110
        SUBOUT RESTORE=(R1,R2)     RESTORE REGISTERS & RETURN           Q 005120
         SPACE 1                                                        Q 005130
         DROP  R10                 DROP CB36 ADDRESSABILITY             Q 005140
         TITLE 'BUDGIE3Q - EXECUTED INSTRUCTIONS'                       Q 005150
*********************************************************************** Q 005160
*        EXECUTED INSTRUCTIONS                                        * Q 005170
*********************************************************************** Q 005180
         SPACE 1                                                        Q 005190
TESTPACK PACK  $WRKPACK,0(0,R6)    PACK FIELD INTO WORK AREA            Q 005200
TESTMVC  MVC   $TSTAREA(0),0(R6)   MOVE FIELD TO TEST AREA              Q 005210
TESTZAP  ZAP   $WRKPACK,0(0,R6)    MOVE PACKED FIELD TO WORK AREA       Q 005220
UNPKOUT  UNPK  0(0,R6),$WRKPACK    UNPACJ RESULT INTO RECORD            Q 005230
PACKOUT  ZAP   0(0,R6),$WRKPACK    MOVE PACKED RESULT TO RECORD         Q 005240
         EJECT                                                          Q 005250
*        THE FOLLOWING TABLE IS USED TO LOCATE THE 1ST NON-ZERO BYTE    Q 005260
         SPACE 1                                                        Q 005270
PDTABLE  EQU   *                                                        Q 005280
         DC    X'00'               '00'                                 Q 005290
         DC    9X'02',6X'03'       '01' - '09', '0A' - '0F'             Q 005300
         DC    10X'01',6X'03'      'N0' - 'N9', 'NA' -'NF'              Q 005310
         DC    10X'01',6X'03'      'N0' - 'N9', 'NA' -'NF'              Q 005320
         DC    10X'01',6X'03'      'N0' - 'N9', 'NA' -'NF'              Q 005330
         DC    10X'01',6X'03'      'N0' - 'N9', 'NA' -'NF'              Q 005340
         DC    10X'01',6X'03'      'N0' - 'N9', 'NA' -'NF'              Q 005350
         DC    10X'01',6X'03'      'N0' - 'N9', 'NA' -'NF'              Q 005360
         DC    10X'01',6X'03'      'N0' - 'N9', 'NA' -'NF'              Q 005370
         DC    10X'01',6X'03'      'N0' - 'N9', 'NA' -'NF'              Q 005380
         DC    10X'01',6X'03'      'N0' - 'N9', 'NA' -'NF'              Q 005390
         DC    96X'04'             'A0' - 'FF'                          Q 005400
         SPACE 1                                                        Q 005410
*        THE SIGNIFICANCE OF THE FUNCTION BYTES IS:-                    Q 005420
*        '00' - SOURCE BYTE CONTAINS LOW VALUES                         Q 005430
*        '01' - 1ST HALF OF SOURCE BYTE CONTAINS DIGIT (NN)             Q 005440
*        '02' - 2ND HALF OFSOURCE BYTE CONTAINS DIGIT (0N)              Q 005450
*        '03' - SOURCE BYTE CONTAINS DIGIT AND SIGN                     Q 005460
*        '04' - 1ST HALF OF SOURCE BYTE CONTAINS A - F (INVALID)        Q 005470
         SPACE 5                                                        Q 005480
*        THE FOLLOWING TABLES ARE USED TO EFFECT DECIMAL ROUNDING IN    Q 005490
         SPACE 1                                                        Q 005500
RNDTAB1  DC    PL3'0'              ROUNDING INCREMENT FOR 0 PLACES RNDG Q 005510
         DC    PL3'5'              ROUNDING INCREMENT FOR 1 PLACES RNDG Q 005520
         DC    PL3'50'             ROUNDING INCREMENT FOR 2 PLACES RNDG Q 005530
         DC    PL3'500'            ROUNDING INCREMENT FOR 3 PLACES RNDG Q 005540
         DC    PL3'5000'           ROUNDING INCREMENT FOR 4 PLACES RNDG Q 005550
         DC    PL3'50000'          ROUNDING INCREMENT FOR 5 PLACES RNDG Q 005560
         SPACE 1                                                        Q 005570
RNDTAB2  DC    X'FFFFFF'           ZERO MASK FOR 0 PLACES ROUNDING      Q 005580
         DC    X'FFFF0F'           ZERO MASK FOR 1 PLACES ROUNDING      Q 005590
         DC    X'FFF00F'           ZERO MASK FOR 2 PLACES ROUNDING      Q 005600
         DC    X'FF000F'           ZERO MASK FOR 3 PLACES ROUNDING      Q 005610
         DC    X'F0000F'           ZERO MASK FOR 4 PLACES ROUNDING      Q 005620
         DC    X'00000F'           ZERO MASK FOR 5 PLACES ROUNDING      Q 005630
         EJECT                                                          Q 005640
*********************************************************************** Q 005650
*        MATHS ROUTINES WORJ AREAS                                    * Q 005660
*********************************************************************** Q 005670
         SPACE 1                                                        Q 005680
         DS    0F                  ENSURE ALIGNMENT                     Q 005690
NDECMASK DC    X'FFFFFFC0'         PROPAGTAE SIGN THRU REGISTER         Q 005700
OP1      DS    PL8                 1ST OPERAND                          Q 005710
OP1NDEC  DS    H                   NDEC OF 1ST OPERAND                  Q 005720
OP2      DS    PL8                 2ND OPZRAND                          Q 005730
OP2NDEC  DS    H                   NDEC OF 2ND OPERAND                  Q 005740
$WA1     DS    PL16                WORJ AREA FOR 1ST OPERAND            Q 005750
$WA1NDEC DS    H                   NDEC FOR 1ST OPERAND'S W/A           Q 005760
$WA2     DS    PL16                WORK AREA FOR 2ND OPERAND            Q 005770
$WA2NDEC DS    H                   NDEC FOR 2ND OPERAND'S W/A           Q 005780
$WA3     DC    PL16'0'             THIRD WORK RAEA (FOR REMAINDER)      Q 005790
$WA3NDEC DC    H'0'                NDEC OF 3RD WRK AREA                 Q 005800
$WA4     DC    PL16'0'             FOURTH WORK AREA ( FRO REMAINDER )   Q 005810
$WA4NDEC DC    H'0'                NDEC FOR FOURTH WORK AREA            Q 005820
$PDWA    DS    PL16                GENERAL PURPOSE PD W/A               Q 005830
$PDWANDC DS    H                   NO OD DECIMALS FOR W/A               Q 005840
$PDWACNT DS    PL16                WORKA AREA FOR 'CNTDIG^ ROUTINE      Q 005850
$RESULT  DS    PL16                RESULT OF MATHS OPERATION            Q 005860
$RESNDEC DS    H                   NO OF DECIMAL PLACES IM RESULT       Q 005870
$REMANDR DS    PL16                REMAINDER FROM MATHEMATICLA OPERATIO Q 005880
$REMNDEC DS    H                   NO OF DECIMAL PLACES IN REMAINDER    Q 005890
$X       EQU   X'95'                                                    Q 005900
$Y       EQU   X'96'                                                    Q 005910
$LOWVALU DC    X'0000000000000000'                                      Q 005920
RSHIFT1  EQU   X'3F'               'SRP' SHIFT 1 POSN TO RIGHT          Q 005930
         TITLE 'BUDGIE3Q - MISCELLANEOUS CONSTANTS AND FIELDS'          Q 005940
BBMESS21 DC    C'MATHS (FLD   -   ) FAILED'                             Q 005950
BBMESS22 DC    C'MATHS ERR (  -  ) OVERFLOW'                            Q 005960
         SPACE 1                                                        Q 005970
        SCSEND Q                   TERMINATE CSECT BUDGIE3Q             Q 005980
         END                                                            Q 005990
         SPACE 1                                                        Q 006000
         REPRO                                                          Q 006010
 IDENTIFY BUDGIE3Q('MATHEMATICAL ROUTINES')                             Q 006020
         END                                                            Q 006030
