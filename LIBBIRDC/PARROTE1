         TITLE 'PARROTE1 - KEY BREAK PROCESSING'                        E1000100
         MACRO                                                          E1000200
         $CB   &PRINT=OFF          MACRO TO GENERATE DSECTS             E1000300
         PUSH  PRINT               PRESERVE PRINT OPTIONS               E1000400
         PRINT &PRINT              SET PRINT OPTIONS FOR DSECTS         E1000500
               EJECT                                                    E1000600
         CBPREFIX ,                CONTROL BLOCK PREFIX                 E1000700
               EJECT                                                    E1000800
         CCB   ,                   CENTRAL CONTROL BLOCK                E1000900
               EJECT                                                    E1001000
         CSECTID ,                 CSECT IDENTIFICATION PREFIX          E1001100
               EJECT                                                    E1001200
         EQUATES ,                 GENERATE STANDARD EQUATES            E1001300
               EJECT                                                    E1001400
         FDB   ,                   FIELD DEFINITION BLOCK               E1001500
               EJECT                                                    E1001600
         FSA   ,                   FIELD STORAGE AREA                   E1001700
               EJECT                                                    E1001800
         KBD   ,                   KEY BREAK DEFINITION                 E1001900
               EJECT                                                    E1002000
         LCD   ,                   LINE COMPONENT DESCRIPTOR            E1002100
               EJECT                                                    E1002200
         LIB   ,                   LABEL IDENTIFICATION BLOCK           E1002300
               EJECT                                                    E1002400
         OCB   ,                   OUTPUT CONTROL BLOCK                 E1002500
               EJECT                                                    E1002600
         PARROTT DSECT=YES         TRANSLATE TABLES                     E1002700
               EJECT                                                    E1002800
         PCB   ,                   PROCESSING CONTROL BLOCK             E1002900
               EJECT                                                    E1003000
         RST   ,                   RECORD SELECTION TEST DEF'N          E1003100
               EJECT                                                    E1003200
         SCE   ,                   SELECTION CRITERION ELEMENT          E1003300
         POP   PRINT               RESTORE ORIGINAL PRINT OPTIONS       E1003400
         MEND                                                           E1003500
         SPACE 4                                                        E1003600
PARROTE1 CSECT                                                          E1003700
         $CB   ,                   GENERATE DSECTS AND EQUATES          E1003800
         EJECT                                                          E1003900
     SCSECT E1                                                          E1004000
         SPACE 1                                                        E1004100
         ENTRY KEYBRAK             KEY BREAK DETECTION/PROCESSING       E1004200
         ENTRY KEYBLCT             RESET LINE COUNT IF PAGESKIP SUPPRES E1004300
         ENTRY PARENDE1             END IF CSECT                        E1004400
         TITLE 'PARROTE1 - KEY BREAK PROCESSING'                        E1004500
*********************************************************************** E1004600
*        DETECT KEY BREAKS - MAIN-LINE                                * E1004700
*********************************************************************** E1004800
         SPACE 1                                                        E1004900
KEYBRAK  SUBIN SAVE=R4             PRESERVE RETURN ADDRESS              E1005000
         CBAL  R4,KEYBEXT          EXTRACT AND PRESERVE NEW KEYS        E1005100
         CBAL  R4,KEYBTEST         TEST IF KEY BREAK HAS OCCURRED       E1005200
         BE    KEYBRAKX            GO TO EXIT IF NO KEYS CHANGED        E1005300
         CBAL  R4,KEYBNPGE         FORCE SKIP TO NEW PAGE AS NECESSARY  E1005400
         CBAL  R4,KEYBLCD          PROCESS TOTAL LEVEL LCD'S            E1005500
         CBAL  R4,KEYBCBL          PREVENT DUPLICATE FLD SUPPRESSION    E1005600
         CBAL  R4,KEYBLCT          RE-ADJUST LINE COUNTS AS NECESSARY   E1005700
         CBAL  R4,KEYTW80          PERFORM KEY-BREAK TW80 ANALYSES      E1005800
         CBAL  R4,KEYBMPTY         EMPTY TOTAL ACCUMULATORS ETC         E1005900
         CBAL  R4,KEYBSETN         SET NEW KEYS AS CURRENT              E1006000
         CBAL  R4,KEYBHEAD         PROCESS KEY LEVEL CONTROL HEADINGS   E1006100
         CBAL  R4,KEYBLCT          RE-ADJUST LINE COUNTS AS NECESSARY   E1006200
KEYBRAKX CBAL  R4,KEYBRCNT         INCREMENT RECORD COUNTS FOR ALL KEYS E1006300
         CBAL  R4,KEYBSNME         SET NEW NAMES AS CURRENT             E1006400
        SUBOUT RESTORE=R4          RESTORE AND RETURN TO CALLER         E1006500
         EJECT                                                          E1006600
*********************************************************************** E1006700
*        KEY-BREAK PROCESSING:     EXTRACT AND PRESERVE NEW KEYS ETC  * E1006800
*********************************************************************** E1006900
         SPACE 1                                                        E1007000
         USING LIBNTRY,R7          ESTABLISH LIB ADDRESSABILITY         E1007100
         USING KBDNTRY,R8          ESTBALISH KBD ADDRESSABILITY         E1007200
KEYBEXT  SUBIN SAVE=R4             PRESERVE RETURN ADDRESS              E1007300
         TM    $STATUS,STATEOD     IS THIS END OF INPUT FILE            E1007400
         BO    KEYBEXTX            SKIP EXTRACTING KEYS IF YES          E1007500
         LTA   R8,$KBDKBD          GET ADDRESS OF 1ST KBD               E1007600
         B     *+8                 BYPASS FORWARD CHAINING              E1007700
KEYBEXT1 LTA   R8,KBDKBD,KEYBEXTX  GET ADDRESS OF NEXT KBD              E1007800
         NULCB KBD,KEYBEXT1        LOOP BACK FOR NEXT IF THIS NULLIFIED E1007900
         L     R7,KBDKLIB          GET ADDRESS OF LIB FOR KEY           E1008000
         TM    LIBTYPE,LIBTNUM     IS THIS A NUMERIC KEY                E1008100
         BO    KEYBEXT2            BR IF KEY IS NUMERIC                 E1008200
         CBAL  R4,EXTCKEY          EXTRCAT CHARACTER KEY FIELD          E1008300
         B     KEYBEXT3            GO PROCESS NAME FIELD                E1008400
KEYBEXT2 CBAL  R4,EXTNKEY          EXTRACT NUMERIC KEY FIELD            E1008500
KEYBEXT3 CBAL  R4,EXTNAME          EXTRACT NAME FIELD ( IF ANY )        E1008600
         B     KEYBEXT1            LOOP BACK FOR NEXT KBD               E1008700
KEYBEXTX TM    $PROCESS,PROCINIT   IS THIS THE 1ST TIME THROUGH         E1008800
         BZ    *+8                 BR IF NOT                            E1008900
         CBAL  R4,KEYBSETN         SET NEW KEYS AS CURRENT IF 1ST TIME  E1009000
        SUBOUT RESTORE=R4          RESTORE AND RETURN TO CALLER         E1009100
         DROP  R8                  DROP KBD ADDRESSABILITY              E1009200
         DROP  R7                  DROP LIB ADDRESSABILITY              E1009300
         EJECT                                                          E1009400
*********************************************************************** E1009500
*        KEY-BREAK PROCESSING:     EXTRACT NUMERIC KEY FIELD          * E1009600
*********************************************************************** E1009700
         SPACE 1                                                        E1009800
         USING LIBNTRY,R5          ESTABLISH LIB ADDRESSABILITY         E1009900
         USING FDBNTRY,R7          ESTABLISH FDB ADDRESSABILITY         E1010000
         USING KBDNTRY,R8          ESTBALISH KBD ADDRESSABILITY         E1010100
EXTNKEY  SUBIN SAVE=(R4,R5)        PRESERVE RETURN ADDRESS              E1010200
         LR    R5,R7               SET LIB ADDRESS IN R5                E1010300
         LTA   R7,LIBFDB           GET ADDRESS OF 1ST FDB               E1010400
         B     *+8                 BYPASS FORWARD CHAINING              E1010500
EXTNKEY1 LTA   R7,FDBFDB,EXTNKEYX  GET ADDRESS OF NEXT FDB              E1010600
         NULCB FDB,EXTNKEY1        LOOP BACK FOR NEXT IF THIS NULLIFIED E1010700
         LTA   R10,FDBSCE,EXTNKEY2 GET ADDRESS OF 1ST SCE ( IF ANY )    E1010800
         CBAL  R4,SCEPROC          TEST IF SELECTION CRITERIA SATISFIED E1010900
         BNE   EXTNKEY1            LOOP BACK FOR NEXT FDN IF NOT        E1011000
EXTNKEY2 CBAL  R4,DETLCONV         CONVERT NUMERIC TO FLOATING POINT    E1011100
         L     R1,KBDNEXTK         GET ADDRESS OF STORE FOR NEXT KEY    E1011200
         MVC   0(8,R1),$FPFP       MOVE FP KEY VALUE TO STORE           E1011300
         B     EXTNKEY1            LOOP BACK FOR NEXT FDB               E1011400
EXTNKEYX SUBOUT RESTORE=(R4,R5)    RESTORE AND RETURN TO CALLER         E1011500
         DROP  R8                  DROP KBD ADDRESSABILITY              E1011600
         DROP  R7                  DROP FDB ADDRESSABILITY              E1011700
         DROP  R5                  DROP LIB ADDRESSABILITY              E1011800
         EJECT                                                          E1011900
*********************************************************************** E1012000
*        KEY-BREAK PROCESSING:     EXTRACT CHARACTER KEY FIELD        * E1012100
*********************************************************************** E1012200
         SPACE 1                                                        E1012300
         USING LIBNTRY,R7          ESTABLISH LIB ADDRESSABILITY         E1012400
         USING FDBNTRY,R8          ESTABLISH FDB ADDRESSABILITY         E1012500
EXTCKEY  SUBIN SAVE=(R4,R6,R8)     PRESERVE RETURN ADDRESS              E1012600
         LTA   R8,LIBFDB           GET ADDRESS OF 1ST FDB FOR THIS CKEY E1012700
         B     *+8                 BYPASS FORWARD CHAINING              E1012800
EXTCKEY1 LTA   R8,FDBFDB,EXTCKEYX  GET ADDRESS OF NEXT FDB, IF ANY      E1012900
         NULCB FDB,EXTCKEY1        LOOP BACK FOR NEXT IF THIS NULLIFIED E1013000
         LTA   R10,FDBSCE,EXTCKEY2 GET ADDRESS OF 1ST SCE, IF ANY       E1013100
         CBAL  R4,SCEPROC          TEST IF SELECTION CRITERIA SATISFIED E1013200
         BNE   EXTCKEY1            LOOP BACK FOR NEXT FDB IF NOT        E1013300
EXTCKEY2 SUBLR R1,R8               RETRIEVE KBD ADDRESS AND PLACE IN R1 E1013400
         USING KBDNTRY,R1          ESTABLISH KBD ADDRESSABILITY         E1013500
         L     R1,KBDNEXTK         GET ADDRESS OF STORE FOR NEXT KEY    E1013600
         DROP  R1                  DROP KBD ADDRESSABILITY              E1013700
         SUBLR R6                  REFRESH RECORD ADDRESS FROM SAVEAREA E1013800
         AH    R6,FDBFLDP          POINT R6 AT THE SOURCE FIELD         E1013900
         IC    R15,FDBFLDL         RETRIEVE EXECUTABLE LENGTH           E1014000
         EX    R15,MVCCKEYN        MOVE NEW NAE TO STORGE AREA          E1014100
         B     EXTCKEY1            LOOP BACK FOR NEXT FDB               E1014200
EXTCKEYX SUBOUT RESTORE=(R4,R6,R8) RESTORE AND RETURN TO CALLER         E1014300
         DROP  R8                  DROP FDB ADDRESSABILITY              E1014400
         DROP  R7                  DROP LIB ADDRESSABILITY              E1014500
         EJECT                                                          E1014600
*********************************************************************** E1014700
*        KEY-BREAK PROCESSING:     EXTRACT NAME FIELD                 * E1014800
*********************************************************************** E1014900
         SPACE 1                                                        E1015000
         USING LIBNTRY,R7          ESTABLISH LIB ADDRESSABILITY         E1015100
         USING KBDNTRY,R8          ESTBALISH KBD ADDRESSABILITY         E1015200
EXTNAME  SUBIN SAVE=(R4,R6,R8)     PRESERVE RETURN ADDRESS              E1015300
         TM    KBDSW,MKBDNAME      IS THIS A NAME FIELD                 E1015400
         BZ    EXTNAMEX            GO TO EXIT IF NOT                    E1015500
         L     R7,KBDNLIB          GET ADDRESS OF LIB DEFINING NAME     E1015600
         DROP  R8                  DROP KBD ADDRESSABILITY              E1015700
         USING FDBNTRY,R8          ESTABLISH FDB ADDRESSABILITY         E1015800
         LTA   R8,LIBFDB           GET ADDRESS OF 1ST FDB FOR THIS NAME E1015900
         B     *+8                 BYPASS FORWARD CHAINING              E1016000
EXTNAME1 LTA   R8,FDBFDB,EXTNAMEX  GET ADDRESS OF NEXT FDB, IF ANY      E1016100
         NULCB FDB,EXTNAME1        LOOP BACK FOR NEXT IF THIS NULLIFIED E1016200
         LTA   R10,FDBSCE,EXTNAME2 GET ADDRESS OF 1ST SCE, IF ANY       E1016300
         CBAL  R4,SCEPROC          TEST IF SELECTION CRITERIA SATISFIED E1016400
         BNE   EXTNAME1            LOOP BACK FOR NEXT FDB IF NOT        E1016500
EXTNAME2 SUBLR R1,R8               RETRIEVE KBD ADDRESS AND PLACE IN R1 E1016600
         USING KBDNTRY,R1          ESTABLISH KBD ADDRESSABILITY         E1016700
         L     R1,KBDNEXTN         GET ADDRESS OF STORE FOR NEXT NAME   E1016800
         DROP  R1                  DROP KBD ADDRESSABILITY              E1016900
         SUBLR R6                  REFRESH RECORD ADDRESS FROM SAVEAREA E1017000
         AH    R6,FDBFLDP          POINT R6 AT THE SOURCE FIELD         E1017100
         IC    R15,FDBFLDL         RETRIEVE EXECUTABLE LENGTH           E1017200
         EX    R15,MVCNAMEN        MOVE NEW NAE TO STORGE AREA          E1017300
         B     EXTNAME1            LOOP BACK FOR NEXT FDB               E1017400
EXTNAMEX SUBOUT RESTORE=(R4,R6,R8) RESTORE AND RETURN TO CALLER         E1017500
         DROP  R8                  DROP FDB ADDRESSABILITY              E1017600
         DROP  R7                  DROP LIB ADDRESSABILITY              E1017700
         EJECT                                                          E1017800
*********************************************************************** E1017900
*        KEY-BREAK PROCESSING:     TEST IF KEYBREAK OCCURRED          * E1018000
*********************************************************************** E1018100
         SPACE 1                                                        E1018200
*        UPON EXIT, THE COND CODE IS SET THUS :-                        E1018300
*         BE  - ALL KEYS ARE THE SAME                                   E1018400
*         BNE - AT LEAST ONE KEY HAS CHANGED                            E1018500
         SPACE 1                                                        E1018600
*        UPON RETURN, IN THE EVENT OF A KEYBREAK, THE FOLLOWING ARE SET E1018700
*         $PTRKBD  - ADDRESS OF HIGHEST KBD THAT CHANGED                E1018800
*         R8       - ADDRESS OF HIGHEST KBD THAT CHANGED                E1018900
         SPACE 1                                                        E1019000
         USING FSANTRY,R1          ESTABLISH FSA ADDRESSABILITY         E1019100
         USING LIBNTRY,R7          ESTABLISH LIB ADDRESSABILITY         E1019200
         USING KBDNTRY,R8          ESTBALISH KBD ADDRESSABILITY         E1019300
KEYBTEST SUBIN SAVE=R4             PRESERVE RETURN ADDRESS              E1019400
         TM    $STATUS,STATEOD     IS THIS END OF FILE TIME             E1019500
         BO    KEYBTSTY            BR IF YES TO SIMULATE KEYBREAK       E1019600
         LTA   R8,$KBDKBD          GET ADDRESS OF 1ST KBD               E1019700
         B     *+8                 BYPASS FORWARD CHAINING              E1019800
KEYBTST1 LTA   R8,KBDKBD,KEYBTSTX  GET ADDRESS OF NEXT KBD              E1019900
         NULCB KBD,KEYBTST1        LOOP BACK FOR NEXT KBD IF THIS NULLI E1020000
         ST    R8,$PTRKBD          ASSUME KEYBREAK AND PRESERVE ADDRESS E1020100
         OI    KBDSW,MKBDCURR      ASSUME KEYBREADK AND SET FLAG        E1020200
         L     R7,KBDKLIB          GET ADDRESS OF ASSOCIATED KEY LIB    E1020300
         L     R1,LIBFSA           GET ADDRESS OF FSA                   E1020400
         TM    LIBSW,LIBTNUM       IS THIS A NUMERIC KEY FIELD          E1020500
         BO    KEYBTST2            BR IF NUMERIC FIELD                  E1020600
         IC    R15,LIBFLDL         GET EXECUTABLE LENGTH OF (CHAR) FIEL E1020700
         L     R2,KBDCURRK         GET ADDRESS OF CURRENT KEY STORE     E1020800
         L     R3,KBDNEXTK         GET ADDRESS OF NEXT KEY STORE        E1020900
         EX    R15,KEYCOMP         COMPARE1 KEYS (NEW:OLD)              E1021000
         B     KEYBTST3            GO TEST RESULT OF COMPARE1           E1021100
         EJECT                                                          E1021200
*********************************************************************** E1021300
*        KEY-BREAK PROCESSING:     TEST IF KEY BREAK OCCURRED ( CONT'D* E1021400
*********************************************************************** E1021500
         SPACE 1                                                        E1021600
KEYBTST2 MVC   $FPVAL1,FSASTORE    MOVE ( FP ) CURRENT KEY              E1021700
         MVC   $FPVAL2,FSASTORE+8  MOVE ( FP ) NEW KEY VALUE            E1021800
         LD    FPR2,$FPVAL1        SET CURRENT KEY VALUE ON FPR2        E1021900
         LD    FPR4,$FPVAL2        SET NEXT KEY VALUE IN FPR4           E1022000
         CDR   FPR4,FPR2           COMPARE1 KEYS ( NEW:OLD )            E1022100
KEYBTST3 BH    KEYBTSTY            BR IF NEW KEY HIGHER                 E1022200
         BL    KEYBTSTW            BR IF NEW KEY LOWER                  E1022300
         NI    KBDSW,FF-MKBDCURR   SET OFF FLAG SHOWING KEYBREAK        E1022400
         B     KEYBTST1            LOOP BACK FOR NEXT KBD               E1022500
KEYBTSTW TM    SWPARM,MPRMSEQ      IS SEQUENCE CHECKING REQUIRED        E1022600
         BZ    KEYBTSW1            BR IF NO SEQUENCE CHECKING REQUESTED E1022700
         ABEND 12                  ABNORMALLY TERMINATE TO HIGHLIGHT ER E1022800
KEYBTSW1 CLI   *,W                 SET COND CODE LOW TO SHOW KEY STATUS E1022900
         B     *+8                 BYPASS RESETTING COND CODE           E1023000
KEYBTSTY CLI   *,Y                 SET VOND CODE HIGH TO SHOW STATUS    E1023100
         B     *+8                 BYPASS RESETTING COND CODE           E1023200
KEYBTSTX CLI   *,X                 SET COND CODE TO SHOW NO KEY-BREAK   E1023300
        SUBOUT RESTORE=R4          RESTORE AND RETURN TO CALLER         E1023400
         DROP  R8                  DROP KBD ADDRESSABILITY              E1023500
         DROP  R7                  DROP LIB ADDRESSABILITY              E1023600
         DROP  R1                  DROP FSA ADDRESSABILITY              E1023700
         EJECT                                                          E1023800
*********************************************************************** E1023900
*        KEY-BREAK PROCESSING:     PRODUCE TOTAL LINES                * E1024000
*********************************************************************** E1024100
         SPACE 1                                                        E1024200
         USING KBDNTRY,R7          ESTABLISH KBD ADDRESSABILITY         E1024300
         USING LCDNTRY,R8          ESTBALISH LCD ADDRESSABILITY         E1024400
KEYBLCD  SUBIN SAVE=R4             PRESERVE RETURN ADDRESS              E1024500
         NI    $STATUS,FF-STATEOD  SET OFF EOD STATUS TEMPORARILY       E1024600
         LTA   R7,$LPTRKBD         GET ADDRESS OF LAST (MINOR) KEY      E1024700
         B     *+8                 BYPASS BACKWARD CHAINING             E1024800
KEYBLCD1 LTA   R7,KBDLKBD,KEYBLCD4 GET ADDRESS OF PREVIOUS (HIGHER) KBD E1024900
         ST    R7,$PTRKBD          PRESERVE ADDRESS OF CURRENT KBD      E1025000
         MVC   $KEYNO,KBDKNUM      SET KEY NUMBER IN WORK FIELD         E1025100
         TM    $TOTLSW,MTOTPCB     ARE THERE AND 'T' TYPE PCB'S         E1025200
         BZ    KEYBLCD6            BR IF NO 'T' TYPE PCB'S              E1025300
         MVI   $PROCTYP,C'T'       SET TO PERFORM T-TYPE PCB'S          E1025400
         CBAL  R4,PCBPROC           ... AND GO AND PROCESS THEM         E1025500
KEYBLCD6 TM    KBDSW,MKBDPSKP      IS PAGE SKIP REQUIRED FOR THIS KEY   E1025600
         BZ    *+12                BR IF NO PAGE SKIP REQUIRED          E1025700
         OI    $PROCESS,PROCKEYH   SET FLAG FOR HEADINGS IN DETAIL RTN  E1025800
         OI    $STATUS2,STAT2NKH   AND WARN RTN 'KEYBHEAD' NOT TO PRT   E1025900
         CBAL  R4,KEYBRPC          RESET PAGE COUNTERS IF NECESSARY     E1026000
         TM    KBDSW,MKBDPCB       DOES THIS KEY NO. HAVE ANY PCB'S     E1026100
         BZ    KEYBLCD0            BR IF NO PCB'S FOR THIS SPECIFIC KEY E1026200
         MVC   $PROCTYP,KBDKEYNO   SET KEY NO. IN PCB TYPE INDICATOR    E1026300
         CBAL  R4,PCBPROC          PROCESS THE PCB'S FOR THIS KEY       E1026400
KEYBLCD0 TM    KBDSW,MKBDTOTL      DOES THIS KEY REQUIRE A TOTAL        E1026500
         BZ    KEYBLCD3            GO TEST IF CHAIN EXHAUSTED IF NO TOT E1026600
         TM    KBDPSW,MKBD$1+MKBD$2 ARE LINES SUPPRESSED FOR THIS KEY   E1026700
         BNZ   KEYBLCD3            BR IF YES                            E1026800
         CBAL  R4,TOTLSPCE         ESTABLISH SPACING AS REQUIRED        E1026900
         TM    KBDSW,MKBDGR12      ARE THERE TOTAL LEVEL LCD'S FOR THIS E1027000
         BZ    KEYBLCD2            BR IF NO TOTAL LEVEL LCD'S AVAILABLE E1027100
         CBAL  R4,KLCDTOTL         PROCESS TOTAL LEVEL LCD'S FOR THIS K E1027200
         B     KEYBLCD3            GO TEST IF CHAIN EXHAUSTED           E1027300
KEYBLCD2 CBAL  R4,KLCDGR11         GO PROCESS GR11 DETAIL CHAIN OF LCD' E1027400
         EJECT                                                          E1027500
*********************************************************************** E1027600
*        KEY BREAK PROCESSING:     PRODUCE TOTAL LINES ( CONT'D )     * E1027700
*********************************************************************** E1027800
         SPACE 1                                                        E1027900
KEYBLCD3 ZAP   KBDRCNT,$ZERO       ZEROISE RECORD COUNT FOR THIS KEY    E1028000
         CBAL  R4,KEYBTOTL         ROLL ACCUMULATORS INTO PREVIOUS KEY  E1028100
         TM    KBDSW,MKBDCURR      DID THIS KEY TRIGGER BREAK           E1028200
         BZ    KEYBLCD1            LOOP BACK FOR PREVIOUS KBD IF NO     E1028300
         NI    KBDSW,FF-MKBDCURR   SET OFF FLAG SHOWING BREAK TRIGGERED E1028400
         B     KEYBLCDX            GO TO EXIT                           E1028500
KEYBLCD4 EQU   *                   FILE TOTAL PROCESSING                E1028600
         OI    $STATUS,STATEOD     RESTORE EOD STATUS FLAG ( SET OFF TO E1028700
*                                   FACILITATE PROCESSING BASIC REPORT) E1028800
         XC    $KEYNO,$KEYNO       SET KEYNO TO ZERO                    E1028900
         TM    $STATUS,STATNGRT    IS GRAND TOTAL SUPPRESSED            E1029000
         BO    KEYBLCDX            EXIT IF YES                          E1029100
         CBAL  R4,FTOTOCB          FORCE SKIP TO NEW PAGE               E1029200
         MVI   $PROCTYP,C'T'       SET TO PROCESS ANY T-LEVEL PCB'S     E1029300
         CBAL  R4,PCBPROC          PROCESS ANY SUCH PCB'S               E1029400
         MVI   $PROCTYP,C'0'       SET TO PROCESS ANY O-LEVEL PCB'S     E1029500
         CBAL  R4,PCBPROC          PROCESS ANY SUCH PCB'S               E1029600
         TM    $STATUS,STATKBDT    DO FILE TOTAL LCD'S EXIST            E1029700
         BZ    KEYBLCD5            BR IF NOT                            E1029800
         CBAL  R4,KLCDTOTL         PROCESS TOTAL LEVEL LCD'S FOR FILE   E1029900
         B     KEYBLCDX            GO TO EXIT                           E1030000
KEYBLCD5 CBAL  R4,KLCDGR11         PROCESS DETAIL LCD CHAIN FOR FILE TO E1030100
KEYBLCDX SUBOUT RESTORE=R4         RESTORE AND RETURN TO CALLER         E1030200
         DROP  R8                  DROP LCD ADDRESSABILITY              E1030300
         DROP  R7                  DROP KBD ADDRESSABILITY              E1030400
         EJECT                                                          E1030500
*********************************************************************** E1030600
*        KEY-BREAK PROCESSING:     RESET PAGE COUNTERS IF NECESSARY   * E1030700
*********************************************************************** E1030800
         SPACE 1                                                        E1030900
         USING KBDNTRY,R7          ESTABLISH KBD ADDRESSABILITY         E1031000
         USING OCBNTRY,R1          ESTABLISH OCB ADDRESSABILITY         E1031100
KEYBRPC  SUBIN ,                   ENTER ROUTINE                        E1031200
         TM    KBDPSW,MKBDRPC      ARE PAGE COUNTERS TO BE RESET        E1031300
         BZ    KEYBRPCX            EXIT IF NOT TO BE RESET              E1031400
         LTA   R1,$OCBOCB          GET ADDRESS OF 1ST OCB ( 'PRINT' )   E1031500
         B     *+8                 BYPASS FORWARD CHAINING              E1031600
KEYBRPC1 LTA   R1,OCBOCB,KEYBRPCX  GET ADDRESS OF NEXT OCB              E1031700
         ZAP   OCBPCNT,$ZERO       ZEROISE PAGE COUNTER                 E1031800
         B     KEYBRPC1            LOOP BACK TO PROCESS NEXT OCB        E1031900
KEYBRPCX SUBOUT ,                  RETURN TO CALLER                     E1032000
         DROP  1                   DROP OCB ADDRESSABILITY              E1032100
         DROP  R7                  DROP KBD ADDRESSABILITY              E1032200
         EJECT                                                          E1032300
*********************************************************************** E1032400
*        KEY-BREAK PROCESSING:     PROCESS TOTAL LEVEL LCD'S          * E1032500
*********************************************************************** E1032600
         SPACE 1                                                        E1032700
         USING LCDNTRY,R8          ESTABLISH LCD ADDRESSABILITY         E1032800
KLCDTOTL SUBIN SAVE=R4             PRESERVE RETURN ADDRESS              E1032900
         LTA   R8,$LCDTOTL         GET ADDRESS OF 1ST TOTAL CLD         E1033000
         B     *+8                 BYPASS FORWARD CHAINING              E1033100
KLCDTOT1 LTA   R8,LCDLCD,KLCDTOT3  GET ADDRESS OF NEXT LCD              E1033200
         CLC   LCDKEYN,$KEYNO+1    DOES LCD APPLY TO THIS KEY           E1033300
         BNE   KLCDTOT1            LOOP BACK FOR NEXT LCD IF NO         E1033400
         NULCB LCD,KLCDTOT1        GET NEXT LCD IF THIS NULLIFIED       E1033500
         TM    LCDSW,MLCDGR11      IS THIS A GR11 REQUEST               E1033600
         BZ    KLCDTOT2            BR IF NOT A GR11 REQUEST             E1033700
         CBAL  R4,KEYBGR11         PROCESS GR11 REQUEST                 E1033800
         B     KLCDTOT1            LOOP BACK FOR NEXT LCD               E1033900
KLCDTOT2 CBAL  R4,PROCLCD,NESTED=YES PROCESS TOTAL LEVEL LCD            E1034000
         BL    KLCDTOT3            TERMINATE PROCESSING IF 'DELETE'     E1034100
         B     KLCDTOT1            LOOP BACK FOR NEXT LCD               E1034200
KLCDTOT3 CBAL  R4,KEYBOCB          ISSUE ANY OUTSTANDING WRITES         E1034300
KLCDTOTX SUBOUT RESTORE=R4         RESTORE AND RETURN TO CALLER         E1034400
         DROP  R8                  DROP LCD ADDRESSABILITY              E1034500
         EJECT                                                          E1034600
*********************************************************************** E1034700
*        KEY-BREAK PROCESSING:     PROCESS DETAIL LCD CHAIN           * E1034800
*********************************************************************** E1034900
         SPACE 1                                                        E1035000
         USING LCDNTRY,R8          ESTABLISH LCD ADDRESSABILITY         E1035100
KLCDGR11 SUBIN SAVE=R4             PRESERVE RETURN ADDRESS              E1035200
         LTA   R8,$LCDDETL         GET 1ST LCD ON DETAIL CHAIN          E1035300
         B     *+8                 BYPASS FORWARD CHAINING              E1035400
KLCDGR1  LTA   R8,LCDLCD,KLCDGR2   GET ADDRESS OF NEXT LCD              E1035500
         CBAL  R4,PROCLCD,NESTED=YES PROCESS DETAIL LAVEL LCD           E1035600
         BL    KLCDGR2             TERMINATE PROCESSING IF 'DELETE'     E1035700
         B     KLCDGR1             LOOP BACK FOR NEXT LCD               E1035800
KLCDGR2  CBAL  R4,KEYBOCB          ISSUE ANY OUTSTANDING WRITES         E1035900
        SUBOUT RESTORE=R4          RESTORE AND RETURN TO CALLER         E1036000
         DROP  R8                  DROP LCD ADDRESSABILITY              E1036100
         EJECT                                                          E1036200
*********************************************************************** E1036300
*        KEY-BREAK PROCESSING:     SUPPRESS SKIP TO NEW PAGE IF NEC   * E1036400
*********************************************************************** E1036500
         SPACE 1                                                        E1036600
*        PARROT TRIES TO KEEP ALL ASSOCIATED TOTAL LINES ON ONE PAGE,   E1036700
*         SO IN THE EVENT OF A TOTAL BREAK, WE DETERMINE IF ALL THE     E1036800
*         TOTAL LINES WILL FIT ON THE SAME PAGE, AND IF NOT WE FORCE    E1036900
*         A PAGE SKIP.  THIS IS ACCOMPLISHED BY THIS ROUTINE AND THE    E1037000
*         NEXT ( KEYBLCT  ), BY:-                                       E1037100
*              .PRESERVING AND ZEROISING THE CURRENT LINE COUNT         E1037200
*              .PRINTING THE TOTAL LINES                                E1037300
*              .RESETTING THE LINE COUNT BY ADDING THE PRESERVED VALUE  E1037400
*              .SETTING TO PRINT-NO-SPACE A BLANK LINE                  E1037500
*              .ISSUING THE DUMMY WRITE, TRIGGERING A PAGE SKIP IF NEC  E1037600
         SPACE 1                                                        E1037700
         USING KBDNTRY,R1          ESTABLISH KBD ADDRESSABILITY         E1037800
         USING OCBNTRY,R7          ESTABLISH OCB ADDRESSABILITY         E1037900
KEYBNPGE SUBIN SAVE=R4             PRESERVE RETRUN ADDRESS              E1038000
         LTA   R7,$OCBOCB          GET ADDRESS OF 1ST OCB ('PRINT')     E1038100
         B     *+8                 BYPASS FORWARD CHAINING              E1038200
KEYBNP1  LTA   R7,OCBOCB,KEYBNPX   GET ADDRESS OF NEXT OCB              E1038300
         NULCB OCB,KEYBNP1         GET NEXT OCB IF THIS NULLIFIED       E1038400
         TM    OCBSW,MOCBREPT      IS THIS A REPORT DATA SET            E1038500
         BZ    KEYBNP1             GET NEXT OCB IF NOT A REPORT         E1038600
         TM    OCBSW,MOCB2080      IS THIS A TWENTY80 REPORT DATA SET   E1038700
         BO    KEYBNP1             GET NEXT OCB IF YES                  E1038800
         TM    OCBSW,MOCBDETL      ARE DETAIL LINES BEING PRINTED       E1038900
         BO    KEYBNP2             BR IF YES: PAGE SUPPRESSION REQ'D    E1039000
         LTA   R1,$PTRKBD,KEYBNP1  GET ADDRESS OF KBD CAUSING KEYBREAK  E1039100
         NC    KBDKBD+1(3),KBDKBD+1 IS THIS THE LOWEST LEVEL KEY        E1039200
         BZ    KEYBNPX             BR IF LOWEST LEVEL KEY:NO SUPPRESSIO E1039300
KEYBNP2  OI    OCBSW,MOCBACNT      FLAG THAT LINE COUNT ADJUSTED        E1039400
         L     R2,OCBIOSW          GET ADDRESS OF ASSOCIATED DCBSW      E1039500
         ZAP   OCBLCNT,IOPSRCNT(4,R2) PRESERVE CURRENT LINE COUNT VALUE E1039600
         ZAP   IOPSRCNT(4,R2),$ZERO ZEROISE LINE COUNT TO PREVENT PAGES E1039700
         B     KEYBNP1             LOOP BACK FOR NEXT OCB               E1039800
KEYBNPX SUBOUT RESTORE=R4          RESTORE AND RETURN TO CALLER         E1039900
         DROP  R7                  DROP OCB ADDRESSABILITY              E1040000
         DROP  R1                  DROP KBD ADDRESSABILITY              E1040100
         EJECT                                                          E1040200
*********************************************************************** E1040300
*        KEY-BREAK PROCESSING:     RESET LINE COUNTERS                * E1040400
*********************************************************************** E1040500
         SPACE 1                                                        E1040600
*        THIS ROUTINE IS INVOKED WHENEVER 'PROCLCD' HAS BEEN USED TO    E1040700
*         PROCESS A  CHAIN OF LCD'S.  IN THE EVENT OF TOTAL PROCESSING  E1040800
*         AND IN THE EVENT OF 'LINE+' PROCESSING, THE TRUE LINE COUNT   E1040900
*         WILL BE IN 'OCBLCNT', WHILE THE ASSOCIATED LINE-COUNT FIELD   E1041000
*         IN THE RELEVENT DCBSW WILL MERELY CONTAIN THE INCREMENTAL     E1041100
*         VALUE.  THIS IS DONE FOR A NUMBER OF REASONS :-               E1041200
*         .TO ENSURE THAT ALL TOTAL LINES APPEAR ON THE SAME PAGE       E1041300
*         .TO ENSURE THAT MULTIPLE LINES FROM 1 DETAIL REC ARE ON THE   E1041400
*          SAME PAGE                                                    E1041500
*         .TO PREVENT THE LOOP THAT RESULTS IF A PAGE SKIP IS TRIGGERED E1041600
*          WITHIN 'PROCLCD'                                             E1041700
         SPACE 1                                                        E1041800
*        THIS ROUTINE DETERMINES IF SUCH PAGE SKIP SUPPRESSION DID      E1041900
*         OCCUR, AND IF IT DID, THEN THE LINECOUNT IS RESET, AND A NEW  E1042000
*         PAGE IS TRIGGERED IF NECESSARY.                               E1042100
         EJECT                                                          E1042200
*********************************************************************** E1042300
*        KEY-BREAK PROCESSING:     RESET LINE COUNTERS ( CONT'D )     * E1042400
*********************************************************************** E1042500
         SPACE 1                                                        E1042600
         USING OCBNTRY,R7          ESTABLISH OCB ADDRESSABILITY         E1042700
KEYBLCT  SUBIN SAVE=R4             PRESERVE RETURN ADDRESS              E1042800
         LTA   R7,$OCBOCB          GET ADDRESS OF 1ST OCB ('PRINT')     E1042900
         B     *+8                 BYPASS FORWARD CHAINING              E1043000
KEYBLC1  LTA   R7,OCBOCB,KEYBLCX   GET ADDRESS OF NEXT OCB              E1043100
         NULCB OCB,KEYBLC1         GET NEXT OCB IF THIS NULLIFIED       E1043200
         TM    OCBSW,MOCBREPT      IS THIS A REPORT DATA SET            E1043300
         BZ    KEYBLC1             LOOP BACK FOR NEXT OCB IF NOT A REPO E1043400
         TM    $PROCESS,PROCKEYH   IS A PAGE SKIP REQUIRED ANYWAY       E1043500
         BZ    KEYBLC2             BR IF NOT REQUIRED                   E1043600
         L     R2,OCBIOSW          GET ADDRESS OF APPROPRIATE DCBSW     E1043700
         AP    IOPSRCNT(4,R2),=P'200' SET LINE COUNT RO FORCE PAGESKIP  E1043800
         B     KEYBLC3             GO RESET THINGS & TRIGGER PAGESKIP   E1043900
KEYBLC2  TM    OCBSW,MOCBACNT      WAS LINE COUNT ADJUSTED              E1044000
         BZ    KEYBLC1             LOOP BACK FOR NEXT OCB               E1044100
KEYBLC3  NI    OCBSW,FF-MOCBACNT   SET OFF 'COUNT ADJUSTED' FLAG        E1044200
         L     R2,OCBIOSW          RETRIEVE DCBSW ADDRESS               E1044300
         AP    IOPSRCNT(4,R2),OCBLCNT RESET LINE COUNT BY ADDING SAVED  E1044400
         ZAP   OCBLCNT,$ZERO       RESET THE LINE COUNTER STORE TO ZERO E1044500
         L     R5,IOPSRECA(R2)     RETRIEVE CURRENT BUFFER ADDRESS      E1044600
         MVI   0(R5),SPCE0AFT      SET TO PRINT-NO-SPACE BLANK LINE     E1044700
         CBAL  R4,WRITEP,NESTED=YES ISSUE WRITE & PERHAPS HEADINGS      E1044800
         B     KEYBLC1             LOOP BACK FOR NEXT OCB               E1044900
KEYBLCX  NI    $PROCESS,FF-PROCKEYH PREVENT SECONDARY PAGESKIPS         E1045000
        SUBOUT RESTORE=R4          RESTORE AND RETURN TO CALLER         E1045100
         DROP  R7                  DROP OCB ADDRESSABILITY              E1045200
         EJECT                                                          E1045300
*********************************************************************** E1045400
*        KEY BRAEK PROCESSING:     PREVENT DUPLICATE SUPPRESSION      * E1045500
*********************************************************************** E1045600
         SPACE 1                                                        E1045700
*        DUPLICATE FIELD SUPPRESSION IS RESET ON CHANGE OF PAGE AND ON  E1045800
*         CHANGE OF KEY, EXCEPT IN THE CASE WHERE DETAIL LINES ARE NOT  E1045900
*         BEING PRIONTED, AND THE KEY THAT CHANGED WAS THE LOWEST.      E1046000
         SPACE 1                                                        E1046100
         USING KBDNTRY,R7          ESTABLISH KBD ADDRESSABILITY         E1046200
KEYBCBL  SUBIN SAVE=R4             PRESERVE RETURN ADDRESS              E1046300
         TM    $PROCESS,PROCBL     ARE THERE ANY 'BL' SPECIFICATIONS    E1046400
         BZ    KEYBCBLX            EXIT IF NOT                          E1046500
         TM    $STATUS,STATDETL    ARE DETAIL LINES BEING PRINTED       E1046600
         BO    KEYBCBL1            BR IF YES: SUPPRESS SUPPRESSION      E1046700
         LTRR  R7                  DOES KBD ADDRESS EXIST               E1046800
         BZ    KEYBCBLX            BR IF NO KBD: FILE TOTAL TIME        E1046900
         NC    KBDKBD+1(3),KBDKBD+1 IS THIS THE LOWEST KEY              E1047000
         BZ    KEYBCBLX            AKIN TO DETAIL LINE IF YES           E1047100
KEYBCBL1 OI    $PROCESS,PROCBLAL   FLAG TO CLEAR ALL 'BL' LCD'S         E1047200
         CBAL  R4,CLEARBL          CLEAR DUPLICATE SUPPRESSION FIELDS   E1047300
KEYBCBLX SUBOUT RESTORE=R4         RESTORE AND RETURN TO CALLER         E1047400
         DROP  R7                  DROP KBD ADDRESSABILITY              E1047500
         EJECT                                                          E1047600
*********************************************************************** E1047700
*        KEY-BREAK PROCESSING:     ROLL ACCUMULATORS INTO PREVIOUS KEY* E1047800
*********************************************************************** E1047900
         SPACE 1                                                        E1048000
*        THIS ROUTINE ADDS OR MOVES NUMERIC VALUES FROM THE ACCUMULATOR E1048100
*         FOR THE CURRENT KEY INTO THE ACCUMULATORS FOR THE PREVIOUS    E1048200
         SPACE 1                                                        E1048300
         USING FSANTRY,R15         ESTABLISH FSA ADDRESSABILITY         E1048400
         USING LIBNTRY,R8          ESTABLISH LIB ADDRESSABILITY         E1048500
         USING KBDNTRY,R7          ESTABLISH KBD ADDRESSABILITY         E1048600
KEYBTOTL SUBIN ,                   ENTER ROUTINE                        E1048700
         TM    KBDPSW,MKBD$2       ARE TOTALS NOT TO BE ROLLED UPWARDS  E1048800
         BO    KEYBTOTX            EXIT IF TOTALS NOT TO BE ROLLED UP   E1048900
         LTA   R8,$LIBLIB          GET ADDRESS OF 1ST LIB               E1049000
         B     *+8                 BYPASS FORWARD CHAINING              E1049100
KEYBTOT1 LTA   R8,LIBLIB,KEYBTOTX  GET ADDRESS OF NEXT LIB              E1049200
         NULCB LIB,KEYBTOT1        GET NEXT LIB IF THIS NULLIFIED       E1049300
         TM    LIBTYPE,LIBTNUM     IS THIS A NUMERIC LIB                E1049400
         BZ    KEYBTOT1            LOOP BACK FOR NEXT LIB IF NOT NUMERI E1049500
         TM    LIBTYPE,LIBTSCAL+LIBTKEY IS THIS A KEY OR A SCALAR       E1049600
         BNZ   KEYBTOT1            LOOP BACK IF YES: NOTHING TO ACCUM   E1049700
         TM    LIBSW,MLIBNROL      ARE VALUES NOT TO BE ROLLED UPWARDS  E1049800
         BO    KEYBTOT1            LOOP BACK FOR NEXT IF NOT            E1049900
         LTA   R15,LIBFSA          GET ADDRESS OF ASSOCIATED FSA        E1050000
         LH    R1,$KEYNO           RETRIEVE CURRENT KEY NUMBER          E1050100
         LR    R2,R1               SET CURRENT KEY NO. IN REG2 ALSO     E1050200
         BCTR  R2,0                DECREMENT TO GET NO. OF PREVIOUS KEY E1050300
         SLL   R1,3                MULTIPLY KEYNO BY 8 FOR DBLEWRD INDE E1050400
         LA    R1,FSAVALUT(R1)     POINT R1 AT ACCUM FOR THIS KEY       E1050500
         SLL   R2,3                (KEYNO - 1) * 8 FOR DBLEWRD INDEX    E1050600
         LA    R2,FSAVALUT(R2)     POINT R2 AT ACCUM FOR PREVIOUS KEY   E1050700
         MVC   $FPVAL1,0(R1)       SET CURRENT KEY VALUE IN FP ACCUM    E1050800
         MVC   $FPVAL2,0(R2)       SET PREVIOUS KEY'S VALUE IN FP ACCUM E1050900
         LD    FPR0,$FPVAL2        SET PREVIOUS KEY'S VALUE IN FP REG   E1051000
         AD    FPR0,$FPVAL1        ADD CURRENT KEY'S VALUE TO PREVIOUS  E1051100
         STD   FPR0,$FPFP          PRESERVE RESULT IN FP WORK AREA      E1051200
         MVC   0(8,R2),$FPFP       PRESERVE UPDATED VALUE IN PREV ACCUM E1051300
         TM    LIBSW,MLIBMOVE      IS VALUE TO BE MOVED, ^ACCUMULATED   E1051400
         BZ    KEYBTOT1            LOOP BACK FOR NEXT LIB IF NOT        E1051500
         CLC   LIBMKEYN,$KEYNO+1   DOES MOVE APPLY TO PREVIOUS KEY      E1051600
         BNL   *+10                BR IF MOVE DOES NOT APPLY            E1051700
         MVC   0(8,R2),0(R1)       MOVE VALUE FROM THIS KEY TO PREVIOUS E1051800
         B     KEYBTOT1            LOOP BACK FOR NEXT LIB               E1051900
KEYBTOTX NI    KBDPSW,FF-MKBD$1-MKBD$2 SET OFF ROLL & PRINT SUPPRESSION E1052000
        SUBOUT ,                   RETURN TO CALLER                     E1052100
         DROP  R7                  DROP KBD ADDRESSABILITY              E1052200
         DROP  R8                  DROP LIB ADDRESSABILITY              E1052300
         DROP  R15                 DROP FSA ADDRESSABILITY              E1052400
         EJECT                                                          E1052500
*********************************************************************** E1052600
*        KEY-BREAK PROCESSING:     SET SPACING AS NECESSARY           * E1052700
*********************************************************************** E1052800
         SPACE 1                                                        E1052900
*        PARROT HAS COMPLEX CRITERIA DICTATING LINE SPACING.  FOR       E1053000
*         TOTAL LINES, PROVIDED THAT DETAIL LINES ARE BEING PRINTED,    E1053100
*         OR FOR THE CASE THAT THIS IS NOT THE LOWEST LEVEL OF TOTAL,   E1053200
*         PRECEDE THE TOTAL LINE WITH ONE BLANK LINE IF THE REPORT IS   E1053300
*         SINGLE SPACED, AND WITH TWO BLANK LINES FOR ALL OTHER SPACING E1053400
         SPACE 1                                                        E1053500
         USING KBDNTRY,R8          ESTABLISH KBD ADDRESSABILITY         E1053600
         USING OCBNTRY,R7          ESTABLISH OCB ADDRESSABILITY         E1053700
TOTLSPCE SUBIN SAVE=(R4,R7)        PRESERVE REGISTERS                   E1053800
         LR    R8,R7               SET KBD ADDRESS IN REG8              E1053900
         LTA   R7,$OCBOCB          GET ADDRESS OF 1ST OCB ('PRINT')     E1054000
         B     *+8                 BYPASS FORWARD CHAINING              E1054100
TOTLSP1  LTA   R7,OCBOCB,TOTLSPX   GET ADDRESS OF ENXT OCB              E1054200
         NULCB OCB,TOTLSP1         GET NEXT OCB IF THIS NULLIFIED       E1054300
         TM    OCBSW,MOCBREPT      IS THIS A REPORT DAAT SET            E1054400
         BZ    TOTLSP1             GET NEXT OCB IF NOT A REPORT         E1054500
         TM    OCBSW,MOCB2080      IS THIS A TWENTY80 REPORT            E1054600
         BO    TOTLSP1             LOOP BACK FOR NEXT OCB IF TWENTY80   E1054700
         TM    OCBSW,MOCBHEAD      WAS LAST LINE WRITTEN A HEADING      E1054800
         BO    TOTLSP1             LOOP BACK FOR NEXT OCB IF YES        E1054900
         TM    OCBSW,MOCBDETL      ARE DETAIL LINES TO BE PRINTED       E1055000
         BO    TOTLSP2             BR ID YES: SPACING REQUIRED          E1055100
         NC    KBDKBD+1(3),KBDKBD+1 IS THIS THE LOWEST LEVEL KEY        E1055200
         BZ    TOTLSP1             LOOP BACK IF YES: SPACING NOT NEEDED E1055300
         EJECT                                                          E1055400
*********************************************************************** E1055500
*        KEY-BREAK PROCESSING:     SET SPACING AS NECESSARY ( CONT'D )* E1055600
*********************************************************************** E1055700
         SPACE 1                                                        E1055800
TOTLSP2  L     R2,OCBIOSW          GET ADDRESS OF ASSOCIATED DCBSW      E1055900
         L     R5,IOPSRECA(R2)     GET ADDRESS OF CURRENT BUFFER        E1056000
         CLI   OCBPCC,SPCE1AFT     IS THE REPORT SINGLE SPACED          E1056100
         BE    *+8                 BR IF SINGLE SPACING                 E1056200
         MVI   0(R5),SPCE2AFT      SET TO PRINT TWO BLANK LINES         E1056300
         CBAL  R4,WRITEP,NESTED=YES PRINT BLANK LINES AS NECESSARY      E1056400
         B     TOTLSP1             LOOP BACK FOR NEXT OCB               E1056500
TOTLSPX SUBOUT RESTORE=(R4,R7)     RESTORE AND RETURN TO CALLER         E1056600
         DROP  R7                  DROP OCB ADDRESSABILITY              E1056700
         DROP  R8                  DROP KBD ADDRESSABILITY              E1056800
         EJECT                                                          E1056900
*********************************************************************** E1057000
*        KEY-BREAK PROCESSING:     FORCE PAGE SKIP FOR FILE TOTALS    * E1057100
*********************************************************************** E1057200
         SPACE 1                                                        E1057300
         USING OCBNTRY,R7          ESTABLISH OCB ADDRESSABILITY         E1057400
FTOTOCB  SUBIN SAVE=(R4,R7)        PRESERVE REGISTERS                   E1057500
         LTA   R7,$OCBOCB          GET ADDRESS OF 1ST OCB ('PRINT')     E1057600
         B     *+8                 BYPASS FORWARD CHAINING              E1057700
FTOTOCB1 LTA   R7,OCBOCB,FTOTOCBX  GET ADDRESS OF NEXT OCB              E1057800
         TM    OCBSW,MOCBREPT      IS THIS A REPORT DATA SET            E1057900
         BZ    FTOTOCB1            LOOP BACK FOR NEXT OCB IF NOT        E1058000
         TM    OCBSW,MOCB2080      IS THIS A TWENTY80 REPORT DATA SET   E1058100
         BO    FTOTOCB1            LOOP BACK FOR NEXT OCB IF YES        E1058200
         ZAP   OCBLCNT,$ZERO       ZEROISE OCB'S LINE COUNT STORE       E1058300
*                                  TO PREVENT PAGESKIP AFTER FINAL TOTL E1058400
         L     R2,OCBIOSW          GET ADDRESS OF ASSOCIATED DCBSW      E1058500
         L     R5,IOPSRECA(R2)     GET BUFFER ADDRESS                   E1058600
         CBAL  R4,WRITEH           PERFORM HEADING ROUTONE              E1058700
         B     FTOTOCB1            LOOP BACK FOR NEXT OCB               E1058800
FTOTOCBX SUBOUT RESTORE=(R4,R7)    RESTORE AND RETURN TO CALLER         E1058900
         DROP  R7                  DROP OCB ADDRESSABILITY              E1059000
         EJECT                                                          E1059100
*********************************************************************** E1059200
*        KEY-BREAK PROCESSING:     PROCESS GR11 REQUEST               * E1059300
*********************************************************************** E1059400
         SPACE 1                                                        E1059500
*        FOR A GR11 SPECIFICATION IN A GR12 CARD, THE FOLLOWING PROCESS E1059600
*         IS TRIGGERED :-                                               E1059700
*         .PROCESS DETAIL LCD'S UNTIL A 'LINE+' IS FOUND                E1059800
*         .THEREAFTER, PROCESS ALL DETAIL LCD'S                         E1059900
         SPACE 1                                                        E1060000
         USING LIBNTRY,R1          ESTABLISH LIB ADDRESSABILITY         E1060100
         USING LCDNTRY,R8          ESTBALISH LCD ADDRESSABILITY         E1060200
         USING OCBNTRY,R11         ESTABLISH OCB ADDRESSABILITY         E1060300
KEYBGR11 SUBIN SAVE=(R4,R8)        PRESERVE RETURN ADDRESS              E1060400
         MVI   GR11IND,C'Y'        SET GR11 INDICATOR FOR VALUE FIELDS  E1060500
         LTA   R8,$LCDDETL         GET ADDRESS OF 1ST DETAIL LCD        E1060600
         B     *+8                 BYPASS FORWARD CHAINING              E1060700
KEYBGR1  LTA   R8,LCDLCD,KEYBGRX   GET ADDRESS OF NEXT LCD              E1060800
         NULCB LCD,KEYBGR1         GET NEXT IF THIS NULLIFIED           E1060900
         SUBLR R15,R8              GET TOTAL LCD ADDRESS BACK           E1061000
         DROP  R8                  SHUFFLE ABOUT THE ADDRESSABILITY     E1061100
         USING LCDNTRY,R15         TEMPORARY ASSIGNMENT TO REGISTER 15  E1061200
         L     R11,LCDOCB          ADDR OF OCB FOR THIS TOTAL-LCD       E1061300
         DROP  R15                 GET LOST YOU 'ORRIBLE WORK-REG       E1061400
         USING LCDNTRY,R8          THAT'S BETTER. GET BACK TO NORMAL R8 E1061500
         CLC   LCDIOLB,OCBLABL     DOES LCD APPLY TO CURRENT OCB        E1061600
         BNE   KEYBGR1             LOOP BACK FOR NEXT IF NOT            E1061700
         CLI   GR11IND,C'Y'        ARE ONLY VALUE FIELDS REQUIRED       E1061800
         BNE   KEYBGR2             BR IF ALL FIELDS ACCEPTABLE          E1061900
         TM    LCDSW,MLCDPRNT      IS THIS A LINE+ REQUEST              E1062000
         BZ    KEYBGR3             BR IF NOT                            E1062100
         MVI   GR11IND,C'N'        SET IND TO ACCEPT ALL DETAIL LCD'S   E1062200
         B     KEYBGR2             BR TO PROCESS LCD                    E1062300
KEYBGR3  TM    LCDSW,MLCDLIT+MLCDCNT IS THIS A LITERAL OR COUNT         E1062400
         BNZ   KEYBGR1             LOOP BACK FOR NEXT LCD IF YES        E1062500
         L     R1,LCDLIB           GET ADDRESS OF ASSOCIATED LIB        E1062600
         TM    LIBTYPE,LIBTNUM     IS THIS A NUMERIC FIELD TYPE         E1062700
         BZ    KEYBGR1             LOOP BACK FOR NEXT LCD IF NOT        E1062800
KEYBGR2  CBAL  R4,PROCLCD,NESTED=YES PROCESS DETAIL LCD                 E1062900
         BL    KEYBGRX             TERMINATE PROCESSING IF 'DELETE'     E1063000
         B     KEYBGR1             LOOP BACK FOR NEXT LCD               E1063100
KEYBGRX SUBOUT RESTORE=(R4,R8)     RESTORE AND RETURN TO CALLER         E1063200
         DROP  R11                 DROP OCB ADDRESSABILITY              E1063300
         DROP  R8                  DROP LCD ADDRESSABILITY              E1063400
         DROP  R1                  DROP LIB ADDRESSABILITY              E1063500
         EJECT                                                          E1063600
*********************************************************************** E1063700
*        KEY-BREAK PROCESSING:     WRITE ANY OUTSTANDING LINES        * E1063800
*********************************************************************** E1063900
         SPACE 1                                                        E1064000
         USING OCBNTRY,R7          ESTABLISH OCB ADDRESSABILITY         E1064100
KEYBOCB  SUBIN SAVE=(R4,R7)        PRESERVE RETURN ADDRESS              E1064200
         LTA   R7,$OCBOCB          GET ADDRESS OF 1ST OCB ( 'PRINT' )   E1064300
         B     *+8                 BYPASS FORWARD CHAINING              E1064400
KEYBOCB1 LTA   R7,OCBOCB,KEYBOCBX  GET ADDRESS OF NEXT OCB IN CHAIN     E1064500
         NULCB OCB,KEYBOCB1        GET NEXT OCB IF THIS NULLIFIED       E1064600
         TM    OCBSW,MOCBRITE      IS A WRITE PENDING FOR THIS OCB      E1064700
         BZ    KEYBOCB1            LOOP BACK FOR NEXT OCB IF NOT        E1064800
         SUBLR R1,R7               RETRIEVE KBD ADDRESS & SET IN REG 1  E1064900
         CBAL  R4,KEYBFLAG         FLAG TOTAL LINE WRITTEN IF NECESSARY E1065000
         TM    OCBSW,MOCBREPT      IS THSI A REPORT DATA SET            E1065100
         BO    KEYBOCB2            BR IF THIS IS A REPORT               E1065200
         CBAL  R4,WRITE            WRITE 'LINE' TO NON-REPORT DATA SET  E1065300
         B     KEYBOCB1            LOOP BACK FOR NEXT OCB               E1065400
KEYBOCB2 CBAL  R4,WRITEP,NESTED=YES WRITE LINE TO REPORT                E1065500
         B     KEYBOCB1            LOOP BACK FOR NEXT OCB               E1065600
KEYBOCBX SUBOUT RESTORE=(R4,R7)    RESTORE AND RETURN TO CALLER         E1065700
         DROP  R7                  DROP OCB ADDRESSABILITY              E1065800
         EJECT                                                          E1065900
*********************************************************************** E1066000
*        KEY-BREAK PROCESSING:     SET TOTAL WRITTEN FLAG IN OCB      * E1066100
*********************************************************************** E1066200
         SPACE 1                                                        E1066300
*        PARROT'S CRITERIA FOR LINE SPACING ARE EXTREMELY COMPLEX.      E1066400
*         AMONG THE DETAILS DICTATING THE SPACING IS THAT, AFTER A      E1066500
*         TOTAL LINE IS PRINTED, A TRIPLE BLANK SPACE IS REQUIRED       E1066600
*         PROVIDED THAT THE TOTAL LINE IS NOT FOLLOWED BY ANOTHER FOR A E1066700
*         HIGHER LAVEL KEY.  AN OCB FLAG ( MOCBTOTL ) IS USED TO        E1066800
*         INDICATE THE NEED FOR SUCH A TRIPLE SPACE, AND THIS ROUTINE   E1066900
*         SETS THE FLAG ON IF ONE OF THE FOLLOWING CONDITIONS IS MET:-  E1067000
*         .DETAILS LINES ARE BEING PRINTED                              E1067100
*         .NO DETAIL LINES ARE BEING PRINTED, AND THE TOTAL LINE JUST   E1067200
*          PRINTED IS NOT THE LOWEST PRINTABLE KEYBREAK.                E1067300
         SPACE 1                                                        E1067400
         USING KBDNTRY,R1          ESTABLISH KBD ADDRESSABILITY         E1067500
         USING OCBNTRY,R7          ESTABLISH OCB ADDRESSABILITY         E1067600
KEYBFLAG SUBIN ,                   ENTER ROUTINE                        E1067700
         TM    $STATUS,STATEOD     IS THIS END OF FILE TIME             E1067800
         BO    KEYBFLX             BR IF YES:NO KBD TO FLAG             E1067900
         TM    OCBSW,MOCBDETL      ARE DETAIL LINES BEING PRINTED       E1068000
         BO    KEYBFLFL            BR IF YES TO SET FLAG                E1068100
         NC    KBDKBD+1(3),KBDKBD+1 IS THIS THE LOWEST LEVEL KBD        E1068200
         BZ    KEYBFLX             BR IF LOWEST KEY: FLAG NOT WANTED    E1068300
KEYBFL1  LTA   R1,KBDKBD,KEYBFLX   GET ADDRESS OF NEXT LOWEST KBD       E1068400
         TM    KBDSW,MKBDTOTL      DOES THIS KBD PRINT LINES            E1068500
         BO    KEYBFLFL            BR IF YES TO SET FLAG                E1068600
         B     KEYBFL1             LOOP BACK TO CHECK NEXT KBD          E1068700
KEYBFLFL OI    OCBSW,MOCBTOTL      SET OCB FLAG TO REQUEST TRIPLE SPACE E1068800
KEYBFLX SUBOUT ,                   RETURN TO CALLER                     E1068900
         DROP  R7                  DROP OCB ADDRESSABILITY              E1069000
         DROP  R1                  DROP KBD ADDRESSABILITY              E1069100
         EJECT                                                          E1069200
*********************************************************************** E1069300
*        KEY-BREAK PROCESSING:     EMPTY ACCUMULATORS                 * E1069400
*********************************************************************** E1069500
         SPACE 1                                                        E1069600
*        THREE TYPES OF ACCUMULATORS REQUIRE EMPTYING :-                E1069700
*         .TOTAL ACCUMULATORS UP TO KEY CAUSING BREAK                   E1069800
*         .DETAIL CHAR STORES PROPAGATED TO KEY LEVEL THAT BROKE        E1069900
*         .DETAIL NUMERIC ACCUMULATORS ONLY RESET FOR KEYBREAK X (NZD)  E1070000
         SPACE 1                                                        E1070100
         USING FSANTRY,R1          ESTABLISH FSA ADDRESSABILITY         E1070200
         USING LIBNTRY,R7          ESTABLISH LIB ADDRESSABILITY         E1070300
         USING KBDNTRY,R8          ESTBALISH KBD ADDRESSABILITY         E1070400
KEYBMPTY SUBIN SAVE=R4             PRESERVE RETURN ADDRESS              E1070500
         TM    $STATUS,STATEOD     IS THIS END OF FILE TIME             E1070600
         BO    KEYBMPTX            BR IF YES: LEAVE ACCUMS FOR STUDY    E1070700
         LTA   R7,$LIBLIB          GET ADDRESS OF 1ST LIB               E1070800
         B     *+8                 BYPASS FORWARD CHAINING              E1070900
KEYBMPT1 LTA   R7,LIBLIB,KEYBMPTX  GET ADDRESS OF NEXT LIB              E1071000
         NULCB LIB,KEYBMPT1        GET NEXT LIB IF THIS NULLIFIED       E1071100
         TM    LIBTYPE,LIBTKEY+LIBTNAME IS THIS A KEY OR NAME           E1071200
         BNZ   KEYBMPT1            GET NEXT LIB IF THIS IS NAME OR KEY  E1071300
         L     R1,LIBFSA           GET ADDRESS OF FSA                   E1071400
         TM    LIBTYPE,LIBTSCAL    IS THIS A SCALAR                     E1071500
         BO    KEYBMPT1            BR IF YES: NOTHING TO EMPTY          E1071600
         TM    LIBTYPE,LIBTNUM     IS THIS A NUMERIC LIB                E1071700
         BO    KEYBMPT2            BR IF YES TO CLEAR ACCUMULATORS      E1071800
         TM    LIBSW,MLIBMOVE      IS THIS A CHAR FLD PROPAGATED THRU K E1071900
         BZ    KEYBMPT1            LOOP BACK FOR NEXT LIB IF NOT        E1072000
         CLC   $KEYNO+1,LIBMKEYN   IS FLD PROPAGATED BEYOND THIS KEY    E1072100
         BH    KEYBMPT1            LOOP BACK FOR NEXT LIB IF YES        E1072200
         MVI   FSASTORE,C' '       MOVE BLANK TO START OF STORE         E1072300
         ICM   R15,1,LIBFLDL       GET EXECUTABLE LENGTH OF FIELD       E1072400
         BZ    KEYBMPT1            LOOP BACK IF LENGTH IS ONE           E1072500
         BCTR  R15,0               DECREMENT FOR EXECUTE OF PROPAGATION E1072600
         EX    R15,NULLCHAR        BLANK OUT CHARACTER STORE            E1072700
         B     KEYBMPT1            LOOP BACK FOR NEXT LIB               E1072800
         EJECT                                                          E1072900
*********************************************************************** E1073000
*        KEY-BREAK PROCESSING:     EMPTY ACCUMULATORS ( CONT'D )      * E1073100
*********************************************************************** E1073200
         SPACE 1                                                        E1073300
KEYBMPT2 TM    LIBSW,MLIBNZD       IS THIS A 'NO ZEROISE DETAIL' FLD    E1073400
         BZ    KEYBMPT3            BR IF NOT A 'NZD' FIELD              E1073500
         CLC   $KEYNO+1,LIBMKEYN   IS DETAIL RETAINED BEYOND THIS KEY L E1073600
         BH    KEYBMPT3            BR IF DETAIL TO BE RETIANED          E1073700
         MVC   FSAVALUR,FPZERO     SET DETAIL VALUE TO ZERO             E1073800
KEYBMPT3 LA    R1,FSAVALUT         GET ADDRESS OF FILE LEVEL ACCUM      E1073900
         LH    R15,$KEYNO          GET NO OF KEY THAT BROKE             E1074000
         SLL   R15,3               MULTIPLY BY 8 FOR INDEX              E1074100
         AR    R1,R15              POINT R1 AT 1ST ACCUMULATOR TO ZEROI E1074200
         LH    R15,$NUMKEYS        RETIREVE TOTZL NO. OF KEYS DEFINED   E1074300
         SH    R15,$KEYNO          SUBTRACT CURRENT KEY NO ...          E1074400
         LA    R15,1(,R15)          ... AND OBTAIN NO. OF ACCUMS TO EMP E1074500
         MVC   0(8,R1),FPZERO      ZEROISE ACCUMULATOR                  E1074600
         LA    R1,8(,R1)           INCREMENT TO NEXT ACCUM              E1074700
         BCT   R15,*-10            LOOP BACK IF ANY LEFT TO ZEROISE     E1074800
         B     KEYBMPT1            LOOP BACK FOR NEXT LIB               E1074900
KEYBMPTX SUBOUT RESTORE=R4         RESTORE AND RETURN TO CALLER         E1075000
         DROP  R8                  DROP KBD ADDRESSABILITY              E1075100
         DROP  R7                  DROP LIB ADDRESSABILITY              E1075200
         DROP  R1                  DROP FSA ADDRESSABILITY              E1075300
         EJECT                                                          E1075400
*********************************************************************** E1075500
*        KEY-BREAK PROCESSING:     SET NEW KEYS AS CURRENT            * E1075600
*********************************************************************** E1075700
         SPACE 1                                                        E1075800
         USING LIBNTRY,R7          ESTABLISH LIB ADDRESSABILITY         E1075900
         USING KBDNTRY,R8          ESTBALISH KBD ADDRESSABILITY         E1076000
KEYBSETN SUBIN SAVE=R4             PRESERVE RETURN ADDRESS              E1076100
         LTA   R8,$KBDKBD          GET ADDRESS OF 1ST KBD               E1076200
         B     *+8                 BYPASS FORWARD CHAINING              E1076300
KEYBSN1  LTA   R8,KBDKBD,KEYBSNX   GET ADDRESS OF NEXT KBD              E1076400
         NULCB KBD,KEYBSN1         GET NEXT KBD IF THIS NULLIFIED       E1076500
         L     R7,KBDKLIB          GET ADDRESS OF LIB FOR KEY FIELD     E1076600
         L     R2,KBDCURRK         GET ADDRES OF STORE OF CURRENT KEY   E1076700
         L     R3,KBDNEXTK         GET ADDRESS OF STORE OF NEX KEY      E1076800
         ICM   R15,1,LIBFLDL       GET EXECUTABLE LENGTH OF FIELD       E1076900
         TM    LIBTYPE,LIBTCHAR    IS THIS A CHARACTER FIELD            E1077000
         BO    *+8                 BR IF YES                            E1077100
         LA    R15,7               SET EXECUTABLE LENGTH OF FP ACCUMULA E1077200
         EX    R15,KEYMOVE         MOVE NEW KEY TO CURRENT STORE        E1077300
         L     R7,KBDNLIB          GET ADDRESS OF NAME FIELD LIB        E1077400
         TM    KBDSW,MKBDNAME      IS THERE A NAME FIELD                E1077500
         BZ    KEYBSN1             EXIT IF NOT                          E1077600
         L     R2,KBDCURRN         GET ADDRESS OF CURRENT NAME          E1077700
         L     R3,KBDNEXTN         GET ADDRESS OF NEW NAME              E1077800
         IC    R15,LIBFLDL         GET EXCEUTABLE LENGTH OF FIELD       E1077900
         EX    R15,KEYMOVE         MOVE NEW NAME TO CURRENT             E1078000
         B     KEYBSN1             GET NEXT KBD                         E1078100
KEYBSNX SUBOUT RESTORE=R4          RESTORE AND RETURN TO CALLER         E1078200
         DROP  R8                  DROP KBD ADDRESSABILITY              E1078300
         DROP  R7                  DROP LIB ADDRESSABILITY              E1078400
         EJECT                                                          E1078500
*********************************************************************** E1078600
*        KEY-BREAK PROCESSING:     SET NEW NAMES AS CURRENT           * E1078700
*********************************************************************** E1078800
         SPACE 1                                                        E1078900
         USING LIBNTRY,R7          ESTABLISH LIB ADDRESSABILITY         E1079000
         USING KBDNTRY,R8          ESTBALISH KBD ADDRESSABILITY         E1079100
KEYBSNME SUBIN SAVE=R4             PRESERVE RETURN ADDRESS              E1079200
         LTA   R8,$KBDKBD          GET ADDRESS OF 1ST KBD               E1079300
         B     *+8                 BYPASS FORWARD CHAINING              E1079400
KEYBNM1  LTA   R8,KBDKBD,KEYBNMX   GET ADDRESS OF NEXT KBD              E1079500
         NULCB KBD,KEYBNM1         GET NEXT KBD IF THIS NULLIFIED       E1079600
         L     R7,KBDKLIB          GET ADDRESS OF LIB FOR KEY FIELD     E1079700
         L     R2,KBDCURRK         GET ADDRES OF STORE OF CURRENT KEY   E1079800
         L     R7,KBDNLIB          GET ADDRESS OF NAME FIELD LIB        E1079900
         TM    KBDSW,MKBDNAME      IS THERE A NAME FIELD                E1080000
         BZ    KEYBNM1             EXIT IF NOT                          E1080100
         L     R2,KBDCURRN         GET ADDRESS OF CURRENT NAME          E1080200
         L     R3,KBDNEXTN         GET ADDRESS OF NEW NAME              E1080300
         IC    R15,LIBFLDL         GET EXCEUTABLE LENGTH OF FIELD       E1080400
         EX    R15,KEYMOVE         MOVE NEW NAME TO CURRENT             E1080500
         B     KEYBNM1             GET NEXT KBD                         E1080600
KEYBNMX SUBOUT RESTORE=R4          RESTORE AND RETURN TO CALLER         E1080700
         DROP  R8                  DROP KBD ADDRESSABILITY              E1080800
         DROP  R7                  DROP LIB ADDRESSABILITY              E1080900
         EJECT                                                          E1081000
*********************************************************************** E1081100
*        KEY-BREAK PROCESSING:     PRODUCE CONTROL HEADINGS           * E1081200
*********************************************************************** E1081300
         SPACE 1                                                        E1081400
         USING KBDNTRY,R10         ESTABLISH KBD ADDRESSABILITY         E1081500
         USING LCDNTRY,R8          ESTBALISH LCD ADDRESSABILITY         E1081600
KEYBHEAD SUBIN SAVE=R4             PRESERVE RETURN ADDRESS              E1081700
         TM    $STATUS,STATCHD     ARE CONTROL HEADINGS REQUIRED        E1081800
         BZ    KEYBHDX             GO TO EXIT IF NOT                    E1081900
         TM    $STATUS,STATEOD     IS THIS END OF IFLE TIME             E1082000
         BO    KEYBHDX             EXIT IF END OF FILE                  E1082100
         TM    $STATUS2,STAT2NKH   HAS KEYBREAK TRIGGERED PAGE SKIP ?   E1082200
         BO    KEYBHDX             POSTPONE CONTROL HEADINGS IF YES     E1082300
         TM    $STATUS2,STAT2EOF   IS THIS REALLY END OF FILE ?         E1082400
         BO    KEYBHDX             POSTPONE CONTROL HEADINGS IF YES     E1082500
         CBAL  R4,KEYBNPGE         SUPPRESS PAGE SKIPS FOR DURATION     E1082600
         CBAL  R4,DETLSPC          SET UP APPROPRIATE DETAIL SPACING    E1082700
         L     R10,$PTRKBD         GET KBD OF HIGHEST KEY THAT CHANGED  E1082800
         LH    R3,$KEYNO           GET KEY NO OF KEY THAT CHANGED       E1082900
         B     KEYBHD4             BYPASS FORWARD CHAINING              E1083000
KEYBHD1  LTA   R10,KBDKBD,KEYBHDX  GET ADDRESS OF NEXT KBD              E1083100
         LA    R3,1(,R3)           INCREMENT TO NEXT KEY NUMBER         E1083200
KEYBHD4  NULCB KBD,KEYBHD1         GET NEXT KBD IF THIS NULLIFIED       E1083300
         LTA   R8,$LCDHEAD         GET ADDRESS OF 1ST HEADINF LCD       E1083400
         B     *+8                 BYPASS FORWARD CHAINING              E1083500
         EJECT                                                          E1083600
*********************************************************************** E1083700
*        KEY-BREAK PROCESSING:     PRODUCE CONTROL HEADINGS ( CONT'D )* E1083800
*********************************************************************** E1083900
         SPACE 1                                                        E1084000
KEYBHD2  LTA   R8,LCDLCD,KEYBHD3   GET ADDRESS OF NEXT LCD              E1084100
         NULCB LCD,KEYBHD2         GET NEXT LCD IF THIS NULLIFIED       E1084200
         TM    LCDSW,MLCDKEYN      IS THIS A CONTROL HEADING LCD        E1084300
         BZ    KEYBHD2             GET NEXT LCD IF NOT                  E1084400
         CLM   R3,1,LCDKEYN        DOES IT APPLY TO THIS KEY LEVEL      E1084500
         BNE   KEYBHD2             LOOP BACK FOR NEXT LCD IF NOT        E1084600
         LR    R7,R10              PRESERVE KBD ADDRESS IN REG 7        E1084700
         CBAL  R4,PROCLCD,NESTED=YES PROCESS THE LCD                    E1084800
         BL    KEYBHD3             TERMINATE PROCESSING IF 'DELETE'     E1084900
         LR    R10,R7              REFRESH POTENTIALLY DAMAGED R10      E1085000
         B     KEYBHD2             GET NEXT LCD                         E1085100
KEYBHD3  CBAL  R4,KEYBCHWR         PRINT ANY REQUIRED LINES             E1085200
         B     KEYBHD1             LOOP BACK FOR NEXT KBD               E1085300
KEYBHDX  NI    $STATUS2,FF-STAT2NKH RESET LOGIC FLAG                    E1085400
        SUBOUT RESTORE=R4          RESTORE AND RETURN TO CALLER         E1085500
         DROP  R8                  DROP LCD ADDRESSABILITY              E1085600
         DROP  R10                 DROP KBD ADDRESSABILITY              E1085700
         EJECT                                                          E1085800
*********************************************************************** E1085900
*        KEY-BREAK PROCESSING:     WRITE ANY OUTSTANDING CONTROL HDGS * E1086000
*********************************************************************** E1086100
         SPACE 1                                                        E1086200
*        THIS ROUTINE IS IDENTICAL TO 'KEYBOCB' EXCEPT THAT IT DOES NOT E1086300
*         INVOKE THE ROUTINE 'KEYBFLAG'.  THIS IS TO PREVENT DETAIL     E1086400
*         SPACING BOTH FORE AND AFT OF THE CONTROL HEADINGS.            E1086500
         SPACE 1                                                        E1086600
         USING OCBNTRY,R7          ESTABLISH OCB ADDRESSABILITY         E1086700
KEYBCHWR SUBIN SAVE=(R4,R7,R10)    PRESERVE VITAL REGISTERS             E1086800
         LTA   R7,$OCBOCB          GET ADDRESS OF 1ST OCB ('PRINT')     E1086900
         B     *+8                 BYPASS FORWARD CHAINING              E1087000
KEYBCHW1 LTA   R7,OCBOCB,KEYBCHWX  GET ADDRESS OF NEXT OCB              E1087100
         NULCB OCB,KEYBCHW1        GET NEXT OCB IF THIS NULLIFIED       E1087200
         TM    OCBSW,MOCBRITE      IS A WRITE PENDING FOR THIS OCB      E1087300
         BZ    KEYBCHW1            LOOP BACK FOR NEXT OCB IF NOT        E1087400
         TM    OCBSW,MOCBREPT      IS THIS A REPORT DATA SET            E1087500
         BO    KEYBCHW2            BR IF THIS IS A REPORT DATA SET      E1087600
         CBAL  R4,WRITE            WRITE 'LINE' TO NON-REPORT DATA SET  E1087700
         B     KEYBCHW1            LOOP BACK FOR NEXT OCB               E1087800
KEYBCHW2 CBAL  R4,WRITEP,NESTED=YES WRITE LINE TO REPORT                E1087900
         B     KEYBCHW1            LOOP BACK FOR NEXT OCB               E1088000
KEYBCHWX SUBOUT RESTORE=(R4,R7,R10) RESTORE AND RETURN TO CALLER        E1088100
         DROP  R7                  DROP OCB ADDRESSABILITY              E1088200
         EJECT                                                          E1088300
*********************************************************************** E1088400
*        KEY-BREAK PROCESSING:     MAJOR KEY TWENTY80 SUB-ANALYSES    * E1088500
*********************************************************************** E1088600
         SPACE 1                                                        E1088700
KEYTW80  SUBIN SAVE=R4             PRESERVE RETURN ADDRESS              E1088800
         TM    $STATUS2,STAT2080   IS TWENTY80 PROCESSING REQUIRED      E1088900
         BZ    KEYTW80X            EXIT IF NOT REQUIRED                 E1089000
         L     R1,$PTRKBD          GET KBD OF KEY THAT BROKE            E1089100
         TM    KBDSW-KBDNTRY(R1),MKBD2080 IS SUB-ANALYSIS REQUIRED      E1089200
         BZ    KEYTW80X            EXIT IF SUB-ANALYSIS NOT REQUIRED    E1089300
         CBAL  R4,TW80KEY          GO PERFROM SUB-ANALYSIS              E1089400
KEYTW80X SUBOUT RESTORE=R4         RESTORE AND RETURN TO CALLER         E1089500
         EJECT                                                          E1089600
*********************************************************************** E1089700
*        KEY-BREAK PROCESSING:     INCREMENT RECORD COUNTS            * E1089800
*********************************************************************** E1089900
         SPACE 1                                                        E1090000
         USING KBDNTRY,R8          ESTABLISH KBD ADDRESSABILITY         E1090100
KEYBRCNT SUBIN ,                   ENTER ROUTINE                        E1090200
         LTA   R8,$KBDKBD          GET ADDRESS OF 1ST KBD               E1090300
         B     *+8                 BYPASS FORWARD CHAINING              E1090400
KEYBRC1  LTA   R8,KBDKBD,KEYBRCX   GET ADDRESS OF NEXT KBD              E1090500
         AP    KBDRCNT,$ONE        INCREMENT RECORD COUNT               E1090600
         B     KEYBRC1             LOOP BACK FOR NEXT KBD               E1090700
KEYBRCX SUBOUT ,                   RETURN TO CALLER                     E1090800
         EJECT                                                          E1090900
*********************************************************************** E1091000
*        DETAIL LEVEL PROCESSING:  CONVERT INPUT FIELD TO FLOATING POIN E1091100
*********************************************************************** E1091200
         SPACE 1                                                        E1091300
         USING FDBNTRY,R7          ESTABLISH FDB ADDRESSABILITY         E1091400
DETLCONV SUBIN SAVE=(R4,R6)        PRESERVE RETURN ADDRESS              E1091500
         MVC   $FPNDEC,FDBNDEC     SET NO. OF DECIMAL PLACES            E1091600
         SR    R15,R15             ZEROISE WORK REGISTER                E1091700
         AH    R6,FDBFLDP          POINT R6 AT THE SOURCE FIELD         E1091800
         IC    R15,FDBFLDL         GET EXECUTABLE LENGTH  OF SOURCE     E1091900
         SR    R1,R1               ZEROISE WORK REGISTER                E1092000
         IC    R1,FDBFLDT          RETRIEVE FIELD TYPE                  E1092100
         BTYPE PREFIX=DETLCNV,DCHAR=X,NUM=N,PD=P,BIN=B,FLOAT=F,FREE=G   E1092200
         EJECT                                                          E1092300
*********************************************************************** E1092400
*        DETAIL LEVEL PROCESSING:  CONVERT INPUT FLD ( CONT'D )       * E1092500
*********************************************************************** E1092600
         SPACE 1                                                        E1092700
DETLCNVN EQU   *                   DISPLAY NUMERIC                      E1092800
         EX    R15,DETLBCLC        IS THE SOURCE FIELD BLANK            E1092900
         BNE   *+8                 BR IF NOT BLANK                      E1093000
         EX    R15,DETLBMVC        REPLACE BLANKS WITH ZEROES           E1093100
         EX    R15,DETLPACK        PACK SOURCE INTO FP WORK AREA        E1093200
         B     DETLCNV1            GO CONVERT TO FLOATING POINT         E1093300
DETLCNVP EQU   *                   PACKED DECIMAL                       E1093400
         EX    R15,DETLZAP         ZAP SOURCE INTO FP WORK AREA         E1093500
         B     DETLCNV1            GO CONVERT TO FLOATING POINT         E1093600
DETLCNVB EQU   *                   BINARY ( LENGTH 1 - 4 )              E1093700
         XC    $FPBIN,$FPBIN       ZEROISE WORK AREA                    E1093800
         LA    R1,$FPBIN+3         POINT AT END OFBINARY WORK AREA      E1093900
         SR    R1,R15              DECREMENT TO ALLOW FOR LGTH OF SOURC E1094000
         EX    R15,DETLBIN         MOVE BINARY VALUE TO WORK AREA       E1094100
         L     R1,$FPBIN           GET BINARY VALUE IN REGISTER         E1094200
         CVD   R1,$WRKDUBL         CONVERT VALUE TO PACKED DECIMAL      E1094300
         ZAP   $FPDEC,$WRKDUBL     ZAP VALUE INTO FP WORK AREA          E1094400
         B     DETLCNV1            GO CONVERT TO FLOATING POINT         E1094500
DETLCNVF EQU   *                   FLOATING POINT                       E1094600
         XC    $FPFP,$FPFP         CLEAR WORK AREA ( LEST NOT 8 BYTES ) E1094700
         EX    R15,DETLFP          MOVE SOURCE FP FIELD TO WORK AREA    E1094800
         B     DETLCNVX            BYPASS UNNECESSARY FP CONVERSION     E1094900
DETLCNVG EQU   *                   FREE FORMAT DISPLAY NUMERIC          E1095000
         CBAL  R4,CNVFREE          EXTRACT VALUE FROM FREE FORMAT FIELD E1095100
         B     DETLCNV1            GO CONVET TO FLOATING POINT          E1095200
DETLCNV1 CBAL  R4,CNVTOFP          CONVERT VALUE TO FLOATING POINT      E1095300
DETLCNVX SUBOUT RESTORE=(R4,R6)    RESTORE AND RETURN TO CALELR         E1095400
         DROP  R7                  DROP FDB  ADDRESSABILITY             E1095500
         TITLE 'PARROTE1 - EXECUTABLE INSTRUCTIONS'                     E1095600
*********************************************************************** E1095700
*        EXECUTABLE INSTRUCTIONS                                      * E1095800
*********************************************************************** E1095900
         SPACE 1                                                        E1096000
         USING LCDNTRY,R8          ESTABLISH LCD ADDRESSABILITY         E1096100
MVLCDLIT MVC   0(0,R6),LCDLIT      MOVE LITERAL TO OUTPUT BUFFER        E1096200
MVLCDBL  MVC   1(0,R6),0(R6)       PROPAGATE BLANKS THROUGH OUTPUT FIEL E1096300
MVCCHAR  MVC   0(0,R6),0(R1)       MOVE SOURCE FIELD TO OUTPUT FIELD    E1096400
HEXUNPK  UNPK  $WRKAREA(16),0(0,R1) 'UNPACK' HEX STRING                 E1096500
BITTM    TM    0(R1),0             TEST IF BIT IN SOURCE IS ON          E1096600
PDZAP    ZAP   0(0,R6),$FPDEC      ZAP PACKED DECIMAL VALUE INTO OUTPUT E1096700
PDUNPK   UNPK  0(0,R6),$FPDEC      UNPACK PACKED DECIMAL INTO OUTPUT    E1096800
         DROP  R8                  DROP LCD ADDRESSABILITY              E1096900
         USING FSANTRY,R1          ESTABLISH FSA ADDRESSABILITY         E1097000
NULLCHAR MVC   FSACHAR+1(0),FSACHAR PROPAGATE BLANKS THROUGH FIELD      E1097100
         DROP  R1                  DROP FSA ADDRESSABILITY              E1097200
DETLZAP  ZAP   $FPDEC,0(0,R6)      ZAP PACKED DECIMAL FLD INTO WORK ARE E1097300
DETLFP   MVC   $FPFP(0),0(R6)      MOVE SOURCE FP NO TO WORK AREA       E1097400
DETLBIN  MVC   0(0,R1),0(R6)       MOVE SOURCE BINARY NO. TO WORK AREA  E1097500
DETLPACK PACK  $FPDEC,0(0,R6)      PACK SOURCE DISPLAY FIELD INTO WORK  E1097600
DETLBCLC CLC   0(0,R6),$SPACES     IS SOURCE FIELD BLANK                E1097700
DETLBMVC MVC   0(0,R6),$ZEROES     ALTER BLANKS TO ZEROES               E1097800
KEYMOVE  MVC   0(0,R2),0(R3)       MOVE NEW KEY TO CURRENT              E1097900
KEYCOMP  CLC   0(0,R3),0(R2)       COMPARE1 CHARACTER KEYS (NEW:OLD)    E1098000
MVCNAMEN MVC   0(0,R1),0(R6)       MOVE NEW NAME FIELD TO STORE         E1098100
MVCCKEYN MVC   0(0,R1),0(R6)       MOVE NEW (CHAR) KEY TO STORE         E1098200
         TITLE 'PARROTE1 - MISCELLANEOUS CONSTANTS AND FIELDS'          E1098300
FPZERO   DC    D'0E1'              FLOATING POINT ZERO VALUE            E1098400
GR11IND  DS    CL1                 INDICATOR FOR 'GR11' REQUESTS        E1098500
HEXTABLE DC    C'0123456789ABCDEF' HEX STRING CONVERSION TABLE          E1098600
         SPACE 5                                                        E1098700
        SCSEND E1                  TERMINATE CSET PARROTE1              E1098800
         END                                                            E1098900
