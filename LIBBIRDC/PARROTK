         TITLE 'PARROTK - MISCELLANEOUS SUB-ROUTINES'                   K 000100
         MACRO                                                          K 000200
         $CB   &PRINT=OFF          MACRO TO GENERATE DSECTS             K 000300
         PUSH  PRINT               PRESERVE PRINT OPTIONS               K 000400
         PRINT &PRINT              SET PRINT OPTIONS FOR DSECTS         K 000500
               EJECT                                                    K 000600
         CBPREFIX ,                CONTROL BLOCK PREFIX                 K 000700
               EJECT                                                    K 000800
         CCB   ,                   CENTRAL CONTROL BLOCK                K 000900
               EJECT                                                    K 001000
         CSECTID ,                 CSECT IDENTIFICATION PREFIX          K 001100
               EJECT                                                    K 001200
         EQUATES ,                 GENERATE STANDARD EQUATES            K 001300
               EJECT                                                    K 001400
         FSA   ,                   FIELD STORAGE AREA                   K 001500
               EJECT                                                    K 001600
         LIB   ,                   LABEL IDENTIFICATION BLOCK           K 001700
               EJECT                                                    K 001800
         PARROTT  DSECT=YES        MAP OF TRANSLATE TABLES AND INST'NS  K 001900
               EJECT                                                    K 002000
         RST   ,                   RECORD SELECTION TEST CONTROL BLOCK  K 002100
               EJECT                                                    K 002200
         SCE   ,                   SELECTION CRITERION ELEMENT          K 002300
               EJECT                                                    K 002400
         SPD   ,                   STORAGE POOL DEFINITION              K 002500
         POP   PRINT               RESTORE ORIGINAL PRINT OPTIONS       K 002600
         MEND                                                           K 002700
         SPACE 5                                                        K 002800
PARROTK  CSECT                                                          K 002900
         $CB   ,                   GENERATE DSECTS AND EQUATES          K 003000
         EJECT                                                          K 003100
     SCSECT K                                                           K 003200
         USING PARROTK,R12         ESTABLISH SUB-CSECT ADDRESSABILITY   K 003300
         USING CCBNTRY,R13         ESTABLISH CCB ADDRESSABILITY         K 003400
         SPACE 1                                                        K 003500
         ENTRY CNVTOFP             CONVERT NUMBER TO FLOATING POINT     K 003600
         ENTRY CNVFRFP             CONVERT NUMBER FROM FLOATING POINT   K 003700
         ENTRY COMPARE             PERFORM SPECIFIED COMPARISON         K 003800
         ENTRY GETMAIN             SUB-ALLOCATE STORAGE POOL            K 003900
         ENTRY NUMERIC             VALIDATE UNSIGNED DISPLAY NUMERIC    K 004000
         ENTRY NUMRICS             VALIDATE SIGNED DISPLAY NUMERIC      K 004100
         ENTRY PARENDK             END OF CSECT                         K 004200
         ENTRY PARTKEY             PARTIAL KEY MATCHING ROUTINE         K 004300
         ENTRY PPPLL               CONVERT PPPLL TO BINARY              K 004400
         ENTRY RSTPROC             PROCESS RST CHAIN TO SELECT RECORD   K 004500
         ENTRY SCEPROC             PROCESS SCE CHAIN TO PERFORM TESTS   K 004600
         ENTRY UT493MBB            'MUST BE BLANK' CHAR FOR PARTKEY     K 004700
         ENTRY VARMOVE             PERFORM VARIABLE LENGTH MOVE         K 004800
         TITLE 'PARROTK - PROCESS RST CHAIN'                            K 004900
*********************************************************************** K 005000
*        PROCESS RST CHAIN TO SELECT RECORDS                          * K 005100
*********************************************************************** K 005200
         SPACE 1                                                        K 005300
*        THIS ROUTINE CHAINS DOWN THE SCE CHAIN ASSOCIATED WITH EACH    K 005400
*         RST TO DECIDE WHETHER THE RECORD IS TO BE SELECTED FOR        K 005500
*         PROCESSING.  IF THE RECORD IS SELECTED, THE RECORD COUNT IN   K 005600
*         THE APPROPRIATE RST IS INCREMENTED.  THE CONDITION CODE IS    K 005700
*         SET SUCH THAT THE CALLER CAN MAKE THE FOLLOWING TESTS:-       K 005800
*              BE  - RECORD SELECETD                                    K 005900
*              BNE - RECORD NOT SELECTED BY ANY RST                     K 006000
         SPACE 1                                                        K 006100
         USING RSTNTRY,R8          ESTABLIST RST ADDRESSABILITY         K 006200
         USING SCENTRY,R10         ESTABLISH CSE ADDRESSABILITY         K 006300
RSTPROC  SUBIN SAVE=R4             PRESERVE RETURN ADDRESS              K 006400
         L     R8,$RSTRST          GET ADDRESS OF 1ST RST               K 006500
         LTRR  R8,R8               TEST IF RST CHAIN EXISTS             K 006600
         BZ    RSTPROCX            EXIT IF NO CHAIN TO ACCEPT RECORD    K 006700
         B     *+8                 BYPASS FORWARD CHAINING              K 006800
RSTPROC1 L     R8,RSTRST           GET ADDRESS OF NEXT RST              K 006900
         LTRR  R8,R8               TEST FOR END OF CHAIN                K 007000
         BZ    RSTPROCY            EXIT IF END OF CHAIN TO REJECT REORD K 007100
         NULCB RST,RSTPROC1        GET NEXT RST IF THIS ONE NULLIFIED   K 007200
         L     R10,RSTSCE          GET ADDRESS OF 1ST SCE               K 007300
         B     *+8                 BYPASS FORWARD CHAINING              K 007400
RSTPROC2 L     R10,SCESCE          GET ADDRESS OF NEXT SCE              K 007500
         LTRR  R10,R10             TEST FOR END OF CHAIN                K 007600
         BZ    RSTPROC3            GO ACCEPT RECORD IF EOC              K 007700
         NULCB SCE,RSTPROC2        GET NEXT SCE IF THIS ONE NULLIFIED   K 007800
         CBAL  R4,SCETEST          GO PROCESS SCE                       K 007900
         BNE   RSTPROC1            IF FAILED TEST GET NEXT RST          K 008000
         B     RSTPROC2            IF PASSED TEST GET NEXT SCE          K 008100
RSTPROC3 AP    RSTRCNT,$ONE        INCREMENT RST RCORD COUNT            K 008200
         TM    RSTSW,MRSTDEL       IS REC TO BE DELETED IF TESTS MET    K 008300
         BO    RSTPROCY            BR IF YES TO REJECT RECORD           K 008400
         B     RSTPROCX            GO INDICATE RECORD IS ACCEPTED       K 008500
RSTPROCY CLI   *,Y                 INDICATE RECORD NOT ACCEPTED         K 008600
         B     *+8                 BYPASS RESETTING                     K 008700
RSTPROCX CLI   *,X                 INDICATE RECORD SELECTD              K 008800
        SUBOUT RESTORE=R4          RESTORE AND RETURN TO CALLER         K 008900
         DROP  R8,R10              DROP C/B ADDRESSABILITY              K 009000
         TITLE 'PARROTK - PROCESS SCE CHAIN'                            K 009100
*********************************************************************** K 009200
*        PROCESS SCE CHAIN TO PERFORM TESTS                           * K 009300
*********************************************************************** K 009400
         SPACE 1                                                        K 009500
*        THIS ROUTINE CHAINS DOWN AN SCE CHAIN TO DECIDE WHETHER ALL    K 009600
*         SPECIFIED TESTS ARE SATISFIED.  ON ENTRY, R10 POINTS AT THE   K 009700
*         1ST SCE IN THE CHAIN.  UPON RETURN, THE CCOND CODE IS SET:-   K 009800
*              BE  - ALL TESTS SATISIFED                                K 009900
*              BNE - ALL TESTS NOT SATISFIED                            K 010000
         SPACE 1                                                        K 010100
         USING SCENTRY,R10         ESTABLISH SCE ADDRESSABILITY         K 010200
SCEPROC  SUBIN SAVE=R4             PRESERVE RETURN ADDRESS              K 010300
         B     *+8                 BYPASS FORWARD CHAINING              K 010400
SCEPROC1 L     R10,SCESCE          GET ADDRESS OF NEXT SCE              K 010500
         LTRR  R10,R10             TEST FOR END OF CHAIN                K 010600
         BZ    SCEPROCX            EXIT IF EOC TO SHOW SATISFIED        K 010700
         NULCB SCE,SCEPROC1        GET NEXT SCE IF THIS ONE NULLIFIED   K 010800
         CBAL  R4,SCETEST          PERFORM DEFINED TEST                 K 010900
         BE    SCEPROC1            IS PASSED TEST, LOOP BACK FOR NEXT   K 011000
         CLI   *,Y                 INDICTAE FAILED TEST                 K 011100
         B     *+8                 AVOID RESETTING                      K 011200
SCEPROCX CLI   *,X                 SHOW PASSED ALL TESTS                K 011300
        SUBOUT RESTORE=R4          RESTORE AND RETURN TO CALLER         K 011400
         DROP  R10                 DROP SCE ADDRESSABILITY              K 011500
         TITLE 'PARROTK - PERFORM SINGLE TEST DEFINED IN AN SCE'        K 011600
*********************************************************************** K 011700
*        PERFORM SCE TEST: MAIN-LINE                                  * K 011800
*********************************************************************** K 011900
         SPACE 1                                                        K 012000
*        THIS MAIN-LINE ROUTINE DECIDES WHICH TYPE OF TEST IS TO BE     K 012100
*         PERFORMED, AND BRANCHES TO THE APPROPRIATE ROUTINE.  EACH     K 012200
*         TESTING ROUTINE IN TURN BRANCHES TO 'COMPARE' TO EVALUATE     K 012300
*         THE RESULT OF THE COMPARISON, AND COMPARE RETURNS TO THE      K 012400
*         MAIN-LINE CODING VIA R4 ( WHICH IS SET PRIOR TO SELECTING A * K 012500
*         PROCESSING ROUTINE.                                           K 012600
         SPACE 1                                                        K 012700
         USING SCENTRY,R10         ESTABLISH SCE ADDRESSABILITY         K 012800
SCETEST  SUBIN SAVE=ALL            PRESERVE ALL REGISTERS               K 012900
         SR    R1,R1               ZEROISE WORK REGISTER                K 013000
         IC    R1,SCECTYPE         SET COMPARE TYPE FOR LATER           K 013100
         SR    R2,R2               ZEROISE 2ND WORK REGISTER            K 013200
         IC    R2,SCEFLDT          SET FIELD TYPE ( TO DETERMINE TES RT K 013300
         SLL   R2,2                MULTIPLY BY 4 FOR INDEXED BRANCH     K 013400
         SR    R15,R15             ZEROISE WORK REGISTER                K 013500
         IC    R15,SCEFLDL         SET LENGTH FOR LATER EXECUTE         K 013600
         AH    R6,SCEFLDP          POINT R6 AT FIELD TO TEST            K 013700
         CBAL  R4,TSCELIB          RESET PTRS IF DEFERRED FLD DEFINITIO K 013800
         LA    R4,SCETESTX         SET RETURN ADDRESS ( FOR COMPARE )   K 013900
         SPACE 1                                                        K 014000
         B     *(R2)               SELECT APPROPRIATE ROUTINE           K 014100
         B     SCETCHAR            CHARACTER TEST                       K 014200
         B     SCETNUM             DISPLAY NUMERIC TEST                 K 014300
         B     SCETPD              PACKED DECIMAL TEST                  K 014400
         B     SCETHEX             HEXADECIMAL TEST                     K 014500
         B     SCETBIT             BIT STRING TEST                      K 014600
         B     SCETMASK            PARTIAL KEY MATCHING TEST            K 014700
         B     SCETBIN             BINARY VALUE TEST                    K 014800
         B     SCEFLOAT            FLOATING POINT VALUE                 K 014900
         B     SCETSTR             CHARACTER STRING SCAN TEST           K 015000
         B     SCETIND             INDICATOR TEST                       K 015100
         B     SCETFREE            FREE FORMAT DISPLAY NUMERIC          K 015200
         B     SCEUNSUP            UNDEFINED FIELD TYPE ( 12 )          K 015300
         SPACE 1                                                        K 015400
SCETESTX SUBOUT RESTORE=ALL        RESTORE ALL REGSITERS AND RETURN     K 015500
         SPACE 3                                                        K 015600
*        NOTE THAT THE FOLLOWING ROUTINES DO NOT ( WITH ONE EXCEPTION ) K 015700
*         USE SUBOUT TO RETURN, BUT INSTEAD RETURN ( VIA R4 ) FROM THE  K 015800
*         SUBROUTINE 'COMPARE'.                                         K 015900
         EJECT                                                          K 016000
*********************************************************************** K 016100
*        SCETEST ( CONT'D ): CHARCTER COMPARE                         * K 016200
*********************************************************************** K 016300
         SPACE 1                                                        K 016400
SCETCHAR SUBIN ,                   ENTER ROUTINE                        K 016500
         EX    R15,SCEICHAR        PERFORM COMPARISON                   K 016600
         CBAL  ,COMPARE            TEST RESULT OF COMPARISON            K 016700
         SPACE 5                                                        K 016800
*********************************************************************** K 016900
*        SCETEST ( CONT'D ): DISPLAY NUMERIC COMPARE                    K 017000
*********************************************************************** K 017100
         SPACE 1                                                        K 017200
SCETNUM  SUBIN ,                   ENTER ROUTINE                        K 017300
         EX    R15,SCEINUM         PACK DISPLAY FIELD                   K 017400
         L     R9,=V(PDTRT)        GET ADDRESS OF PD VALIDATION TABLE   K 017500
         SR    R2,R2               ZEROISE REG 2 FOR TRT CODE           K 017600
         TRT   $WRKDUBL,0(R9)      LOCATE 1ST A-F IN PD FIELD           K 017700
         BC    12,SCENUME          BR IF ERROR: NO A-F OR TOO EARLY     K 017800
         B     *(R2)               DETERMINE VALIDITY OF LAST BYTE      K 017900
         B     SCENUME             ERROR: A-F IN 1ST HALF OF BYTE       K 018000
         SR    R1,R1               ZEROISE CORRUPTED REG 1 ....         K 018100
         IC    R1,SCECTYPE          .... AND REPLACE COMPARE TYPE       K 018200
         CP    $WRKDUBL,SCELIT(6)  COMPARE FIELDS AS PACKED DECIMAL     K 018300
         CBAL  ,COMPARE            TEST RESULT OF COMPARISON            K 018400
         SPACE 5                                                        K 018500
*********************************************************************** K 018600
*        SCETEST ( CONT'D ): INDICATOR TEST                           * K 018700
*********************************************************************** K 018800
         SPACE 1                                                        K 018900
SCETIND  SUBIN ,                   ENETR ROUTINE                        K 019000
         LA    R6,$INDS            POINT AT BANK OF INDICATORS          K 019100
         AH    R6,SCEFLDP          INCREMENT TO APPROPRIATE SWITCH BYTE K 019200
         EX    R15,SCEIIND         TEST STATUS OF DESIRED INDICATOR     K 019300
         CBAL  ,COMPARE            TEST THE RESUKT OF THE STATUS TEST   K 019400
         EJECT                                                          K 019500
*********************************************************************** K 019600
*        SCETEST ( CONT'D ): PACKED DECIMAL COMPARE                   * K 019700
*********************************************************************** K 019800
         SPACE 1                                                        K 019900
SCETPD   SUBIN ,                   ENTER ROUTINE                        K 020000
         L     R9,=V(PDTRT)        GET ADDRESS OF PD VALIDATION TABLE   K 020100
         LR    R2,R15              SET EXECUTABLE LENGTH OF FIELD IN R2 K 020200
         SRL   R2,4                MOVE LENGTH FIELD TO LOWORDER BITS   K 020300
         EX    R2,PDVALTRT         LOCATE 1ST A-F IN PD FIELD           K 020400
         BC    12,SCENUME          ERROR: NO A-F OR TOO EARLY IN FIELD  K 020500
         B     *(R2)               DETERMINE VALIDITY OF LAST BYTE      K 020600
         B     SCENUME             ERROR- A-F IN FIRST HALF OF BYTE     K 020700
         SR    R1,R1               ZEROISE CORRUPTED REGISTER 1 ...     K 020800
         IC    R1,SCECTYPE          ... AND REPLACE THE COMPARE TYPE    K 020900
         EX    R15,SCEIPD          COMPARE PACKED DECIMAL FIELDS        K 021000
         CBAL  ,COMPARE            TEST RESULT OF COMPARE               K 021100
         SPACE 5                                                        K 021200
*********************************************************************** K 021300
*        SCETEST ( CONT'D ): UNSUPPORTED TEST TYPES                   * K 021400
*********************************************************************** K 021500
         SPACE 1                                                        K 021600
SCEUNSUP SUBIN ,                   ENTER ROUTINE                        K 021700
         ABEND 40,FULL             DUMP BECAUSE UNSUPPORTED FUNCTION    K 021800
         EJECT                                                          K 021900
*********************************************************************** K 022000
*        SCETEST ( CONT'D ): HEXADECIMAL COMPARE                      * K 022100
*********************************************************************** K 022200
         SPACE 1                                                        K 022300
SCETHEX  SUBIN ,                   ENTER ROUTINE                        K 022400
         EX    R15,SCEIHEX         PERFORM COMPARISON                   K 022500
         CBAL  ,COMPARE            TEST RESULT OF COMPARISON            K 022600
         SPACE 5                                                        K 022700
*********************************************************************** K 022800
*        SCETEST ( CONT'D ): BIT STRING COMPARE ( TM )                * K 022900
*********************************************************************** K 023000
         SPACE 1                                                        K 023100
SCETBIT  SUBIN ,                   ENTER ROUTINE                        K 023200
         IC    R15,SCELIT          RETRIEVE BIT MASK                    K 023300
         EX    R15,SCEIBIT         TEST FIELD UNDER MASK                K 023400
         CBAL  ,COMPARE            GO TEST RESULT OF TEST UNDER MASK    K 023500
         SPACE 5                                                        K 023600
*********************************************************************** K 023700
*        SCETEST ( CONT'D ): PARTIAL KEY MATCHING                     * K 023800
*********************************************************************** K 023900
         SPACE 1                                                        K 024000
SCETMASK SUBIN SAVE=R4             PRESERVE RETURN ADDRESS              K 024100
         LA    R14,SCELIT          POINT R14 AT PARTIAL KEY             K 024200
         ICM   R6,8,SCECTYPE       SET COMPARE TYPE FOR LATER           K 024300
         CBAL  R4,PARTKEY          COMPARE PARTIAL KEYS                 K 024400
        SUBOUT RESTORE=R4          RESTORE AND RETURN                   K 024500
         SPACE 1                                                        K 024600
*        NOTE THAT ROUTINE 'PARTKEY' PERFORMS COMPARE, AND THE COND     K 024700
*         CODE IS THUS SET UPON RETURN TO THE CALLER.                   K 024800
         EJECT                                                          K 024900
*********************************************************************** K 025000
*        SCETEST ( CONT'D ): BINARY VALUE COMPARE                     * K 025100
*********************************************************************** K 025200
         SPACE 1                                                        K 025300
SCETBIN  SUBIN ,                   ENTER ROUTINE                        K 025400
         TM    SCESW,MSCERECL      IS THIS AN 'LRECL' SPECIFICATION     K 025500
         BZ    *+8                 BR IF NOT                            K 025600
         L     R6,$SORTREC         POINT R6 AT RDW                      K 025700
         SR    R2,R2               ZEROISE REGISTER 2                   K 025800
         EX    R15,BINICM          SET BINARY VALUE IN REG 2            K 025900
         C     R2,SCELIT           COMPARE BINARY VALUES                K 026000
         CBAL  ,COMPARE            TEST RESULT OF COMPARE               K 026100
         SPACE 5                                                        K 026200
*********************************************************************** K 026300
*        SCETEST ( CONT'D ): FLOATING POINT COMPARE                   * K 026400
*********************************************************************** K 026500
         SPACE 1                                                        K 026600
SCEFLOAT SUBIN ,                   ENTER ROUTINE                        K 026700
         MVC   $FPVAL1,SCELIT      MOVE COMPARAND TO FP WORK AREA       K 026800
         XC    $FPVAL2,$FPVAL2     CLEAR FLOATING POINT WORK AREA       K 026900
         EX    R15,SCEIFP          MOVE FP VALUE TO WORK AREA           K 027000
         LD    FPR2,$FPVAL1        MOVE COMPARAND TO  FPR2              K 027100
         LD    FPR4,$FPVAL2        LOAD FIELD TO TEST INTO FPR4         K 027200
         CDR   FPR4,FPR2           COMPARE FIELD WITH LITERAL VALUE     K 027300
         CBAL  ,COMPARE            TEST RESULT OF COMPARE               K 027400
         EJECT                                                          K 027500
*********************************************************************** K 027600
*        SCETEST ( CONT'D ):       FREE FORMAT DISPLAY NUMERIC        * K 027700
*********************************************************************** K 027800
         SPACE 1                                                        K 027900
SCETFREE SUBIN SAVE=R4             PRESERVE RETURN ADDRESS              K 028000
         CBAL  R4,CNVFREE          EXTRACT VALUE FROM FREE FORMAT FIELD K 028100
         CBAL  R4,CNVTOFP          CONVERT VALUE TO FOATING POINT       K 028200
*                                  VALUE IS NOW IN 'FPR2'               K 028300
         MVC   $FPVAL1,SCELIT      MOVE LITERAL VALUE TO FP WORK AREA   K 028400
         LD    FPR4,$FPVAL1        SET LITERAL IN FP REG                K 028500
         CDR   FPR2,FPR4           COMPARE FIELD VALUE WITH LITERAL     K 028600
         CBAL  R4,COMPARE          TEST RESULT OF COMPARE               K 028700
        SUBOUT RESTORE=R4          RESTORE AND RETURN TO CALLER         K 028800
         EJECT                                                          K 028900
*********************************************************************** K 029000
*        SCETEST ( CONT'D ): OCCURRENCE OF CHARACTER STRING           * K 029100
*********************************************************************** K 029200
         SPACE 1                                                        K 029300
*        THIS ROUTINE ( WHICH IS WORTHY OF BEING A UTILITY ), SCANS THE K 029400
*         FIELD UNDER TEST TO DETERMINE WHETHER IT CONTAINS THE         K 029500
*         SPECIFIED CHARACTER STRING ANYWHERE WITHIN IT.                K 029600
*        INSTEAD OF INCREMENTING BYTE BY BYTE, THE ROUTINE USES 'TRT'   K 029700
*         TO LOCATE OCCURRENCES OF THE FIRST CHARACTER IN THE SPECIFIED K 029800
*         STRING, AND HAVING LOCATED THE FIRST CHARACTER CHECKS FOR     K 029900
*         THE PRESENCE OF THE WHOLE STRING.                             K 030000
*        THIS TECHNIQUE IS FASTER THAN THE PLEBIAN ALTERNATIVE OF       K 030100
*         INCHING ALONG TESTING EVERY POSITION, EXCEPT WHEN THE STRING  K 030200
*         OCCURS WITHIN THE FIRST THREE CHARACTERS OF THE FIELD, OR     K 030300
*         WHEN >25% OF THE POSITIONS OF THE FIELD CONTAIN THE FIRST     K 030400
*         CHARACTER OF THE SPECIFIED STRING.                            K 030500
*        NOTE THAT THE ROUTINE 'COMPARE' IS INVOKED TO SET THE PSW COND K 030600
*         CODE BECAUSE THE USER MAY SPECIFY EITHER 'EQ' OR 'NE' TESTS   K 030700
*         ( I.E. A RECORD MAY BE SELECTED EITHER IF THE FIELD UNDER     K 030800
*         TEST CONTAINS THE SPECIFIED STRING, OR IF IT DOES NOT CONTAIN K 030900
*         THE SPECIFIED STRING - BLOODY CLEVER, EH ).                   K 031000
         SPACE 1                                                        K 031100
         USING PARROTT,R9          ESTABLISH TABLE ADDRESSABILITY       K 031200
SCETSTR  SUBIN SAVE=R1             PRESERVE COMPARE TEST TYPE FOR LATER K 031300
         L     R9,$VPARTT          GET ADDRESS OF CSECT CONTAINING TABL K 031400
         MVI   STRTAB,X'00'        SET LOW VALUE AT START ...           K 031500
         MVC   STRTAB+1(255),STRTAB ... AND PROPAGATE THROUGH TABLE     K 031600
         SR    R14,R14             ZEROISE WORK REGISTER                K 031700
         IC    R14,SCELIT          GET 1ST CHAR OF DESIRED STRING       K 031800
         LA    R2,1                SET R2 LOWORDER TO X'01'             K 031900
         STC   R2,STRTAB(R14)      SET POSN IN TRANS TAB TO '01'        K 032000
         LR    R3,R6               POINT R1 AT START OF FIELD           K 032100
         IC    R14,SCELITL         GET EXECUTABLE LENGTH OF STRING      K 032200
         SR    R15,R14             ALTER EXEC FLD LGTH TO ALLOW L'STRIN K 032300
SCETSTR1 EX    R15,SCEISTRT        SCAN FOR NEXT OCCURRENCE OF 1ST CHAR K 032400
         BZ    SCETSTRY            EXIT IF NOT FOUND                    K 032500
         EX    R14,SCEISTRC        TEST IF THIS IS THE DESIRED STRING   K 032600
         BE    SCETSTRX            EXIT IF YES SHOWING FOUND            K 032700
         LA    R3,1(,R1)           INCREMENT TO NEXT POSN TO RESUME SCA K 032800
         LR    R2,R3               POINT R2 AT THIS POSN                K 032900
         SR    R2,R6               DETERMINE DISPLACEMENT FROM LAST STA K 033000
         SR    R15,R2              GET EXECUTABLE LENGTH OF REMAINDER   K 033100
         BM    SCETSTRY            EXIT IF -VE ( FIELD EXHAUSTED )      K 033200
         LR    R6,R3               PRESERVE ADDRESS OF CURRENT START    K 033300
         B     SCETSTR1            LOOP BACK TO TRY AGAIN               K 033400
SCETSTRY CLI   *,Y                 SET CC TO SHOW STRING NOT FOUND      K 033500
         B     *+8                 GO SET COND CODE FOR CALLER          K 033600
SCETSTRX CLI   *,X                 SET CC TO SHOW STRING FOUND          K 033700
         SUBLR R1                  RESTORE COMPARE TEST TYPE            K 033800
         CBAL  ,COMPARE            SET COND CODE FOR CALLER             K 033900
         DROP  R9                  DROP TABLE ADDRESSABILITY            K 034000
         EJECT                                                          K 034100
*********************************************************************** K 034200
*        SCETEST ( CONT'D ): TELL OF NON-NUMERIC DATA IN NUMERIC FIELD  K 034300
*********************************************************************** K 034400
         SPACE 1                                                        K 034500
*        THIS ROUTINE RECEIVES CONTROL IF A NON-NUMERIC FIELD IS        K 034600
*         ENCOUNTERED DURING SCE PROCESSING.  A WARNING MESSAGE IS      K 034700
*         ISSUED, AND A 'TEST NOT SATISFIED' CONDITION IF FORCED.       K 034800
         SPACE 1                                                        K 034900
SCENUME  SUBIN SAVE=R4             PRESERVE RETURN ADDRESS              K 035000
         L     R5,SYSPRINT+IOPSRECA REFRESH SYSPRINT BUFFER ADDRESS     K 035100
         CCNO  LINE03,REG=R10       TELL USER OF SILLY DATA             K 035200
         CLI   *,Y                  SIMULATE 'NOT SATISFIED' CONDITION  K 035300
        SUBOUT RESTORE=R4           RESTORE AND RETURN TO SCE ROUTINE   K 035400
         EJECT                                                          K 035500
*********************************************************************** K 035600
*        SCETEST ( CONT'D ): ESTABLISH ENVIRONMENT FOR DEFERRED TEST  * K 035700
*********************************************************************** K 035800
         SPACE 1                                                        K 035900
*        THIS ROUTINE ADJUSTS THE VARIOUS PARAMETER REGISTERS FOR AN    K 036000
*         SCE THAT SPECIFIES DEFERRED FIELD DEFINTIION.                 K 036100
         SPACE 1                                                        K 036200
*        UPON RETURN :-                                                 K 036300
*         R2  - FIELD TYPE * 4     ( FOR INDEXED BRANCH )               K 036400
*         R6  - ADDRESS OF FIELD TO TEST                                K 036500
*         R15 - EXECUTABLE LENGTH OF FIELD                              K 036600
         SPACE 1                                                        K 036700
         USING SCENTRY,R10         ESTABLISH SCE ADDRESSABILITY         K 036800
         USING LIBNTRY,R14         ESTABLISH LIB ADDRESSABILITY         K 036900
         USING FSANTRY,R6          ESTABLISH FSA ADDRESSABILITY         K 037000
TSCELIB  SUBIN SAVE=R4             PRESERVE RETURN ADDRESS              K 037100
         TM    SCESW,MSCELIB       IS THERE AN ASSOCIATED LIB           K 037200
         BZ    TSCELIBX            EXIT IF NOT                          K 037300
         L     R14,SCELIB          GET ADDRESS OF LIB DEFINING FIEDL    K 037400
         IC    R2,LIBFLDT          RETRIEVE FIELD TYPE                  K 037500
         SLL   R2,2                MULTIPLY BY 4 FOR INDEXED BRANCH     K 037600
         L     R6,LIBFSA           GET ADDRESS OF FSA                   K 037700
         IC    R15,LIBFLDL         GET EXECUTABLE LENGTH OF FIELD       K 037800
         TM    LIBTYPE,LIBTNUM     IS THIS A NUMERIC FIELD              K 037900
         BO    TSCELIB1            BR IF NUMERIC FIELD                  K 038000
         LA    R6,FSACHAR          POINT R6 AT FIELD STORAGE AREA       K 038100
         B     TSCELIBX            GO TO EXIT                           K 038200
TSCELIB1 LA    R15,7               SET EXECUTABLE LENGTH OF FP ACCUM'R  K 038300
         LA    R2,FLOAT*4          SET FIELD TYPE * 4                   K 038400
         TM    $PROCESS,PROCDETL   IS THIS DETAIL TIME                  K 038500
         BZ    TSCELIB2            BR IF NOT DETAIL TIME                K 038600
         LA    R6,FSAVALUR         POINT AT DETAIL TIME ACCUMULATOR     K 038700
         B     TSCELIBX            GO TO EXIT                           K 038800
TSCELIB2 LA    R14,FSAVALUT        POINT AT ACCUMULATOR OFR TOTAL FILE  K 038900
         LH    R6,$KEYNO           GET CURRENT KEY NUMBER               K 039000
         SLL   R6,3                MULTIPLY BY 8 FOR INDEX              K 039100
         AR    R6,R14              POINT AT APPROPRIATE TOTAL ACCUM'R   K 039200
TSCELIBX SUBOUT RESTORE=R4         RESTORE AND RETURN TO CALLER         K 039300
         DROP  R6                  DROP FSA ADDRESSABILITY              K 039400
         DROP  R14                 DROP LIB ADDRESSABILITY              K 039500
         DROP  R10                 DROP SCE ADDRESSABILITY              K 039600
         EJECT                                                          K 039700
*********************************************************************** K 039800
*        SCETEST ( CONT'D ): EXECUTED INSTRUCTIONS                    * K 039900
*********************************************************************** K 040000
         SPACE 1                                                        K 040100
         USING PARROTT,R9          ESTABLISH TABLE ADDRESSABILITY       K 040200
         USING SCENTRY,R10         ESTABLISH SCE ADDRESSABILITY         K 040300
SCEICHAR CLC   0(0,R6),SCELIT      COMPARE CHARACTER FIELDS             K 040400
SCEINUM  PACK  $WRKDUBL,0(0,R6)    PACK DISPLAY FIELD FOR PD COMPARE    K 040500
SCEIPD   CP    0(0,R6),SCELIT(6)   COMPARE PACKED DECIMAL FIELDS        K 040600
SCEIHEX  CLC   0(0,R6),SCELIT      COMPARE HEXADECIMAL FIELDS           K 040700
SCEIBIT  TM    0(R6),0             TEST BIT STRING UNDER MASK           K 040800
SCEISTRT TRT   0(0,R3),STRTAB      LOCATE OCCURRENCE OF 1ST CHAR IN STR K 040900
SCEISTRC CLC   0(0,R1),SCELIT      TEST IF DESIRED STRING FOUND         K 041000
SCEIIND  TM    0(R6),0             TEST STATUS OF SWITCH BIT            K 041100
SCEIFP   MVC   $FPVAL2(0),0(R6)    MOVE FP VALUE TO WORK AREA           K 041200
PDVALTRT TRT   0(0,R6),0(R9)       LOCATE FIRST A-F IN PACKED DEC FLD   K 041300
BINICM   ICM   R2,0,0(R6)          SET BINARY VALUE IN REG2 FOR COMPARE K 041400
         DROP  R9                  DROP PARROTT ADDRESSABILITY          K 041500
         DROP  R10                 DROP SCE ADDRESSABILITY              K 041600
         TITLE 'PARROTT - PARTIAL KEY MATCHING'                         K 041700
*********************************************************************** K 041800
*        PARTIAL KEY MATCHING ROUTINE                                 * K 041900
*********************************************************************** K 042000
         SPACE 1                                                        K 042100
*        THIS CLEVER LITTLE ROUTINE ( BASED UPON THE SUBROUTINE SWAN -  K 042200
*         UT493 - SELECT WANTED NODES ) COMPARES THE FIELD UNDER TEST   K 042300
*         WITH THE NON-BLANK PORTIONS OF THE SUPPLIED MASTER PARTIAL    K 042400
*         KEY. THE ROUTINE PERFORMS THIS FUNCTION AT THE FIELD LEVEL,   K 042500
*         AND NOT BYTE BY BYTE.  IT ACCOMPLISHES THIS MIRACULOUS FEAT   K 042600
*         BY :-                                                         K 042700
*              .SET NON-BLANK PORTIONS OF THE PARTIAL KEY TO X'FF', AND K 042800
*               BLANKS TO X'00'                                         K 042900
*              .SET TO X'00' THOSE PARTS OF THE FIELD UNDER TEST THAT   K 043000
*               CORRESPOND TO BLANKS IN THE PARTIAL KEY                 K 043100
*              .RESTORE THE NON-BLANK PORTIONS OF THE MASTER KEY,       K 043200
*               LEAVING THE BLANKS SET TO X'00'                         K 043300
*              .ALTER THE 'MUST BE BLANK' CHARACTER IN THE PARTIAL KEY  K 043400
*               TO BLANK                                                K 043500
*              .COMPARE THE MODIFIED FIELDS.  IN EACH KEY THOSE         K 043600
*               POSITIONS CORRESPONDING TO BLANKS IN THE MASTER PARTIAL K 043700
*               KEY ARE SET TO X'00', AND GIVE QEUALITY REGARDLESS OF T K 043800
*               THE ORIGINAL CONTENTS                                   K 043900
         SPACE 1                                                        K 044000
*        NOTE:-                                                         K 044100
*         1. THE ORIGINAL FIELDS ARE UNTOUCHED: ALL CHANGES ARE TO      K 044200
*            WORK AREAS.                                                K 044300
*         2. BY DEFAULT, THE 'MUST BE BLANK' CHARACTER IS '^', BUT THIS K 044400
*            MAY BE ALTERED BY THE PARM FIELD 'UT493MBB=X'              K 044500
         SPACE 5                                                        K 044600
*        ON INPUT :_                                                    K 044700
*         R6  - ADDRESS OF FIELD TO BE TESTED + TEST TYPE IN HIGHORDER  K 044800
*         R14 - ADDRESS OF PARTIAL KEY WITH WHICH TO COMPARE            K 044900
*         R15 - EXECUTABLE LENGTH OF FIELD TO BE EXAMINED               K 045000
         EJECT                                                          K 045100
*********************************************************************** K 045200
*        PARTIAL KEY MATCHING ROUTINE ( CONT'D )                      * K 045300
*********************************************************************** K 045400
         SPACE 1                                                        K 045500
         USING PARROTT,R9          ESTABLISH TABLE ADDRESSABILITY       K 045600
PARTKEY  SUBIN SAVE=R4             PRESERVE RETURN ADDRESS              K 045700
         SR    R1,R1               ZEROISE WORK REGISTER                K 045800
         IC    R1,UT493MBB         GET 'MUST BE BLANK' CHARACTER        K 045900
         L     R9,$VPARTT          GET ADDRESS OF CSECT CONTAININGTABLE K 046000
         IC    R2,$SPACES          SET X'40' IN WORK RGISTER            K 046100
         STC   R2,E1TABLE1(R1)     MODIFY TABLE FOR 'MUST BE BLANK'     K 046200
         EX    R15,E1MVCKEY        MOVE PARTIAL KEY TO WORK AREA        K 046300
         EX    R15,E1TRTEST        TRANSLATE PARTIAL KEY TO X'FF' BAR B K 046400
         EX    R15,E1MVCFLD        MOVE FIELD UNDER TEST TO WORK AREA   K 046500
         EX    R15,E1NCMAST        SET TEST FIELD BL TO X'00'           K 046600
         EX    R15,E1NCTEST        RESTORE PARTIAL KEY WITH BL SET '00' K 046700
         EX    R15,E1TRTAB         SET 'MBB' TO BLANK                   K 046800
         LR    R1,R6               GET TEST TYPE+FLD ADDRESS            K 046900
         SRL   R1,24               ISOLATE TEST TYPE IN LOW ORDER BYTE  K 047000
         EX    R15,E1COMPAR        COMPAR NONBLANK PARTS OF KEY         K 047100
         CBAL  R4,COMPARE          TEST RESULT OF COMPARE               K 047200
        SUBOUT RESTORE=R4          RESTOE AND RETURN                    K 047300
         DROP  R9                  DROP TABLE ADDRESSABILITY            K 047400
         TITLE 'PARROTK - PERFROM SPECIFIED RELATIONSHIP TEST'          K 047500
*********************************************************************** K 047600
*        PERFORM SPECIFIED RELATIONSHIP TEST                          * K 047700
*********************************************************************** K 047800
         SPACE 1                                                        K 047900
*        THIS SUBROUTINE RECEIVES CONTROL AFTER A TEST ( COMPARE ) HAS  K 048000
*         BEEN MADE, AND PERFORMS THE RELATIONSHIP TEST SPECIFIED IN    K 048100
*         R1 IN THE FORM OF AN INTERNAL CODE ( SEE MISCELLANAOUS EQU )  K 048200
*         AND SETS THE CONDITION CODE SUCH THAT THE CALLER CAN MAKE THE K 048300
*         FOLLOWING CONDITIONAL BRANCHES -                              K 048400
*              BE  - SPECIFIED RELATIONSHIP SATISFIED                   K 048500
*              BNE - SPECIFIED RELATIOSHIP NOT SATISFIED                K 048600
         SPACE 1                                                        K 048700
COMPARE  SUBIN ,                   ENTER SUBROUTINE                     K 048800
         SLL   R1,3                MULTIPLY INTERNAL REPRESENTATION OF  K 048900
*                                   THE TEST BY 8 TO CONVERT IT TO AN I K 049000
*                                   INDEX FOR THE FOLLONG BR TO PERFORM K 049100
*                                   THE APPROPRIATE RELATIONSHIP TEST   K 049200
         B     *-4(R1)             GO TO APPROPRIATE CONDITIONAL BRANCH K 049300
         BE    COMPAREX       (EQ) GO SET COND CODE IF TEST SATISFIED   K 049400
         B     COMPAREY            GO SHOW TEST NOT SATISFIED           K 049500
         BNE   COMPAREX       (NE) GO SET COND CODE IF TEST SATISFIED   K 049600
         B     COMPAREY            GO SHOW TEST NOT SATISFIED           K 049700
         BH    COMPAREX       (GT) GO SET COND CODE IF TEST SATISFIED   K 049800
         B     COMPAREY            GO SHOW TEST NOT SATISFIED           K 049900
         BNL   COMPAREX       (GE) GO SET COND CODE IF TEST SATISFIED   K 050000
         B     COMPAREY            GO SHOW TEST NOT SATISFIED           K 050100
         BL    COMPAREX       (LT) GO SET COND CODE IF TEST SATISFIED   K 050200
         B     COMPAREY            GO SHOW TEST NOT SATISFIED           K 050300
         BNH   COMPAREX       (LE) GO SET COND CODE IF TEST SATISFIED   K 050400
         B     COMPAREY            GO SHOW TEST NOT SATISFIED           K 050500
         BO    COMPAREX       (ON) GO SET COND CODE IF TEST SATISFIED   K 050600
         B     COMPAREY            GO SHOW TEST NOT SATISFIED           K 050700
         BZ    COMPAREX       (OF) GO SET COND CODE IF TEST SATISFIED   K 050800
         B     COMPAREY            GO SHOW TEST NOT SATISFIED           K 050900
COMPAREY CLI   *,Y                 SET TO SHOW NOT SATISFIED            K 051000
         B     *+8                 AVOID SHOWING SATISFIED              K 051100
COMPAREX CLI   *,X                 SET TO SHOW TEST SATISFIED           K 051200
        SUBOUT ,                   RETURN TO CALLER                     K 051300
         TITLE 'PARROTK - CONVERT PPPLL TO BINARY'                      K 051400
*********************************************************************** K 051500
*        CONVERT PPPLL TO BINARY                                      * K 051600
*********************************************************************** K 051700
         SPACE 1                                                        K 051800
*        THIS ROUTINE CONVERTS A 3-BYTE POSITION AND A 2-BYTE LENGTH    K 051900
*         INTO A HALFWORD CONTAINING THE DISPLACEMENT (POSITION - 1)    K 052000
*         AND AN ADJACENT BYTE CONTAINING THE EXECUTABLE LENGTH.        K 052100
*        LEADING BLANKS AND ALL BLANK FIELDS ARE VALID, AND THE 1ST     K 052200
*         BYTE OF THE POSITION MAY HAVE AN ALAVEN OR TWELVE OVERPUNCH   K 052300
*         TO SIGNIFY A LEADING '1' OR '2'.                              K 052400
*        ON ENTRY: R2 - ADDRESS OF EBCDIC PPPLL                         K 052500
*                  R3 - ADDRESS OF OUTPUT 'PPL'                         K 052600
         SPACE 1                                                        K 052700
*        ON EXIT, THE CONDITION CODE IS SET SUCH THAT THE CALLER CAN    K 052800
*         MAKE THE FOLLOWING CONDITIONAL BRANCHES:-                     K 052900
*              BL - FIELD BLANK                                         K 053000
*              BE - PPPLL SUCCESSFULLY CONVERTED                        K 053100
*              BH - FIELD NOT NUMERIC / COMPLETE                        K 053200
         SPACE 1                                                        K 053300
*        IF A NON-NUMERIC FIELD IS FOUND, AN ERROR MESSAGE WILL BE      K 053400
*         PRINTED BY THE ROUTINE 'NUMERIC'                              K 053500
         SPACE 1                                                        K 053600
PPPLL    SUBIN SAVE=R4             PRESERVE RETRUN ADDRESS              K 053700
         MVI   PPPLLSGN,C'1'       REINITIALISE FLD USED TO RECOGNISE O K 053800
         CLI   0(R2),C' '          TEST IF PPP PRECEDED BY BLANK        K 053900
         BE    *+14                BRANCH IF LEADING BLANK              K 054000
         MVZ   PPPLLSGN,0(R2)      PRESERVE OVERPUNCH IF ANY            K 054100
         OI    0(R2),F0            DELETE OVERPUNCH FOR THE PRESENT     K 054200
         XC    0(3,R3),0(R3)       ZEROISE RESULT FIELD LST BLANK       K 054300
         OI    0(R3),NULLPL          SET ON HIGH ORDER BIT LEST INVALID K 054400
         CLC   0(5,R2),$SPACES     TEST IF ENTIRE 'PPPLL' IS BLANK      K 054500
         BE    PPPLLW              GO SET COND CODE IF YES              K 054600
         CLC   0(3,R2),$SPACES     TEST IF 'PPP' IS BLANK               K 054700
         BE    PPPLLY              EXIT IF POSN MISSING                 K 054800
         CLC   3(2,R2),$SPACES     TEST IF 'LL' IS BLANK                K 054900
         BE    PPPLLY              EXIT IF LEGTH NOT SUPPLIED           K 055000
         SPACE 5                                                        K 055100
*********************************************************************** K 055200
*        CONT'D OVERLEAF                                              * K 055300
*********************************************************************** K 055400
         EJECT                                                          K 055500
*********************************************************************** K 055600
*        CONVERT PPPLL TO BINARY ( CONT'D )                           * K 055700
*********************************************************************** K 055800
         SPACE 1                                                        K 055900
       NUMERIC (R2),3              VERIFY POSITION IS NUMERIC           K 056000
         BH    PPPLLY              EXIT IF NOT NUMERIC                  K 056100
         BCTR  R1,0                DECREMENT POSN TO DISPLACEMENT       K 056200
         CLI   PPPLLSGN,C'J'       TEST FOR ELEVEN OVERPUNCH            K 056300
         BNE   *+8                 BR IF NOT                            K 056400
         LA    R1,1000(,R1)        IF '4' THEN INSERT LEADING '1'       K 056500
         CLI   PPPLLSGN,C'A'       TEST FOR TWELVE OVERPUNCH            K 056600
         BNE   *+8                 BR IF NOT                            K 056700
         LA    R1,2000(,R1)        IF 'A' THEN INSERT LEADING '2'       K 056800
         STH   R1,0(R3)            PRESERVE DISPLACEEMT                 K 056900
         OI    0(R3),NULLPL          ASSUME LENGH NOY NUMERIC           K 057000
       NUMERIC 3(R2),2             VERIFY LENGTH IS NUMERIC             K 057100
         BH    PPPLLY              EXIT IF NOT NUMERIC                  K 057200
         NI    0(R3),FF-NULLPL       SET OFF PESSIMISTIC ERROR FLAG     K 057300
         BCTR  R1,0                DECREMENT LENGTH FOR SUBSEQUENT EXS  K 057400
         STC   R1,2(R3)            PRESERVE EXECUTABLE LENGTH           K 057500
         AH    R1,0(,R3)           ADD PP TO LENGTH                     K 057600
         LA    R1,1(,R1)           ALLOW FOR POSN AND NOT DISPLACEMENT  K 057700
         CH    R1,$MAXPPL          IS THIS THE LARGEST PPL YET FOUND    K 057800
         BNH   *+8                 BR IF NOT HIGHEST VALUE YET          K 057900
         STH   R1,$MAXPPL          PRESERVE NEW MAXIMUM VALUE           K 058000
         B     PPPLLX              GO TO EXIT                           K 058100
PPPLLW   CLI   *,W                 SET COND CODE SHOWING BLANK          K 058200
         B     PPPLLXIT            GO TO EXIT                           K 058300
PPPLLY   OI    SWERROR,MERRCCER    SET ON ERROR SWITCH                  K 058400
         LINE  LINE02              TELL OF BAD PPPLL SYNTAX             K 058500
         CLI   *,Y                 SET COND CODE TO SHOW ERROR          K 058600
         B     PPPLLXIT            GO TO EXIT                           K 058700
PPPLLX   CLI   *,X                 SET COND CODE TO SHOW SUCCESS        K 058800
PPPLLXIT SUBOUT RESTORE=R4         RESTORE AND RETURN TO CALLER         K 058900
         TITLE 'PARROTK - GETMAIN ROUTINE'                              K 059000
*********************************************************************** K 059100
*        GETMAIN ROUTINE                                              * K 059200
*********************************************************************** K 059300
         SPACE 1                                                        K 059400
*        THIS SUBROUTINE SUB-ALLOCATES SPACE FOR CONTROL BLOCKS ETC     K 059500
*         FROM STORAGE POOLS (GETMAINED OR REDUNDANT CSCETS).           K 059600
*        ON ENTRY :-    R2 - LENGTH OF AREA REQUIRED                    K 059700
*        ON EXIT :-     R1 - ADDRESS OF ALLOCATED AREA                  K 059800
         SPACE 1                                                        K 059900
         USING SPDNTRY,R15         ESTABLISH POOL C/B ADDRESSABILITY    K 060000
GETMAIN  SUBIN SAVE=ALL            PRESERVE ALL REGISTERS               K 060100
         LA    R2,3(,R2)           ROUND UP REQUESS TO ...              K 060200
         N     R2,GETMASK2          ... A FULLWORD BOUNDARY             K 060300
         LA    R15,$NUMPOOL+4      GET ADDRESS OF 1ST POOL DEFINITION   K 060400
         SR    R10,R10             ZEROISE R10                          K 060500
         IC    R10,$NUMPOOL        SET NO OF POOLS FOR LOOP             K 060600
GETMAIN1 TM    SPDSW,MSPDUSE       IS POOL AVAILABLE FOR USE            K 060700
         BZ    GETMAIN2            BR IF NOT TO GET NEXT POOL           K 060800
         TM    SPDSW,MSPDWF        IS POOL BEING USED BY WORKFILE RTNS  K 060900
         BO    GETMAIN2            BR TO GET NEXT POOL IF YES           K 061000
         L     R3,SPDSPOOL         GET LENGTH OF THIS POOL              K 061100
         CR    R2,R3               TEST IF POOL LARGE ENOUGH FOR REQUES K 061200
         BNH   GETMAIN3            BR IF POOL LARGE ENOUGH              K 061300
GETMAIN2 LA    R15,SPDLGTH(,R15)   POINT AT NEXT POOL DEFINITON         K 061400
         BCT   R10,GETMAIN1        LOOP BACK IF ANY LEFT                K 061500
         OI    SWERROR,MERRGETM    FLAG THAT GETMAINS WERE REQUIRED     K 061600
         LR    R0,R2               PLACE REQUIRED LENGTH IN R0          K 061700
         A     R2,$GETMXES         ADD AMOUNT OF PREVIOUS GETMAINS      K 061800
         ST    R2,$GETMXES         PRESERVE UPDTED COUNT                K 061900
         LR    R2,R0               RESTORE LENGTH FOR SUBSEQUENT MOVE   K 062000
       GETMAIN R,LV=(0)            ACQUIRE CORE                         K 062100
         B     GETMAIN4            GO RECORD AMOUNT AND INITIALISE      K 062200
GETMAIN3 SR    R3,R2               DECREMENT AVAILABLE POOL SIZE        K 062300
         ST    R3,SPDSPOOL         STORE RESIDUAL LENGTH IN C/B         K 062400
         L     R1,SPDAPOOL         GET ADDRESS OF START OF POOL         K 062500
         AR    R1,R3               INCREMENT TO START OF ALOCATED AREA  K 062600
GETMAIN4 L     R3,$GETMUSD         GET AMOUNT OF CORE ALLOCATED         K 062700
         AR    R3,R2               ADD THIS REQUEST ....                K 062800
         ST    R3,$GETMUSD          ... AND STORE UPDATED COUNT         K 062900
         LA    R1,0(,R1)           PURIFY CONTROL BLOCK ADDRESS         K 063000
         ST    R1,GETMAIN-(64-R1*4) SET C/B POINTER IN SAVE/RESTORE ARE K 063100
         CBAL  R4,OOINIT           INITIALISE AREA TO LOW VALUES        K 063200
        SUBOUT RESTORE=ALL         RETURN TO CALLER                     K 063300
         DROP  R15                 DROP POOL C/B ADDRESSABILITY         K 063400
         TITLE 'PARROTK - INITIALISE CORE TO LOW-VALUES'                K 063500
*********************************************************************** K 063600
*        INITIALISE CORE TO LOW VALUES                                * K 063700
*********************************************************************** K 063800
         SPACE 1                                                        K 063900
*        ON ENTRY :-    R1 - ADDRESS OF AREA                            K 064000
*                       R2 - LENGTH OF AREA                             K 064100
         SPACE 1                                                        K 064200
OOINIT   SUBIN ,                   ENTER ROUTINE                        K 064300
         LR    R3,R2               SET R3 TO LENGTH OF AREA TO CLEAR    K 064400
         LR    R2,R1               POINT R2 AT AREA OF CORE             K 064500
         XR    R15,R15             SET R15 TO LGTH 0 AND PAD CHAR '00'  K 064600
         SR    R14,R14             SET 'FROM' POINTER TO ZERO           K 064700
         MVCL  R2,R14              CLEAR CORE TO LOW VALUES             K 064800
        SUBOUT ,                   RETURN TO CALLER                     K 064900
         TITLE 'PARROTK - VARIABLE LENGTH MOVE'                         K 065000
*********************************************************************** K 065100
*        MOVE A FIELD OF ANY LENGTH                                     K 065200
*********************************************************************** K 065300
         SPACE 1                                                        K 065400
*        ON ENTRY: R1 - ADDRESS OF SOURCE FIELD                         K 065500
*                  R2 - LENGTH TO BE MOVED                              K 065600
*                  R3 - ADDRESS OF RECEIVING FIELD                      K 065700
         SPACE 1                                                        K 065800
*        THIS ROUTINE DOES NOT USE THE INSTRUCTION 'MVCL' BECAUSE MOST  K 065900
*         OF OUR VARIABLE LENGTH MOVES ARE CHARCETR PROPAGATION, AND,   K 066000
*         FOR REASONS THAT ESCAPE ME, IBM CONSIDER THIS TO BE           K 066100
*         DESTRUCTIVE OVERLAP, AND SUPPRESS THE OPERATION.              K 066200
         SPACE 1                                                        K 066300
VARMOVE  SUBIN ,                   MOVE VARIABLE LENGTH FIELD           K 066400
VARMOVE1 C     R2,=F'256'          TEST IF MORE THAN 256 BYTES LEFT     K 066500
         BNH   VARMOVE2            BR IF NOT                            K 066600
         MVC   0(256,R3),0(R1)     MOVE 256 BYTES TO RECEIVING AREA     K 066700
         S     R2,=F'256'          DECREMENT LENGTH BY 256 BYTES        K 066800
         LA    R1,256(,R1)         INCREMENT SOURCE POINTER BY 256      K 066900
         LA    R3,256(,R3)         INCREMENT RECEIVIBG POINTER BY 256   K 067000
         B     VARMOVE1            REPEAT FOR NEXT 256 BYTES            K 067100
VARMOVE2 BCTR  R2,0                DECREMENT REMAIMING LENGTH FOR ECECU K 067200
         EX    R2,VARMVC           MOVE RENAINDER                       K 067300
        SUBOUT ,                   RETURN TO CALLER                     K 067400
         SPACE 1                                                        K 067500
VARMVC   MVC   0(0,R3),0(R1)       EXECUTED MOVE INSTRUCTION            K 067600
         TITLE 'PARROTK - VALIDATE NUMERIC FIELDS'                      K 067700
*********************************************************************** K 067800
*        NUMERIC TESTS                                                * K 067900
*********************************************************************** K 068000
         SPACE 5                                                        K 068100
*        THERE ARE THREE ROUTINES FOR VALIDATING NUMERIC FIELDS:-       K 068200
         SPACE 1                                                        K 068300
*              NUMERIC - VALIDATE UNSIGNED DISPLAY NUMERIC              K 068400
*              NUMRICS - VALIDATE SIGNED/UNSIGNED DISPLAY NUMERIC       K 068500
*              NUMRICP - VALIDATE PACKED DECIMAL                        K 068600
         SPACE 1                                                        K 068700
*        ALL THREE ROUTINES HAVE THE FOLLOWING ATTRIBUTES:-             K 068800
         SPACE 5                                                        K 068900
*        ON ENTRY: R14 - ADDRESS OF FIELD                               K 069000
*                  R15 - EXECUTABLE LENGTH OF FIELD                     K 069100
         SPACE 1                                                        K 069200
*        ON EXIT, THE CONDITION CODE IS SET SUCH THAT THE USER CAN MAKE K 069300
*         THE FOLLOWING CONDITIONAL BRANCHES:                           K 069400
*              BL - ALL BLANK                                           K 069500
*              BE - NUMERIC                                             K 069600
*              BH - NON-NUMERIC                                         K 069700
         SPACE 1                                                        K 069800
*        ON EXIT:  $PVALUE CONTAINS THE VALUE IN PACKED DECIMAL         K 069900
*                  $BVALUE HOLDS THE VALUE AS A BINARY FULLWORD         K 070000
*                  R1 CONATINS THE BINARY VALUE                         K 070100
*        IF THE FIELD WAS NON-NUMERIC, OR BLANK, THESE RESULT FIELDS    K 070200
*         WILL CONTAIN ZERO.                                            K 070300
         SPACE 1                                                        K 070400
*        THESE ROUTINES ALL USE 'TR' AND 'TRT' INSTRUCTIONS TO PERFROM  K 070500
*         THE VALIDATION OF ANY FIELD IN A SINGLE PASS, AND NOT IN AN   K 070600
*         ITERATIVE BYTE-BY-BYTE LOOP.  ( I REALLY AM BLOODY CLEVER ).  K 070700
         SPACE 1                                                        K 070800
*        IF NON-NUMERIC DATA IS DETECTED DURING CONTROL CARD            K 070900
*         PROCESSING, SWITCH 'MERRCC' IS SET ON, AND AN ERROR MESSAGE   K 071000
*         IS PRINTED.  IF NON-NUMERIC DATA IS DETECTED DURING SYSUT1    K 071100
*         PROCESSING, SWITCH 'MERRNNUM' IS SET ON.                      K 071200
         EJECT                                                          K 071300
*********************************************************************** K 071400
*        NUMERIC - VALIDATE UNSIGNED DISPLAY NUMERIC                  * K 071500
*********************************************************************** K 071600
         SPACE 1                                                        K 071700
         USING PARROTT,R9          ESTABLISH ADDRESS'Y FOR TABLES       K 071800
NUMERIC  SUBIN SAVE=ALL            PRESERVE ALL REGISTERS               K 071900
         CBAL  R4,NUMINIT          PERFORM INITIALISATION PROCESSING    K 072000
         ST    R1,NUMERIC-(64-4*R1) MOVE ZEROISED REG TO SAVE/RESTORE A K 072100
         MVI   $TEST,C'W'          ASSUME FIELD IS ALL BLANK            K 072200
         EX    R15,NUMCLCBL        TEST IF FIELD IS ALL BLANK           K 072300
         BE    NUMERICX            EXIT IF BLANK                        K 072400
         MVI   $TEST,C'Y'          ASSUME FIELD IS NON-NUMERIC          K 072500
         EX    R15,TESTTR          TRANSLATE FIELD INTO SECIAL CODES    K 072600
         EX    R15,TESTTRN         ACCEPT ONLY 0-9 AND BLANK            K 072700
         BNE   NUMERICX            EXIT IFINVLID CHARACTER FOUND        K 072800
*        THE FIELD CONTAINS NO INVALID CHARACTERS, SO IT ONLY REMAINS   K 072900
*         TO ENSURE THAT THERE ARE NO EMBEDDED BLANKS.                  K 073000
         MVI   $TEST,C'X'          ASSUME THE FIELD IS VALID            K 073100
         EX    R15,TESTTRNO        LOCATE 1ST NUMERIC BYE               K 073200
         BC    2,NUMERICV          IF LAST BYTE IS 1ST NUMERIC, THEN NO K 073300
*                                   EMBEDDED BLANKS POSSIBLE SO VALID   K 073400
         LA    R2,$TSTAREA         POINT R2 AT 1ST BYTE                 K 073500
         AR    R2,R15              POINT R2 AT LAST BYTE                K 073600
*                                  R1 POINTS AT 1ST NUMERIC CHARACTER   K 073700
         SR    R2,R1               DETERMINE RESIDUAL LENGTH            K 073800
         LR    R14,R1              POINT R14 AT THE START OF RESIDUAL   K 073900
         EX    R2,TESTTRBL         SCAN RESIDUAL FIELD FOR BLANKS       K 074000
         BE    NUMERICV            IF NO BLANKS FOUND THEN FIELD VALID  K 074100
         MVI   $TEST,C'Y'          SET TO SHOW NON-NUMERIC              K 074200
         B     NUMERICX            GO SET COND CODE FOR CALLER          K 074300
NUMERICV ZAP   $PVALUE,$WRKDUBL    MOVEPD VALUE TO INTERMED AREA        K 074400
         CVB   R1,$WRKDUBL         CONVERT VALUE TO BINARY              K 074500
         ST    R1,$BVALUE          MOVE BINARY VALUE TO INTERMED AREA   K 074600
         ST    R1,NUMERIC-(64-4*R1) ALTER R1 IN SAVE/RESTORE AREA       K 074700
NUMERICX CLI   $TEST,C'X'          SET COND CODE FOR CALLER             K 074800
         BNH   NUMERICG            EXIT IF FIELD IS NUMERIC             K 074900
         CBAL  R4,NUMERR           PRINT ERROR MESSAGE                  K 075000
         CLI   $TEST,C'X'          SET COND CODE FOR USER AGAIN         K 075100
NUMERICG SUBOUT RESTORE=ALL        RETURN TO CALLER                     K 075200
         DROP  R9                  DROP T1CSECT ADDRESSABILITY          K 075300
         EJECT                                                          K 075400
*********************************************************************** K 075500
*        NUMRICS - VALIDATE SIGNED DISPLAY NUMERIC                    * K 075600
*********************************************************************** K 075700
         SPACE 1                                                        K 075800
         USING PARROTT,R9          ESTABLISH TABLE ADDRESSABILITY       K 075900
NUMRICS  SUBIN SAVE=ALL            PRESERVE ALL REGISTERS               K 076000
         CBAL  R4,NUMINIT          PERFORM INITIALISATION               K 076100
         ST    R1,NUMRICS-(64-4*R1) MOVE ZEROISED REG TO SAVE/RESTOE AR K 076200
         MVI   $TEST,C'W'          ASSUME FIELD IS ALL BLANK            K 076300
         EX    R15,NUMCLCBL        TEST IF FIELD IS ALL BLANK           K 076400
         BE    NUMRICSX            EXIT IF BLANK                        K 076500
         MVI   $TEST,C'Y'          ASSUME FIELD IS NON-NUMERIC          K 076600
         EX    R15,TESTTR          TRANSLATE FIELD INTO SPECIAL CODES   K 076700
         LTR   R15,R15             SEE IF FIELD ONLY 1 BYTE LONG        K 076800
         BZ    NUMRICS1            BR IF ONLY 1 BYTE TO TEST            K 076900
         BCTR  R15,0               DECREMENT TO TEST LENGTH-1           K 077000
         EX    R15,TESTTRN         ACCEPT ONLY ' ' AND 0-9              K 077100
         BNE   NUMRICSX            BR IF INVALID CHARACTERS FOUND       K 077200
         LA    R15,1(,R15)         RESET R15 TO TRUE EXECUTABLE ELNGTH  K 077300
NUMRICS1 EX    R15,TESTTRS         ACCEPT ONLY ' ',A-R, 0-9, 11-0, 12-0 K 077400
         BNE   NUMRICSX            BR IF INVALID CHARACTERS FOUND       K 077500
*        NO INVALID CHARACTERS PRESENT: NOW TEST FOR EMBEDDED BLANKS    K 077600
         MVI   $TEST,C'X'          ASSUME FIELD IS VALID                K 077700
         EX    R15,TESTTRNS        LOCATE 1ST NUMERIC BYTE              K 077800
         BC    2,NUMRICSV          IF LAST BYTE IS 1ST NUMERIC, NO EMBE K 077900
         LA    R2,$TSTAREA         POINT R2 AT 1ST BYTE IN TEST AREA    K 078000
         AR    R2,R15              POINT R2 AT LAST BYTE                K 078100
*                                  R1 POINTS AT 1ST NUMERIC AFTER 'TRT' K 078200
         SR    R2,R1               DETERMINE RESIDUAL LENGTH            K 078300
         LR    R14,R1              POINT R14 AT 1ST NUMERIC             K 078400
         EX    R2,TESTTRBL         SCAN RESIDUAL FIELD FOR BLANKS       K 078500
         BE    NUMRICSV            IF NO BLANKS FOUND THEN FIELD IS VAL K 078600
         MVI   $TEST,C'Y'          SHOW FIELD IS INVALID                K 078700
         B     NUMRICSX            BR TO EXIT                           K 078800
NUMRICSV ZAP   $PVALUE,$WRKDUBL    MOVE PD VALUE TO RESULT FIELD        K 078900
         CVB   R1,$WRKDUBL         CONVERT RESULT TO BINARY             K 079000
         ST    R1,$BVALUE          PRESERVE BINARY VALUE IN RESULT FIEL K 079100
         ST    R1,NUMRICS-(64-4*R1) ... AND IN REG SAVE/RESTORE AREA    K 079200
NUMRICSX CLI   $TEST,C'X'          SET COND CODE FOR CALLER             K 079300
         BNH   *+8                 BR IF FIELD IS VALID                 K 079400
         CBAL  R4,NUMERR           ISSUE ERROR MESSAGE                  K 079500
         CLI   $TEST,C'X'          SET COND CODE AGAIN                  K 079600
        SUBOUT RESTORE=ALL         RESTORE ALL REGISTERS AND RETURN     K 079700
         DROP  R9                  DROP TABLE ADDRESSABILITY            K 079800
         EJECT                                                          K 079900
*********************************************************************** K 080000
*        NUMERIC PROCESSING - COMMON INITIALISATION ROUTINE           * K 080100
*********************************************************************** K 080200
         SPACE 1                                                        K 080300
NUMINIT  SUBIN SAVE=R4             PRESERVE RETURN ADDRESS              K 080400
         EX    R15,NUMMVC          MOVE FIELD TO $TSTAREA               K 080500
         CBAL  R4,NUMSER           ASSUME ERROR & SET UP ERROR MESSAGE  K 080600
         EX    R15,NUMPACK         PACK FIELD INTO $WRKDUBL             K 080700
         L     R9,$VPARTT          SET CSECT ADDRESS FOR ADDRESSABILITY K 080800
         ZAP   $PVALUE,$ZERO       ZEROISE RESULT FIELD                 K 080900
         XC    $BVALUE,$BVALUE     ZEROISE RESULT FIELD                 K 081000
         SR    R1,R1               ZEROISE RESULT REGISTER              K 081100
        SUBOUT RESTORE=R4          RESTORE AND RETURN TO CALLER         K 081200
         EJECT                                                          K 081300
*********************************************************************** K 081400
*        SET UP ERROR MESSAGE LEST DATA NOT NUMERIC                   * K 081500
*********************************************************************** K 081600
         SPACE 1                                                        K 081700
NUMSER   SUBIN ,                   ENTER ROUTINE                        K 081800
         TM    SWINIT,MINTCC       ARE WE PROCESSING CONTROL CARDS      K 081900
         BZ    NUMSERX             EXIT IF NOT                          K 082000
         LR    R1,R14              POINT R1 AT START OF FIELD           K 082100
         SR    R1,R6               DETERMINE DISPLACEMENT OF FIELD IN R K 082200
         LA    R1,1(,R1)           ALTER DISPLACEMENT TO POSITION       K 082300
         CVD   R1,$WRKDUBL         CONVERT POSN TO DECIMAL              K 082400
         MVC   $WRKSNGL,LINE01M2   MOVE EDIT MASK TO WORK ARAE          K 082500
         ED    $WRKSNGL,$WRKDUBL+6 EDIT START POSITION                  K 082600
         MVC   LINE01M1(2),$WRKSNGL+2 MOVESTART POSN TO MESSAGE         K 082700
         AR    R1,R15              SET R1 TO END POSN                   K 082800
         CVD   R1,$WRKDUBL         CONVERT END POSN TO DECIM L          K 082900
         MVC   $WRKSNGL,LINE01M2   MOVE EDIT MASK TO WORKARAEA          K 083000
         ED    $WRKSNGL,$WRKDUBL+6 EDIT END POSITION                    K 083100
         MVC   LINE01M1+3(2),$WRKSNGL+2 MOVE END POSN TO MESSAGE        K 083200
NUMSERX SUBOUT ,                   RETURN TO CALLER                     K 083300
         SPACE 5                                                        K 083400
*********************************************************************** K 083500
*        PRINT ERROR MESSAGE IF C/C CONTAINS NON-NUMERIC DATA         * K 083600
*********************************************************************** K 083700
         SPACE 1                                                        K 083800
NUMERR   SUBIN SAVE=R4             PRESERVE RETRUN ADDRESS              K 083900
         TM    SWINIT,MINTCC       ARE WE PROCESSING CONTROL CARDS      K 084000
         BO    NUMERR1             BR IF YES                            K 084100
         TM    SWINIT,MINTPARM     ARE WE PROCESSING PARM FIELDS        K 084200
         BO    NUMERRX             EXIT IF YES                          K 084300
*                                  MUST BE VALIDATIOG INPUT DATA        K 084400
         OI    SWERROR,MERRNNUM    FLAG THAT INPUT DATA IN ERROR        K 084500
         B     NUMERRX             EXIT FROM ROUTINE                    K 084600
NUMERR1  OI    SWERROR,MERRCCER    FLAG THAT C/C ERROR FOUND            K 084700
         LINE  LINE01              PRINT ERROR MESSAGE                  K 084800
         ST    R5,NUMERIC-(64-4*R5) SET NEW R5 IN SAVE/RESTORE AREA     K 084900
NUMERRX SUBOUT RESTORE=R4          RESTORE AND RETURN TO CALLER         K 085000
         TITLE 'PARROTK - FLOATING POINT ROUTINES'                      K 085100
*********************************************************************** K 085200
*        CONVERT NUMBER TO FLOATING POINT FORMAT                      * K 085300
*********************************************************************** K 085400
         SPACE 1                                                        K 085500
*        UPON ENTRY :-                                                  K 085600
*         $FPDEC  - PACKED DECIMAL VALUE TO CONVERT ( 31 DIGITS )       K 085700
*         $FPNDEC - NUMBER OF ( IMPLIED ) DECIMAL PLACES                K 085800
         SPACE 1                                                        K 085900
*        UPON EXIT :-                                                   K 086000
*         $FPFP   - FLOATING POINT VALUE                                K 086100
*         FPR2    - FLOATING POINT VALUE                                K 086200
         SPACE 1                                                        K 086300
CNVTOFP  SUBIN ,                   ENTER ROUTINE                        K 086400
         LA    R15,64+14           ASSUME A SIUTABLE EXPONENT           K 086500
*                                  64 IS MIDPOINT 0F 1-128, AND IS ZERO K 086600
*                                  EXPONENT, WHILE 14 IS NUMBER OF HEX  K 086700
*                                  DIGITS WE ARE ABOUT TO PROCESS.      K 086800
         CP    $FPDEC,$ZERO        DETREMINE SIGN OF NUMBER TO CONVERT  K 086900
         MVN   $FPDEC+15(1),$ZERO  FORCE THE NUMBER POSITIVE            K 087000
         BP    *+8                 BR IF IT WAS ORIGINALLY POSITIVE     K 087100
         LA    R15,X'80'(,R15)     ALTER THE SIGN OF THE CHARACTERISTIC K 087200
         DP    $FPDEC,FPFACTOR     SPLIT THE NUMBER FOR TWO REGISTERS   K 087300
*                                  BY DIVIDING BY 2**28                 K 087400
         CVB   R2,$FPDEC           CONVERT QUOTIENT TO BINARY           K 087500
         CVB   R3,$FPDEC+8         CONVERT REMAINDER TO BINARY          K 087600
         SLL   R3,4                BUTT END OF NUMBER TO THE FRONT      K 087700
         SRDL  R2,4                JOIN TOGETHER AND SHIFT 1 CHAR RIGHT K 087800
         STM   R2,R3,$FPFP         MOVE IF TO FLOATING POINT W/A        K 087900
         STC   R15,$FPFP            ... AND INSERT THE CHARACTERISTIC   K 088000
         IC    R15,$FPNDEC         RETRIEVE NUMBER OF DECIMAL PLACES    K 088100
         LA    R15,1(,R15)         ENSURE AT LEAST ONE ITERATION        K 088200
         LD    FPR4,FP1TENTH       SET THE STARTING POINT               K 088300
         MD    FPR4,FPTEN          STEP UP BY ONE DIGIT                 K 088400
         BCT   R15,*-4             GEOMETRIC SUM TO CORRECT BASE        K 088500
         LD    FPR2,$FPFP          GET ORIGINAL FLAOTING POINT NUMBER   K 088600
         DDR   FPR2,FPR4           ADJUST FOR APPROPRIATE NO. OF DECIMA K 088700
         STD   FPR2,$FPFP          SEPLACE ADJUSTED FLOATING POINT NUMB K 088800
        SUBOUT ,                   RETURN TO CALLER                     K 088900
         EJECT                                                          K 089000
*********************************************************************** K 089100
*        CONVERT NUMBER FROM FLOATING POINT FORMAT                    * K 089200
*********************************************************************** K 089300
         SPACE 1                                                        K 089400
*        UPON ENTRY :-                                                  K 089500
*         $FPFP   - FLOATING POINT NUMBER TO BE CONVERTED               K 089600
*         $FPNDEC - NO OF DECIMAL PLACES DESIRED IN OUTPUT              K 089700
         SPACE 1                                                        K 089800
*        UPON EXIT :-                                                   K 089900
*         $FPDEC  - NUMBER IN PACKED DECIMAL FORMAT                     K 090000
*         $FPBIN  - NUMBER IN BINARY                                    K 090100
*         $FPDISP - NUMBER IN DISPLAY NUMERIC WITH TRIALING SIGN        K 090200
*         $FPEDISP- NUMBER IN EDITED DISPLAY NUMERIC WITH TRIALING SIGN K 090300
         SPACE 1                                                        K 090400
CNVFRFP  SUBIN ,                   ENTER ROUITNE                        K 090500
         SR    R15,R15             ZEROISE WORK REGISTER                K 090600
         IC    R15,$FPNDEC         SET NO OF DESIRED DECIMAL PLACES     K 090700
         LA    R15,1(,R15)         ENSURE AT LEAST ONE ITERATION OF NEX K 090800
         LD    FPR4,FP1TENTH       SET VALUE OF 1/10 AS STARTING POINT  K 090900
         MD    FPR4,FPTEN          STEP UP BY 1 DIGIT                   K 091000
         BCT   R15,*-4             GEOMETRIC SUM TO CORRECT BASE        K 091100
         LD    FPR0,$FPFP          RETRIEVE FLOATING POINT NUMBER       K 091200
         MXDR  FPR0,FPR4           CONVERT TO INTEGER FORMAT            K 091300
         LRDR  FPR0,FPR0           CONVERT EXTENDED FORMAT TO LONG      K 091400
         TM    $FPFP,X'80'         IS THE NUMBER NEGATIVE               K 091500
         BZ    *+12                BR IF THE NUMBER IS NOT NEGATIVE     K 091600
         SD    FPR0,FPROUND        SUBTRACT 0.5 TO ROUND NEGATIVE VALUE K 091700
         B     *+8                 BRANCH OVER POSITIVE ROUNDING        K 091800
         AD    FPR0,FPROUND        ADD 0.5 TO ROUND VALUE               K 091900
         STD   FPR0,FPWORK         STORE RESUKT IN WORK AREA            K 092000
         IC    R15,FPWORK          RETRIEVE CHARACTERISTIC              K 092100
         N     R15,=F'15'          REMOVE THE SIGN BIT                  K 092200
         LA    R14,14              SET MAXIMUM POWER OF 16              K 092300
         SR    R14,R15             DETERMINE AMOUNT TO SHIFT            K 092400
         SLL   R14,2               MULTIPLY BY 4 FOR HEX CHARACTERS     K 092500
         LM    R2,R3,FPWORK        LOAD THE FLOATING POINT NUMBER       K 092600
         LA    R2,0(,R2)           REMOVE CHARACTERISTIC AND SIGN       K 092700
         SRDL  R2,0(R14)           SHIFT TO INTEGER POSITION            K 092800
         SLDL  R2,4                SPLIT NUMBER BETWEEN REGISTERS       K 092900
         SRL   R3,4                LEFT-ALIGN LOW-ORDER NUMBER          K 093000
         CVD   R3,FPDBL            CONVERT LOW-ORDER PART TO DECIMAL    K 093100
         CVD   R2,FPDBL2           CONVERT TOP OF NUMBER ALSO           K 093200
         XC    FPFILLIN,FPFILLIN   CLEAR THE PAD AREA                   K 093300
         MP    FPDBLX,FPFACTOR     MULTIPLY TOP OF NO. BY 2**28         K 093400
         AP    FPDBLX,FPDBL        ADD 'BOTTOM' TO 'TOP' FOR DECIMAL VA K 093500
         TM    FPWORK,X'80'        IS THE FLOATING POINT NUMBER NEGATIV K 093600
         BZ    *+10                BR IF NOT NEGATIVE                   K 093700
         MVN   FPDBL2+L'FPDBL2-1(1),=P'-1' ALTER SIGN TO NEGATIVE       K 093800
         EJECT                                                          K 093900
*********************************************************************** K 094000
*        CONVERT NUMBER FROM FLOATING POINT FORMAT ( CONT'D )         * K 094100
*********************************************************************** K 094200
         SPACE 1                                                        K 094300
         ZAP   $FPDEC,FPDBLX       SET PACKED DECIMAL VALUE IN OUTPUT   K 094400
         L     R1,CVBMAXB          SET REG1 TO MAXIMUM BINARY NUMBER    K 094500
         CP    $FPDEC,CVBMAXPD     DOES PD VALUE EXCEED BINARY MAXIMUM  K 094600
         BH    CNVFRFPE            BR IS YES TO FLAG POTENTIAL ERROR    K 094700
         L     R1,CVBMINB          SET REG1 TO MINIMUM BINARY NUMBER    K 094800
         CP    $FPDEC,CVBMINPD     IS PD VALUE BELOW MINIMUM BINARY     K 094900
         BL    CNVFRFPE            BR IF YES TO FLAG POTENTIAL ERROR    K 095000
         B     CNVFRFP2            GO CONVERT PD VALUE TO BINARY        K 095100
CNVFRFPE OI    SWERROR,MERRCVB     FLAG THAT ACCUMULATOR EXCEEDS BIN VA K 095200
         B     CNVFRFP3            GO PRESERVE FAKE VALUE               K 095300
CNVFRFP2 CVB   R1,$FPDEC+8         CONVERT LAST 15 DIGITS TO BINARY     K 095400
CNVFRFP3 ST    R1,$FPBIN           SET BINARY VALUE IN OUTPUT FIELD     K 095500
         ICM   R15,1,$FPNDEC       RETRIEVE NO OF (IMPLIED) DECIMALS    K 095600
         BZ    *+8                 BR IF NO DECIMAL PLACES REQUIRED     K 095700
         LA    R15,1(,R15)         ALLOW FOR THE PERIOD ITSELF          K 095800
         LA    R1,FPEDIT1          POINT AT START OF EDIT MASK          K 095900
         LA    R1,0(R15,R1)        INCREMENT IN TO ALLOW FOR DECIMALS   K 096000
         MVC   WRKEDIT1,0(R1)      MOVE EDIT MASK TO WORK AREA          K 096100
         MVI   WRKEDIT1+L'WRKEDIT1-1,X'60' SET EDIT CHAR FOR TRAILING - K 096200
         ED    WRKEDIT1-1(L'WRKEDIT1+1),$FPDEC EDIT VALUE INTO WORK FLD K 096300
         MVC   $FPDISP,WRKEDIT1    PRESERVE VALUE IN CCB                K 096400
*        MVC   $FPDISP,0(R1)       MOVE EDIT MASK TO RESULT FIELD       K 096500
*        MVI   $FPDISP,C' '        SET PAD CHARACTER TO BLANK           K 096600
*        MVI   $FPDISP+L'$FPDISP-1,X'60' SET EDIT CHAR FOR TRAILING '-' K 096700
*        ED    $FPDISP,$FPDEC      EDIT VALUE INTO 'UNEDITED' RESULT FL K 096800
         LA    R1,FPEDIT2          POINT AT START OF SECOND EDIT MASK   K 096900
         LA    R1,0(R15,R1)        INCREMENT TO ALLOW FOR DECIMALS      K 097000
         MVC   $FPEDISP,0(R1)      MOVE 'EDITED' EDIT MASK TO OUTPUT    K 097100
         MVC   $FPEDISP(3),$SPACES SET PAD CHARACTER(S) TO BLANK        K 097200
         MVI   $FPEDISP+L'$FPEDISP-1,X'60' SET EDIT CHAR FOR TRAILING - K 097300
         LA    R1,$FPEDISP+L'$FPEDISP-2 POINT AT POSN OF SIGNIFICANCE S K 097400
         SR    R1,R15              ADJUST TO ALLOW FOR DECIMAL PLACES   K 097500
         EDMK  $FPEDISP,$FPDEC     EDIT VALUE INTO 'EDITED' RESULT FIEL K 097600
         BCTR  R1,0                DECREMENT TO LAST BLANK CHARACTER    K 097700
         TM    $PROCESS,PROCF$     IS A FLOATING DOLLAR REQUIRED        K 097800
         BZ    *+8                 BR IF NOT REQUIRED                   K 097900
         MVI   0(R1),C'$'          INSERT FLOATING DOLLAR SIGN          K 098000
         NI    $PROCESS,FF-PROCF$  SET OFF FLAG REQUESTING FLOATING $   K 098100
        SUBOUT ,                   RETURN TO CALLER                     K 098200
         TITLE 'PARROTK - EXECUTED INSTRCUTIONS'                        K 098300
*********************************************************************** K 098400
*        EXECUTED INSTRUCTIONS                                        * K 098500
*********************************************************************** K 098600
         SPACE 1                                                        K 098700
NUMMVC   MVC   $TSTAREA(0),0(R14)  MOVE FIELD TO WORJ ARAE              K 098800
NUMPACK  PACK  $WRKDUBL,$TSTAREA(0) PACK INPUT VALUE                    K 098900
NUMCLCBL CLC   $TSTAREA(0),$SPACES COMPARE FIELD WITH SPACES            K 099000
         TITLE 'PARROTK - CONSTANTS FOR FLOATING POINT ROUTINES'        K 099100
*********************************************************************** K 099200
*        CONSTANTS FOR FLOATING POINT ROUITNES                        * K 099300
*********************************************************************** K 099400
         SPACE 1                                                        K 099500
INFACTOR DC    D'1E2'                                                   K 099600
OUTFACTR DC    D'1E8'                                                   K 099700
FPROUND  DC    D'5E-1'             VALUE FOR ROUNDING                   K 099800
FPFACTOR DC    PL8'268435456'      (2**28) FACTOR TO CONVERT 31 DIGITS  K 099900
*                                  15 DIGIT QUOTIENT AND REMAINDER      K 100000
FPTEN    DC    D'1E1'              FLOATING POINT VALUE OF TEN          K 100100
FP1TENTH DC    D'1E-1'             FLOATING POINT VALUE OF 1/10         K 100200
FPWORK   DC    D'0'                FLOATING POINT WORK AREA             K 100300
FPDBL    DC    D'0'                FLOATING POINT WORK AREA             K 100400
         DC    D'0'                FLOATING POINT WORK AREA             K 100500
FPDBLX   DS    0CL16               FLOATING POINT WORK AREA             K 100600
FPFILLIN DC    D'0'                FLOATING POINT WORK AREA             K 100700
FPDBL2   DC    D'0'                FLOATING POINT WORK AREA             K 100800
         SPACE 1                                                        K 100900
CVBMAXB  DC    F'2147483647'       MAXIMUM FULLWORD BINARY VALUE        K 101000
CVBMINB  DC    F'-2147483647'      MINIMUM FULLWORD BINARY VALUE        K 101100
         SPACE 1                                                        K 101200
CVBMAXPD DC    PL6'2147483647'     MAXIMUM FULLWORD BINARY VALUE        K 101300
CVBMINPD DC    PL6'-2147483647'    MINIMUM FULLWORD BINARY VALUE        K 101400
         SPACE 1                                                        K 101500
FPEDIT1  DC    X'402020202020202020202020202020202020202020202020202020*K 101600
               20202021204B2020202020202020202060'                      K 101700
FPEDIT2  DC      X'404040206B2020206B2020206B2020206B2020206B2020206B20*K 101800
               20206B2020206B2020206B2020206B2021204B202020202020202020*K 101900
               2060'                                                    K 102000
         SPACE 1                                                        K 102100
         DC    C' '                PAD CHARACTER FOR EDIT FIELD         K 102200
WRKEDIT1 DC    CL33' '             EDIT WORK AREA                       K 102300
         TITLE 'PARROTK - CONSTANTS AND WORK AREAS'                     K 102400
GETMUSED DC    F'0'                AMOUNT OF CORE SUB-ALLOCATED         K 102500
GETMXCES DC    F'0'                AMOUNT OF CORE ACQUIRED BY EXTRA GET K 102600
GETMASK2 DC    X'FFFFFFFC'         MASK TO CONVERT TO FULLWORD MULTIPLE K 102700
         SPACE 1                                                        K 102800
PPPLLSGN DC    C'1'                USED TO RECOGNISE 'PPP' OVERPUNCH    K 102900
UT493MBB DC    C'^'                'MUST BE BLANK' CHARACTER FOR PARTKE K 103000
         SPACE 5                                                        K 103100
LINE01   DS    0CL65                                                    K 103200
         DC    C'PRTK-001-E  POSITIONS '                                K 103300
LINE01M1 DC    C'NN-NN'                                                 K 103400
         DC    C' OF THE PRECEDING CARD ARE NOT NUMERIC'                K 103500
LINE01M2 DC    X'40212020'         EDIT MASK FOR START/END POSITION     K 103600
LINE02   DC    C'PRTK-002-E  A ''PPPLL'' FIELD IS NON-NUMERIC OR SYNTACTK 103700
               TICALLY INCORRECT'                                       K 103800
LINE03   DS    0CL124                                                   K 103900
         DC    C'PRTK-003-W  NON-NUMERIC DATA FOUND IN FIELD DEFINED FO*K 104000
               R NUMERIC SELECTION TEST IN C/C NO.'                     K 104100
LINE03C  DC    X'4020202020202120'                                      K 104200
         DC    C' - NOT-SATISFIED COND''N SET'                          K 104300
         SPACE 1                                                        K 104400
       SCSEND  K                   TERINATE CSECT                       K 104500
         END                                                            K 104600
