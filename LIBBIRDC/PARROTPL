         TITLE 'PARROTPL - SOURCE OF PL/1 PARROTQ'                      PL000100
         MACRO                                                          PL000200
         $CB   &PRINT=OFF          MACRO TO GENERATE DSECTS             PL000300
         PUSH  PRINT               PRESERVE PRINT OPTIONS               PL000400
         PRINT &PRINT              SET PRINT OPTIONS FOR DSECTS         PL000500
               EJECT                                                    PL000600
         CBPREFIX ,                CONTROL BLOCK PREFIX                 PL000700
               EJECT                                                    PL000800
         CCB   ,                   CENTRAL CONTROL BLOCK                PL000900
               EJECT                                                    PL001000
         CSECTID ,                 CSECT IDENTIFICATION PREFIX          PL001100
               EJECT                                                    PL001200
         EQUATES ,                 GENERATE STANDARD EQUATES            PL001300
         POP   PRINT               RESTORE ORIGINAL PRINT OPTIONS       PL001400
         MEND                                                           PL001500
         SPACE 4                                                        PL001600
PARROTPL  CSECT                                                         PL001700
         $CB   ,                   GENERATE DSECTS AND EQUATES          PL001800
         TITLE 'PARROTPL - SOURCE OF PL/1 PARROTQ'                      PL001900
        SCSECT PL                                                       PL002000
         USING PARROTPL,R12         ESTABLISH PARROTPL ADDRESSABILITY   PL002100
         USING CCBNTRY,R13         ESTABLISH CCB ADDRESSABILITY         PL002200
         SPACE 1                                                        PL002300
         ENTRY PARENDPL            END IF CSECT                         PL002400
         EJECT                                                          PL002500
*********************************************************************** PL002600
*        PARROTPL - DOCUMENTATION                                     * PL002700
*********************************************************************** PL002800
         SPACE 1                                                        PL002900
*        THE PURPOSE OF THIS CSECT IS TO INCLUDE THE SOURCE OF PARROTQ  PL003000
*         ( THE MOST POWERFUL BIRD IN THE PL/1 FLOCK ) FOR POSTERITY,   PL003100
*         AND FOR DOCUMENTATION PURPOSES.                               PL003200
         SPACE 5                                                        PL003300
         BR    R14                 DO VERY LITTLE                       PL003400
         EJECT                                                          PL003500
*PARROT:  PROC OPTIONS(MAIN);                                           PL003600
*                                                                       PL003700
*         DCL                                                           PL003800
*                                                                       PL003900
*    /* *********************************************************** */  PL004000
*    /*                                                             */  PL004100
*    /* THE FIVE FILES DECLARED HERE ARE MANDATORY FOR ALL          */  PL004200
*    /* APPLICATIONS. THE FILES ARE:                                */  PL004300
*    /*                                                             */  PL004400
*    /*   SYSUT1    - THE INPUT DATA SET TO BE REPORTED ON.         */  PL004500
*    /*               THIS MUST BE A SEQUENTIAL FILE, EITHER        */  PL004600
*    /*               WITH FIXED OR VARYING RECORD LENGTH, AND      */  PL004700
*    /*               CURRENTLY HAS A MAXIMUM LOGICAL RECORD        */  PL004800
*    /*               LENGTH OF 600 BYTES.                          */  PL004900
*    /*                                                             */  PL005000
*    /*   SYSIN     - INPUT CONTROL CARDS. THIS WILL USUALLY BE     */  PL005100
*    /*               A DD * FILE, BUT CAN BE CARD IMAGES ON TAPE/  */  PL005200
*    /*               DISK. LOGICAL RECORD LENGTH MUST BE 80 BYTES. */  PL005300
*    /*                                                             */  PL005400
*    /*   PRINT     - THE OUTPUT REPORT FILE. THIS CAN GO EITHER    */  PL005500
*    /*               DIRECT TO PRINTER, OR TO SPOOL, BUT IN        */  PL005600
*    /*               EITHER CASE THE FULL DCB                      */  PL005700
*    /*                 (RECFM=FBA,LRECL=133,BLKSIZE=133)           */  PL005800
*    /*                       MUST BE SPECIFIED. (IF THE PRINT IS   */  PL005900
*    /*               BEING SPOOLED, THE ATTRIBUTE 'A' IN THE       */  PL006000
*    /*               RECFM PARAMETER IS TO BE ENTERED WHEN THE     */  PL006100
*    /*               PRINT IS TAKEN OFF THE SPOOL).                */  PL006200
*    /*                                                             */  PL006300
*    /*   SYSLIN    - AN INPUT DATA SET CONTAINING PRINT-LINE       */  PL006400
*    /*               IMAGES OF THE PICTURE OF A PARROT WHICH IS    */  PL006500
*    /*               PRINTED BETWEEN THE CONTROL STATEMENTS AND    */  PL006600
*    /*               THE START OF THE REPORT.  THE FULL DCB IS     */  PL006700
*    /*                      DCB=(RECFM=FBA,LRECL=133,BLKSIZE=133)  */  PL006800
*    /*                                                             */  PL006900
*    /*   TW80      - THE OUTPUT RANGE ANALYSIS REPORT. ALL THE     */  PL007000
*    /*               NOTES UNDER 'PRINT' APPLY HERE.               */  PL007100
*    /*                                                             */  PL007200
*    /* *********************************************************** */  PL007300
*                                                                       PL007400
*         SYSUT1 FILE RECORD SEQUENTIAL,                                PL007500
*         SYSIN  FILE RECORD SEQUENTIAL,                                PL007600
*         SYSLIN FILE RECORD SEQUENTIAL,                                PL007700
*         WORK   FILE RECORD SEQUENTIAL,                                PL007800
*         PRINT  FILE RECORD SEQUENTIAL;                                PL007900
*                                                                       PL008000
*    /* *********************************************************** */  PL008100
*    /*                                                             */  PL008200
*    /* OTHER FILES WHICH SHOULD BE ENTERED IN DD STATEMENTS IN THE */  PL008300
*    /* JCL ARE:                                                    */  PL008400
*    /*                                                             */  PL008500
*    /*   SYSPRINT  - A PL/1 REQUIREMENT FOR MESSAGES FROM THE      */  PL008600
*    /*               ERROR HANDLER ROUTINE.                        */  PL008700
*    /*                                                             */  PL008800
*    /* AND, IF AN INTERNAL SORT OF THE INPUT DATA IS REQUESTED,    */  PL008900
*    /*                                                             */  PL009000
*    /*   SYSOUT    - REQUIRED FOR MESSAGES FROM THE SORT PACKAGE.  */  PL009100
*    /*   SORTLIB   - THE SYSTEM SORT LIBRARY.                      */  PL009200
*    /*   SORTWKNN  - SORT WORK AREAS.                              */  PL009300
*    /*                                                             */  PL009400
*    /* NOTE THAT SORTIN AND SORTOUT ARE NOT REQUIRED, AND THAT     */  PL009500
*    /* THE SYSIN DATA SET TO THE SORT IS INCLUDED IN THE CONTROL   */  PL009600
*    /* CARDS TO THIS PROGRAM.                                      */  PL009700
*    /*                                                             */  PL009800
*    /* *********************************************************** */  PL009900
*                                                                       PL010000
*                                                                       PL010100
*         DCL                                                           PL010200
*                                                                       PL010300
*    /* *********************************************************** */  PL010400
*    /*                                                             */  PL010500
*    /* 'INREC' IS THE DATA AREA WHEREIN THE CURRENT SYSUT1 RECORD  */  PL010600
*    /* IS BEING PROCESSED.                                         */  PL010700
*    /*                                                             */  PL010800
*    /* *********************************************************** */  PL010900
*                                                                       PL011000
*         INREC CHAR(2000) VARYING STATIC EXTERNAL,                     PL011100
*                                                                       PL011200
*    /* *********************************************************** */  PL011300
*    /*                                                             */  PL011400
*    /* 'INCARD' IS THE RECEIVING AREA FPR THE CONTROL CARDS INTO   */  PL011500
*    /* THE PROGRAM, AND DEFINED ON THIS STRING ARE THE STRUCTURES  */  PL011600
*    /* FOR EACH INDIVIDUAL CARD TYPE.                              */  PL011700
*    /* THE CARD TYPES, WITH REQUIREMENTS AND DESCRIPTION, ARE:     */  PL011800
*    /*                                                             */  PL011900
*    /*    1-4   MIN MAX  DESCRIPTION.                              */  PL012000
*    /*                                                             */  PL012100
*    /*    GR01   0   5   MAKE UP THE 3 LINES OF THE REPORT HEADING */  PL012200
*    /*    GR02   0  20   GIVE CRITERIA FOR SELECTING RECORDS.      */  PL012300
*    /*    GR03   1   1   SPECIFY THE KEY FIELDS FOR TOTALS, ETC.   */  PL012400
*    /*    GR04   1   9   SPECIFY THE VALUE FIELDS ON THE FILE THAT */  PL012500
*    /*                   WILL BE PROCESSED / PRINTED.              */  PL012600
*    /*    GR05   0   1   IF PRESENT, INDICATES THAT ALL DETAIL     */  PL012700
*    /*                   RECORDS ARE TO BE PRINTED.                */  PL012800
*    /*    GR06   0   1   IF PRESENT, WILL CAUSE THE RECORDS TO BE  */  PL012900
*    /*                   SORTED BEFORE BEING PROCESSED.            */  PL013000
*    /*    GR07   0  20   AVAILABLE FOR USER-CODED ARITHMETIC.      */  PL013100
*    /*    GR08   1   1   SPECIFIES WHICH VALUES (FIELDS FROM FILE  */  PL013200
*    /*                   OR ARITHMETIC RESULTS) ARE TO BE PRINTED. */  PL013300
*    /*    GR09   0  20   SPECIFIES THE RANGES FOR 2080 ANALYSES    */  PL013400
*    /*                                                             */  PL013500
*    /* *********************************************************** */  PL013600
*                                                                       PL013700
*         INCARD CHAR (80),                                             PL013800
*         GR04_ALPHAKEY CHAR(1) DEF INCARD POS(14),                     PL013900
*                                                                       PL014000
*         1 GR01 DEFINED INCARD,                                        PL014100
*           3 DES_GR01   CHAR (4),                                      PL014200
*           3 BYTE_GR01  CHAR (1),                                      PL014300
*           3 TITLE_GR01 CHAR (75),                                     PL014400
*                                                                       PL014500
*         1 GR02 DEFINED INCARD,                                        PL014600
*           3 DES_GR02   CHAR (4),                                      PL014700
*           3 FIL_GR02   (4),                                           PL014800
*             5 CPOS_GR02 CHAR(3),                                      PL014900
*             5 CLEN_GR02 PIC '99',                                     PL015000
*             5 CPAK_GR02 CHAR (1),                                     PL015100
*             5 CTYP_GR02 CHAR (2),                                     PL015200
*             5 CLIT_GR02 CHAR (11),                                    PL015300
*                                                                       PL015400
*         1 GR03 DEFINED INCARD,                                        PL015500
*           3 DES_GR03   CHAR (4),                                      PL015600
*           3 FIL_GR03   (4),                                           PL015700
*             5 CPOS_GR03 CHAR(3),                                      PL015800
*             5 CLEN_GR03 PIC '99',                                     PL015900
*             5 CPAK_GR03 CHAR (1),                                     PL016000
*             5 CTOT_GR03 CHAR (1),                                     PL016100
*             5 CPAG_GR03 CHAR (1),                                     PL016200
*             5 CNAM_GR03 CHAR(3),                                      PL016300
*             5 CNML_GR03 PIC '99',                                     PL016400
*             5 CTW8_GR03 CHAR (1),                                     PL016500
*             5 CLCT_GR03 PIC'99',                                      PL016600
*             5 CFIL_GR03 CHAR(3),                                      PL016700
*                                                                       PL016800
*         1 GR04 DEFINED INCARD,                                        PL016900
*           3 DES_GR04   CHAR (4),                                      PL017000
*           3 CFLD_GR04  CHAR (2),                                      PL017100
*           3 CPOS_GR04 CHAR(3),                                        PL017200
*           3 CLEN_GR04  PIC '99',                                      PL017300
*           3 CPAK_GR04  CHAR (1),                                      PL017400
*           3 CDEC_GR04  PIC '9',                                       PL017500
*           3 CKEY_GR04 PIC'9',                                         PL017600
*           3 CFIL_GR04 CHAR(9),                                        PL017700
*           3 FIL_GR04 (3),                                             PL017800
*             5 CSPOS_GR04 CHAR(3),                                     PL017900
*             5 CSLEN_GR04 PIC'99',                                     PL018000
*             5 CSPAK_GR04 CHAR(1),                                     PL018100
*             5 CSTYP_GR04 CHAR(2),                                     PL018200
*             5 CSLIT_GR04 CHAR(11),                                    PL018300
*                                                                       PL018400
*         1 GR05 DEFINED INCARD,                                        PL018500
*           3 DES_GR05   CHAR (4),                                      PL018600
*           3 CPOS_GR05 CHAR(3),                                        PL018700
*           3 CLEN_GR05  PIC '99',                                      PL018800
*           3 CFIL_GR05  CHAR (71),                                     PL018900
*                                                                       PL019000
*         1 GR06 DEFINED INCARD,                                        PL019100
*           3 DES_GR06   CHAR (4),                                      PL019200
*           3 SORT_GR06  CHAR (76),                                     PL019300
*                                                                       PL019400
*         1 GR07 DEFINED INCARD,                                        PL019500
*           3 DES_GR07   CHAR (4),                                      PL019600
*           3 CFLD_GR07  CHAR (2),                                      PL019700
*           3 CARI_GR07  CHAR (73),                                     PL019800
*           3 CTOT_GR07  CHAR (1),                                      PL019900
*                                                                       PL020000
*          1 GR07TEST DEF INCARD,                                       PL020100
*           3 DES_GR07TST  CHAR(4),                                     PL020200
*           3 CFLD_GR07TST CHAR(2),                                     PL020300
*           3 TEST_GR07TST CHAR(4),                                     PL020400
*           3 FLD1_GR07TST CHAR(2),                                     PL020500
*           3 EQGT_GR07TST CHAR(2),                                     PL020600
*           3 FLD2_GR07TST CHAR(2),                                     PL020700
*           3 GOTO_GR07TST CHAR(2),                                     PL020800
*           3 SPRE_GR07TST CHAR(62),                                    PL020900
*                                                                       PL021000
*         1 GR08 DEFINED INCARD,                                        PL021100
*           3 DES_GR08   CHAR (4),                                      PL021200
*           3 CPRT_GR08 (5),                                            PL021300
*             5 CFLD_GR08  CHAR (2),                                    PL021400
*             5 CDEC_GR08  PIC '9',                                     PL021500
*           3 CTW8_GR08  CHAR (2),                                      PL021600
*           3 CDES_GR08  CHAR (59),                                     PL021700
*                                                                       PL021800
*         1 GR09 DEFINED INCARD,                                        PL021900
*           3 DES_GR09   CHAR (4),                                      PL022000
*           3 FILA_GR09  CHAR (6),                                      PL022100
*           3 CVAL_GR09  PIC '999999999R',                              PL022200
*           3 FILB_GR09 CHAR(60),                                       PL022300
*                                                                       PL022400
*         1 GR10 DEF INCARD,                                            PL022500
*           3 DES_GR10  CHAR(4),                                        PL022600
*           3 KEY_GR10  PIC'9',                                         PL022700
*           3 SPOS_GR10 PIC'999',                                       PL022800
*           3 EPOS_GR10 PIC'999',                                       PL022900
*           3 FLD_GR10  CHAR(5),                                        PL023000
*           3 FMAT_GR10 CHAR(1),                                        PL023100
*           3 DECS_GR10 PIC'9',                                         PL023200
*           3 FILA_GR10 CHAR(2),                                        PL023300
*           3 LIT_GR10  CHAR(60);                                       PL023400
*                                                                       PL023500
*                                                                       PL023600
*         DCL                                                           PL023700
*                                                                       PL023800
*    /* *********************************************************** */  PL023900
*    /*                                                             */  PL024000
*    /* NEXT WE HAVE THE VARIOUS AREAS FOR THE REPORT LINES. THERE  */  PL024100
*    /* ARE FOUR OF THESE, THE THREE HEADING LINES (HEADA, HEADBX,  */  PL024200
*    /* AND HEADCX), AND ONE 'GENERALISED' DETAIL LINE, LINEA.      */  PL024300
*    /* 'CNT_LINE' IS THE POSITION ON THE LINE OF THE RECORD COUNT, */  PL024400
*    /* WHEN PRINTED.                                               */  PL024500
*    /*                                                             */  PL024600
*    /* *********************************************************** */  PL024700
*                                                                       PL024800
*         1 HEADA,                                                      PL024900
*           3 BYTE_HEADA CHAR (20) INIT ('1'),                          PL025000
*           3 HEAD_HEADA CHAR (75),                                     PL025100
*           3 FILE_HEADA CHAR (11) INIT ('     DATE'),                  PL025200
*           3 DATE_HEADA CHAR (9),                                      PL025300
*           3 FILB_HEADA CHAR (11) INIT ('     PAGE'),                  PL025400
*           3 PAGE_HEADA PIC 'ZZZ9BBB',                                 PL025500
*                                                                       PL025600
*         1 HEADBX CHAR (133),                                          PL025700
*         1 HEADB  DEFINED HEADBX,                                      PL025800
*           3 BYTE_HEADB CHAR (1),                                      PL025900
*           3 HED1_HEADB CHAR (75),                                     PL026000
*           3 HED2_HEADB CHAR (57),                                     PL026100
*                                                                       PL026200
*         HEADX CHAR(133),                                              PL026300
*         HX_BYTE CHAR(1),                                              PL026400
*         1 HEADCX CHAR (133),                                          PL026500
*         1 HEADC  DEFINED HEADCX,                                      PL026600
*           3 BYTE_HEADC CHAR (1),                                      PL026700
*           3 HED1_HEADC CHAR (75),                                     PL026800
*           3 HED2_HEADC CHAR (57),                                     PL026900
*                                                                       PL027000
*         LINEA CHAR(133) INIT(' '),                                    PL027100
*         1 LINEAXXXXX DEF LINEA,                                       PL027200
*           3 BYTE_LINE CHAR(1),                                        PL027300
*           3  KEY_LINE  CHAR (36),                                     PL027400
*           3 NAME_LINE  CHAR (26),                                     PL027500
*           3 VALUEX_LINE CHAR (70),                                    PL027600
*                                                                       PL027700
*         CNT_LINE PIC 'ZZZZ9BB' DEFINED LINEA POSITION (57),           PL027800
*                                                                       PL027900
*    /* *********************************************************** */  PL028000
*    /*                                                             */  PL028100
*    /* THE FIVE VALUES TO BE PRINTED ARE RIGHT-ALIGNED ON THE      */  PL028200
*    /* SIGN, AND CAN HAVE THE DECIMAL POINT IN VARYING POSITIONS   */  PL028300
*    /* ALONG THE VALUE (MAX = 4D.P.S, MIN = NONE). THE 'LVAL'      */  PL028400
*    /* FIELDS ARE USED TO PUT THE VALUES IN THE CORRECT PLACE ON   */  PL028500
*    /* THE PRINT LINE.                                             */  PL028600
*    /*                                                             */  PL028700
*    /* *********************************************************** */  PL028800
*                                                                       PL028900
*         1 VALUES_LINE DEFINED LINEA POSITION (64),                    PL029000
*           3 VAL_LINE (5) CHAR(14),                                    PL029100
*         STORELINE CHAR(133) INIT(' '),                                PL029200
*                                                                       PL029300
*         LVALX CHAR (16),                                              PL029400
*         LVAL PIC 'ZZZZZZZZZZZV9999-' DEFINED LVALX,                   PL029500
*         1 LVAL_FIL DEFINED LVALX,                                     PL029600
*           3 LVAL_UNITS CHAR (11),                                     PL029700
*           3 LVAL_DECS  CHAR (4),                                      PL029800
*           3 LVAL_SIGN  CHAR (1),                                      PL029900
*         FMAT_X  CHAR(60),                                             PL030000
*         FMAT_90 PIC'(15)9-'                              DEF FMAT_X,  PL030100
*         FMAT_91 PIC'(14)9V.9-'                           DEF FMAT_X,  PL030200
*         FMAT_92 PIC'(13)9V.99-'                          DEF FMAT_X,  PL030300
*         FMAT_93 PIC'(12)9V.999-'                         DEF FMAT_X,  PL030400
*         FMAT_94 PIC'(11)9V.9999-'                        DEF FMAT_X,  PL030500
*         FMAT_Z0 PIC'(14)Z9-'                             DEF FMAT_X,  PL030600
*         FMAT_Z1 PIC'(13)Z9V.9-'                          DEF FMAT_X,  PL030700
*         FMAT_Z2 PIC'(12)Z9V.99-'                         DEF FMAT_X,  PL030800
*         FMAT_Z3 PIC'(11)Z9V.999-'                        DEF FMAT_X,  PL030900
*         FMAT_Z4 PIC'(10)Z9V.9999-'                       DEF FMAT_X,  PL031000
*         FMAT_C0 PIC'ZZZ,ZZZ,ZZZ,ZZZ,ZZ9-'                DEF FMAT_X,  PL031100
*         FMAT_C1 PIC'ZZ,ZZZ,ZZZ,ZZZ,ZZ9V.9-'              DEF FMAT_X,  PL031200
*         FMAT_C2 PIC'Z,ZZZ,ZZZ,ZZZ,ZZ9V.99-'              DEF FMAT_X,  PL031300
*         FMAT_C3 PIC'ZZZ,ZZZ,ZZZ,ZZ9V.999-'               DEF FMAT_X,  PL031400
*         FMAT_C4 PIC'ZZ,ZZZ,ZZZ,ZZ9V.9999-'               DEF FMAT_X,  PL031500
*                                                                       PL031600
*    /* *********************************************************** */  PL031700
*    /*                                                             */  PL031800
*    /* THE 'DATE' NAMES FOLLOWING ARE USED TO TRANSLATE THE IBM    */  PL031900
*    /* DATE FORMAT YYMMDD INTO THE MORE READABLE FORM  DD MMM YY.  */  PL032000
*    /*                                                             */  PL032100
*    /* *********************************************************** */  PL032200
*                                                                       PL032300
*         1 XDATE    CHAR (6),                                          PL032400
*         1 XDTE     DEFINED XDATE,                                     PL032500
*           3 XYEAR  CHAR (2),                                          PL032600
*           3 XMONTH PIC '99',                                          PL032700
*           3 XDAY   CHAR (2),                                          PL032800
*         1 YDATE     CHAR (9),                                         PL032900
*         1 YDTE     DEFINED YDATE,                                     PL033000
*           3 YDAY   CHAR (2),                                          PL033100
*           3 YFILA  CHAR (1),                                          PL033200
*           3 YMONTH CHAR (3),                                          PL033300
*           3 YFILB  CHAR (1),                                          PL033400
*           3 YYEAR  CHAR (2),                                          PL033500
*         1 ZMONTH   (12) CHAR (3) INIT ('JAN','FEB','MAR','APR',       PL033600
*                                        'MAY','JUN','JUL','AUG',       PL033700
*                                        'SEP','OCT','NOV','DEC'),      PL033800
*                                                                       PL033900
*    /* *********************************************************** */  PL034000
*    /*                                                             */  PL034100
*    /* FINALLY, AS FAR AS PRINTING GOES, SOME MISCELLANEOUS FIELDS */  PL034200
*    /*                                                             */  PL034300
*    /*   BLANKLINE - WHEN NECESSARY TO SPACE OUT LINES, AND ALSO   */  PL034400
*    /*               USED TO PRINT THE CONTROL CARDS ON INPUT.     */  PL034500
*    /*   KEYX_LINE - FOR PACKING THE FOUR VARIABLE-LENGTH KEYS.    */  PL034600
*    /*   CBYT      - FOR HOLDING THE REQUESTED SPACING OF LINES.   */  PL034700
*    /*   LINECT    - )                                             */  PL034800
*    /*   PAGENO    - ) TO CONTROL PAGE SKIPPING.                   */  PL034900
*    /*                                                             */  PL035000
*    /* *********************************************************** */  PL035100
*                                                                       PL035200
*         1 BLANKLINE CHAR (133) INIT (' '),                            PL035300
*         KEYX_LINE CHAR(36) VARYING STATIC,                            PL035400
*         CBYT    CHAR(1) INIT(' '),                                    PL035500
*         UBYT CHAR(1),                                                 PL035600
*         SKIPPRINT BIT(1) INIT('0'B),                                  PL035700
*         SKIPPRINX BIT(1) INIT('0'B),                                  PL035800
*         PRTOTAL BIT(1) INIT('1'B),                                    PL035900
*         LINECT FIXED(3) INIT(99),                                     PL036000
*         LINECX FIXED(3) INIT(55),                                     PL036100
*         PAGENO PIC '9999';                                            PL036200
*                                                                       PL036300
*                                                                       PL036400
*         DCL                                                           PL036500
*                                                                       PL036600
*         SRTIN ENTRY RETURNS(CHAR(2000) VARYING),                      PL036700
*         SRTOUT  ENTRY,                                                PL036800
*                                                                       PL036900
*    /* *********************************************************** */  PL037000
*    /*                                                             */  PL037100
*    /* FIELDS WHICH ARE USED IN THE USER-CODED ARITHMETIC SECTION  */  PL037200
*    /* OF THE PROGRAM. THESE ARE:                                  */  PL037300
*    /*                                                             */  PL037400
*    /*   VALUES    - OF THE 27-FOLD ARRAY, ELEMENTS 1 TO 9 ARE FOR */  PL037500
*    /*               FILE VALUES (FIELDS F1 TO F9), ELEMENTS 10 TO */  PL037600
*    /*               18 ARE FOR EXTRA FILE VALUES (G1 TO G9),      */  PL037700
*    /*               ELEMENTS 19 TO 27 ARE FOR ARITHMETIC RESULTS  */  PL037800
*    /*               (W1 TO W9).                                   */  PL037900
*    /*   VALUE   |                                                 */  PL038000
*    /*   VALUE1  |                                                 */  PL038100
*    /*   VALUE2  |                                                 */  PL038200
*    /*   VALUED  | - TEMPORARY WORK AREAS.                         */  PL038300
*    /*   VALUEP  |                                                 */  PL038400
*    /*   VALIT     - 22-FOLD ARRAY FOR CONSTANT LITERALS.          */  PL038500
*    /*   CONST     - A POINTER TO THE LAST-USED IN THE CONSTANTS   */  PL038600
*    /*               SECTION OF THE ARRAY 'VALIT'.                 */  PL038700
*    /*   FLDDES    - A STRING USED IN CONJUNCTION WITH THE BUILTIN */  PL038800
*    /*               FUNCTION INDEX TO TRANSLATE, FOR EXAMPLE, THE */  PL038900
*    /*               FIELD NAME 'W1' INTO THE SUBSCRIPT 19.        */  PL039000
*    /*   ARITHMETIC- AN ARRAY CONTAINING THE TRANSLATED VERSION OF */  PL039100
*    /*               THE USER-CODED ARITHMETIC. FOR EACH GR07 CARD */  PL039200
*    /*               THERE IS ONE ELEMENT IN THIS ARRAY.           */  PL039300
*    /*   ARIFD     - THE RECEIVING FIELD (WX) IN SUBSCRIPT FORM.   */  PL039400
*    /*   ARIOP   - ) ONE OF EACH OF THESE THREE FOR EACH OPERATOR  */  PL039500
*    /*   ARISN   - ) ACROSS THE GR07 CARD. 'OP' IS ONE OF +,-,*,/, */  PL039600
*    /*   ARINO   - ) 'SN' IS '-' IF THIS OPERAND HAD A MINUS       */  PL039700
*    /*               PREFIX, AND 'NO' IS THE SUBSCRIPT OF THE      */  PL039800
*    /*               FIELD NUMBER / NUMERIC LITERAL IN 'VALUES'.   */  PL039900
*    /*   ARICN   - ) SWITCH SET IF OPERAND IS CONSTANT IN 'VALIT'. */  PL040000
*    /*   ARITT     - SWITCH SET IF ARITHMETIC IS TOTAL-TIME.       */  PL040100
*    /*   ARILN     - THE NUMBER OF OPERATORS ACROSS THIS CARD.     */  PL040200
*    /*                                                             */  PL040300
*    /*   ARIFX     - A TEMPORARY AREA FOR HOLDING FIELD NUMBER.    */  PL040400
*    /*   NOARI     - THE TOTAL NUMBER OF GR07 CARDS READ.          */  PL040500
*    /*   NOFLD     - THE TOTAL NUMBER OF GR04 CARDS READ.          */  PL040600
*    /*   BLARITH - )                                               */  PL040700
*    /*   BLBYTES - ) THE ARITHMETIC ON A GR07 CARD.                */  PL040800
*    /*   NBLARI    - THE SAME, WITH ALL BLANKS STRIPPED OUT, AND   */  PL040900
*    /*               PREFIXED WITH A '+'. (FIRST OPERATOR).        */  PL041000
*    /*                                                             */  PL041100
*    /* *********************************************************** */  PL041200
*                                                                       PL041300
*         1 IPMF_VALUES BASED(IPMF1),                                   PL041400
*           3 IPMF_VALS,                                                PL041500
*           3 VALUES(IPMFVAL REFER(IPMF_VALS),10) FLOAT(16),            PL041600
*         1 VALUE_IDS BASED(ID_VAL),                                    PL041700
*           3 IDS_VAL,                                                  PL041800
*           3 VAL_IDS(IDSVAL REFER(IDS_VAL)) FIXED BIN(15),             PL041900
*         SCALARS(0:9) FLOAT(16) INIT((10)0),                           PL042000
*         SCAFLD CHAR(2),                                               PL042100
*         SCAPCT CHAR(1) DEF SCAFLD,                                    PL042200
*         SCANO  PIC'9'  DEF SCAFLD POS(2),                             PL042300
*         VALUE  FLOAT(16),                                             PL042400
*         VALUE1 FLOAT(16),                                             PL042500
*         VALUE2 FLOAT(16),                                             PL042600
*         VALUED FLOAT(16),                                             PL042700
*         VALUEP FLOAT(16),                                             PL042800
*VAL_DEC1 FIXED(15,1),                                                  PL042900
*VAL_DEC2 FIXED(15,2),                                                  PL043000
*VAL_DEC3 FIXED(15,3),                                                  PL043100
*VAL_DEC4 FIXED(15,4),                                                  PL043200
*VAL_DEC5 FIXED(15,5),                                                  PL043300
*         VALIT(53) FLOAT(16) INIT((53)0),                              PL043400
*         CONST         FIXED(3) INIT(0),                               PL043500
*         1 IPMF_FIELDS BASED(IPMF2),                                   PL043600
*           3 IPMF_FLDS,                                                PL043700
*           3 FLDDES(IPMFFLD REFER(IPMF_FLDS))  CHAR(2),                PL043800
*         1 IPMF_ARITH BASED(IPMF3),                                    PL043900
*          2 IPMF_ARI,                                                  PL044000
*          2 ARITHMETIC(IPMFARI REFER(IPMF_ARI)),                       PL044100
*           3 ARIFD FIXED BIN(3),                                       PL044200
*           3 ARIOP (20) CHAR (1),                                      PL044300
*           3 ARISN (20) CHAR (1),                                      PL044400
*           3 ARINO (20) FIXED BIN(3),                                  PL044500
*           3 ARICN (20) BIT(1),                                        PL044600
*           3 ARITT BIT(1),                                             PL044700
*           3 ARILN FIXED(3) INIT((20)0),                               PL044800
*         ARIFX CHAR (2),                                               PL044900
*         NOARI FIXED (3) INIT(0),                                      PL045000
*         NOFLD FIXED (3) INIT(0),                                      PL045100
*         BLARITH CHAR (74),                                            PL045200
*         BLBYTES (74) CHAR(1) DEFINED BLARITH,                         PL045300
*         NBLARI  CHAR(75) VARYING STATIC;                              PL045400
*                                                                       PL045500
*                                                                       PL045600
*         DCL                                                           PL045700
*                                                                       PL045800
*    /* *********************************************************** */  PL045900
*    /*                                                             */  PL046000
*    /* VARIOUS ARRAYS AND ACCUMULATORS USED IN THE PROGRAM.        */  PL046100
*    /*                                                             */  PL046200
*    /*   ARRAY1  - USED TO STORE THE SELECTION TESTS ON THE GR02   */  PL046300
*    /*             CARDS. MAX 20 CARDS, UP TO 4 TESTS ON EACH.     */  PL046400
*    /*             TEST VALUE IS EITHER CHARACTER, WHEN ARN = 1    */  PL046500
*    /*             AND ARLIT IS USED, OR NUMERIC, ARN = 0 AND      */  PL046600
*    /*             ARNUM HOLDS THE VALUE.                          */  PL046700
*    /*                                                             */  PL046800
*    /*   ARRAY2  - NO LONGER EXISTS.                               */  PL046900
*    /*                                                             */  PL047000
*    /*   ARRAY3  - HOLDS DATA FOR THE 4 KEYS FROM THE GR03 CARD.   */  PL047100
*    /*                                                             */  PL047200
*    /*   ARRAY4  - HOLDS THE SELECTED RECORD COUNT FOR EACH OF THE */  PL047300
*    /*             FIVE TOTALS (4 KEYS & GRAND).                   */  PL047400
*    /*                                                             */  PL047500
*    /*   ARRAY5  - HOLDS THE FIELD DESCRIPTIONS FROM THE POSSIBLE  */  PL047600
*    /*             EIGHTEEN GR04 CARDS.                            */  PL047700
*    /*                                                             */  PL047800
*    /*   ARRAY6  - HOLDS THE 5 FIELD NAMES THAT ARE TO BE PRINTED. */  PL047900
*    /*                                                             */  PL048000
*    /* *********************************************************** */  PL048100
*                                                                       PL048200
*         1 IPMF_GR02 BASED(IPMF4),                                     PL048300
*          2 IPMF_GR2,                                                  PL048400
*          2 ARRAY1(IPMFGR2 REFER(IPMF_GR2),4),                         PL048500
*           3 ARPOS FIXED BIN(15),                                      PL048600
*           3 ARLEN FIXED (2),                                          PL048700
*           3 ARPAK CHAR (1),                                           PL048800
*           3 ARTYP CHAR (2) INIT((80)(2)' '),                          PL048900
*           3 ARN   BIT (1),                                            PL049000
*           3 ARLIT CHAR (11),                                          PL049100
*           3 ARNUM FIXED (11),                                         PL049200
*                                                                       PL049300
*         1 ARRAY3(8),                                                  PL049400
*           3 ARPOS_GR03 FIXED BIN(15) INIT((8)0),                      PL049500
*           3 ARLEN_GR03 FIXED (2),                                     PL049600
*           3 ARPAK_GR03 CHAR (1),                                      PL049700
*           3 ARTOT_GR03 CHAR (1),                                      PL049800
*           3 ARPAG_GR03 CHAR(1) INIT((8)(1)' '),                       PL049900
*           3 ARNAM_GR03 FIXED BIN(15),                                 PL050000
*           3 ARNML_GR03 FIXED (3),                                     PL050100
*         UGR03 BIT(1) INIT('0'B),                                      PL050200
*         1 ARRAY4(9),                                                  PL050300
*           3 ARCNT FIXED(5) INIT((9)0),                                PL050400
*                                                                       PL050500
*         1 IPMF_GR04 BASED(IPMF5),                                     PL050600
*          2 IPMF_GR4,                                                  PL050700
*          2 ARRAY5(IPMFGR4 REFER(IPMF_GR4)),                           PL050800
*           3 ARFLD_GR04 FIXED BIN(15),                                 PL050900
*           3 ARPOS_GR04 FIXED BIN(15),                                 PL051000
*           3 ARLEN_GR04 FIXED (2),                                     PL051100
*           3 ARPAK_GR04 CHAR (1),                                      PL051200
*           3 ARDEC_GR04 FIXED (1),                                     PL051300
*           3 ARKEY_GR04 FIXED(1),                                      PL051400
*           3 ARSEL_GR04(3),                                            PL051500
*             5 ARSPOS_GR04 FIXED BIN(15),                              PL051600
*             5 ARSLEN_GR04 FIXED(3),                                   PL051700
*             5 ARSPAK_GR04 CHAR(1),                                    PL051800
*             5 ARSTYP_GR04 CHAR(2),                                    PL051900
*             5 ARSLIT_GR04 CHAR(11),                                   PL052000
*             5 ARSNUM_GR04 FIXED(11),                                  PL052100
*             5 ARSN_GR04 BIT(1),                                       PL052200
*                                                                       PL052300
*         1 ARRAY7 BASED(IPMF6X),                                       PL052400
*          2 IPMF_GR10,                                                 PL052500
*          2 ARRAY7X(IPMFGR10 REFER(IPMF_GR10)),                        PL052600
*           3 ARSPOS_GR10 FIXED BIN(15),                                PL052700
*           3 AREPOS_GR10 FIXED BIN(15),                                PL052800
*           3 ARFLD_GR10  FIXED BIN(15),                                PL052900
*           3 ARFMT_GR10  CHAR(1),                                      PL053000
*           3 ARDEC_GR10  FIXED BIN(15),                                PL053100
*           3 ARLIT_GR10  FIXED BIN(15),                                PL053200
*         1 ARRAY_GR12X(20),                                            PL053300
*           3 ARRAY_GR12(0:8),                                          PL053400
*             5 ARSPOS_GR12 FIXED BIN(15),                              PL053500
*             5 AREPOS_GR12 FIXED BIN(15),                              PL053600
*             5 ARFLD_GR12  FIXED BIN(15),                              PL053700
*             5 ARFMT_GR12  CHAR(1),                                    PL053800
*             5 ARDEC_GR12  FIXED BIN(15),                              PL053900
*             5 ARLIT_GR12  FIXED BIN(15),                              PL054000
*         1 ARRAY8X BASED(IPMF6),                                       PL054100
*          2 IPMF_GR11,                                                 PL054200
*          2 ARRAY8(IPMFGR11 REFER(IPMF_GR11)),                         PL054300
*           3 ARSPOS_GR11 FIXED BIN(15),                                PL054400
*           3 AREPOS_GR11 FIXED BIN(15),                                PL054500
*           3 ARFLD_GR11  FIXED BIN(15),                                PL054600
*           3 ARDEC_GR11  FIXED BIN(15),                                PL054700
*           3 ARLIT_GR11  FIXED BIN(15),                                PL054800
*           3 ARFMT_GR11 CHAR(1),                                       PL054900
*           3 ZSW_GR11 BIT(1),                                          PL055000
*           3 BSW_GR11 BIT(1),                                          PL055100
*         1 LITERAL_POOLX BASED(IPMF6XX),                               PL055200
*          2 IPMF_GRLIT,                                                PL055300
*          2 LITERAL_POOLY(IPMFGRLIT REFER(IPMF_GRLIT)),                PL055400
*           3 LITERAL_POOL CHAR(20),                                    PL055500
*         ZSW BIT(1) INIT('1'B),                                        PL055600
*         SW11 BIT(1),                                                  PL055700
*         SW12 BIT(1),                                                  PL055800
*         NO_FMAT_LITS INIT(0),                                         PL055900
*         NO_GR10      INIT(0),                                         PL056000
*         NO_GR11      INIT(0),                                         PL056100
*         NO_GR12(0:9);                                                 PL056200
*         DO I = 0 TO 9;                                                PL056300
*            NO_GR12(I) = 0;                                            PL056400
*         END;                                                          PL056500
*         DCL                                                           PL056600
*         $EXIT LABEL,                                                  PL056700
*         1 ARRAY6 (5),                                                 PL056800
*           3 ARFLD_GR08 FIXED(3) INIT((5)0),                           PL056900
*           3 ARDEC_GR08 FIXED (1);                                     PL057000
*                                                                       PL057100
*                                                                       PL057200
*         DCL                                                           PL057300
*                                                                       PL057400
*    /* *********************************************************** */  PL057500
*    /*                                                             */  PL057600
*    /* THE NEXT BATCH OF DATA-NAMES ARE USED FOR UNPACKING AND     */  PL057700
*    /* FORMATTING 1) ALPHA / NUMERIC LITERALS FROM THE GR02 CARDS  */  PL057800
*    /*            2) PACKED / KEX KEYS AND VALUES FROM THE FILE.   */  PL057900
*    /*                                                             */  PL058000
*    /* *********************************************************** */  PL058100
*                                                                       PL058200
*         XLIT  CHAR (11),                                              PL058300
*         NLIT  PIC '9999999999R' DEFINED XLIT,                         PL058400
*         XREC  CHAR (11),                                              PL058500
*         NREC  PIC '9999999999R' DEFINED XREC,                         PL058600
*         ZREC  CHAR (6),                                               PL058700
*         PREC  FIXED (11) BASED (P),                                   PL058800
*         PLIT FIXED (11),                                              PL058900
*                                                                       PL059000
*/* *************************************************************** */  PL059100
*/*                                                                 */  PL059200
*/*      THE FOLLOWING FIELDS ARE USED TO ACCUMULATE THE            */  PL059300
*/*       NUMBER OF ERRORS ENCOUNTERED, AND TO INDICATE             */  PL059400
*/*       THESE AT THE END OF THE REPORT.                           */  PL059500
*/*                                                                 */  PL059600
*/* *************************************************************** */  PL059700
*                                                                       PL059800
*     ERRORSW BIT(1) INIT('0'B),                                        PL059900
*        LITESW BIT(1) INIT('0'B),                                      PL060000
*         LIT20SW BIT(1) INIT('0'B),                                    PL060100
*         ERR0DIV BIT(1) INIT('0'B),                                    PL060200
*         ZERO_DIVIDE_COUNT FIXED (15) INIT(0),                         PL060300
*                                                                       PL060400
*    /* *********************************************************** */  PL060500
*    /*                                                             */  PL060600
*    /* FINALLY, A MISCELLANY OF ODD DATA NAMES WITH VARIOUS USES.  */  PL060700
*    /*                                                             */  PL060800
*    /*   DREC    - ) USED TO POSITION THE DECIMAL POINT            */  PL060900
*    /*   DECR    - ) IN THE PRINTED VALUES.                        */  PL061000
*    /*   ABIT      - HOLDS THE CURRENT VALUE OF THE GR02           */  PL061100
*    /*               ALPHA/NUMERIC SWITCH ARN(I,J) IN ARRAY1.      */  PL061200
*    /*   LTOTSW    - SET ON WHEN A TOTAL HAS JUST BEEN PRINTED,    */  PL061300
*    /*               OVERRIDING LINE SPACING ON NEXT DETAIL LINE.  */  PL061400
*    /*   EOFSW     - IS SET ON ENDFILE OF THE INPUT DATA FILE.     */  PL061500
*    /*   NAMESW    - IS SET ON IF THERE IS A GR05 CARD.            */  PL061600
*    /*   NAMEPOS - )                                               */  PL061700
*    /*   NAMELEN - ) ARE THE DETAILS ON THAT CARD.                 */  PL061800
*    /*   LASTREC   - IS NEEDED FOR THE NAMES ON A TOTAL LINE, AND  */  PL061900
*    /*               HOLDS THE PREVIOUSLY-PROCESSED RECORD.        */  PL062000
*    /*   KEY1,2..  - ARE THE FOUR CURRENT KEYS.                    */  PL062100
*    /*   LASTKEY1..- ARE THE FOUR PREVIOUS KEYS.                   */  PL062200
*    /*   PRIME     - USED TO TEST FOR ALPHA LITERALS ON GR02 CARD. */  PL062300
*    /*   LABL      - THE GR02 TEST, HOLDS ONE OF EQ, NE, LT, GT.   */  PL062400
*    /*   FIRST_TIME                                                */  PL062500
*    /*   NOKEYS    - NUMBER OF KEYS ON THE GR03 CARD.              */  PL062600
*    /*   NOVALS    - NUMBER OF VALUES TO BE PRINTED.               */  PL062700
*    /*   MIDVAL  - )                                               */  PL062800
*    /*   MIDVAX  - ) TEMPORARY WORK AREAS.                         */  PL062900
*    /*   TN        - USED TO OVERCOME A BUG IN PL/1 WHEN           */  PL063000
*    /*               EXPONENTIATING HALFWORD BINARY NUMBERS        */  PL063100
*    /*               WITH SUBSCRIPTED EXPONENTS.                   */  PL063200
*    /*   REXIT     - LABEL FOR CALLING MAJOR SUBROUTINES.          */  PL063300
*    /*   LEXIT     - LABEL FOR CALLING NESTED SUBROUTINES.         */  PL063400
*    /*                                                             */  PL063500
*    /* *********************************************************** */  PL063600
*                                                                       PL063700
*         DREC CHAR (15),                                               PL063800
*         DECR PIC '999999999V999999' DEFINED DREC,                     PL063900
*         ABIT BIT (1),                                                 PL064000
*         LTOTSW  BIT(1),                                               PL064100
*         EOFSW   BIT(1) INIT('0'B),                                    PL064200
*         NAMESW  BIT(1) INIT('0'B),                                    PL064300
*         NAMEPOS FIXED BIN(15),                                        PL064400
*         NAMELEN FIXED(2),                                             PL064500
*                                                                       PL064600
*         LASTREC CHAR(2000),                                           PL064700
*         KEY1     CHAR (28) VARYING STATIC,                            PL064800
*         KEY2     CHAR (28) VARYING STATIC,                            PL064900
*         KEY3     CHAR (28) VARYING STATIC,                            PL065000
*         KEY4     CHAR (28) VARYING STATIC,                            PL065100
*         KEY5     CHAR(28) VARYING STATIC,                             PL065200
*         KEY6     CHAR(28) VARYING STATIC,                             PL065300
*         KEY7     CHAR(28) VARYING STATIC,                             PL065400
*         KEY8     CHAR(28) VARYING STATIC,                             PL065500
*         LASTKEY1 CHAR (28) VARYING STATIC,                            PL065600
*         LASTKEY2 CHAR (28) VARYING STATIC,                            PL065700
*         LASTKEY3 CHAR (28) VARYING STATIC,                            PL065800
*         LASTKEY4 CHAR (28) VARYING STATIC,                            PL065900
*         LASTKEY5 CHAR(28) VARYING STATIC,                             PL066000
*         LASTKEY6 CHAR(28) VARYING STATIC,                             PL066100
*         LASTKEY7 CHAR(28) VARYING STATIC,                             PL066200
*         LASTKEY8 CHAR(28) VARYING STATIC,                             PL066300
*                                                                       PL066400
*         PRIME CHAR (1) INIT (''''),                                   PL066500
*         LABL  CHAR (2),                                               PL066600
*         FIRST_TIME BIT (1) INIT ('1'B),                               PL066700
*         NEGPOS  CHAR(3),                                              PL066800
*         NEGPOSN PIC'999' DEF NEGPOS,                                  PL066900
*         NEGHBYT BIT(4) DEF NEGPOS,                                    PL067000
*                                                                       PL067100
*         NOKEYS FIXED (1) INIT (0),                                    PL067200
*         NOVALS FIXED (1) INIT (0),                                    PL067300
*         MIDVAL FIXED (15,4),                                          PL067400
*         MIDVAX FIXED (15,5),                                          PL067500
*         TN FIXED (3) INIT (10),                                       PL067600
*                                                                       PL067700
*     GR07_IDS (50) CHAR(2) INIT((50)(2)' '),                           PL067800
*                                                                       PL067900
*         LEXIT LABEL,                                                  PL068000
*         PEXIT LABEL,                                                  PL068100
*         REXIT LABEL;                                                  PL068200
*                                                                       PL068300
*         P = ADDR(ZREC);                                               PL068400
*                                       /* CONVERT THE IBM DATE     */  PL068500
*                                       /* INTO REPORT FORMAT       */  PL068600
*         XDATE  = DATE;                                                PL068700
*         YYEAR  = XYEAR;                                               PL068800
*         YDAY   = XDAY;                                                PL068900
*         YMONTH = ZMONTH(XMONTH);                                      PL069000
*         YFILA  = ' ';                                                 PL069100
*         YFILB  = ' ';                                                 PL069200
*         DATE_HEADA = YDATE;                                           PL069300
*                                                                       PL069400
*                                                                       PL069500
*         PAGENO = 0;                                                   PL069600
*                                       /* ICARD IS A COUNT OF THE  */  PL069700
*                                       /* NUMBER OF GR02 (SELECT)  */  PL069800
*                                       /* CARDS READ.              */  PL069900
*         ICARD = 0;                                                    PL070000
*                                       /* ISW IS USED TO CALL      */  PL070100
*                                       /* SELECTED SUBMODULES OF   */  PL070200
*                                       /* PROCEDURE SRTOUT AFTER   */  PL070300
*                                       /* END-OF-FILE IS REACHED.  */  PL070400
*         ISW = 0;                                                      PL070500
*                                                                       PL070600
*         HEAD_HEADA = ' ';                                             PL070700
*         HEADBX = ' ';                                                 PL070800
*         HEADCX = ' ';                                                 PL070900
*                                                                       PL071000
*         KEY1 = ' ';                                                   PL071100
*         KEY2 = ' ';                                                   PL071200
*         KEY3 = ' ';                                                   PL071300
*         KEY4 = ' ';                                                   PL071400
*                                                                       PL071500
*                                       /* INITIALISE, OPEN FILES,  */  PL071600
*                                       /* SET CONDITIONS.          */  PL071700
*         NUMBER_GR02 = 0;                                              PL071800
*         NUMBER_GR04 = 0;                                              PL071900
*         NUMBER_GR07 = 0;                                              PL072000
*         NUMBER_GR10 = 0;                                              PL072100
*         NUMBER_LITS = 0;                                              PL072200
*         NUMBER_GR11 = 0;                                              PL072300
*         OPEN FILE(SYSIN) INPUT;                                       PL072400
*         OPEN FILE(WORK) OUTPUT;                                       PL072500
*         ON ENDFILE(SYSIN) GO TO $A2;                                  PL072600
*         I = 0;                                                        PL072700
*$A1:     READ FILE(SYSIN) INTO(INCARD);                                PL072800
*         IF DES_GR01 = 'GR02' THEN NUMBER_GR02 = NUMBER_GR02 + 1;      PL072900
*         IF DES_GR01 = 'GR04' THEN NUMBER_GR04 = NUMBER_GR04 + 1;      PL073000
*         IF DES_GR01 = 'GR10' THEN NUMBER_GR10 = NUMBER_GR10 + 1;      PL073100
*         IF FLD_GR10 = 'LIT  ' THEN NUMBER_LITS = NUMBER_LITS + 1;     PL073200
*         IF DES_GR01 = 'GR11' THEN NUMBER_GR11 = NUMBER_GR11 + 1;      PL073300
*         IF DES_GR01 = 'GR07'                                          PL073400
*         THEN DO;                                                      PL073500
*             NUMBER_GR07 = NUMBER_GR07 + 1;                            PL073600
*             I = I + 1;                                                PL073700
*             GR07_IDS (I) = CFLD_GR07;                                 PL073800
*         END;                                                          PL073900
*         WRITE FILE(WORK) FROM(INCARD);                                PL074000
*         GO TO $A1;                                                    PL074100
*$A2:     CLOSE FILE(SYSIN);                                            PL074200
*         CLOSE FILE(WORK);                                             PL074300
*         IPMFVAL = NUMBER_GR04 + NUMBER_GR07;                          PL074400
*         IPMFFLD = IPMFVAL;                                            PL074500
*         IPMFARI = NUMBER_GR07;                                        PL074600
*         IPMFGR2 = NUMBER_GR02;                                        PL074700
*         IPMFGR4 = NUMBER_GR04;                                        PL074800
*         IPMFGR11 = NUMBER_GR11;                                       PL074900
*         ALLOCATE ARRAY8X;                                             PL075000
*         ZSW_GR11 = '1'B;                                              PL075100
*         BSW_GR11 = '0'B;                                              PL075200
*         IPMFVAL = IPMFVAL + 1;                                        PL075300
*         IPMFGR10 = NUMBER_GR10;                                       PL075400
*         IPMFGRLIT = NUMBER_LITS;                                      PL075500
*         ALLOCATE ARRAY7;                                              PL075600
*         ALLOCATE LITERAL_POOLX;                                       PL075700
*         ALLOCATE IPMF_VALUES;                                         PL075800
*         ALLOCATE IPMF_FIELDS;                                         PL075900
*         ALLOCATE IPMF_ARITH;                                          PL076000
*         ALLOCATE IPMF_GR02;                                           PL076100
*         ALLOCATE IPMF_GR04;                                           PL076200
*         IDSVAL = IPMFVAL - 1;                                         PL076300
*         ALLOCATE VALUE_IDS;                                           PL076400
*         VAL_IDS = 0;                                                  PL076500
*         FLDDES = ' ';                                                 PL076600
*         ARTYP = ' ';                                                  PL076700
*         ARSTYP_GR04 = '  ';                                           PL076800
*         VALUES = 0;                                                   PL076900
*         DO I = 1 TO 10;                                               PL077000
*            VALUES(IPMFVAL,  I) = 10 - I;                              PL077100
*         END;                                                          PL077200
*         ARILN = 0;                                                    PL077300
*         ON ENDFILE(WORK) GO TO E1;                                    PL077400
*         OPEN FILE(WORK) INPUT;                                        PL077500
*         OPEN FILE(PRINT) OUTPUT;                                      PL077600
*                                       /* HEADING FOR LISTING OF   */  PL077700
*                                       /* CONTROL CARDS.           */  PL077800
*         BLANKLINE = '1CONTROL CARD LISTING';                          PL077900
*         WRITE FILE(PRINT) FROM(BLANKLINE);                            PL078000
*                                                                       PL078100
*    /* *********************************************************** */  PL078200
*    /*                                                             */  PL078300
*    /* IN THIS FIRST SECTION OF MAINSTREAM LOGIC, THE CONTROL      */  PL078400
*    /* CARDS ARE READ AND PROCESSED. THE ACTUAL READ IS IN MODULE  */  PL078500
*    /* R1, WHICH ALSO LISTS THE CARDS ON ENTRY.                    */  PL078600
*    /*     THE STATEMENTS INCLUDED IN THE 'A' LABELS READ THROUGH  */  PL078700
*    /* THE GR01 CARDS AND SET UP THE HEADING LINES FOR THE REPORT. */  PL078800
*    /*                                                             */  PL078900
*    /* *********************************************************** */  PL079000
*                                                                       PL079100
*         REXIT = A1;                                                   PL079200
*         GO TO R1;                                                     PL079300
*                                                                       PL079400
*A1:      IF DES_GR01 ^= 'GR01' THEN GO TO B2;                          PL079500
*         IF BYTE_GR01 = '2' THEN CBYT = '0';                           PL079600
*         IF BYTE_GR01 = '3' THEN CBYT = '-';                           PL079700
*         HEAD_HEADA = TITLE_GR01;                                      PL079800
*         REXIT = A2;                                                   PL079900
*         GO TO R1;                                                     PL080000
*                                                                       PL080100
*A2:      IF DES_GR01 ^= 'GR01' THEN GO TO B2;                          PL080200
*         IF BYTE_GR01 = '2' THEN BYTE_HEADB = '0';                     PL080300
*         IF BYTE_GR01 = '3' THEN BYTE_HEADB = '-';                     PL080400
*         HED1_HEADB = TITLE_GR01;                                      PL080500
*         REXIT = A3;                                                   PL080600
*         GO TO R1;                                                     PL080700
*                                                                       PL080800
*A3:      IF DES_GR01 ^= 'GR01' THEN GO TO B2;                          PL080900
*         HED2_HEADB = TITLE_GR01;                                      PL081000
*         REXIT = A4;                                                   PL081100
*         GO TO R1;                                                     PL081200
*                                                                       PL081300
*A4:      IF DES_GR01 ^= 'GR01' THEN GO TO B2;                          PL081400
*         IF BYTE_GR01 = '2' THEN BYTE_HEADC = '0';                     PL081500
*         IF BYTE_GR01 = '3' THEN BYTE_HEADC = '-';                     PL081600
*         HED1_HEADC = TITLE_GR01;                                      PL081700
*         REXIT = A5;                                                   PL081800
*         GO TO R1;                                                     PL081900
*                                                                       PL082000
*A5:      IF DES_GR01 ^= 'GR01' THEN GO TO B2;                          PL082100
*         HED2_HEADC = TITLE_GR01;                                      PL082200
*                                                                       PL082300
*    /* *********************************************************** */  PL082400
*    /*                                                             */  PL082500
*    /* THIS SECOND SECTION, WITH LABELS 'B', READS THE GR02 CARDS  */  PL082600
*    /* AND SETS UP THE RELEVANT DATA IN ARRAY1.                    */  PL082700
*    /*                                                             */  PL082800
*    /* *********************************************************** */  PL082900
*                                                                       PL083000
*B1:      REXIT = B2;                                                   PL083100
*         GO TO R1;                                                     PL083200
*                                                                       PL083300
*B2:      IF DES_GR02 ^= 'GR02' THEN GO TO C1;                          PL083400
*                                       /* AUGMENT COUNT OF GR02'S  */  PL083500
*         ICARD = ICARD + 1;                                            PL083600
*                                       /* SCAN ACROSS THE 4 TESTS, */  PL083700
*                                       /* MOVING THE DATA, IF      */  PL083800
*                                       /* THERE, INTO THE ARRAY.   */  PL083900
*         DO I = 1 TO 4;                                                PL084000
*            IF CTYP_GR02(I) = '  ' THEN GO TO B1;                      PL084100
*         NEGPOS = CPOS_GR02(I);                                        PL084200
*         IF NEGHBYT = '1101'B                                          PL084300
*         THEN ARPOS(ICARD,I) = 1000 + NEGPOSN;                         PL084400
*         ELSE ARPOS(ICARD,I) = NEGPOSN;                                PL084500
*            ARLEN(ICARD,I) = CLEN_GR02(I);                             PL084600
*            ARPAK(ICARD,I) = CPAK_GR02(I);                             PL084700
*            ARTYP(ICARD,I) = CTYP_GR02(I);                             PL084800
*                                       /* FIND OUT IF CONSTANT ON  */  PL084900
*                                       /* CARD IS IN QUOTES OR NOT */  PL085000
*            XLIT = CLIT_GR02(I);                                       PL085100
*            K = INDEX(XLIT,PRIME);                                     PL085200
*                                                                       PL085300
*            IF K = 0                                                   PL085400
*                                       /* IF NOT, MOVE NUMERIC TO  */  PL085500
*                                       /* 'ARN' & LITERAL TO ARRAY */  PL085600
*            THEN DO;                                                   PL085700
*                    ARNUM(ICARD,I) = NLIT;                             PL085800
*                    ARN(ICARD,I) = '0'B;                               PL085900
*                 END;                                                  PL086000
*                                       /* IF THERE IS A QUOTE,     */  PL086100
*                                       /* LOCATE THE SECOND ONE    */  PL086200
*                                       /* AND MOVE THE IN-BETWEEN  */  PL086300
*                                       /* VALUE TO THE ARRAY.      */  PL086400
*            ELSE DO;                                                   PL086500
*                    SUBSTR(XLIT,K,1) = '*';                            PL086600
*                    L = INDEX(XLIT,PRIME);                             PL086700
*                    L1 = K + 1;                                        PL086800
*                    L2 = L - K - 1;                                    PL086900
*                    ARLIT(ICARD,I) = SUBSTR(XLIT,L1,L2);               PL087000
*                                       /* SIGNIFY ALPHA IN 'ARN'   */  PL087100
*                    ARN(ICARD,I) = '1'B;                               PL087200
*                 END;                                                  PL087300
*         END;                                                          PL087400
*                                       /* GET NEXT GR02 RECORD.    */  PL087500
*         GO TO B1;                                                     PL087600
*                                                                       PL087700
*    /* *********************************************************** */  PL087800
*    /*                                                             */  PL087900
*    /* THIS SECTION UNPACKS THE GR03 CARD, UNLOADING THE DATA FOR  */  PL088000
*    /* THE (UP TO) FOUR KEYS INTO ARRAY3. IT ALSO COUNTS HOW MANY  */  PL088100
*    /* KEYS ARE IN FACT USED.                                      */  PL088200
*    /*                                                             */  PL088300
*    /* *********************************************************** */  PL088400
*                                                                       PL088500
*C1:      IF DES_GR03 ^= 'GR03' THEN GO TO D1;                          PL088600
*         DO I = 1 TO 4;                                                PL088700
*            IF UGR03                                                   PL088800
*            THEN J = I + 4;                                            PL088900
*            ELSE J = I;                                                PL089000
*         NEGPOS = CPOS_GR03(I);                                        PL089100
*         IF NEGHBYT = '1101'B                                          PL089200
*         THEN ARPOS_GR03(J) = 1000 + NEGPOSN;                          PL089300
*         ELSE ARPOS_GR03(J) = NEGPOSN;                                 PL089400
*            ARLEN_GR03(J) = CLEN_GR03(I);                              PL089500
*            ARPAK_GR03(J) = CPAK_GR03(I);                              PL089600
*            ARTOT_GR03(J) = CTOT_GR03(I);                              PL089700
*            ARPAG_GR03(J) = CPAG_GR03(I);                              PL089800
*         NEGPOS = CNAM_GR03(I);                                        PL089900
*         IF NEGHBYT = '1101'B                                          PL090000
*         THEN ARNAM_GR03(J) = 1000 + NEGPOSN;                          PL090100
*         ELSE ARNAM_GR03(J) = NEGPOSN;                                 PL090200
*            ARNML_GR03(J) = CNML_GR03(I);                              PL090300
*            IF ARPOS_GR03(J) ^= 0 THEN NOKEYS = NOKEYS + 1;            PL090400
*         END;                                                          PL090500
*         IF CLCT_GR03(1) > 0 THEN LINECX = CLCT_GR03(1);               PL090600
*                                                                       PL090700
*         UGR03 = '1'B;                                                 PL090800
*         REXIT = C1;                                                   PL090900
*         GO TO R1;                                                     PL091000
*                                                                       PL091100
*    /* *********************************************************** */  PL091200
*    /*                                                             */  PL091300
*    /* THIS SECTION UNPACKS THE GR04 CARDS, PUTTING THE DATA FOR   */  PL091400
*    /* THE (UP TO) NINE FIELDS INTO ARRAY5. IT COUNTS HOW MANY     */  PL091500
*    /* FIELDS ARE SPECIFIED.                                       */  PL091600
*    /*                                                             */  PL091700
*    /* *********************************************************** */  PL091800
*                                                                       PL091900
*D1:      IF DES_GR04 ^= 'GR04' THEN GO TO D5;                          PL092000
*         NOFLD = NOFLD + 1;                                            PL092100
*         NEGPOS = CPOS_GR04;                                           PL092200
*         IF NEGHBYT = '1101'B                                          PL092300
*         THEN ARPOS_GR04(NOFLD) = 1000 + NEGPOSN;                      PL092400
*         ELSE ARPOS_GR04(NOFLD) = NEGPOSN;                             PL092500
*         ARLEN_GR04 (NOFLD) = CLEN_GR04;                               PL092600
*         ARPAK_GR04 (NOFLD) = CPAK_GR04;                               PL092700
*         ARDEC_GR04 (NOFLD) = CDEC_GR04;                               PL092800
*         IF GR04_ALPHAKEY = ' ' THEN GR04_ALPHAKEY = '9';              PL092900
*         ARKEY_GR04 (NOFLD) = CKEY_GR04;                               PL093000
*         DO I = 1 TO 3;                                                PL093100
*            IF CSTYP_GR04(I) = ' ' THEN GO TO D2;                      PL093200
*         NEGPOS = CSPOS_GR04(I);                                       PL093300
*         IF NEGHBYT = '1101'B                                          PL093400
*         THEN ARSPOS_GR04(NOFLD,I) = 1000 + NEGPOSN;                   PL093500
*         ELSE ARSPOS_GR04(NOFLD,I) = NEGPOSN;                          PL093600
*            ARSLEN_GR04(NOFLD,I) = CSLEN_GR04(I);                      PL093700
*            ARSPAK_GR04(NOFLD,I) = CSPAK_GR04(I);                      PL093800
*            ARSTYP_GR04(NOFLD,I) = CSTYP_GR04(I);                      PL093900
*            XLIT = CSLIT_GR04(I);                                      PL094000
*            K = INDEX(XLIT,PRIME);                                     PL094100
*         IF K = 0                                                      PL094200
*         THEN DO;                                                      PL094300
*                    ARSNUM_GR04(NOFLD,I) = NLIT;                       PL094400
*                    ARSN_GR04(NOFLD,I) = '0'B;                         PL094500
*                 END;                                                  PL094600
*            ELSE DO;                                                   PL094700
*                    SUBSTR(XLIT,K,1) = '*';                            PL094800
*                    L = INDEX(XLIT,PRIME);                             PL094900
*                    L1 = K + 1;                                        PL095000
*                    L2 = L - K - 1;                                    PL095100
*                    ARSLIT_GR04(NOFLD,I) = SUBSTR(XLIT,L1,L2);         PL095200
*                    ARSN_GR04(NOFLD,I) = '1'B;                         PL095300
*                 END;                                                  PL095400
*         END;                                                          PL095500
*D2:      DO I = 1 TO IPMF_FLDS;                                        PL095600
*            IF FLDDES(I) = CFLD_GR04 THEN GO TO D3;                    PL095700
*            IF FLDDES(I) = ' ' THEN GO TO D3;                          PL095800
*         END;                                                          PL095900
*D3:      FLDDES(I) = CFLD_GR04;                                        PL096000
*         ARFLD_GR04(NOFLD) = I;                                        PL096100
*         VAL_IDS(I) = NOFLD;                                           PL096200
*                                                                       PL096300
*         REXIT = D1;                                                   PL096400
*         GO TO R1;                                                     PL096500
*                                                                       PL096600
*    /* *********************************************************** */  PL096700
*    /*                                                             */  PL096800
*    /* IF A GR05 CARD IS READ, 'NAMESW' IS SET TO SIGNIFY PRINTING */  PL096900
*    /* OF ALL DETAIL RECORDS, AND THE DATA FOR THE DETAIL NAME IS  */  PL097000
*    /* STORED.                                                     */  PL097100
*    /*                                                             */  PL097200
*    /* *********************************************************** */  PL097300
*                                                                       PL097400
*D5:      IF DES_GR05 ^= 'GR05' THEN GO TO D7;                          PL097500
*                                                                       PL097600
*         REXIT = D7;                                                   PL097700
*         GO TO R1;                                                     PL097800
*                                                                       PL097900
*    /* *********************************************************** */  PL098000
*    /*                                                             */  PL098100
*    /* IF A GR06 CARD IS READ, 'SORTSW' IS SET TO SIGNIFY THAT THE */  PL098200
*    /* SELECTED RECORDS HAVE TO BE SORTED, AND THE 'SORT FIELDS='  */  PL098300
*    /* DATA IS STORED TO PASS TO THE SORT INTERFACE.               */  PL098400
*    /*                                                             */  PL098500
*    /* *********************************************************** */  PL098600
*                                                                       PL098700
*D7:      IF DES_GR06 ^= 'GR06' THEN GO TO D8;                          PL098800
*                                                                       PL098900
*         REXIT = D8;                                                   PL099000
*         GO TO R1;                                                     PL099100
*                                                                       PL099200
*    /* *********************************************************** */  PL099300
*    /*                                                             */  PL099400
*    /* THE NEXT SECTION, THRU TO LABEL D89, DEALS WITH UNPACKING   */  PL099500
*    /* THE ARITHMETIC CARDS GR07. EACH FIELD NAME HAS TO BE        */  PL099600
*    /* TRANSLATED INTO A SUBSCRIPT FOR THE ARRAY 'VALUES', EACH    */  PL099700
*    /* LITERAL CONSTANT MUST BE PLACED IN THE ARRAY 'VALIT', & THE */  PL099800
*    /* WHOLE ARITHMETIC STATEMENT CODED INTO THE ARRAY             */  PL099900
*    /* 'ARITHMETIC'.                                               */  PL100000
*    /*    FOUR POINTERS, K1 THRU K4, ARE INTRODUCED. K1 WILL POINT */  PL100100
*    /* TO THE OPERATOR CURRENTLY BEING PROCESSED, K2 TO THE NEXT   */  PL100200
*    /* ONE (OR OFF THE END OF THE STATEMENT). K3 IS USED TO SKIP   */  PL100300
*    /* OVER A NEGATIVE PREFIX, AND K4 TO SCAN FOR A DECIMAL POINT  */  PL100400
*    /* IN A LITERAL CONSTANT.                                      */  PL100500
*    /*                                                             */  PL100600
*    /* *********************************************************** */  PL100700
*                                                                       PL100800
*D8:      IF DES_GR07 ^= 'GR07' THEN GO TO D9;                          PL100900
*                                       /* AUGMENT COUNT OF GR07'S  */  PL101000
*         NOARI = NOARI + 1;                                            PL101100
*         IF TEST_GR07TST = 'TEST'                                      PL101200
*         THEN DO;                                                      PL101300
*                 ARIFD(NOARI) = -1;                                    PL101400
*         IF FLD1_GR07TST = '$K'                                        PL101500
*         THEN DO;                                                      PL101600
*                 J = IPMFVAL;                                          PL101700
*                 GO TO $D80;                                           PL101800
*              END;                                                     PL101900
*                 DO J = 1 TO IPMF_FLDS;                                PL102000
*                    IF FLDDES(J) = FLD1_GR07TST THEN GO TO $D80;       PL102100
*                 END;                                                  PL102200
*$D80:            ARINO(NOARI,1) = J;                                   PL102300
*         IF FLD2_GR07TST = '$K'                                        PL102400
*         THEN DO;                                                      PL102500
*                 J = IPMFVAL;                                          PL102600
*                 GO TO $D81;                                           PL102700
*              END;                                                     PL102800
*                 DO J = 1 TO IPMF_FLDS;                                PL102900
*                    IF FLDDES(J) = FLD2_GR07TST THEN GO TO $D81;       PL103000
*                 END;                                                  PL103100
*$D81:            ARINO(NOARI,3) = J;                                   PL103200
*         IF GOTO_GR07TST = '$1'                                        PL103300
*                 THEN DO;                                              PL103400
*                         ARINO(NOARI,4) = -1;                          PL103500
*                         GO TO $D825;                                  PL103600
*                      END;                                             PL103700
*         IF GOTO_GR07TST = '$2'                                        PL103800
*         THEN DO;                                                      PL103900
*                 ARINO(NOARI,4) = -2;                                  PL104000
*                 GO TO $D825;                                          PL104100
*              END;                                                     PL104200
*                 DO I = 1 TO NUMBER_GR07;                              PL104300
*                     IF GR07_IDS(I) = GOTO_GR07TST                     PL104400
*                     THEN GO TO $82;                                   PL104500
*                 END;                                                  PL104600
*                 EQGT_GR07TST = '**';                                  PL104700
*                 ARINO(NOARI,2) = 0;       /* NULLIFY THIS TEST */     PL104800
*$82:                                                                   PL104900
*                 ARINO(NOARI,4) = I;                                   PL105000
*$D825:                                                                 PL105100
*                 IF CTOT_GR07 = ' '                                    PL105200
*                 THEN ARITT(NOARI) = '0'B;                             PL105300
*                 ELSE ARITT(NOARI) = '1'B;                             PL105400
*                 IF EQGT_GR07TST = 'EQ' THEN ARINO(NOARI,2) = 1;       PL105500
*                 IF EQGT_GR07TST = 'NE' THEN ARINO(NOARI,2) = 2;       PL105600
*                 IF EQGT_GR07TST = 'GT' THEN ARINO(NOARI,2) = 3;       PL105700
*                 IF EQGT_GR07TST = 'LT' THEN ARINO(NOARI,2) = 4;       PL105800
*                 DO J = 1 TO IPMF_FLDS;                                PL105900
*                     IF FLDDES(J) = CFLD_GR07 THEN GO TO $83;          PL106000
*                     IF FLDDES(J) = '  '      THEN GO TO $83;          PL106100
*                 END;                                                  PL106200
*$83:             FLDDES(J) = CFLD_GR07;                                PL106300
*                 ARINO(NOARI,5) = J;                                   PL106400
*                 REXIT = D8;                                           PL106500
*                 GO TO R1;                                             PL106600
*              END;                                                     PL106700
*                                       /* SUBSCRIPT OF RECEIVING   */  PL106800
*                                       /* FIELD & PLACE IN ARRAY.  */  PL106900
*         SCAFLD = CFLD_GR07;                                           PL107000
*         IF SCAPCT = '%'                                               PL107100
*         THEN DO;                                                      PL107200
*                 ARIFD(NOARI) = -100 - SCANO;                          PL107300
*                 GO TO D801;                                           PL107400
*              END;                                                     PL107500
*         DO J = 1 TO IPMF_FLDS;                                        PL107600
*            IF FLDDES(J) = CFLD_GR07 THEN GO TO D80;                   PL107700
*            IF FLDDES(J) = ' ' THEN GO TO D80;                         PL107800
*         END;                                                          PL107900
*D80:     FLDDES(J) = CFLD_GR07;                                        PL108000
*         ARIFD(NOARI) = J;                                             PL108100
*D801:                                                                  PL108200
*                                       /* PREFIX STATEMENT WITH +  */  PL108300
*                                       /* AND STRIP OUT BLANKS.    */  PL108400
*         BLARITH = CARI_GR07;                                          PL108500
*         NBLARI = '+';                                                 PL108600
*         DO J = 1 TO 74;                                               PL108700
*            IF BLBYTES(J) ^= ' ' THEN NBLARI = NBLARI || BLBYTES(J);   PL108800
*         END;                                                          PL108900
*         IF CTOT_GR07 = ' '            /* SET TOTAL-TIME SWITCH    */  PL109000
*         THEN ARITT(NOARI) = '0'B;                                     PL109100
*         ELSE ARITT(NOARI) = '1'B;                                     PL109200
*                                                                       PL109300
*         L = LENGTH(NBLARI);                                           PL109400
*         BLARITH = NBLARI;                                             PL109500
*                                       /* PUT POINTERS TO FIRST    */  PL109600
*                                       /* OPERAND, SCAN K2 TO GET  */  PL109700
*                                       /* TO NEXT ONE.             */  PL109800
*         K1, K2 = 1;                                                   PL109900
*D81:     K2 = K2 + 1;                                                  PL110000
*                                       /* K2 OFF END OF STATEMENT  */  PL110100
*         IF K2 > L THEN GO TO D82;                                     PL110200
*                                       /* K2 AT NEXT OPERAND.      */  PL110300
*         IF BLBYTES(K2) = '+' | BLBYTES(K2) = '*' | BLBYTES(K2) = '/'  PL110400
*         THEN GO TO D82;                                               PL110500
*                                       /* (BEWARE OF - PREFIXES).  */  PL110600
*         IF BLBYTES(K2) = '-' & K2 ^= K1+1                             PL110700
*         THEN GO TO D82;                                               PL110800
*         GO TO D81;                                                    PL110900
*                                       /* POINT K3 AT THE PREFIX.  */  PL111000
*D82:     IF BLBYTES(K1+1) = '-' THEN K3 = K1 + 1;                      PL111100
*                                ELSE K3 = K1;                          PL111200
*         IF BLBYTES(K3+1) = '%'                                        PL111300
*         THEN DO;                                                      PL111400
*                 SCAFLD = SUBSTR(BLARITH,K3+1,2);                      PL111500
*                 J = -100 - SCANO;                                     PL111600
*                 GO TO D825;                                           PL111700
*              END;                                                     PL111800
*                                       /* IS OPERAND A FIELD NAME? */  PL111900
*         IF BLBYTES(K3+1) > '{' /* <- HEX 'C0' */                      PL112000
*          & BLBYTES(K3+1) < 'Â' /* <- HEX 'EA' */                      PL112100
*         THEN DO;                                                      PL112200
*                 ARIFX = SUBSTR(BLARITH,K3+1,2);                       PL112300
*                                       /* PUT INTO SUBSCRIPT FORM. */  PL112400
*         DO J = 1 TO IPMF_FLDS;                                        PL112500
*            IF FLDDES(J) = ARIFX THEN GO TO D825;                      PL112600
*         END;                                                          PL112700
*D825:                                                                  PL112800
*                 K = ARILN(NOARI) + 1;                                 PL112900
*                 ARICN(NOARI,K) = '0'B;     /* SIGNAL VARIABLE     */  PL113000
*                                       /* AUGMENT COUNTER OF NO.   */  PL113100
*                                       /* OF OPERTRS IN STATEMENT. */  PL113200
*D83:             ARILN(NOARI) = ARILN(NOARI) + 1;                      PL113300
*                 IF K > 20                                             PL113400
*                 THEN DO;                                              PL113500
*                     LIT20SW = '1'B;                                   PL113600
*                     ERRORSW = '1'B;                                   PL113700
*                     GO TO D89;                                        PL113800
*                 END;                                                  PL113900
*                 ARINO(NOARI,K) = J;                                   PL114000
*                                       /* LOAD OPERAND TO ARRAY.   */  PL114100
*                 ARIOP(NOARI,K) = SUBSTR(BLARITH,K1,1);                PL114200
*                                       /* LOAD PREFIX TO ARRAY.    */  PL114300
*                 IF K1 = K3 THEN ARISN(NOARI,K) = ' ';                 PL114400
*                            ELSE ARISN(NOARI,K) = '-';                 PL114500
*                 IF K2 < L                                             PL114600
*                                       /* MORE OPERATIONS. SET K1  */  PL114700
*                                       /* TO NEXT ONE & REPEAT.    */  PL114800
*                 THEN DO;                                              PL114900
*                         K1 = K2;                                      PL115000
*                         GO TO D81;                                    PL115100
*                      END;                                             PL115200
*                                       /* END OF CARD. GET NEXT.   */  PL115300
*                 GO TO D89;                                            PL115400
*              END;                                                     PL115500
*                                       /* ENTRY HERE IF OPERAND    */  PL115600
*                                       /* NUMERIC LITERAL.         */  PL115700
*         DECR = 0;                                                     PL115800
*                                       /* SCAN FOR DECIMAL POINT.  */  PL115900
*         K4 = 0;                                                       PL116000
*         DO K = K3 TO K2;                                              PL116100
*            IF BLBYTES(K) = '.' THEN K4 = K;                           PL116200
*         END;                                                          PL116300
*                                       /* PUT LITERAL INTO 'DREC'. */  PL116400
*         IF K4 = 0                                                     PL116500
*         THEN SUBSTR(DREC,11+K3-K2,K2-K3-1) =                          PL116600
*                        SUBSTR(BLARITH,K3+1,K2-K3-1);                  PL116700
*         ELSE DO;                                                      PL116800
*                 SUBSTR(DREC,11+K3-K4,K4-K3-1) =                       PL116900
*                        SUBSTR(BLARITH,K3+1,K4-K3-1);                  PL117000
*                 SUBSTR(DREC,10,K2-K4-1) =                             PL117100
*                        SUBSTR(BLARITH,K4+1,K2-K4-1);                  PL117200
*              END;                                                     PL117300
*                                       /* FIND NEXT SLOT IN        */  PL117400
*                                       /* 'VALUES', INSERT LITERAL */  PL117500
*                                       /* & SET SUBSCRIPT IN J.    */  PL117600
*        DO J = 1 TO CONST;                                             PL117700
*              IF VALIT (J) = DECR                                      PL117800
*              THEN GO TO D85;                                          PL117900
*        END;                                                           PL118000
*         CONST = CONST + 1;                                            PL118100
*         VALIT(CONST) = DECR;                                          PL118200
*        J = CONST;                                                     PL118300
*         IF J > 52                                                     PL118400
*         THEN DO;                                                      PL118500
*                J = 53;                                                PL118600
*                CONST = 52;                                            PL118700
*            ERRORSW = '1'B;                                            PL118800
*            LITESW  = '1'B;                                            PL118900
*        END;                                                           PL119000
*D85:    K = ARILN(NOARI) + 1;                                          PL119100
*        IF K > 20                                                      PL119200
*        THEN DO;                                                       PL119300
*            LIT20SW = '1'B;                                            PL119400
*            ERRORSW = '1'B;                                            PL119500
*            GO TO D83;                                                 PL119600
*        END;                                                           PL119700
*         ARICN(NOARI,K) = '1'B;             /* SIGNAL CONSTANT LIT.*/  PL119800
*                                       /* STORE OPERATION IN       */  PL119900
*                                       /* ARITHMETIC ARRAY.        */  PL120000
*         GO TO D83;                                                    PL120100
*                                                                       PL120200
*D89:                                                                   PL120300
*         REXIT = D8;                                                   PL120400
*         GO TO R1;                                                     PL120500
*                                                                       PL120600
*    /* *********************************************************** */  PL120700
*    /*                                                             */  PL120800
*    /* THE LAST REMAINING CARD TYPE IS THE 'GR08', PRINT REQUEST   */  PL120900
*    /* CARD. WE PLACE THE VALUES FROM THE CARD INTO ARRAY6,        */  PL121000
*    /* KEEPING A COUNT OF HOW MANY VALUES ARE REQUESTED PRINTED.   */  PL121100
*    /*                                                             */  PL121200
*    /* *********************************************************** */  PL121300
*                                                                       PL121400
*D9:      IF DES_GR08 ^= 'GR08' THEN GO TO D92;                         PL121500
*         REXIT = D92;                                                  PL121600
*         GO TO R1;                                                     PL121700
*                                                                       PL121800
*    /* *********************************************************** */  PL121900
*    /*                                                             */  PL122000
*    /* LATE ADDITION TO THE PROGRAM. THE NEXT BLOCK OF CODING      */  PL122100
*    /* READS THE 'GR09' CARDS, COUNTS THEM, AND STORES THE VALUES  */  PL122200
*    /* IN THE TW-ARRAY.                                            */  PL122300
*    /*                                                             */  PL122400
*    /* *********************************************************** */  PL122500
*                                                                       PL122600
*D92:     IF DES_GR09 ^= 'GR09' THEN GO TO $D1;                         PL122700
*                                                                       PL122800
*         REXIT = D92;                                                  PL122900
*         GO TO R1;                                                     PL123000
*                                                                       PL123100
*$D1:     IF DES_GR10 ^= 'GR10' THEN GO TO $D2;                         PL123200
*         NO_GR10    = NO_GR10    + 1;                                  PL123300
*         ARSPOS_GR10(NO_GR10)   = SPOS_GR10;                           PL123400
*         AREPOS_GR10(NO_GR10)   = EPOS_GR10;                           PL123500
*         ARFMT_GR10(NO_GR10)   = FMAT_GR10;                            PL123600
*         ARDEC_GR10(NO_GR10)   = DECS_GR10;                            PL123700
*         IF FLD_GR10 = 'LIT  '                                         PL123800
*         THEN DO;                                                      PL123900
*                 NO_FMAT_LITS = NO_FMAT_LITS + 1;                      PL124000
*                 LITERAL_POOL(NO_FMAT_LITS) = LIT_GR10;                PL124100
*                 ARLIT_GR10(NO_GR10)   = NO_FMAT_LITS;                 PL124200
*              END;                                                     PL124300
*         I = 0;                                                        PL124400
*         IF FLD_GR10 = 'CNT0 ' THEN I = 980;                           PL124500
*         IF FLD_GR10 = 'CNT1 ' THEN I = 981;                           PL124600
*         IF FLD_GR10 = 'CNT2 ' THEN I = 982;                           PL124700
*         IF FLD_GR10 = 'CNT3 ' THEN I = 983;                           PL124800
*         IF FLD_GR10 = 'CNT4 ' THEN I = 984;                           PL124900
*         IF FLD_GR10 = 'KEY1 ' THEN I = 991;                           PL125000
*         IF FLD_GR10 = 'KEY2 ' THEN I = 992;                           PL125100
*         IF FLD_GR10 = 'KEY3 ' THEN I = 993;                           PL125200
*         IF FLD_GR10 = 'KEY4 ' THEN I = 994;                           PL125300
*         IF FLD_GR10 = 'NAME1' THEN I = 995;                           PL125400
*         IF FLD_GR10 = 'NAME2' THEN I = 996;                           PL125500
*         IF FLD_GR10 = 'NAME3' THEN I = 997;                           PL125600
*         IF FLD_GR10 = 'NAME4' THEN I = 998;                           PL125700
*         IF FLD_GR10 = 'LIT  ' THEN I = 999;                           PL125800
*         IF FLD_GR10 = 'NAME9' THEN I = 1000;                          PL125900
*         IF FLD_GR10 = 'CNT5 ' THEN I = 976;                           PL126000
*         IF FLD_GR10 = 'CNT6 ' THEN I = 977;                           PL126100
*         IF FLD_GR10 = 'CNT7 ' THEN I = 978;                           PL126200
*         IF FLD_GR10 = 'CNT8 ' THEN I = 979;                           PL126300
*         IF FLD_GR10 = 'NAME5' THEN I = 1001;                          PL126400
*         IF FLD_GR10 = 'NAME6' THEN I = 1002;                          PL126500
*         IF FLD_GR10 = 'NAME7' THEN I = 1003;                          PL126600
*         IF FLD_GR10 = 'NAME8' THEN I = 1004;                          PL126700
*         IF FLD_GR10 = 'KEY5 ' THEN I = 1005;                          PL126800
*         IF FLD_GR10 = 'KEY6 ' THEN I = 1006;                          PL126900
*         IF FLD_GR10 = 'KEY7 ' THEN I = 1007;                          PL127000
*         IF FLD_GR10 = 'KEY8 ' THEN I = 1008;                          PL127100
*         IF FLD_GR10 = 'LINE+' THEN I = 1009;                          PL127200
*         IF I ^= 0                                                     PL127300
*         THEN DO;                                                      PL127400
*                 ARFLD_GR10(NO_GR10)   = I;                            PL127500
*                 REXIT = $D1;                                          PL127600
*                 GO TO R1;                                             PL127700
*              END;                                                     PL127800
*         ARIFX = FLD_GR10;                                             PL127900
*         DO I = 1 TO IPMF_FLDS;                                        PL128000
*            IF FLDDES(I) = ARIFX THEN GO TO $D15;                      PL128100
*         END;                                                          PL128200
*$D15:    ARFLD_GR10(NO_GR10)   = I;                                    PL128300
*         REXIT = $D1;                                                  PL128400
*         GO TO R1;                                                     PL128500
*$D2:     IF DES_GR10 ^= 'GR11' THEN GO TO $D3;                         PL128600
*         NO_GR11    = NO_GR11    + 1;                                  PL128700
*         ARSPOS_GR11(NO_GR11)   = SPOS_GR10;                           PL128800
*         AREPOS_GR11(NO_GR11)   = EPOS_GR10;                           PL128900
*         ARFMT_GR11(NO_GR11)   = FMAT_GR10;                            PL129000
*         ARDEC_GR11(NO_GR11)   = DECS_GR10;                            PL129100
*         IF FILA_GR10 = 'ZZ' THEN ZSW_GR11(NO_GR11) = '0'B;            PL129200
*         IF FILA_GR10 = 'BL' THEN BSW_GR11(NO_GR11) = '1'B;            PL129300
*         IF FLD_GR10 = 'LIT  '                                         PL129400
*         THEN DO;                                                      PL129500
*                 NO_FMAT_LITS = NO_FMAT_LITS + 1;                      PL129600
*                 LITERAL_POOL(NO_FMAT_LITS) = LIT_GR10;                PL129700
*                 ARLIT_GR11(NO_GR11)   = NO_FMAT_LITS;                 PL129800
*              END;                                                     PL129900
*         I = 0;                                                        PL130000
*         IF FLD_GR10 = 'CNT0 ' THEN I = 980;                           PL130100
*         IF FLD_GR10 = 'CNT1 ' THEN I = 981;                           PL130200
*         IF FLD_GR10 = 'CNT2 ' THEN I = 982;                           PL130300
*         IF FLD_GR10 = 'CNT3 ' THEN I = 983;                           PL130400
*         IF FLD_GR10 = 'CNT4 ' THEN I = 984;                           PL130500
*         IF FLD_GR10 = 'KEY1 ' THEN I = 991;                           PL130600
*         IF FLD_GR10 = 'KEY2 ' THEN I = 992;                           PL130700
*         IF FLD_GR10 = 'KEY3 ' THEN I = 993;                           PL130800
*         IF FLD_GR10 = 'KEY4 ' THEN I = 994;                           PL130900
*         IF FLD_GR10 = 'NAME1' THEN I = 995;                           PL131000
*         IF FLD_GR10 = 'NAME2' THEN I = 996;                           PL131100
*         IF FLD_GR10 = 'NAME3' THEN I = 997;                           PL131200
*         IF FLD_GR10 = 'NAME4' THEN I = 998;                           PL131300
*         IF FLD_GR10 = 'LIT  ' THEN I = 999;                           PL131400
*         IF FLD_GR10 = 'NAME9' THEN I = 1000;                          PL131500
*         IF FLD_GR10 = 'CNT5 ' THEN I = 976;                           PL131600
*         IF FLD_GR10 = 'CNT6 ' THEN I = 977;                           PL131700
*         IF FLD_GR10 = 'CNT7 ' THEN I = 978;                           PL131800
*         IF FLD_GR10 = 'CNT8 ' THEN I = 979;                           PL131900
*         IF FLD_GR10 = 'NAME5' THEN I = 1001;                          PL132000
*         IF FLD_GR10 = 'NAME6' THEN I = 1002;                          PL132100
*         IF FLD_GR10 = 'NAME7' THEN I = 1003;                          PL132200
*         IF FLD_GR10 = 'NAME8' THEN I = 1004;                          PL132300
*         IF FLD_GR10 = 'KEY5 ' THEN I = 1005;                          PL132400
*         IF FLD_GR10 = 'KEY6 ' THEN I = 1006;                          PL132500
*         IF FLD_GR10 = 'KEY7 ' THEN I = 1007;                          PL132600
*         IF FLD_GR10 = 'KEY8 ' THEN I = 1008;                          PL132700
*         IF FLD_GR10 = 'LINE+' THEN I = 1009;                          PL132800
*         IF I ^= 0                                                     PL132900
*         THEN DO;                                                      PL133000
*                 ARFLD_GR11(NO_GR11)   = I;                            PL133100
*                 REXIT = $D2;                                          PL133200
*                 GO TO R1;                                             PL133300
*              END;                                                     PL133400
*         ARIFX = FLD_GR10;                                             PL133500
*         DO I = 1 TO IPMF_FLDS;                                        PL133600
*            IF FLDDES(I) = ARIFX THEN GO TO $D25;                      PL133700
*         END;                                                          PL133800
*$D25:    ARFLD_GR11(NO_GR11)   = I;                                    PL133900
*         REXIT = $D2;                                                  PL134000
*         GO TO R1;                                                     PL134100
*$D3:     IF DES_GR10 ^= 'GR12' THEN GO TO E1;                          PL134200
*         J = KEY_GR10;                                                 PL134300
*         IF J = 0 & FLD_GR10 = 'DELET'                                 PL134400
*         THEN DO;                                                      PL134500
*                 PRTOTAL = '0'B;                                       PL134600
*                 REXIT = $D3;                                          PL134700
*                 GO TO R1;                                             PL134800
*              END;                                                     PL134900
*         NO_GR12(J) = NO_GR12(J) + 1;                                  PL135000
*         NO_GR1J = NO_GR12(J);                                         PL135100
*         ARSPOS_GR12(NO_GR1J,J) = SPOS_GR10;                           PL135200
*         AREPOS_GR12(NO_GR1J,J) = EPOS_GR10;                           PL135300
*         ARFMT_GR12(NO_GR1J,J) = FMAT_GR10;                            PL135400
*         ARDEC_GR12(NO_GR1J,J) = DECS_GR10;                            PL135500
*         IF FLD_GR10 = 'LIT  '                                         PL135600
*         THEN DO;                                                      PL135700
*                 NO_FMAT_LITS = NO_FMAT_LITS + 1;                      PL135800
*                 LITERAL_POOL(NO_FMAT_LITS) = LIT_GR10;                PL135900
*                 ARLIT_GR12(NO_GR1J,J) = NO_FMAT_LITS;                 PL136000
*              END;                                                     PL136100
*         I = 0;                                                        PL136200
*         IF FLD_GR10 = 'GR11 ' THEN I = 1500;                          PL136300
*         IF FLD_GR10 = 'CNT0 ' THEN I = 980;                           PL136400
*         IF FLD_GR10 = 'CNT1 ' THEN I = 981;                           PL136500
*         IF FLD_GR10 = 'CNT2 ' THEN I = 982;                           PL136600
*         IF FLD_GR10 = 'CNT3 ' THEN I = 983;                           PL136700
*         IF FLD_GR10 = 'CNT4 ' THEN I = 984;                           PL136800
*         IF FLD_GR10 = 'KEY1 ' THEN I = 991;                           PL136900
*         IF FLD_GR10 = 'KEY2 ' THEN I = 992;                           PL137000
*         IF FLD_GR10 = 'KEY3 ' THEN I = 993;                           PL137100
*         IF FLD_GR10 = 'KEY4 ' THEN I = 994;                           PL137200
*         IF FLD_GR10 = 'NAME1' THEN I = 995;                           PL137300
*         IF FLD_GR10 = 'NAME2' THEN I = 996;                           PL137400
*         IF FLD_GR10 = 'NAME3' THEN I = 997;                           PL137500
*         IF FLD_GR10 = 'NAME4' THEN I = 998;                           PL137600
*         IF FLD_GR10 = 'LIT  ' THEN I = 999;                           PL137700
*         IF FLD_GR10 = 'NAME9' THEN I = 1000;                          PL137800
*         IF FLD_GR10 = 'CNT5 ' THEN I = 976;                           PL137900
*         IF FLD_GR10 = 'CNT6 ' THEN I = 977;                           PL138000
*         IF FLD_GR10 = 'CNT7 ' THEN I = 978;                           PL138100
*         IF FLD_GR10 = 'CNT8 ' THEN I = 979;                           PL138200
*         IF FLD_GR10 = 'NAME5' THEN I = 1001;                          PL138300
*         IF FLD_GR10 = 'NAME6' THEN I = 1002;                          PL138400
*         IF FLD_GR10 = 'NAME7' THEN I = 1003;                          PL138500
*         IF FLD_GR10 = 'NAME8' THEN I = 1004;                          PL138600
*         IF FLD_GR10 = 'KEY5 ' THEN I = 1005;                          PL138700
*         IF FLD_GR10 = 'KEY6 ' THEN I = 1006;                          PL138800
*         IF FLD_GR10 = 'KEY7 ' THEN I = 1007;                          PL138900
*         IF FLD_GR10 = 'KEY8 ' THEN I = 1008;                          PL139000
*         IF FLD_GR10 = 'LINE+' THEN I = 1009;                          PL139100
*         IF I ^= 0                                                     PL139200
*         THEN DO;                                                      PL139300
*                 ARFLD_GR12(NO_GR1J,J) = I;                            PL139400
*                 REXIT = $D3;                                          PL139500
*                 GO TO R1;                                             PL139600
*              END;                                                     PL139700
*         ARIFX = FLD_GR10;                                             PL139800
*         DO I = 1 TO IPMF_FLDS;                                        PL139900
*            IF FLDDES(I) = ARIFX THEN GO TO $D35;                      PL140000
*         END;                                                          PL140100
*$D35:    ARFLD_GR12(NO_GR1J,J) = I;                                    PL140200
*         REXIT = $D3;                                                  PL140300
*         GO TO R1;                                                     PL140400
*                                                                       PL140500
*    /* *********************************************************** */  PL140600
*    /*                                                             */  PL140700
*    /* THE NEXT 20-ODD LINES OF CODING DO THE MAJOR PROCESSING OF  */  PL140800
*    /* THE FILE, BY CALLING SEPARATLY THE INTERNAL PROCEDURES      */  PL140900
*    /* SRTIN, WHICH READS THE INPUT FILE AND PERFORMS THE          */  PL141000
*    /* SELECTION TESTS ON EACH RECORD, AND SRTOUT, WHICH PROCESSES */  PL141100
*    /* THE RECORDS, TAKING OFF THE VALUES, MATCHING KEYS, AND      */  PL141200
*    /* PRINTING THE REPORT.                                        */  PL141300
*    /*                                                             */  PL141400
*    /*     THERE ARE TWO POSSIBLE INVOCATIONS:                     */  PL141500
*    /*                                                             */  PL141600
*    /*   1) IF A SORT IS REQUIRED (SORTSW IS ON BY A GR06 CARD),   */  PL141700
*    /*      THE PROCEDURE IHESRTD IS INVOKED, WHICH CALLS RECORDS  */  PL141800
*    /*      FROM SRTIN UNTIL ENDFILE, SORTS THEM, AND THEN PASSES  */  PL141900
*    /*      THEM ONE AT A TIME TO SRTOUT.                          */  PL142000
*    /*                                                             */  PL142100
*    /*   2) IF SORTSW HAS NOT BEEN SET, WE GO DOWN TO LABEL E15,   */  PL142200
*    /*      AND LOOP THROUGH 3 INSTRUCTIONS, GETTING RECORDS ONE   */  PL142300
*    /*      AT A TIME FROM SRTIN AND PASSING THEM TO SRTOUT.       */  PL142400
*    /*                                                             */  PL142500
*    /*     IN EITHER CASE, WHEN ALL PROCESSING HAS BEEN FINISHED,  */  PL142600
*    /* WE GO TO THE LABEL Z1 FOR OUR END-OF-JOB CLEARUP.           */  PL142700
*    /*                                                             */  PL142800
*    /* *********************************************************** */  PL142900
*                                                                       PL143000
*E1:      CLOSE FILE(WORK);                                             PL143100
*         NOKEYXX = NOKEYS;                                             PL143200
*         DO I = NOKEYS TO 1 BY -1;                                     PL143300
*            IF ARTOT_GR03(I) = 'T' THEN GO TO TTTTT;                   PL143400
*            NOKEYXX = NOKEYXX - 1;                                     PL143500
*         END;                                                          PL143600
*TTTTT:                                                                 PL143700
*                                               /* THE FOLLOWING CODE */PL143800
*                                               /* PRINTS A PARROT AT */PL143900
*                                               /* THE HEAD OF THE    */PL144000
*                                               /* REPORT             */PL144100
*         OPEN FILE(SYSLIN) INPUT;                                      PL144200
*         ON ENDFILE(SYSLIN) GO TO ENDLOGO;                             PL144300
*LOGO:    READ FILE(SYSLIN) INTO(BLANKLINE);                            PL144400
*         WRITE FILE(PRINT) FROM(BLANKLINE);                            PL144500
*         GO TO LOGO;                                                   PL144600
*ENDLOGO: CLOSE FILE(SYSLIN);                                           PL144700
*         BLANKLINE = '0                   '                            PL144800
*                     || HEAD_HEADA                                     PL144900
*                     || FILE_HEADA                                     PL145000
*                     || DATE_HEADA;                                    PL145100
*         WRITE FILE(PRINT) FROM(BLANKLINE);                            PL145200
*                                                                       PL145300
*         OPEN FILE(SYSUT1) INPUT;                                      PL145400
*                                       /* RESET BLANK LINE HAVING  */  PL145500
*                                       /* FINISHED PRINTING CARDS. */  PL145600
*         BLANKLINE = ' ';                                              PL145700
*                                       /* SORT NOT REQUIRED.       */  PL145800
*                                       /* LOOP ROUND PROCEDURES.   */  PL145900
*E15:     CALL SRTIN;                                                   PL146000
*         IF EOFSW THEN GO TO Z1;                                       PL146100
*         CALL SRTOUT(INREC);                                           PL146200
*         GO TO E15;                                                    PL146300
*                                                                       PL146400
*                                                                       PL146500
*    /* *********************************************************** */  PL146600
*    /*                                                             */  PL146700
*    /* THIS SMALL SUBROUTINE MERELY READS IN THE CONTROL CARDS,    */  PL146800
*    /* PRINTS THEM, AND RETURNS TO THE INVOCATION POINT.           */  PL146900
*    /*                                                             */  PL147000
*    /* *********************************************************** */  PL147100
*                                                                       PL147200
*R1:      READ FILE(WORK) INTO(INCARD);                                 PL147300
*         BLANKLINE = ' ' || INCARD;                                    PL147400
*         WRITE FILE(PRINT) FROM(BLANKLINE);                            PL147500
*        IF DES_GR01 = 'GR99' THEN GO TO R1;                            PL147600
*         GO TO REXIT;                                                  PL147700
*                                                                       PL147800
*                                                                       PL147900
*    /* *********************************************************** */  PL148000
*    /*                                                             */  PL148100
*    /* END-OF-JOB CLEARUP ROUTINE. AT THIS POINT WE HAVE JUST      */  PL148200
*    /* PRINTED THE LAST DETAIL RECORD, BUT HAVE YET TO PRINT THE   */  PL148300
*    /* TOTALS FOR THE LAST KEY.                                    */  PL148400
*    /*     WE DO THIS BY CALLING SUBROUTINES OF SRTOUT, USING ISW  */  PL148500
*    /* TO SIGNIFY THAT WE DO NOT WANT THE COMPLETE PROCESSING OF   */  PL148600
*    /* THAT PROCEDURE, MERELY PART OF IT.                          */  PL148700
*    /*                                                             */  PL148800
*    /*     HAVING PRINTED THE TOTALS FOR THE FOUR KEYS, WE THEN    */  PL148900
*    /* PRINT A GRAND TOTAL FOR THE FILE, AGAIN USING A SUBROUTINE  */  PL149000
*    /* OF SRTOUT. THEN WE CLOSE THE FILES AND END THE JOB.         */  PL149100
*    /*                                                             */  PL149200
*    /* *********************************************************** */  PL149300
*                                                                       PL149400
*Z1:      ISW = 2;                                                      PL149500
*         CALL SRTOUT (INREC);                                          PL149600
*         ISW = 3;                                                      PL149700
*         CALL SRTOUT (INREC);                                          PL149800
*         ISW = 4;                                                      PL149900
*         CALL SRTOUT (INREC);                                          PL150000
*         ISW = 5;                                                      PL150100
*         CALL SRTOUT (INREC);                                          PL150200
*         ISW = 6;                                                      PL150300
*         CALL SRTOUT(INREC);                                           PL150400
*         ISW = 7;                                                      PL150500
*         CALL SRTOUT(INREC);                                           PL150600
*         ISW = 8;                                                      PL150700
*         CALL SRTOUT(INREC);                                           PL150800
*         ISW = 9;                                                      PL150900
*         CALL SRTOUT(INREC);                                           PL151000
*                                       /* SET UP GRAND TOTAL LINE. */  PL151100
*Z5:      KEY_LINE  = 'GRAND TOTAL FOR FILE:';                          PL151200
*         NAME_LINE = '*********    COUNT=';                            PL151300
*                                       /* TOTAL RECORD COUNT.      */  PL151400
*         CNT_LINE = ARCNT(9);                                          PL151500
*         BYTE_LINE = '-';                                              PL151600
*                                       /* PRINT LINE.              */  PL151700
*         ISW = 10;                                                     PL151800
*         IF PRTOTAL THEN                                               PL151900
*         CALL SRTOUT (INREC);                                          PL152000
*                                                                       PL152100
*                                                                       PL152200
*                                    /* TELL OF ERRORS FOUND        */  PL152300
*     IF ERRORSW                                                        PL152400
*     THEN DO;                                                          PL152500
*         BYTE_LINE = '1';                                              PL152600
*         KEY_LINE = ' ';                                               PL152700
*         NAME_LINE = ' ';                                              PL152800
*         VALUEX_LINE = ' ';                                            PL152900
*         WRITE FILE(PRINT) FROM(LINEA);                                PL153000
*         KEY_LINE = 'WARNING : ERRORS FOUND';                          PL153100
*         WRITE FILE(PRINT) FROM(LINEA);                                PL153200
*            IF LITESW                                                  PL153300
*            THEN DO;                                                   PL153400
*                BYTE_LINE = ' ';                                       PL153500
*                KEY_LINE = 'TOO MANY NUMERIC LITERALS';                PL153600
*                VALUEX_LINE = '( EXCESS FIELDS SET TO 0 )';            PL153700
*                WRITE FILE(PRINT) FROM(LINEA);                         PL153800
*            END;                                                       PL153900
*         BYTE_LINE = ' ';                                              PL154000
*            IF LIT20SW                                                 PL154100
*            THEN DO;                                                   PL154200
*                BYTE_LINE = ' ';                                       PL154300
*                KEY_LINE = 'MORE THAN 20 OPERANDS IN 1 GR07';          PL154400
*                VALUEX_LINE = '( EXCESS OPERANDS IGNORED )';           PL154500
*                WRITE FILE(PRINT) FROM(LINEA);                         PL154600
*            END;                                                       PL154700
*            IF ERR0DIV                                                 PL154800
*            THEN DO;                                                   PL154900
*         KEY_LINE = '  NO. OF ATTEMPTS TO DIVIDE BY 0 :';              PL155000
*         NAME_LINE = '             COUNT=';                            PL155100
*         VALUEX_LINE = '( RESULT FIELDS SET TO 0 )';                   PL155200
*         CNT_LINE = ZERO_DIVIDE_COUNT;                                 PL155300
*         WRITE FILE(PRINT) FROM(LINEA);                                PL155400
*            END;                                                       PL155500
*     END;                                                              PL155600
*                                                                       PL155700
*                                       /* CLOSE FILES - END JOB.   */  PL155800
*Z6:      CLOSE FILE(SYSUT1);                                           PL155900
*         CLOSE FILE(PRINT);                                            PL156000
*                                                                       PL156100
*                                                                       PL156200
*    /* *********************************************************** */  PL156300
*    /*                                                             */  PL156400
*    /* THE NEXT PROCEDURE, SRTIN, READS THROUGH THE INPUT DATA     */  PL156500
*    /* FILE, AND PERFORMS THE SELECTION TESTS SPECIFIED ON THE     */  PL156600
*    /* GR02 CARDS.                                                 */  PL156700
*    /*    THESE LATTER ARE ON AN 'OR' BASIS, WITH THE TESTS ON     */  PL156800
*    /* EACH CARD BEING 'AND'. THAT IS, IF ANY ONE OF THE SELECTION */  PL156900
*    /* CARDS OK'S A RECORD, THE RECORD IS ACCEPTED; BUT FOR A      */  PL157000
*    /* RECORD TO BE OK IT MUST PASS EVERY TEST ON THE CARD.        */  PL157100
*    /*    SO, THROUGHOUT THE CODING, THE POINTER 'I' IS SCANNING   */  PL157200
*    /* DOWN THE GR02 CARDS, AND WITHIN EACH CARD, THE POINTER 'J'  */  PL157300
*    /* SCANS ACROSS THE FOUR TESTS.                                */  PL157400
*    /*    ON ENDFILE OF THE INPUT DATA, WE EITHER CALL IHESARC,    */  PL157500
*    /* TO TELL THE SORT THERE ARE NO MORE RECORDS, OR SET EOFSW ON */  PL157600
*    /* DEPENDING ON WHETHER OR NOT THE RECORDS ARE TO BE SORTED.   */  PL157700
*    /*                                                             */  PL157800
*    /* *********************************************************** */  PL157900
*                                                                       PL158000
*SRTIN:   PROC RETURNS(CHAR(2000) VARYING);                             PL158100
*                                                                       PL158200
*         ON ENDFILE(SYSUT1)                                            PL158300
*         BEGIN;                                                        PL158400
*         EOFSW = '1'B;                                                 PL158500
*               GO TO ENDIN;                                            PL158600
*         END;                                                          PL158700
*                                                                       PL158800
*                                       /* READ NEXT DATA RECORD.   */  PL158900
*E2:      READ FILE(SYSUT1) INTO(INREC);                                PL159000
*                                       /* IF NO TESTS, PASS RECORD */  PL159100
*         IF ICARD = 0 THEN GO TO RETREC;                               PL159200
*                                       /* SCAN THROUGH CARDS       */  PL159300
*         DO I = 1 TO ICARD;                                            PL159400
*                                       /* SCAN TESTS ON CARD.      */  PL159500
*            DO J = 1 TO 4;                                             PL159600
*                                       /* ALL TESTS OK-PASS RECORD */  PL159700
*               IF ARTYP(I,J) = '  ' THEN GO TO RETREC;                 PL159800
*                                       /* LENGTH & POSN OF TEST.   */  PL159900
*               L = ARLEN(I,J);                                         PL160000
*               M = ARPOS(I,J);                                         PL160100
*                                                                       PL160200
*               IF ARPAK(I,J) = 'P'                                     PL160300
*                                       /* FIELD ON FILE IS PACKED. */  PL160400
*                                       /* UNPACK VIA PREC TO NREC. */  PL160500
*               THEN DO;                                                PL160600
*                       PREC = 0;                                       PL160700
*                       L1 = 7 - L;                                     PL160800
*                       SUBSTR(ZREC,L1,L) = SUBSTR(INREC,M,L);          PL160900
*                       NREC = PREC;                                    PL161000
*                       GO TO E3;                                       PL161100
*                    END;                                               PL161200
*                                                                       PL161300
*               IF ARN(I,J)                                             PL161400
*                                       /* FIELD HEX AND ALPHA,     */  PL161500
*                                       /* PUT STRAIGHT INTO XREC.  */  PL161600
*               THEN DO;                                                PL161700
*                       XREC = SUBSTR(INREC,M,L);                       PL161800
*                    END;                                               PL161900
*                                       /* FIELD HEX AND NUMERIC.   */  PL162000
*                                       /* RIGHT-ALIGN IN NREC.     */  PL162100
*               ELSE DO;                                                PL162200
*                     XREC = '00000000000';                             PL162300
*                       L1 = 12 - L;                                    PL162400
*                       SUBSTR(XREC,L1,L) = SUBSTR(INREC,M,L);          PL162500
*                    END;                                               PL162600
*                                                                       PL162700
*E3:            ABIT = ARN(I,J);                                        PL162800
*                                       /* IF ALPHA, SET TEST VALUE */  PL162900
*                                       /* IN XLIT. IF NUMERIC, SET */  PL163000
*                                       /* IT IN PLIT.              */  PL163100
*               IF ABIT                                                 PL163200
*               THEN XLIT = ARLIT(I,J);                                 PL163300
*               ELSE DO;                                                PL163400
*                       PREC = NREC;                                    PL163500
*                       PLIT = ARNUM(I,J);                              PL163600
*                    END;                                               PL163700
*                                                                       PL163800
*    /* *********************************************************** */  PL163900
*    /*                                                             */  PL164000
*    /* AT THIS POINT, THE FILE VALUE IS IN XREC/PREC, AND THE GR02 */  PL164100
*    /* TEST VALUE IN XLIT/PLIT, DEPENDING ON ALPHA/NUM. WE NOW     */  PL164200
*    /* PUT THE TEST VALUE (EQ, NE, GT, LT) IN 'LABL' AND MAKE THE  */  PL164300
*    /* TEST. FOR EXAMPLE, WITH THE 'EQ' TEST (THE OTHERS ARE       */  PL164400
*    /* ANALOGOUS), LEQ TESTS THE NUMERIC, LEQ1 THE ALPHA VALUES.   */  PL164500
*    /* IF THE TEST IS PASSED, WE GO TO JEX AND RETURN FOR THE NEXT */  PL164600
*    /* TEST ON THE CARD. IF FAILED, IEX TAKES US TO THE NEXT CARD. */  PL164700
*    /*                                                             */  PL164800
*    /* *********************************************************** */  PL164900
*                                                                       PL165000
*               LABL = ARTYP(I,J);                                      PL165100
*                                                                       PL165200
*               IF LABL = 'EQ' THEN GO TO LEQ;                          PL165300
*               IF LABL = 'NE' THEN GO TO LNE;                          PL165400
*               IF LABL = 'GT' THEN GO TO LGT;                          PL165500
*               IF LABL = 'LT' THEN GO TO LLT;                          PL165600
*                                                                       PL165700
*LEQ:           IF ABIT THEN GO TO LEQ1;                                PL165800
*               IF PLIT = PREC THEN GO TO JEX;                          PL165900
*              GO TO IEX;                                               PL166000
*LEQ1:          IF XLIT = XREC THEN GO TO JEX;                          PL166100
*              GO TO IEX;                                               PL166200
*LNE:           IF ABIT THEN GO TO LNE1;                                PL166300
*               IF PLIT = PREC THEN GO TO IEX;                          PL166400
*              GO TO JEX;                                               PL166500
*LNE1:          IF XLIT = XREC THEN GO TO IEX;                          PL166600
*              GO TO JEX;                                               PL166700
*LGT:           IF ABIT THEN GO TO LGT1;                                PL166800
*               IF PLIT < PREC THEN GO TO JEX;                          PL166900
*              GO TO IEX;                                               PL167000
*LGT1:          IF XLIT < XREC THEN GO TO JEX;                          PL167100
*              GO TO IEX;                                               PL167200
*LLT:           IF ABIT THEN GO TO LLT1;                                PL167300
*               IF PLIT > PREC THEN GO TO JEX;                          PL167400
*              GO TO IEX;                                               PL167500
*LLT1:          IF XLIT > XREC THEN GO TO JEX;                          PL167600
*              GO TO IEX;                                               PL167700
*                                                                       PL167800
*JEX:        END;                                                       PL167900
*                                       /* IF WE DROP PAST HERE,    */  PL168000
*                                       /* ALL 4 TESTS ON CARD OK,  */  PL168100
*                                       /* SO PASS RECORD OUT.      */  PL168200
*            GO TO RETREC;                                              PL168300
*                                                                       PL168400
*IEX:     END;                                                          PL168500
*                                       /* IF WE DROP PAST HERE, NO */  PL168600
*                                       /* CARD OK'D THE RECORD, SO */  PL168700
*                                       /* DROP IT & READ THE NEXT. */  PL168800
*         GO TO E2;                                                     PL168900
*                                                                       PL169000
*RETREC:                                                                PL169100
*                                       /* PASS THE RECORD ACROSS.  */  PL169200
*         RETURN (INREC);                                               PL169300
*                                       /* END OF PROCEDURE SRTIN.  */  PL169400
*ENDIN:   END SRTIN;                                                    PL169500
*                                                                       PL169600
*                                                                       PL169700
*    /* *********************************************************** */  PL169800
*    /*                                                             */  PL169900
*    /* THE NEXT PROCEDURE, SRTOUT, PROCESSES EACH RECORD PASSED.   */  PL170000
*    /*                                                             */  PL170100
*    /* THE MAINSTREAM CODING IS IN LABELS F2 THRU I2, WHICH .....  */  PL170200
*    /*   1) UNPACKS THE KEYS FROM THE RECORD.                      */  PL170300
*    /*   2) CHECKS IF THE SAME KEYS AS PREVIOUS RECORD (WITH       */  PL170400
*    /*      NORMAL FIRST-TIME SAFEGUARDS).                         */  PL170500
*    /*   3) PRINTS THE PREVIOUS KEYS TOTALS IF THEY DIFFER.        */  PL170600
*    /*   4) UNPACKS THE VALUE FIELDS FROM THE RECORD.              */  PL170700
*    /*   5) PERFORMS THE REQUIRED ARITHMETIC ON THESE FIELDS.      */  PL170800
*    /*   6) PRINTS THE RECORD DETAIL IF REQUIRED.                  */  PL170900
*    /*                                                             */  PL171000
*    /* ADDITIONALLY, THERE ARE SEVERAL INTERNAL SUBROUTINES CALLED */  PL171100
*    /*                                                             */  PL171200
*    /*   T1    UNPACKS THE KEYS FROM THE FILE.                     */  PL171300
*    /*   TOTS  SETS UP THE KEY TOTAL BREAKS FOR PRINTING.          */  PL171400
*    /*   P1    PRINTS THE PAGE HEADING.                            */  PL171500
*    /*   S1    PRINTS A DETAIL/TOTAL LINE.                         */  PL171600
*    /*   AUG1  ADDS THE KEY TOTALS INTO THE NEXT LEVEL UP.         */  PL171700
*    /*                                                             */  PL171800
*    /* *********************************************************** */  PL171900
*                                                                       PL172000
*SRTOUT:  PROC (INREC);                                                 PL172100
*                                                                       PL172200
*         DCL INREC CHAR(2000) VARYING;                                 PL172300
*                                                                       PL172400
*                                       /* COUNT RCDS OUT FROM SORT */  PL172500
*                                                                       PL172600
*    /* *********************************************************** */  PL172700
*    /*                                                             */  PL172800
*    /* IT HAS BEEN MENTIONED THAT THE END-OF-JOB ROUTINE USES      */  PL172900
*    /* SUBROUTINES OF THIS PROCEDURE. SO ON ENTRY WE FIRST TEST    */  PL173000
*    /* ISW. IF ZERO, THE WHOLE SRTOUT PROCEDURE IS REQUIRED & WE   */  PL173100
*    /* PASS TO F1. IF NON-ZERO, WE SET THE ROUTINE EXIT LABELS     */  PL173200
*    /* REXIT AND LEXIT TO THE END OF SRTOUT, AND PASS TO THE       */  PL173300
*    /* REQUIRED ROUTINE.                                           */  PL173400
*    /*                                                             */  PL173500
*    /* *********************************************************** */  PL173600
*                                                                       PL173700
*         IF ISW = 0 THEN GO TO F1;                                     PL173800
*                                       /* SET LABELS TO END SRTOUT */  PL173900
*         REXIT = NEXTREC;                                              PL174000
*         LEXIT = NEXTREC;                                              PL174100
*                                       /* GO TO RELEVANT ROUTINE.  */  PL174200
*         I = ISW;                                                      PL174300
*         IF I = 10 THEN DO;                                            PL174400
*         PEXIT = F0;                                                   PL174500
*             GO TO P1;                                                 PL174600
*F0:          LEXIT = NEXTREC;                                          PL174700
*             GO TO S1;                                                 PL174800
*         END;                                                          PL174900
*         GO TO TOTS;                                                   PL175000
*                                                                       PL175100
*    /* *********************************************************** */  PL175200
*    /*                                                             */  PL175300
*    /* THE NEXT SECTION, WITH LABELS 'F', UNPACKS THE KEYS FROM    */  PL175400
*    /* THE RECORD, CALLING THE SUBROUTINE T1 WHICH PUTS THE I'TH   */  PL175500
*    /* KEY INTO VARIABLE KEY4. IT ONLY UNPACKS AS MANY KEYS AS ARE */  PL175600
*    /* REQUIRED (NOKEYS), PASSING TO LABEL G1 WHEN THIS IS DONE.   */  PL175700
*    /*                                                             */  PL175800
*    /* *********************************************************** */  PL175900
*                                                                       PL176000
*F1:      I = 1;                                                        PL176100
*                                       /* UNPACK FIRST KEY (I = 1) */  PL176200
*         REXIT = F2;                                                   PL176300
*         GO TO T1;                                                     PL176400
*                                       /* SET IN 'KEY1'.           */  PL176500
*F2:      KEY1 = KEY8;                                                  PL176600
*                                       /* IF ONLY ONE KEY, GO OUT. */  PL176700
*         IF NOKEYS = 1 THEN GO TO G1;                                  PL176800
*                                       /* REPEAT FOR SECOND KEY.   */  PL176900
*         I = 2;                                                        PL177000
*         REXIT = F3;                                                   PL177100
*         GO TO T1;                                                     PL177200
*F3:      KEY2 = KEY8;                                                  PL177300
*         IF NOKEYS = 2 THEN GO TO G1;                                  PL177400
*                                       /* REPEAT FOR THIRD KEY.    */  PL177500
*         I = 3;                                                        PL177600
*         REXIT = F4;                                                   PL177700
*         GO TO T1;                                                     PL177800
*F4:      KEY3 = KEY8;                                                  PL177900
*         IF NOKEYS = 3 THEN GO TO G1;                                  PL178000
*                                       /* REPEAT FOR LAST KEY.     */  PL178100
*         I = 4;                                                        PL178200
*         REXIT = F5;                                                   PL178300
*         GO TO T1;                                                     PL178400
*F5:      KEY4 = KEY8;                                                  PL178500
*         IF NOKEYS = 4 THEN GO TO G1;                                  PL178600
*         I = 5;                                                        PL178700
*         REXIT = F6;                                                   PL178800
*         GO TO T1;                                                     PL178900
*F6:      KEY5 = KEY8;                                                  PL179000
*         IF NOKEYS = 5 THEN GO TO G1;                                  PL179100
*         I = 6;                                                        PL179200
*         REXIT = F7;                                                   PL179300
*         GO TO T1;                                                     PL179400
*F7:      KEY6 = KEY8;                                                  PL179500
*         IF NOKEYS = 6 THEN GO TO G1;                                  PL179600
*         I = 7;                                                        PL179700
*         REXIT = F8;                                                   PL179800
*         GO TO T1;                                                     PL179900
*F8:      KEY7 = KEY8;                                                  PL180000
*         IF NOKEYS = 7 THEN GO TO G1;                                  PL180100
*         I = 8;                                                        PL180200
*         REXIT = G1;                                                   PL180300
*         GO TO T1;                                                     PL180400
*    /* *********************************************************** */  PL180500
*    /*                                                             */  PL180600
*    /* THE LABELS 'G' TEST THE CURRENT KEY VALUES AGAINST THE      */  PL180700
*    /* PREVIOUS ONES. IF THEY DIFFER, 'TOTS' IS CALLED TO PRINT    */  PL180800
*    /* THE PREVIOUS KEYS TOTALS, IF REQUIRED.                      */  PL180900
*    /*                                                             */  PL181000
*    /*    AS THERE ARE NO PREVIOUS KEYS FOR THE FIRST RECORD, THE  */  PL181100
*    /* LASTKEYS ARE SET EQUAL, TO BYPASS THE TOTALS.               */  PL181200
*    /*                                                             */  PL181300
*    /*    IN CALLING 'TOTS', THE PARAMETER I PASSED POINTS TO THE  */  PL181400
*    /* ACCUMULATOR IN ARRAY2 WHICH HOLDS THE RELEVANT VALUES. SO   */  PL181500
*    /* I = 2 FOR KEY4, 3 FOR KEY3, 4 FOR KEY2, 5 FOR KEY1 (MAJOR). */  PL181600
*    /*                                                             */  PL181700
*    /* *********************************************************** */  PL181800
*                                                                       PL181900
*G1:      IF FIRST_TIME                                                 PL182000
*                                       /* RESET SWITCH & MOVE KEYS */  PL182100
*         THEN DO;                                                      PL182200
*                 FIRST_TIME = '0'B;                                    PL182300
*                 LASTKEY1 = KEY1;                                      PL182400
*                 LASTKEY2 = KEY2;                                      PL182500
*                 LASTKEY3 = KEY3;                                      PL182600
*                 LASTKEY4 = KEY4;                                      PL182700
*                 LASTKEY5 = KEY5;                                      PL182800
*                 LASTKEY6 = KEY6;                                      PL182900
*                 LASTKEY7 = KEY7;                                      PL183000
*                 LASTKEY8 = KEY8;                                      PL183100
*              END;                                                     PL183200
*                                                                       PL183300
*         IF KEY1 ^= LASTKEY1                                           PL183400
*                                       /* MAJOR KEY CHANGE.        */  PL183500
*         THEN DO;                                                      PL183600
*                 REXIT = G2;                                           PL183700
*                                       /* ALL FOUR KEY TOTALS.     */  PL183800
*                 DO I = 2 TO 9;                                        PL183900
*                    GO TO TOTS;                                        PL184000
*G2:              END;                                                  PL184100
*                 GO TO H1;                                             PL184200
*              END;                                                     PL184300
*                                                                       PL184400
*         IF KEY2 ^= LASTKEY2                                           PL184500
*                                       /* KEY2 CHANGE              */  PL184600
*         THEN DO;                                                      PL184700
*                 REXIT = G3;                                           PL184800
*                                       /* TOTALS FOR KEYS 4, 3 & 2 */  PL184900
*                 DO I = 2 TO 8;                                        PL185000
*                    GO TO TOTS;                                        PL185100
*G3:              END;                                                  PL185200
*                 GO TO H1;                                             PL185300
*              END;                                                     PL185400
*                                                                       PL185500
*         IF KEY3 ^= LASTKEY3                                           PL185600
*                                       /* KEY3 CHANGE              */  PL185700
*         THEN DO;                                                      PL185800
*                 REXIT = G4;                                           PL185900
*                                       /* TOTALS FOR KEYS 4 & 3.   */  PL186000
*                 DO I = 2 TO 7;                                        PL186100
*                    GO TO TOTS;                                        PL186200
*G4:              END;                                                  PL186300
*                 GO TO H1;                                             PL186400
*              END;                                                     PL186500
*                                                                       PL186600
*         IF KEY4 ^= LASTKEY4                                           PL186700
*                                       /* KEY4 CHANGE, TOTAL KEY4. */  PL186800
*         THEN DO;                                                      PL186900
*                 REXIT = G5;                                           PL187000
*                 DO I = 2 TO 6;                                        PL187100
*                 GO TO TOTS;                                           PL187200
*G5:              END;                                                  PL187300
*                 GO TO H1;                                             PL187400
*              END;                                                     PL187500
*         IF KEY5 ^= LASTKEY5                                           PL187600
*         THEN DO;                                                      PL187700
*                 REXIT = G6;                                           PL187800
*                 DO I = 2 TO 5;                                        PL187900
*                    GO TO TOTS;                                        PL188000
*G6:              END;                                                  PL188100
*                 GO TO H1;                                             PL188200
*              END;                                                     PL188300
*         IF KEY6 ^= LASTKEY6                                           PL188400
*         THEN DO;                                                      PL188500
*                 REXIT = G7;                                           PL188600
*                 DO I = 2 TO 4;                                        PL188700
*                    GO TO TOTS;                                        PL188800
*G7:              END;                                                  PL188900
*                 GO TO H1;                                             PL189000
*              END;                                                     PL189100
*         IF KEY7 ^= LASTKEY7                                           PL189200
*         THEN DO;                                                      PL189300
*                 REXIT = G8;                                           PL189400
*                 DO I = 2 TO 3;                                        PL189500
*                    GO TO TOTS;                                        PL189600
*G8:              END;                                                  PL189700
*                 GO TO H1;                                             PL189800
*              END;                                                     PL189900
*         IF KEY8 ^= LASTKEY8                                           PL190000
*         THEN DO;                                                      PL190100
*                 REXIT = H1;                                           PL190200
*                 I = 2;                                                PL190300
*                    GO TO TOTS;                                        PL190400
*              END;                                                     PL190500
*                                                                       PL190600
*         GO TO H2;                                                     PL190700
*                                                                       PL190800
*H1:      LASTKEY1 = KEY1;                                              PL190900
*         LASTKEY2 = KEY2;                                              PL191000
*         LASTKEY3 = KEY3;                                              PL191100
*         LASTKEY4 = KEY4;                                              PL191200
*         LASTKEY5 = KEY5;                                              PL191300
*         LASTKEY6 = KEY6;                                              PL191400
*         LASTKEY7 = KEY7;                                              PL191500
*         LASTKEY8 = KEY8;                                              PL191600
*                                                                       PL191700
*    /* *********************************************************** */  PL191800
*    /*                                                             */  PL191900
*    /* THE NEXT BLOCK OF CODING UNPACKS THE VALUE FIELDS (AS       */  PL192000
*    /* SPECIFIED IN THE GR04 CARDS) FROM THE RECORD, AND PLACES    */  PL192100
*    /* THEM IN THEIR CORRECT PLACE IN THE ARRAY 'VALUES'.          */  PL192200
*    /*                                                             */  PL192300
*    /* *********************************************************** */  PL192400
*                                                                       PL192500
*H2:      DO I = 1 TO NOFLD;                                            PL192600
*                                       /* LENGTH & POSITION.       */  PL192700
*         DO IP1 = 1 TO 3;                                              PL192800
*            IF ARSTYP_GR04(I,IP1) = ' ' THEN GO TO H207;               PL192900
*            L = ARSLEN_GR04(I,IP1);                                    PL193000
*            M = ARSPOS_GR04(I,IP1);                                    PL193100
*            IF ARSPAK_GR04(I,IP1) = 'P'                                PL193200
*            THEN DO;                                                   PL193300
*                    PREC = 0;                                          PL193400
*                    L1 = 7 - L;                                        PL193500
*                    SUBSTR(ZREC,L1,L) = SUBSTR(INREC,M,L);             PL193600
*                    NREC = PREC;                                       PL193700
*                    GO TO H203;                                        PL193800
*                 END;                                                  PL193900
*            IF ARSN_GR04(I,IP1)                                        PL194000
*            THEN XREC = SUBSTR(INREC,M,L);                             PL194100
*            ELSE DO;                                                   PL194200
*                    XREC = '00000000000';                              PL194300
*                    L1 = 12 - L;                                       PL194400
*                    SUBSTR(XREC,L1,L) = SUBSTR(INREC,M,L);             PL194500
*                 END;                                                  PL194600
*H203:       ABIT = ARSN_GR04(I,IP1);                                   PL194700
*            IF ABIT                                                    PL194800
*            THEN XLIT = ARSLIT_GR04(I,IP1);                            PL194900
*            ELSE DO;                                                   PL195000
*                    PREC = NREC;                                       PL195100
*                    PLIT = ARSNUM_GR04(I,IP1);                         PL195200
*                 END;                                                  PL195300
*            LABL = ARSTYP_GR04(I,IP1);                                 PL195400
*            IF LABL = 'EQ' THEN GO TO H2EQ;                            PL195500
*            IF LABL = 'NE' THEN GO TO H2NE;                            PL195600
*            IF LABL = 'GT' THEN GO TO H2GT;                            PL195700
*            IF LABL = 'LT' THEN GO TO H2LT;                            PL195800
*H2EQ:       IF ABIT THEN GO TO H2EQ1;                                  PL195900
*            IF PLIT = PREC THEN GO TO H206;                            PL196000
*            GO TO H208;                                                PL196100
*H2EQ1:      IF XLIT = XREC THEN GO TO H206;                            PL196200
*             GO TO H208;                                               PL196300
*H2NE:       IF ABIT THEN GO TO H2NE1;                                  PL196400
*            IF PLIT = PREC THEN GO TO H208;                            PL196500
*            GO TO H206;                                                PL196600
*H2NE1:      IF XLIT = XREC THEN GO TO H208;                            PL196700
*             GO TO H206;                                               PL196800
*H2GT:       IF ABIT THEN GO TO H2GT1;                                  PL196900
*            IF PLIT < PREC THEN GO TO H206;                            PL197000
*            GO TO H208;                                                PL197100
*H2GT1:      IF XLIT < XREC THEN GO TO H206;                            PL197200
*             GO TO H208;                                               PL197300
*H2LT:       IF ABIT THEN GO TO H2LT1;                                  PL197400
*            IF PLIT > PREC THEN GO TO H206;                            PL197500
*            GO TO H208;                                                PL197600
*H2LT1:      IF XLIT > XREC THEN GO TO H206;                            PL197700
*             GO TO H208;                                               PL197800
*H206:    END;                                                          PL197900
*H207:                                                                  PL198000
*            L = ARLEN_GR04(I);                                         PL198100
*            M = ARPOS_GR04(I);                                         PL198200
*                                                                       PL198300
*            IF ARPAK_GR04(I) = 'P'                                     PL198400
*                                       /* PACKED NUMERIC -         */  PL198500
*                                       /* TO MIDVAL VIA PREC.      */  PL198600
*            THEN DO;                                                   PL198700
*                    PREC = 0;                                          PL198800
*                    L1 = 7 - L;                                        PL198900
*                    SUBSTR(ZREC,L1,L) = SUBSTR(INREC,M,L);             PL199000
*                    MIDVAL = PREC;                                     PL199100
*                 END;                                                  PL199200
*                                       /* UNPACKED NUMERIC -       */  PL199300
*                                       /* TO MIDVAL VIA NREC.      */  PL199400
*            ELSE DO;                                                   PL199500
*                    NREC = 0;                                          PL199600
*                    L1 = 12 - L;                                       PL199700
*                    SUBSTR(XREC,L1,L) = SUBSTR(INREC,M,L);             PL199800
*                    MIDVAL = NREC;                                     PL199900
*                 END;                                                  PL200000
*                                                                       PL200100
*                                       /* SUBSCRIPT OF FIELD NAME  */  PL200200
*          J = ARFLD_GR04(I);                                           PL200300
*                                       /* INSERT FIELD IN ARRAY.   */  PL200400
*            VALUE1 = MIDVAL;                                           PL200500
*            IF ARDEC_GR04(I) = 1 THEN VALUE1 = VALUE1 / 10;            PL200600
*            IF ARDEC_GR04(I) = 2 THEN VALUE1 = VALUE1 / 100;           PL200700
*            IF ARDEC_GR04(I) = 3 THEN VALUE1 = VALUE1 / 1000;          PL200800
*            IF ARDEC_GR04(I) = 4 THEN VALUE1 = VALUE1 / 10000;         PL200900
*            IF ARDEC_GR04(I) = 5 THEN VALUE1 = VALUE1 / 100000;        PL201000
*            IF ARDEC_GR04(I) = 6 THEN VALUE1 = VALUE1 / 1000000;       PL201100
*            VALUES(J,1) = VALUE1;                                      PL201200
*                                       /* REPEAT FOR NEXT FIELD.   */  PL201300
*H208:    END;                                                          PL201400
*                                                                       PL201500
*    /* *********************************************************** */  PL201600
*    /*                                                             */  PL201700
*    /* NOW THE ARITHMETIC REQUIRED IS PERFORMED ON THESE FIELDS.   */  PL201800
*    /*                                                             */  PL201900
*    /* *********************************************************** */  PL202000
*                                                                       PL202100
*         IF NOARI = 0 THEN GO TO H9;                                   PL202200
*                                                                       PL202300
*                                       /* FOR EACH ARITH STATEMENT */  PL202400
*         DO I = 1 TO NOARI;                                            PL202500
*                                       /* RECEIVING FIELD ZEROED.  */  PL202600
*$H2:        IF ARITT(I) THEN GO TO H23;                                PL202700
*         IF ARIFD(I) = -1                                              PL202800
*         THEN DO;                                                      PL202900
*                 J1A = ARINO(I,1);                                     PL203000
*                 J2A = ARINO(I,3);                                     PL203100
*                 IF ARINO(I,2) = 1 THEN GO TO $H21;                    PL203200
*                 IF ARINO(I,2) = 2 THEN GO TO $H22;                    PL203300
*                 IF ARINO(I,2) = 3 THEN GO TO $H23;                    PL203400
*                 IF ARINO(I,2) = 4 THEN GO TO $H24;                    PL203500
*                 GO TO $H4;                                            PL203600
*$H21:            IF VALUES(J1A,1)  = VALUES(J2A,1)                     PL203700
*                 THEN GO TO $H3;                                       PL203800
*                 GO TO $H4;                                            PL203900
*$H22:            IF VALUES(J1A,1) ^= VALUES(J2A,1)                     PL204000
*                 THEN GO TO $H3;                                       PL204100
*                 GO TO $H4;                                            PL204200
*$H23:            IF VALUES(J1A,1)  > VALUES(J2A,1)                     PL204300
*                 THEN GO TO $H3;                                       PL204400
*                 GO TO $H4;                                            PL204500
*$H24:            IF VALUES(J1A,1)  < VALUES(J2A,1)                     PL204600
*                 THEN GO TO $H3;                                       PL204700
*                 GO TO $H4;                                            PL204800
*$H3:             J1A = ARINO(I,5);                                     PL204900
*                 VALUES(J1A,1) = VALUES(J1A,1) + 1;                    PL205000
*IF ARINO(I,4) < 0 & BYTE_LINE ^= CBYT THEN LTOTSW = '1'B;              PL205100
*            IF ARINO(I,4) = -1                                         PL205200
*            THEN DO;                                                   PL205300
*                 SKIPPRINT = '1'B;                                     PL205400
*                 GO TO H9;                                             PL205500
*               END;                                                    PL205600
*         IF ARINO(I,4) = -2                                            PL205700
*         THEN GO TO NEXTREC;                                           PL205800
*                 I = ARINO(I,4);                                       PL205900
*                 GO TO $H2;                                            PL206000
*$H4:             GO TO H23;                                            PL206100
*              END;                                                     PL206200
*            VALUED = 0;                                                PL206300
*                                       /* FOR EACH OPERATOR ....   */  PL206400
*            DO J = 1 TO ARILN(I);                                      PL206500
*                                       /* SUBSCRIPT OF OPERAND     */  PL206600
*               K1 = ARINO(I,J);                                        PL206700
*               IF ARICN(I,J)                                           PL206800
*               THEN VALUEP = VALIT(K1);     /* CONSTANT OR VARIABLE? */PL206900
*         ELSE DO;                                                      PL207000
*                 IF K1 < 0                                             PL207100
*                 THEN VALUEP = SCALARS(-100-K1);                       PL207200
*                 ELSE VALUEP = VALUES(K1,1);                           PL207300
*              END;                                                     PL207400
*               IF ARISN(I,J) = '-'          /* IF NEGATIVE PREFIX.   */PL207500
*               THEN VALUEP = -VALUEP;                                  PL207600
*               IF ARIOP(I,J) = '+' THEN VALUED = VALUED + VALUEP;      PL207700
*               IF ARIOP(I,J) = '-' THEN VALUED = VALUED - VALUEP;      PL207800
*               IF ARIOP(I,J) = '*'                                     PL207900
*               THEN DO;                     /* PERFORM ARITHMETIC.   */PL208000
*                       VALUE1 = VALUED;                                PL208100
*                       VALUE2 = VALUEP;                                PL208200
*                       VALUE = VALUE1 * VALUE2;                        PL208300
*                       VALUED = ROUND(VALUE,4);                        PL208400
*                    END;                                               PL208500
*           IF ARIOP(I,J) = '/'                                         PL208600
*           THEN DO;                                                    PL208700
*               IF VALUEP ^= 0 THEN GO TO H21;                          PL208800
*               VALUED = 0;                                             PL208900
*               ZERO_DIVIDE_COUNT = ZERO_DIVIDE_COUNT + 1;              PL209000
*               ERRORSW = '1'B;                                         PL209100
*         ERR0DIV = '1'B;                                               PL209200
*               GOTO H22;                                               PL209300
*H21:           VALUE1 = VALUED;                                        PL209400
*               VALUE2 = VALUEP;                                        PL209500
*               VALUE = VALUE1 / VALUE2;                                PL209600
*               VALUED = ROUND(VALUE,4);                                PL209700
*H22:                                                                   PL209800
*           END;                                                        PL209900
*                                                                       PL210000
*                                       /* GET NEXT OPERAND.        */  PL210100
*            END;                                                       PL210200
*            K = ARIFD(I);                                              PL210300
*         IF K < 0                                                      PL210400
*         THEN SCALARS(-100-K) = VALUED;                                PL210500
*         ELSE                                                          PL210600
*            VALUES(K,1) = VALUED;                                      PL210700
*H23:                                                                   PL210800
*                                       /* TO NEXT ARITH STATEMENT. */  PL210900
*         END;                                                          PL211000
*                                                                       PL211100
*    /* *********************************************************** */  PL211200
*    /*                                                             */  PL211300
*    /* HAVING FINALLY ARRIVED AT THE RESULT VALUES,                */  PL211400
*    /* WE NEXT AUGMENT THE LOWEST LEVEL                            */  PL211500
*    /* RECORD COUNT. THIS FINISHES THE CURRENT PROCESSING OF       */  PL211600
*    /* INREC, AND WE STORE IT IN LASTREC IN CASE KEY TOTAL         */  PL211700
*    /* BREAKS NEED TO TAKE NAMES FROM IT.                          */  PL211800
*    /*                                                             */  PL211900
*    /*     THEN IF A RANGE ANALYSIS WAS REQUIRED, WE ADD THE       */  PL212000
*    /* VALUE INTO THE CORRECT SLOT (BY RANGE) IN THE TW-ARRAY,     */  PL212100
*    /* AND AUGMENT THE CORRESPONDING RECORD COUNT.                 */  PL212200
*    /*                                                             */  PL212300
*    /*     WE THEN TEST NAMESW TO TEST IF THE DETAIL LINE HAS TP   */  PL212400
*    /* BE PRINTED, AND SET THE LINE UP FOR PRINTING IN S1.         */  PL212500
*    /*                                                             */  PL212600
*    /*     FINALLY, ADD THE DETAIL LEVEL ACCUMULATORS UP TO        */  PL212700
*    /* THE NEXT (KEY4) LEVEL, AND RETURN FOR THE NEXT RECORD.      */  PL212800
*    /*                                                             */  PL212900
*    /* *********************************************************** */  PL213000
*                                                                       PL213100
*H9:                                                                    PL213200
*                                       /* AUGMENT RECORD COUNT.    */  PL213300
*         ARCNT(1) = ARCNT(1) + 1;                                      PL213400
*                                       /* STORE CURRENT RECORD.    */  PL213500
*         LASTREC = INREC;                                              PL213600
*                                                                       PL213700
*                                                                       PL213800
*                                       /* SIGNAL DETAIL LINE.      */  PL213900
*         I = 1;                                                        PL214000
*                                       /* IS DETAIL PRINT REQUIRED */  PL214100
*         IF ^NAMESW THEN GO TO I2;                                     PL214200
*         IF SKIPPRINT                                                  PL214300
*         THEN DO;                                                      PL214400
*                 SKIPPRINT = '0'B;                                     PL214500
*                 GO TO I2;                                             PL214600
*              END;                                                     PL214700
*                                       /* IS NEW PAGE NEEDED?      */  PL214800
*         IF LINECT > LINECX                                            PL214900
*         THEN DO;                                                      PL215000
*         PEXIT = I1;                                                   PL215100
*                 GO TO P1;                                             PL215200
*              END;                                                     PL215300
*                                       /* SET UP KEYS IN LINE.     */  PL215400
*I1:                                                                    PL215500
*                                       /* TOTAL JUST PRINTED, SKIP */  PL215600
*         IF LTOTSW THEN BYTE_LINE = '-';                               PL215700
*                   ELSE BYTE_LINE = CBYT;                              PL215800
*                                       /* RESET TOTAL SWITCH.      */  PL215900
*         LTOTSW = '0'B;                                                PL216000
*                                       /* NAME ASSCTD WITH DETAIL? */  PL216100
*                                       /* GO TO PRINT LINE.        */  PL216200
*         LEXIT = I2;                                                   PL216300
*         GO TO S1;                                                     PL216400
*                                       /* SET EXIT FOR NEXT RECORD */  PL216500
*I2:      LEXIT = NEXTREC;                                              PL216600
*         J = 2;                                                        PL216700
*                                       /* ADD UP ACCUMULATORS.     */  PL216800
*         GO TO AUG1;                                                   PL216900
*                                                                       PL217000
*                                                                       PL217100
*                                                                       PL217200
*                                                                       PL217300
*    /* *********************************************************** */  PL217400
*    /*                                                             */  PL217500
*    /* THE FOLLOWING SUBROUTINE, T1, UNPACKS THE I'TH KEY FROM     */  PL217600
*    /* THE RECORD, WHERE 'I' IS THE RECEIVED PARAMETER.            */  PL217700
*    /*                                                             */  PL217800
*    /* *********************************************************** */  PL217900
*                                                                       PL218000
*T1:                                                                    PL218100
*                                       /* LENGTH & POSITION OF KEY */  PL218200
*         L = ARLEN_GR03(I);                                            PL218300
*         M = ARPOS_GR03(I);                                            PL218400
*                                                                       PL218500
*         IF ARPAK_GR03(I) = 'P'                                        PL218600
*                                       /* PACKED - TO PREC, NREC   */  PL218700
*                                       /* & FINALLY TO KEY4.       */  PL218800
*         THEN DO;                                                      PL218900
*                 PREC = 0;                                             PL219000
*                 L1 = 7 - L;                                           PL219100
*                 SUBSTR(ZREC,L1,L) = SUBSTR(INREC,M,L);                PL219200
*                 NREC = PREC;                                          PL219300
*                 L1 = (2 * L) - 1;                                     PL219400
*                 L2 = 12 - L1;                                         PL219500
*                 KEY8 = SUBSTR(XREC,L2,L1);                            PL219600
*              END;                                                     PL219700
*                                       /* HEX - STRAIGHT TO KEY4.  */  PL219800
*         ELSE DO;                                                      PL219900
*                 KEY8 = SUBSTR(INREC,M,L);                             PL220000
*              END;                                                     PL220100
*                                       /* END OF SUBROUTINE T1.    */  PL220200
*         GO TO REXIT;                                                  PL220300
*                                                                       PL220400
*                                                                       PL220500
*    /* *********************************************************** */  PL220600
*    /*                                                             */  PL220700
*    /* THE FOLLOWING SUBROUTINE, LABELS 'TOTS' THRU 'TOTEX1',      */  PL220800
*    /* IS CALLED WHENEVER ONE OF THE FOUR KEYS CHANGES VALUE.      */  PL220900
*    /* IT COMPRISES SOME OF THE MOST COMPLEX LOGIC IN THE ENTIRE   */  PL221000
*    /* PROGRAM, AND THE PRECISE FLOW THROUGH THE ROUTINE DEPENDS   */  PL221100
*    /* ON SEVERAL TESTS:                                           */  PL221200
*    /*                                                             */  PL221300
*    /* 1) IS THIS THE LOWEST KEY LEVEL?      NOKEY = 6-I           */  PL221400
*    /* 2) HAVE DETAIL LINES BEEN PRINTED?    NAMESW                */  PL221500
*    /* 3) IS A NEW PAGE NEEDED?              LINECT > 55           */  PL221600
*    /* 4) IS A TOTAL REQUESTED FOR THIS KEY? ARTOT_GR03(6-I) = 'T' */  PL221700
*    /* 5) IS THERE A NAME FOR THIS KEY?      ARNAM_GR03(6-I)^= 0   */  PL221800
*    /* 6) IS A PAGE BREAK WANTED FOR IT?     ARPAG_GR03(6-I)^= ' ' */  PL221900
*    /*                                                             */  PL222000
*    /* DEPENDING ON THESE TESTS, IT WILL PRINT THE KEY VALUES IN   */  PL222100
*    /* ONE OF THE FOLLOWING FORMATS (IF AT ALL):                   */  PL222200
*    /*    (A):                                                     */  PL222300
*    /*   -------KEY-------   --------KEY-NAME--------  ---VALUES-> */  PL222400
*    /* OR (B):                                                     */  PL222500
*    /*   -------KEY-------           (SPACES)          ---VALUES-> */  PL222600
*    /* OR (C):                                                     */  PL222700
*    /*   -------KEY-------   TOTAL **    COUNT=NNNNN   ---VALUES-> */  PL222800
*    /* OR (D):                                                     */  PL222900
*    /*   -------KEY-------   --------KEY-NAME--------  ---VALUES-> */  PL223000
*    /*                       TOTAL **    COUNT=NNNNN               */  PL223100
*    /*                                                             */  PL223200
*    /*   JUST TO ADD TO THE DIFFICULTY, THE NUMBER OF ASTERISKS    */  PL223300
*    /* AFTER 'TOTAL' VARIES WITH THE KEY LEVEL.                    */  PL223400
*    /*                                                             */  PL223500
*    /* STARTING SIMPLY, BRANCH OUT IF THE KEY DOESN'T EXIST,       */  PL223600
*    /* AND GO TO ADD UP THE VALUE ACCUMULATORS.                    */  PL223700
*    /*   THEN WE TEST IF A NEW PAGE IS NEEDED. WE WILL ONLY PRINT  */  PL223800
*    /* A NEW PAGE BEFORE A LOWEST-LEVEL BREAK, SO THAT ALL TOTALS  */  PL223900
*    /* GO ON THE SAME PAGE AS THEIR DETAIL LINES. THEREFORE, FOR A */  PL224000
*    /* NEW PAGE, WE REQUIRE THAT THIS IS THE LOWEST LEVEL KEY, AND */  PL224100
*    /* THAT NO DETAIL LINES ARE BEING PRINTED.                     */  PL224200
*    /*                                                             */  PL224300
*    /* *********************************************************** */  PL224400
*                                                                       PL224500
*TOTS:    IF NOKEYS < 10-I THEN GO TO TOTEX;                            PL224600
*                                       /* NEW PAGE NEEDED?         */  PL224700
*                                       /* NO TOTAL PRINT- GO OUT.  */  PL224800
*         IF ARTOT_GR03(10-I) ^= 'T' THEN GO TO TOTEX;                  PL224900
*                                       /* SET UP KEY FLDS ON LINE. */  PL225000
*                                       /* IS THIS LOWEST LEVEL?    */  PL225100
*         IF NOKEYS = 10-I & ^NAMESW                                    PL225200
*                                       /* SET LINE SPACING-DETAIL. */  PL225300
*         THEN DO;                                                      PL225400
*                 IF LTOTSW THEN BYTE_LINE = '-';                       PL225500
*                           ELSE BYTE_LINE = CBYT;                      PL225600
*                 LTOTSW = '0'B;                                        PL225700
*              END;                                                     PL225800
*                                       /* SET LINE SPACING - TOTAL */  PL225900
*         ELSE DO;                                                      PL226000
*                 IF CBYT = ' ' THEN BYTE_LINE = '0';                   PL226100
*                               ELSE BYTE_LINE = '-';                   PL226200
*                 LTOTSW = '1'B;                                        PL226300
*              END;                                                     PL226400
*                                                                       PL226500
*    /* *********************************************************** */  PL226600
*    /*                                                             */  PL226700
*    /* NOW WE TEST IF A NAME EXISTS. IF SO, WE CAN PRINT A LINE    */  PL226800
*    /* OF TYPE 'A', WHICH MAY TURN OUT TO BE THE FIRST LINE OF 'D' */  PL226900
*    /*                                                             */  PL227000
*    /* *********************************************************** */  PL227100
*                                                                       PL227200
*         IF ARNAM_GR03(10-I) ^= 0                                      PL227300
*                                                                       PL227400
*         THEN DO;                                                      PL227500
*                                       /* PUT NAME INTO LINE.      */  PL227600
*                                       /* PRINT LINE.              */  PL227700
*                 LEXIT = TOTS1;                                        PL227800
*                 GO TO S1;                                             PL227900
*              END;                                                     PL228000
*                                                                       PL228100
*    /* *********************************************************** */  PL228200
*    /*                                                             */  PL228300
*    /* IF THIS IS NOT THE LOWEST LEVEL, WE NOW SET THE 'TOTAL **'  */  PL228400
*    /* UP IN THE NAME POSITION OF THE LINE. IF IT IS, HOWEVER,     */  PL228500
*    /* WE EITHER HAVE ALREADY PRINTED THE TYPE 'A' LINE, AND WE    */  PL228600
*    /* EXIT, OR WE SET THE NAME POSITION BLANK FOR A TYPE 'B'.     */  PL228700
*    /*                                                             */  PL228800
*    /* *********************************************************** */  PL228900
*                                                                       PL229000
*TOTS1:   IF NOKEYS ^= 10-I | NAMESW                                    PL229100
*                                       /* NOT LOWEST LEVEL.        */  PL229200
*         THEN DO;                                                      PL229300
*              END;                                                     PL229400
*                                       /* IS LOWEST LEVEL PRINT.   */  PL229500
*         ELSE DO;                                                      PL229600
*                 IF ARNAM_GR03(10-I) = 0                               PL229700
*                                       /* BLANK NAME (TYPE 'B').   */  PL229800
*                 THEN NAME_LINE = ' ';                                 PL229900
*                                       /* TYPE 'A' - ALREADY DONE. */  PL230000
*                 ELSE GO TO TOTEX;                                     PL230100
*              END;                                                     PL230200
*                                                                       PL230300
*    /* *********************************************************** */  PL230400
*    /*                                                             */  PL230500
*    /* IF THERE WAS NO NAME, WE HAVE EITHER A TYPE 'B' OR 'C'      */  PL230600
*    /* SET UP, SO WE PRINT IT AND GO OUT TO TOTEX.                 */  PL230700
*    /*                                                             */  PL230800
*    /* *********************************************************** */  PL230900
*                                                                       PL231000
*         IF ARNAM_GR03(10-I) = 0                                       PL231100
*         THEN DO;                                                      PL231200
*                 LEXIT = TOTEX;                                        PL231300
*                 GO TO S1;                                             PL231400
*              END;                                                     PL231500
*                                                                       PL231600
*    /* *********************************************************** */  PL231700
*    /*                                                             */  PL231800
*    /* HAVING GOT THIS FAR, WE ARE CERTAIN THAT IT IS A TYPA 'D',  */  PL231900
*    /* AND WE HAVE MERELY TO PRINT THE SECOND LINE, FIRST BLANKING */  PL232000
*    /* OUT EVERYTHING BAR THE NAME.                                */  PL232100
*    /*                                                             */  PL232200
*    /* *********************************************************** */  PL232300
*                                                                       PL232400
*                                                                       PL232500
*    /* *********************************************************** */  PL232600
*    /*                                                             */  PL232700
*    /* HAVING PRINTED THE TOTAL LINE, WE TEST IF A NEW PAGE        */  PL232800
*    /* IS WANTED AFTER THIS KEY BREAK, AND IF SO SIGNAL SUCH TO    */  PL232900
*    /* THE NEXT LOWEST-LEVEL PRINT.                                */  PL233000
*    /*                                                             */  PL233100
*    /*    THEN WE HAVE TO TEST IF THIS IS A MAJOR KEY, AND A       */  PL233200
*    /* RANGE SUBANALYSIS IS REQUIRED FROM IT.                      */  PL233300
*    /*                                                             */  PL233400
*    /*    WE THEN ADD THE PRINT VALUES FOR THIS KEY INTO THOSE     */  PL233500
*    /* OF THE NEXT HIGHEST, AND EXIT.                              */  PL233600
*    /*                                                             */  PL233700
*    /* *********************************************************** */  PL233800
*                                                                       PL233900
*TOTEX:   IF ARPAG_GR03(10-I) ^= ' ' & SKIPPRINX ^= '1'B                PL234000
*         THEN LINECT = 80;                                             PL234100
*         SKIPPRINX = '0'B;                                             PL234200
*         IF I ^= 9 THEN GO TO TOTEXA;                                  PL234300
*                                                                       PL234400
*         J = 2;                                                        PL234500
*TOTEXA:                                                                PL234600
*                                       /* SIGNAL NEXT TOTAL LEVEL. */  PL234700
*         J = I + 1;                                                    PL234800
*         LEXIT = TOTEX1;                                               PL234900
*                                       /* ADD UP PRINT VALUES.     */  PL235000
*         GO TO AUG1;                                                   PL235100
*                                       /* END OF SUBROUTINE TOTS.  */  PL235200
*TOTEX1:  GO TO REXIT;                                                  PL235300
*                                                                       PL235400
*                                                                       PL235500
*    /* *********************************************************** */  PL235600
*    /*                                                             */  PL235700
*    /* THIS NEXT SUBROUTINE, P1, PRINTS THE PAGE HEADING, CLEARS   */  PL235800
*    /* THE SWITCH THAT SIGNALS A TOTAL HAS JUST BEEN PRINTED,      */  PL235900
*    /* RESETS THE LINE COUNT, AND EXITS.                           */  PL236000
*    /*                                                             */  PL236100
*    /* *********************************************************** */  PL236200
*                                                                       PL236300
*P1:      PAGENO = PAGENO + 1;                                          PL236400
*         PAGE_HEADA = PAGENO;                                          PL236500
*         WRITE FILE(PRINT) FROM(HEADA);                                PL236600
*         IF I = 10 THEN GO TO $P9;                                     PL236700
*         IF NO_GR10 = 0 THEN GO TO $P9;                                PL236800
*         HEADX = '0';                                                  PL236900
*         DO J1A = 1 TO NO_GR10;                                        PL237000
*         IF ARFLD_GR10(J1A) = 1009                                     PL237100
*         THEN DO;                                                      PL237200
*                 WRITE FILE(PRINT) FROM(HEADX);                        PL237300
*                 IF ARFMT_GR10(J1A) = '1' THEN HEADX = ' ';            PL237400
*                 IF ARFMT_GR10(J1A) = '2' THEN HEADX = '0';            PL237500
*                 IF ARFMT_GR10(J1A) = '3' THEN HEADX = '-';            PL237600
*                 GO TO $P20;                                           PL237700
*                 END;                                                  PL237800
*            J1B = ARSPOS_GR10(J1A) + 1;                                PL237900
*            J1C = AREPOS_GR10(J1A) - J1B + 2;                          PL238000
*            J1D = ARFLD_GR10(J1A);                                     PL238100
*            J1E = ARDEC_GR10(J1A);                                     PL238200
*            J1F = ARLIT_GR10(J1A);                                     PL238300
*            HX_BYTE = ARFMT_GR10(J1A);                                 PL238400
*            $EXIT = $P15;                                              PL238500
*            GO TO $X1;                                                 PL238600
*$P15:       SUBSTR(HEADX,J1B,J1C) = SUBSTR(FMAT_X,J1D,J1C);            PL238700
*$P20:     END;                                                         PL238800
*         WRITE FILE(PRINT) FROM(HEADX);                                PL238900
*$P9:                                                                   PL239000
*         WRITE FILE(PRINT) FROM(HEADBX);                               PL239100
*         WRITE FILE(PRINT) FROM(HEADCX);                               PL239200
*         WRITE FILE(PRINT) FROM(BLANKLINE);                            PL239300
*                                                                       PL239400
*         STORELINE = ' ';                                              PL239500
*         LTOTSW = '0'B;                                                PL239600
*         LINECT = 10;                                                  PL239700
*         GO TO PEXIT;                                                  PL239800
*                                                                       PL239900
*                                                                       PL240000
*    /* *********************************************************** */  PL240100
*    /*                                                             */  PL240200
*    /* FOR ALL LEVELS OF DETAIL AND TOTAL PRINT (STIPULATED BY     */  PL240300
*    /* THE RECEIVED PARAMETER 'I'), THE NEXT ROUTINE (S1 & S2)     */  PL240400
*    /* SETS UP THE VALUES IN THE PRINT LINE, WRITES THE LINE OUT,  */  PL240500
*    /* AND AUGMENTS THE LINE COUNT.                                */  PL240600
*    /*                                                             */  PL240700
*    /* *********************************************************** */  PL240800
*                                                                       PL240900
*S1:         IF I = 1 THEN GO TO S19;        /* NOT TOTAL - NO ARITH  */PL241000
*         SKIPPRINX = '0'B;                                             PL241100
*            IF NOARI = 0 THEN GO TO S19;                               PL241200
*            DO N1 = 1 TO NOARI;                                        PL241300
*$S2:           IF ARITT(N1) ^= '1'B                                    PL241400
*               THEN GO TO S18;                 /* STMT NOT AT TOTALS */PL241500
*       IF ARIFD(N1) = -1                                               PL241600
*         THEN DO;                                                      PL241700
*                 J1A = ARINO(N1,1);                                    PL241800
*                 J2A = ARINO(N1,3);                                    PL241900
*                 IF ARINO(N1,2) = 1 THEN GO TO $S21;                   PL242000
*                 IF ARINO(N1,2) = 2 THEN GO TO $S22;                   PL242100
*                 IF ARINO(N1,2) = 3 THEN GO TO $S23;                   PL242200
*                 IF ARINO(N1,2) = 4 THEN GO TO $S24;                   PL242300
*                 GO TO $S4;                                            PL242400
*$S21:            IF VALUES(J1A,I)  = VALUES(J2A,I)                     PL242500
*                 THEN GO TO $S3;                                       PL242600
*                 GO TO $S4;                                            PL242700
*$S22:            IF VALUES(J1A,I) ^= VALUES(J2A,I)                     PL242800
*                 THEN GO TO $S3;                                       PL242900
*                 GO TO $S4;                                            PL243000
*$S23:            IF VALUES(J1A,I)  > VALUES(J2A,I)                     PL243100
*                 THEN GO TO $S3;                                       PL243200
*                 GO TO $S4;                                            PL243300
*$S24:            IF VALUES(J1A,I)  < VALUES(J2A,I)                     PL243400
*                 THEN GO TO $S3;                                       PL243500
*                 GO TO $S4;                                            PL243600
*$S3:             J1A = ARINO(N1,5);                                    PL243700
*                 VALUES(J1A,I) = VALUES(J1A,I) + 1;                    PL243800
*IF ARINO(N1,4) < 0 & BYTE_LINE ^= CBYT THEN LTOTSW = '1'B;             PL243900
*         IF ARINO(N1,4) = -1                                           PL244000
*         THEN DO;                                                      PL244100
*                 SKIPPRINX = '1'B;                                     PL244200
*                 GO TO LEXIT;                                          PL244300
*              END;                                                     PL244400
*         IF ARINO(N1,4) = -2                                           PL244500
*         THEN DO;                                                      PL244600
*                 DO N3 = 1 TO IPMF_VALS - 1;                           PL244700
*                    VALUES(N3,I) = 0;                                  PL244800
*                 END;                                                  PL244900
*                 GO TO REXIT;                                          PL245000
*               END;                                                    PL245100
*                 N1 = ARINO(N1,4);                                     PL245200
*                 GO TO $S2;                                            PL245300
*$S4:             GO TO S18;                                            PL245400
*              END;                                                     PL245500
*               VALUED = 0;                  /* INIT WORK FIELD       */PL245600
*               DO N2 = 1 TO ARILN(N1);      /* FOR EACH OPERATOR     */PL245700
*                  K1 = ARINO(N1,N2);        /* SUBSCRIPT OF OPERAND  */PL245800
*                  IF ARICN(N1,N2)                                      PL245900
*                  THEN VALUEP = VALIT(K1);  /* CONSTANT OR VARIABLE? */PL246000
*         ELSE DO;                                                      PL246100
*                 IF K1 < 0                                             PL246200
*                 THEN VALUEP = SCALARS(-100-K1);                       PL246300
*                 ELSE VALUEP = VALUES(K1,I);                           PL246400
*              END;                                                     PL246500
*                  IF ARISN(N1,N2) = '-'                                PL246600
*                  THEN VALUEP = -VALUEP;    /* NEGATIVE PREFIX.      */PL246700
*                  IF ARIOP(N1,N2) = '+' THEN VALUED = VALUED + VALUEP; PL246800
*                  IF ARIOP(N1,N2) = '-' THEN VALUED = VALUED - VALUEP; PL246900
*                  IF ARIOP(N1,N2) = '*'                                PL247000
*                  THEN DO;                                             PL247100
*                          VALUE1 = VALUED;                             PL247200
*                          VALUE2 = VALUEP;                             PL247300
*                          VALUE = VALUE1 * VALUE2;                     PL247400
*                          VALUED = ROUND(VALUE,4);                     PL247500
*                       END;                                            PL247600
*                  IF ARIOP(N1,N2) = '/'     /* CHECK FOR ZERODIVIDE  */PL247700
*                  THEN DO;                                             PL247800
*                          IF VALUEP ^= 0 THEN GO TO S11;               PL247900
*                          VALUED = 0;                                  PL248000
*                          ZERO_DIVIDE_COUNT = ZERO_DIVIDE_COUNT + 1;   PL248100
*                          ERRORSW = '1'B;                              PL248200
*         ERR0DIV = '1'B;                                               PL248300
*                          GO TO S12;                                   PL248400
*S11:                      VALUE1 = VALUED;                             PL248500
*                          VALUE2 = VALUEP;                             PL248600
*                          VALUE = VALUE1 / VALUE2;                     PL248700
*                          VALUED = ROUND(VALUE,4);                     PL248800
*S12:                   END;                                            PL248900
*               END;                    /* GET NEXT OPERAND */          PL249000
*               N2 = ARIFD(N1);                                         PL249100
*         IF N2 < 0                                                     PL249200
*         THEN SCALARS(-100-N2) = VALUED;                               PL249300
*         ELSE                                                          PL249400
*               VALUES(N2,I) = VALUED;                                  PL249500
*S18:        END;                       /* GET NEXT ARITH STATEMENT */  PL249600
*S19:                                                                   PL249700
*         IF NOKEYXX = 10-I & NAMESW ^= '1'B & LINECT > LINECX          PL249800
*         THEN DO;                                                      PL249900
*                 PEXIT = TOTS0;                                        PL250000
*                 GO TO P1;                                             PL250100
*TOTS0:        END;                                                     PL250200
*                                                                       PL250300
*         IF NO_GR11 = 0 THEN GO TO $S9;                                PL250400
*         SUBSTR(LINEA,2,132) = ' ';                                    PL250500
*         UBYT = BYTE_LINE;                                             PL250600
*         J1A = 10-I;                                                   PL250700
*         IF NO_GR12(J1A) > 0 THEN GO TO $S7;                           PL250800
*         SW11 = '1'B;                                                  PL250900
*         SW12 = '0'B;                                                  PL251000
*$S50:    DO J1A = 1 TO NO_GR11;                                        PL251100
*         IF ARFLD_GR11(J1A) = 1009                                     PL251200
*         THEN DO;                                                      PL251300
*         SW11 = '0'B;                                                  PL251400
*                 WRITE FILE(PRINT) FROM(LINEA);                        PL251500
*                 IF ARFMT_GR11(J1A) = '1'                              PL251600
*                 THEN DO;                                              PL251700
*                         LINECT = LINECT + 1;                          PL251800
*                         LINEA = ' ';                                  PL251900
*                      END;                                             PL252000
*                 IF ARFMT_GR11(J1A) = '2'                              PL252100
*                 THEN DO;                                              PL252200
*                         LINECT = LINECT + 2;                          PL252300
*                         LINEA = '0';                                  PL252400
*                      END;                                             PL252500
*                 IF ARFMT_GR11(J1A) = '3'                              PL252600
*                 THEN DO;                                              PL252700
*                         LINECT = LINECT + 3;                          PL252800
*                         LINEA = '-';                                  PL252900
*                      END;                                             PL253000
*                 GO TO $S59;                                           PL253100
*              END;                                                     PL253200
*            J1B = ARSPOS_GR11(J1A) + 1;                                PL253300
*            J1C = AREPOS_GR11(J1A) - J1B + 2;                          PL253400
*            J1D = ARFLD_GR11(J1A);                                     PL253500
*         IF J1D > 979 & SW11 & SW12                                    PL253600
*         THEN GO TO $S59;                                              PL253700
*            J1E = ARDEC_GR11(J1A);                                     PL253800
*         J1F = ARLIT_GR11(J1A);                                        PL253900
*            HX_BYTE = ARFMT_GR11(J1A);                                 PL254000
*         ZSW = ZSW_GR11(J1A);                                          PL254100
*            $EXIT = $S51;                                              PL254200
*            GO TO $X1;                                                 PL254300
*$S51:       SUBSTR(LINEA,J1B,J1C) = SUBSTR(FMAT_X,J1D,J1C);            PL254400
*         IF BSW_GR11(J1A)                                              PL254500
*         THEN DO;                                                      PL254600
*                 IF SUBSTR(LINEA,J1B,J1C) = SUBSTR(STORELINE,J1B,J1C)  PL254700
*                 THEN SUBSTR(LINEA,J1B,J1C) = ' ';                     PL254800
*              ELSE SUBSTR(STORELINE,J1B,J1C) = SUBSTR(LINEA,J1B,J1C);  PL254900
*              END;                                                     PL255000
*$S59:    END;                                                          PL255100
*         GO TO $S9;                                                    PL255200
*$S7:     STORELINE = ' ';                                              PL255300
*         DO J2A = 1 TO NO_GR12(J1A);                                   PL255400
*         IF ARFLD_GR12(J2A,J1A) = 1500                                 PL255500
*         THEN DO;                                                      PL255600
*                 SW12 = '1'B;                                          PL255700
*                 SW11 = '1'B;                                          PL255800
*                 GO TO $S50;                                           PL255900
*              END;                                                     PL256000
*         IF ARFLD_GR12(J2A,J1A) = 1009                                 PL256100
*         THEN DO;                                                      PL256200
*                 WRITE FILE(PRINT) FROM(LINEA);                        PL256300
*                 IF ARFMT_GR12(J2A,J1A) = '1'                          PL256400
*                 THEN DO;                                              PL256500
*                         LINECT = LINECT + 1;                          PL256600
*                         LINEA = ' ';                                  PL256700
*                      END;                                             PL256800
*                 IF ARFMT_GR12(J2A,J1A) = '2'                          PL256900
*                 THEN DO;                                              PL257000
*                         LINECT = LINECT + 2;                          PL257100
*                         LINEA = '0';                                  PL257200
*                      END;                                             PL257300
*                 IF ARFMT_GR12(J2A,J1A) = '3'                          PL257400
*                 THEN DO;                                              PL257500
*                         LINECT = LINECT + 3;                          PL257600
*                         LINEA = '-';                                  PL257700
*                      END;                                             PL257800
*                 GO TO $S79;                                           PL257900
*              END;                                                     PL258000
*            J1B = ARSPOS_GR12(J2A,J1A) + 1;                            PL258100
*            J1C = AREPOS_GR12(J2A,J1A) - J1B + 2;                      PL258200
*            J1D = ARFLD_GR12(J2A,J1A);                                 PL258300
*            J1E = ARDEC_GR12(J2A,J1A);                                 PL258400
*            J1F = ARLIT_GR12(J2A,J1A);                                 PL258500
*         HX_BYTE = ARFMT_GR12(J2A,J1A);                                PL258600
*            $EXIT = $S71;                                              PL258700
*            GO TO $X1;                                                 PL258800
*$S71:       SUBSTR(LINEA,J1B,J1C) = SUBSTR(FMAT_X,J1D,J1C);            PL258900
*$S79:    END;                                                          PL259000
*$S9:                                                                   PL259100
*         WRITE FILE(PRINT) FROM(LINEA);                                PL259200
*                                                                       PL259300
*         IF NO_GR11 ^= 0 THEN BYTE_LINE = UBYT;                        PL259400
*         LINECT = LINECT + 1;                                          PL259500
*         IF BYTE_LINE  = '0' THEN LINECT = LINECT + 1;                 PL259600
*         IF BYTE_LINE  = '-' THEN LINECT = LINECT + 2;                 PL259700
*         GO TO LEXIT;                                                  PL259800
*                                                                       PL259900
*                                                                       PL260000
*$X1:     FMAT_X = ' ';                                                 PL260100
*         IF J1D < 990 THEN GO TO $X5;                                  PL260200
*         IF J1D = 991 THEN FMAT_X = LASTKEY1;                          PL260300
*         IF J1D = 992 THEN FMAT_X = LASTKEY2;                          PL260400
*         IF J1D = 993 THEN FMAT_X = LASTKEY3;                          PL260500
*         IF J1D = 994 THEN FMAT_X = LASTKEY4;                          PL260600
*         IF J1D = 1005 THEN FMAT_X = LASTKEY5;                         PL260700
*         IF J1D = 1006 THEN FMAT_X = LASTKEY6;                         PL260800
*         IF J1D = 1007 THEN FMAT_X = LASTKEY7;                         PL260900
*         IF J1D = 1008 THEN FMAT_X = LASTKEY8;                         PL261000
*         IF J1D = 995                                                  PL261100
*         THEN FMAT_X = SUBSTR(LASTREC,ARNAM_GR03(1),ARNML_GR03(1));    PL261200
*         IF J1D = 996                                                  PL261300
*         THEN FMAT_X = SUBSTR(LASTREC,ARNAM_GR03(2),ARNML_GR03(2));    PL261400
*         IF J1D = 997                                                  PL261500
*         THEN FMAT_X = SUBSTR(LASTREC,ARNAM_GR03(3),ARNML_GR03(3));    PL261600
*         IF J1D = 998                                                  PL261700
*         THEN FMAT_X = SUBSTR(LASTREC,ARNAM_GR03(4),ARNML_GR03(4));    PL261800
*         IF J1D = 1001                                                 PL261900
*         THEN FMAT_X = SUBSTR(LASTREC,ARNAM_GR03(5),ARNML_GR03(5));    PL262000
*         IF J1D = 1002                                                 PL262100
*         THEN FMAT_X = SUBSTR(LASTREC,ARNAM_GR03(6),ARNML_GR03(6));    PL262200
*         IF J1D = 1003                                                 PL262300
*         THEN FMAT_X = SUBSTR(LASTREC,ARNAM_GR03(7),ARNML_GR03(7));    PL262400
*         IF J1D = 1004                                                 PL262500
*         THEN FMAT_X = SUBSTR(LASTREC,ARNAM_GR03(8),ARNML_GR03(8));    PL262600
*         IF J1D = 999 THEN FMAT_X = LITERAL_POOL(J1F);                 PL262700
*         IF J1D = 1000 THEN FMAT_X = SUBSTR(LASTREC,NAMEPOS,NAMELEN);  PL262800
*         J1D = 1;                                                      PL262900
*         GO TO $EXIT;                                                  PL263000
*$X5:     IF J1D = 980 THEN VALUED = ARCNT(9);                          PL263100
*         IF J1D = 981 THEN VALUED = ARCNT(8);                          PL263200
*         IF J1D = 982 THEN VALUED = ARCNT(7);                          PL263300
*         IF J1D = 983 THEN VALUED = ARCNT(6);                          PL263400
*         IF J1D = 984 THEN VALUED = ARCNT(5);                          PL263500
*         IF J1D = 976 THEN VALUED = ARCNT(4);                          PL263600
*         IF J1D = 977 THEN VALUED = ARCNT(3);                          PL263700
*         IF J1D = 978 THEN VALUED = ARCNT(2);                          PL263800
*         IF J1D = 979 THEN VALUED = ARCNT(1);                          PL263900
*         IF J1D < 970 THEN VALUED = VALUES(J1D,I);                     PL264000
*         IF VALUED = 0 & ZSW                                           PL264100
*         THEN DO;                                                      PL264200
*                 J1D = 1;                                              PL264300
*                 GO TO $EXIT;                                          PL264400
*              END;                                                     PL264500
*         IF HX_BYTE = 'Z' THEN GO TO $X6;                              PL264600
*         ZSW = '1'B;                                                   PL264700
*         IF HX_BYTE = ',' THEN GO TO $X7;                              PL264800
*         IF J1E = 0                                                    PL264900
*         THEN DO;                                                      PL265000
*VAL_DEC1 = VALUED;                                                     PL265100
*FMAT_90 = ROUND(VAL_DEC1,0);                                           PL265200
*                 J1D = 16;                                             PL265300
*                 GO TO $X9;                                            PL265400
*              END;                                                     PL265500
*         IF J1E = 1                                                    PL265600
*         THEN DO;                                                      PL265700
*VAL_DEC2 = VALUED;                                                     PL265800
*FMAT_91 = ROUND(VAL_DEC2,1);                                           PL265900
*                 J1D = 17;                                             PL266000
*                 GO TO $X9;                                            PL266100
*              END;                                                     PL266200
*         IF J1E = 2                                                    PL266300
*         THEN DO;                                                      PL266400
*VAL_DEC3 = VALUED;                                                     PL266500
*FMAT_92 = ROUND(VAL_DEC3,2);                                           PL266600
*                 J1D = 17;                                             PL266700
*                 GO TO $X9;                                            PL266800
*              END;                                                     PL266900
*         IF J1E = 3                                                    PL267000
*         THEN DO;                                                      PL267100
*VAL_DEC4 = VALUED;                                                     PL267200
*FMAT_93 = ROUND(VAL_DEC4,3);                                           PL267300
*                 J1D = 17;                                             PL267400
*                 GO TO $X9;                                            PL267500
*              END;                                                     PL267600
*         IF J1E = 4                                                    PL267700
*         THEN DO;                                                      PL267800
*VAL_DEC5 = VALUED;                                                     PL267900
*FMAT_94 = ROUND(VAL_DEC5,4);                                           PL268000
*                 J1D = 17;                                             PL268100
*                 GO TO $X9;                                            PL268200
*              END;                                                     PL268300
*$X6:     IF J1E = 0                                                    PL268400
*         THEN DO;                                                      PL268500
*VAL_DEC1 = VALUED;                                                     PL268600
*FMAT_Z0 = ROUND(VAL_DEC1,0);                                           PL268700
*                 J1D = 16;                                             PL268800
*                 GO TO $X9;                                            PL268900
*              END;                                                     PL269000
*         IF J1E = 1                                                    PL269100
*         THEN DO;                                                      PL269200
*VAL_DEC2 = VALUED;                                                     PL269300
*FMAT_Z1 = ROUND(VAL_DEC2,1);                                           PL269400
*                 J1D = 17;                                             PL269500
*                 GO TO $X9;                                            PL269600
*              END;                                                     PL269700
*         IF J1E = 2                                                    PL269800
*         THEN DO;                                                      PL269900
*VAL_DEC3 = VALUED;                                                     PL270000
*FMAT_Z2 = ROUND(VAL_DEC3,2);                                           PL270100
*                 J1D = 17;                                             PL270200
*                 GO TO $X9;                                            PL270300
*              END;                                                     PL270400
*         IF J1E = 3                                                    PL270500
*         THEN DO;                                                      PL270600
*VAL_DEC4 = VALUED;                                                     PL270700
*FMAT_Z3 = ROUND(VAL_DEC4,3);                                           PL270800
*                 J1D = 17;                                             PL270900
*                 GO TO $X9;                                            PL271000
*              END;                                                     PL271100
*         IF J1E = 4                                                    PL271200
*         THEN DO;                                                      PL271300
*VAL_DEC5 = VALUED;                                                     PL271400
*FMAT_Z4 = ROUND(VAL_DEC5,4);                                           PL271500
*                 J1D = 17;                                             PL271600
*                 GO TO $X9;                                            PL271700
*              END;                                                     PL271800
*$X7:     IF J1E = 0                                                    PL271900
*         THEN DO;                                                      PL272000
*VAL_DEC1 = VALUED;                                                     PL272100
*FMAT_C0 = ROUND(VAL_DEC1,0);                                           PL272200
*                 J1D = 20;                                             PL272300
*                 GO TO $X9;                                            PL272400
*              END;                                                     PL272500
*         IF J1E = 1                                                    PL272600
*         THEN DO;                                                      PL272700
*VAL_DEC2 = VALUED;                                                     PL272800
*FMAT_C1 = ROUND(VAL_DEC2,1);                                           PL272900
*                 J1D = 21;                                             PL273000
*                 GO TO $X9;                                            PL273100
*              END;                                                     PL273200
*         IF J1E = 2                                                    PL273300
*         THEN DO;                                                      PL273400
*VAL_DEC3 = VALUED;                                                     PL273500
*FMAT_C2 = ROUND(VAL_DEC3,2);                                           PL273600
*                 J1D = 21;                                             PL273700
*                 GO TO $X9;                                            PL273800
*              END;                                                     PL273900
*         IF J1E = 3                                                    PL274000
*         THEN DO;                                                      PL274100
*VAL_DEC4 = VALUED;                                                     PL274200
*FMAT_C3 = ROUND(VAL_DEC4,3);                                           PL274300
*                 J1D = 20;                                             PL274400
*                 GO TO $X9;                                            PL274500
*              END;                                                     PL274600
*         IF J1E = 4                                                    PL274700
*         THEN DO;                                                      PL274800
*VAL_DEC5 = VALUED;                                                     PL274900
*FMAT_C4 = ROUND(VAL_DEC5,4);                                           PL275000
*                 J1D = 20;                                             PL275100
*                 GO TO $X9;                                            PL275200
*              END;                                                     PL275300
*$X9:     J1D = J1D - J1C + 1;                                          PL275400
*         GO TO $EXIT;                                                  PL275500
*                                                                       PL275600
*    /* *********************************************************** */  PL275700
*    /*                                                             */  PL275800
*    /* THIS FINAL SUBROUTINE ADDS THE PRINT VALUES AT LEVEL I      */  PL275900
*    /* INTO THOSE OF LEVEL J, AND, FOR I NOT = 1, ADDS THE RECORD  */  PL276000
*    /* COUNT OF LEVEL I-1 INTO THAT OF LEVEL J-1,RESETTING THE     */  PL276100
*    /* SOURCE TO ZERO IN EACH CASE.                                */  PL276200
*    /*                                                             */  PL276300
*    /* *********************************************************** */  PL276400
*                                                                       PL276500
*AUG1:    DO K = 1 TO IPMF_VALS - 1;                                    PL276600
*         II2 = VAL_IDS(K);                                             PL276700
*         IF II2 = 0 THEN GO TO AUG2;                                   PL276800
*         IF ARKEY_GR04(II2) >  9-I  THEN GO TO AUG2;                   PL276900
*         VALUES(K,J) = VALUES(K,I);                                    PL277000
*         GO TO AUG3;                                                   PL277100
*AUG2:    VALUES(K,J) = VALUES(K,J) + VALUES(K,I);                      PL277200
*AUG3:                                                                  PL277300
*            VALUES(K,I) = 0;                                           PL277400
*         END;                                                          PL277500
*         IF  I = 1 THEN GO TO LEXIT;                                   PL277600
*         ARCNT(J-1) = ARCNT(J-1) + ARCNT(I-1);                         PL277700
*         ARCNT(I-1) = 0;                                               PL277800
*         GO TO LEXIT;                                                  PL277900
*                                                                       PL278000
*                                                                       PL278100
*    /* *********************************************************** */  PL278200
*    /*                                                             */  PL278300
*    /* WE FINALLY ARRIVE AT THE END OF THE PROCEDURE SRTOUT.       */  PL278400
*    /* IF THIS PROCEDURE IS BEING USED BY THE SORT, WE TEST THE    */  PL278500
*    /* COUNTS OF RECORDS INTO AND OUT OF THE SORT, AND SIGNAL      */  PL278600
*    /* WHETHER OR NOT TO PASS ANY MORE RECORDS.                    */  PL278700
*    /*                                                             */  PL278800
*    /* *********************************************************** */  PL278900
*                                                                       PL279000
*NEXTREC: IF SORTSW                                                     PL279100
*         THEN DO;                                                      PL279200
*                 IF SRTCNTIN = SRTCNTOUT                               PL279300
*                 THEN CALL IHESARC(8);                                 PL279400
*                 ELSE CALL IHESARC(4);                                 PL279500
*              END;                                                     PL279600
*                                                                       PL279700
*         RETURN;                                                       PL279800
*                                       /* END OF PROCEDURE SRTOUT. */  PL279900
*         END SRTOUT;                                                   PL280000
*                                                                       PL280100
*                                                                       PL280200
*         END;      /* GROPE */                                         PL280300
*                                                                       PL280400
         SPACE 5                                                        PL280500
        SCSEND PL                  TERMINATE CSET PARROTPL              PL280600
         END                                                            PL280700
         REPRO                                                          PL280800
 IDENTIFY PARROTPL('SOURCE OF PL/1 PARROTQ')                            PL280900
         END                                                            PL281000
