         TITLE 'PARROTE - DETAIL PROCESSING'                            E 000100
         MACRO                                                          E 000200
         $CB   &PRINT=OFF          MACRO TO GENERATE DSECTS             E 000300
         PUSH  PRINT               PRESERVE PRINT OPTIONS               E 000400
         PRINT &PRINT              SET PRINT OPTIONS FOR DSECTS         E 000500
               EJECT                                                    E 000600
         CBPREFIX ,                CONTROL BLOCK PREFIX                 E 000700
               EJECT                                                    E 000800
         CCB   ,                   CENTRAL CONTROL BLOCK                E 000900
               EJECT                                                    E 001000
         CSECTID ,                 CSECT IDENTIFICATION PREFIX          E 001100
               EJECT                                                    E 001200
         EQUATES ,                 GENERATE STANDARD EQUATES            E 001300
               EJECT                                                    E 001400
         FDB   ,                   FIELD DEFINITION BLOCK               E 001500
               EJECT                                                    E 001600
         FSA   ,                   FIELD STORAGE AREA                   E 001700
               EJECT                                                    E 001800
         KBD   ,                   KEY BREAK DESCRIPTOR                 E 001900
               EJECT                                                    E 002000
         LCD   ,                   LINE COMPONENT DESCRIPTOR            E 002100
               EJECT                                                    E 002200
         LIB   ,                   LABEL IDENTIFICATION BLOCK           E 002300
               EJECT                                                    E 002400
         OCB   ,                   OUTPUT CONTROL BLOCK                 E 002500
               EJECT                                                    E 002600
         PARROTT DSECT=YES         TRANSLATE TABLES                     E 002700
               EJECT                                                    E 002800
         PCB   ,                   PROCESSING CONTROL BLOCK             E 002900
               EJECT                                                    E 003000
         RST   ,                   RECORD SELECTION TEST DEF'N          E 003100
               EJECT                                                    E 003200
         SCE   ,                   SELECTION CRITERION ELEMENT          E 003300
         POP   PRINT               RESTORE ORIGINAL PRINT OPTIONS       E 003400
         MEND                                                           E 003500
         SPACE 4                                                        E 003600
PARROTE  CSECT                                                          E 003700
         $CB   ,                   GENERATE DSECTS AND EQUATES          E 003800
         EJECT                                                          E 003900
     SCSECT E                                                           E 004000
         USING PARROTE,R12         ESTABLISH PARROTE ADDRESSABILITY     E 004100
         USING CCBNTRY,R13         ESTABLISH CCB ADDRESSABILITY         E 004200
         SPACE 1                                                        E 004300
         ENTRY CNVFREE             EXTRACT VALUE OF FREE FORMAT FIELD   E 004400
         ENTRY DETAIL              DETAIL RECORD PROCESSING             E 004500
         ENTRY DETLHD              PRINT HEADINGS FOR ALL REPORT D/S    E 004600
         ENTRY DETLSPC             SET APPROPRIATE SPACING FOR DETAILS  E 004700
         ENTRY PARENDE             END IF CSECT                         E 004800
         ENTRY PDTRT               PACKED DECIMAL VALIDATION TABLE      E 004900
         TITLE 'PARROTE - DETAIL RECORD PROCESSING'                     E 005000
*********************************************************************** E 005100
*        DETAIL LEVEL PROCESSING:  MAIN-LINE                          * E 005200
*********************************************************************** E 005300
         SPACE 1                                                        E 005400
DETAIL   SUBIN SAVE=R4             PRESERVE RETURN ADDRESS              E 005500
         OI    $PROCESS,PROCDETL   SET FLAG TO SHOW DETAIL PROCESSING   E 005600
         MVI   $KEYNO+1,9          SET ''$K'' TO 9 TO INDICATE DETAIL   E 005700
         CBAL  R4,DETLINIT         INITIALISE ACCUMULATORS ETC          E 005800
         MVI   $PROCTYP,C'B'       SET PROCESSING TYPE INDICATOR TO 'B' E 005900
         TM    $PCBTYPS,PCBTYPEB   ARE THERE ANY B-TYPE PCB'S ?         E 006000
         BZ    DETAIL01            BYPASS PCB PROCESSING IF NOT         E 006100
         CBAL  R4,PCBPROC          PROCESS ANY B-TYPE PCB'S             E 006200
DETAIL01 CBAL  R4,DETLEXIT         PERFORM USER EXIT IF REQUIRED        E 006300
         CBAL  R4,DETLACUM         ACCUMULATE ANY NUMERIC FIELDS        E 006400
         MVI   $PROCTYP,C'C'       SET PROCESSING TYPE INDICATOR TO 'C' E 006500
         TM    $PCBTYPS,PCBTYPEC   ARE THERE ANY C-TYPE PCB'S           E 006600
         BZ    DETAIL02            BYPASS PCB PROCESSING IF NOT         E 006700
         CBAL  R4,PCBPROC          PROCESS ANY C-TYPE PCB'S             E 006800
DETAIL02 CBAL  R4,DETLEXIT         PERFORM USER EXIT IF REQUIRED        E 006900
         CBAL  R4,DETLCHAR         PRESERVE ANY CHARACTER FIELDS        E 007000
         MVI   $PROCTYP,C'D'       SET PROCESSING TYPE INDICATOR TO 'D' E 007100
         TM    $PCBTYPS,PCBTYPED   ARE THERE ANY D-TYPE PCB'S ?         E 007200
         BZ    DETAIL03            BYPASS PCB PROCESSING IF NOT         E 007300
         CBAL  R4,PCBPROC          PROCESS ANY D-TYPE PCB'S             E 007400
         EJECT                                                          E 007500
*********************************************************************** E 007600
*        DETAIL LEVEL PROCESSING:  MAIN-LINE ( CONT'D )               * E 007700
*********************************************************************** E 007800
         SPACE 1                                                        E 007900
DETAIL03 CBAL  R4,DETLEXIT         PERFORM USER EXIT IF REQUIRED        E 008000
         CBAL  R4,DETLHD           GO HEADINGS IF KEY-BREAK TRIGGERED   E 008100
         CBAL  R4,DETLSPC          SET UP LINE SPACING AS REQUIRED      E 008200
         CBAL  R4,DETLLCD          PROCESS ANY DETAIL LEVEL LCD'S       E 008300
         CBAL  R4,DETLOCB          OUTPUT ANY REQUIRED DETAIL LINES     E 008400
         CBAL  R4,DETLTOTL         ACCUMULATE DETAIL VALUES INTO TOTALS E 008500
         MVI   $PROCTYP,C'E'       SET PROCESS TYPE INDICATOR TO 'E'    E 008600
         TM    $PCBTYPS,PCBTYPEE   ARE THERE ANY E-TYPE PCB'S ?         E 008700
         BZ    DETAIL04            BYPASS PCB PROCESSING OF NOT         E 008800
         CBAL  R4,PCBPROC          PROCESS ANY E-TYPE PCB'S             E 008900
DETAIL04 CBAL  R4,DETLTW80         ACCUMULATE FOR TWENTY80 ANALYSES     E 009000
         NI    $PROCESS,FF-PROCDETL SET OFF DETAIL-LEVEL INDICATOR      E 009100
        SUBOUT RESTORE=R4          RESTORE AND RETURN TO CALLER         E 009200
         EJECT                                                          E 009300
*********************************************************************** E 009400
*        DETAIL LEVEL PROCESSING:  PERFORM USER EXIT IF REQUIRED      * E 009500
*********************************************************************** E 009600
         SPACE 1                                                        E 009700
DETLEXIT SUBIN SAVE=R4             PRESERVE RETURN ADDRESS              E 009800
         TM    $STATUS,STATEXIT    IS USER EXIT PROCESSING REQUIRED     E 009900
         BZ    DETLEXX             BR IF NOT TO ROUTINE EXIT            E 010000
         CBAL  R4,UXITCAL          PERFORM USER EXIT                    E 010100
DETLEXX SUBOUT RESTORE=R4          RESTORE AND RETURN TO CALLER         E 010200
         EJECT                                                          E 010300
*********************************************************************** E 010400
*        DETAIL LEVEL PROCESSING:  INITIALISE ACCUMULATORS ETC        * E 010500
*********************************************************************** E 010600
         SPACE 1                                                        E 010700
         USING FSANTRY,R7          ESTABLISH FSA ADDRESSABILITY         E 010800
         USING LIBNTRY,R8          ESTABLISH LIB ADDRESSABILITY         E 010900
DETLINIT SUBIN SAVE=R4             PRESERVE RETURN ADDRESS              E 011000
         L     R8,$LIBLIB          GET ADDRESS OF 1ST LIB IN CHAIN      E 011100
         B     *+8                 BYPASS FORWARD CHAINING              E 011200
DETLIN1  L     R8,LIBLIB           GET ADDRESS OF NEXT LIB              E 011300
         LTRR  R8                  PURIFY AND TEST FOR END OF CHAIN     E 011400
         BZ    DETLINX             GO TO EXIT IF END OF CHAIN           E 011500
         NULCB LIB,DETLIN1         GO GET NEXT LIB IF THIS NULLIFIED    E 011600
         TM    LIBTYPE,LIBTKEY+LIBTNAME IS THIS A KEY OR NAME FIELD     E 011700
         BNZ   DETLIN1             LOOP BACK FOR NEXT LIB IF KEY OR NAM E 011800
         TM    LIBTYPE,LIBTSCAL    IS THIS A SCALAR                     E 011900
         BO    DETLIN1             DO NOT INITIALISE IT IF SCALAR       E 012000
         TM    LIBTYPE,LIBTNUM+LIBTCHAR DOES THIS LIB DEFINE A FIELD    E 012100
         BZ    DETLIN1             LOOP BACK FOR NEXT LIB IF NOT        E 012200
         TM    LIBSW,MLIBNZD       WAS 'NO ZEROISE DETAIL' SPECIFIED    E 012300
         BO    DETLIN1             LOOP BACK FOR NEXT LIB IF YES        E 012400
         L     R7,LIBFSA           GET ADDRESS OF FSA                   E 012500
         TM    LIBTYPE,LIBTNUM     IS THIS A NUMERIC FIELD ACCUMULATOR  E 012600
         BZ    DETLIN2             BR IF NOT NUMERIC: MUST BE CHARACTER E 012700
         MVC   FSAVALUR,FPZERO     ZEROISE FLOATING POINT ACCUMULATOR   E 012800
         NI    LIBSW,FF-MLIBEXT    SET OF 'VALUE EXTRACTED' FLAG        E 012900
         B     DETLIN1             LOOP BACK TO GET NEXT LIB            E 013000
DETLIN2  TM    LIBSW,MLIBMOVE      IS CHAR FIELD PROPAGATED THRU KEYS   E 013100
         BO    DETLIN1             DO NOT NULLIFY IF YES: LOOP BACK     E 013200
         NI    LIBSW,FF-MLIBEXT    SET OF 'VALUE EXTRACTED' FLAG        E 013300
         MVI   FSACHAR,C' '        MOVE BLANK TO START OF STORAGE AREA  E 013400
         SR    R15,R15             ZEROISE WORK REGISTER                E 013500
         ICM   R15,1,LIBFLDL       GET EXECUTABLE LENGTH OF STORE       E 013600
         BZ    DETLIN1             LOOP BACK IF ONLY 1 BYTE TO BLANK    E 013700
         BCTR  R15,0               DECREMENT FOR PROPAGATION EXECUTE    E 013800
         EX    R15,NULLCHAR        BLANK OUT REMAINDER OF STORE         E 013900
         B     DETLIN1             LOOP BACK TO GET NEXT LIB            E 014000
DETLINX SUBOUT RESTORE=R4          RESTORE AND RETURN TO CALLER         E 014100
         DROP  R8                  DROP LIB  ADDRESSABILITY             E 014200
         DROP  R7                  DROP FSA ADDRESSABILITY              E 014300
         EJECT                                                          E 014400
*********************************************************************** E 014500
*        DETAIL LEVEL PROCESSING:  EXTRACT DETAIL NUMERIC FIELDS      * E 014600
*********************************************************************** E 014700
         SPACE 1                                                        E 014800
         USING LIBNTRY,R8          ESTABLISH LIB ADDRESSABILITY         E 014900
         USING FDBNTRY,R7          ESTABLISH FDB ADDRESSABILITY         E 015000
         USING FSANTRY,R1          ESTABLISH FSA ADDRESSABILITY         E 015100
DETLACUM SUBIN SAVE=R4             PRESERVE RETURN ADDRESS              E 015200
         L     R8,$LIBLIB          GET ADDRESS OF 1ST LIB ON CHAIN      E 015300
         B     *+8                 BYPASS FORWARD CHAINING              E 015400
DETLAC1  L     R8,LIBLIB           GET ADDRESS OF NEXT LIB              E 015500
         LTRR  R8                  PURIFY AND TEST FOR END OF CHAIN     E 015600
         BZ    DETLACX             EXIT IF END OF CHAIN                 E 015700
         NULCB LIB,DETLAC1         LOOP BACK FOR NEXT LIB IF THIS NULLI E 015800
         TM    LIBTYPE,LIBTKEY+LIBTNAME IS THIS A KEY OR NAME FIELD     E 015900
         BNZ   DETLAC1             LOOP BACK FOR NEXT LIB IF KEY OR NAM E 016000
         TM    LIBTYPE,LIBTSCAL    IS THIS A SCALAR                     E 016100
         BO    DETLAC1             NO FIELD TO EXTRACT IF SCALAR        E 016200
         TM    LIBTYPE,LIBTNUM     IS THIS A NUMERIC LIB                E 016300
         BZ    DETLAC1             LOOP BACK FOR NEXT LIB IF NOT NUMERI E 016400
         L     R7,LIBFDB           GET ADDRESS OF 1ST FDB               E 016500
         B     *+8                 BYPASS FORWARD CHAINING              E 016600
         EJECT                                                          E 016700
*********************************************************************** E 016800
*        DETAIL LEVEL PROCESSING:  EXTRACT NUMERIC FIELDS ( CONT'D )  * E 016900
*********************************************************************** E 017000
         SPACE 1                                                        E 017100
DETLAC2  L     R7,FDBFDB           GET ADDRESS OF NEXT FDB              E 017200
         LTRR  R7                  PURIFY AND TEST FOR END OF CHAIN     E 017300
         BZ    DETLAC1             LOOP BACK FOR NEXT LIB IF E-O-C      E 017400
         NULCB FDB,DETLAC2         GET NEXT FDN IF THIS ONE NULLIFIED   E 017500
         TM    FDBSW,MFDBINP       IS THIS A FIELD EXTRACTED FROM INPUT E 017600
         BZ    DETLAC2             LOOP BACK FOR NEXT FDN IF NOT        E 017700
         LTA   R10,FDBSCE,DETLAC3  GET ADDRESS OF 1ST SCE ( IF ANY )    E 017800
         CBAL  R4,SCEPROC          DETERMINE IF SELECTION CRITERIA SATI E 017900
         BNE   DETLAC2             LOOP BACK FOR NEXT FDB IF NOT        E 018000
DETLAC3  CBAL  R4,DETLCONV         CONVERT FIELD TO FLOATING POINT      E 018100
         L     R1,LIBFSA           GET ADDRESS OF FSA                   E 018200
         MVC   FSAVALUR,$FPFP      MOVE FLOATING POINT VALUE TO ACCUMUL E 018300
         OI    LIBSW,MLIBEXT       FLAG THAT VALUE EXTRACTED FROM REC   E 018400
         B     DETLAC2             LOOP BACK TO PROCESS NEXT FDB        E 018500
DETLACX SUBOUT RESTORE=R4          RESTORE AND RETURN TO CALLER         E 018600
         DROP  R1                  DROP FSA ADDRESSABILITY              E 018700
         DROP  R7                  DROP FDB ADDRESSABILITY              E 018800
         DROP  R8                  DROP LIB  ADDRESSABILITY             E 018900
         EJECT                                                          E 019000
*********************************************************************** E 019100
*        DETAIL LEVEL PROCESSING:  CONVERT INPUT FIELD TO FLOATING POIN E 019200
*********************************************************************** E 019300
         SPACE 1                                                        E 019400
         USING FDBNTRY,R7          ESTABLISH FDB ADDRESSABILITY         E 019500
DETLCONV SUBIN SAVE=(R4,R6)        PRESERVE RETURN ADDRESS              E 019600
         MVC   $FPNDEC,FDBNDEC     SET NO. OF DECIMAL PLACES            E 019700
         SR    R15,R15             ZEROISE WORK REGISTER                E 019800
         AH    R6,FDBFLDP          POINT R6 AT THE SOURCE FIELD         E 019900
         IC    R15,FDBFLDL         GET EXECUTABLE LENGTH  OF SOURCE     E 020000
         SR    R2,R2               ZEROISE REG 2 FOR LATER TRT'S        E 020100
         SR    R1,R1               ZEROISE WORK REGISTER                E 020200
         IC    R1,FDBFLDT          RETRIEVE FIELD TYPE                  E 020300
         BTYPE PREFIX=DETLCNV,DCHAR=X,NUM=N,PD=P,BIN=B,FLOAT=F,FREE=G   E 020400
         EJECT                                                          E 020500
*********************************************************************** E 020600
*        DETAIL LEVEL PROCESSING:  CONVERT INPUT FLD ( CONT'D )       * E 020700
*********************************************************************** E 020800
         SPACE 1                                                        E 020900
DETLCNVN EQU   *                   DISPLAY NUMERIC                      E 021000
         ZAP   $FPDEC,$ZERO        ASSUME SOURCE FIELD IS BLANK         E 021100
         EX    R15,DETLBCLC        IS THE SOURCE FIELD BLANK            E 021200
         BE    *+8                 BR IF BLANK                          E 021300
         EX    R15,DETLPACK        PACK SOURCE INTO FP WORK AREA        E 021400
         TRT   $FPDEC,PDTRT        TRT TO DETERMINE IF FIELF VALID      E 021500
         BC    12,DETLCERR         BR IF NO SIGN OR TOO EARLY IN FIELD  E 021600
         B     *(R2)               DETERMINE IF SIGN BYTE VALID         E 021700
         B     DETLCERR            BR - SIGN BYTE INVALID               E 021800
         B     DETLCNV1            GO CONVERT TO FLOATING POINT         E 021900
DETLCNVP EQU   *                   PACKED DECIMAL                       E 022000
         EX    R15,DETLPDT         EXECUTE VALIDATING TRT               E 022100
         BC    12,DETLCERR         ERROR IF NO SIGN OR TOO EARLY IN FLD E 022200
         B     *(R2)               DETERMINE IF SIGN BYTE VALID         E 022300
         B     DETLCERR            BR - SIGN BYTE INVALID               E 022400
         EX    R15,DETLZAP         ZAP SOURCE INTO FP WORK AREA         E 022500
         B     DETLCNV1            GO CONVERT TO FLOATING POINT         E 022600
DETLCNVB EQU   *                   BINARY ( LENGTH 1 - 4 )              E 022700
         XC    $FPBIN,$FPBIN       ZEROISE WORK AREA                    E 022800
         LA    R1,$FPBIN+3         POINT AT END OFBINARY WORK AREA      E 022900
         SR    R1,R15              DECREMENT TO ALLOW FOR LGTH OF SOURC E 023000
         EX    R15,DETLBIN         MOVE BINARY VALUE TO WORK AREA       E 023100
         L     R1,$FPBIN           GET BINARY VALUE IN REGISTER         E 023200
         CVD   R1,$WRKDUBL         CONVERT VALUE TO PACKED DECIMAL      E 023300
         ZAP   $FPDEC,$WRKDUBL     ZAP VALUE INTO FP WORK AREA          E 023400
         B     DETLCNV1            GO CONVERT TO FLOATING POINT         E 023500
DETLCNVG EQU   *                   FREE FORMAT DISPLAY NUMERIC          E 023600
         CBAL  R4,CNVFREE          EXTRACT VALUE FROM FREE FORMAT FIELD E 023700
         BNE   DETLCERR            BR IF ANY ERROR FOUND                E 023800
         B     DETLCNV1            GO CONVERT TO FLOATING POINT         E 023900
         EJECT                                                          E 024000
*********************************************************************** E 024100
*        DETAIL LEVEL PROCESSING:  CONVERT INPUT FIELD ( CONT'D )     * E 024200
*********************************************************************** E 024300
         SPACE 1                                                        E 024400
DETLCNVF EQU   *                   FLOATING POINT                       E 024500
         XC    $FPFP,$FPFP         CLEAR WORK AREA ( LEST NOT 8 BYTES ) E 024600
         EX    R15,DETLFP          MOVE SOURCE FP FIELD TO WORK AREA    E 024700
         B     DETLCNVX            BYPASS UNNECESSARY FP CONVERSION     E 024800
DETLCERR L     R5,SYSPRINT+IOPSRECA RETRIEVE SYSPRINT BUFFER ADDRESS    E 024900
         CCNO  LINE01,LABEL=FDBLABL,REG=R7 SET UP & ISSUE ERROR MSG     E 025000
         ZAP   $FPDEC,$ZERO        ZEROISE FAULTY VALUE TO PREVENT ABND E 025100
         TM    SWPARM2,MPRMVAL     ARE ALL BAD FIELDS TO BE ZEROISED    E 025200
         BO    DETLCNV1            BR IF YES TO CONVERT TO FP           E 025300
         IC    R9,CNTVALID         RETRIEVE CURRENT COUNT OF BAD DATA   E 025400
         LA    R9,1(,R9)           INCREMENT COUNT                      E 025500
         STC   R9,CNTVALID         REPLACE UPADTED COUNT OF ERRORS      E 025600
         CLI   CNTVALID,X'00'      HAVE WE OVERFLOAWED ACCUM            E 025700
         BNE   DETLCNV1            BR IF NOT                            E 025800
         ABEND 64                  TELL OF > 256 BAD DATA FIELDS        E 025900
DETLCNV1 CBAL  R4,CNVTOFP          CONVERT VALUE TO FLOATING POINT      E 026000
DETLCNVX SUBOUT RESTORE=(R4,R6)    RESTORE AND RETURN TO CALELR         E 026100
         DROP  R7                  DROP FDB  ADDRESSABILITY             E 026200
         EJECT                                                          E 026300
*********************************************************************** E 026400
*        DETAIL LEVEL PROCESSING:  EXTRACT VALUE FROM FREE FORMAT FLD * E 026500
*********************************************************************** E 026600
         SPACE 1                                                        E 026700
*        EXTRACT VALUE FROM FREE FORMAT DISPLAY NUMERIC FIELD.          E 026800
         SPACE 1                                                        E 026900
*        UPON ENTRY :-                                                  E 027000
*         R6  - ADDRESS OF FIELD                                        E 027100
*         R15 - EXECUTALE LENGTH OF FIELD                               E 027200
         SPACE 1                                                        E 027300
*        UPON EXIT :-                                                   E 027400
*         $FPNDEC - NO. OF DECIMAL PLACES IN VALUE                      E 027500
*         $FPDEC  - EXTRACTED VALUE IN PACKED DECIMAL                   E 027600
         SPACE 1                                                        E 027700
         USING PARROTT,R9          ESTABLISH PARROTT ADDRESSABILITY     E 027800
CNVFREE  SUBIN ,                   ENTER ROUTINE                        E 027900
         MVI   $FPNDEC,0           SET NO. OF DECIMALS TO ZERO          E 028000
         ZAP   $FPDEC,$ZERO        ZEROISE VALUE LEST NON-NUMERIC       E 028100
         EX    R15,DETLWORK        MOVE FIELD TO WORK AREA              E 028200
         L     R9,$VPARTT          GET ADDRESS OF PARROTT CSECT         E 028300
         MVI   FREESIGN,C'+'       ASSUME THAT FIELD IS POSITIVE        E 028400
         MVI   STRTAB,X'00'        SET X'00' IN START OF TABLE ...      E 028500
         MVC   STRTAB+1(255),STRTAB ... AND PROPAGATE THROUGH           E 028600
         SR    R14,R14             ZEROISE WORK REGISTER                E 028700
         IC    R14,=C'-'           INSERT '-' IN WORK REG               E 028800
         STC   R14,STRTAB(R14)     SET TABLE TO DETECT '-' SIGNS        E 028900
         EX    R15,FINDSIGN        DETERMINE IF THERE ANY MINUS SIGNS   E 029000
         BL    *+8                 BR IF NONE FOUND                     E 029100
         MVI   FREESIGN,C'-'       PRESERVE SIGN FOR LATER              E 029200
         EX    R15,TRFREE          TRANSLATE FIELD LEAVING ONLY 0-9 & . E 029300
*                                   NO. MAY NOW CONTAIN EMBEDDED BL'S.  E 029400
*                                    E.G. '$9,999,999.123   '           E 029500
*                                         ' 9 999 999.123   '           E 029600
         EX    R15,FREEBL          DETERMINE IF FIELD IS NOW BLANK      E 029700
         BE    DETLGX              EXIT FROM ROUTINE IF ALL BLANK       E 029800
         LA    R1,$WRKAREA         POINT R1 AT START OF WORK AREA       E 029900
         LR    R14,R15             SET R14 TO EXECUTABLE LENGTH         E 030000
         LA    R2,$WRKAREA         POINT R2 AT START OF WORK AREA       E 030100
         AR    R2,R15              POINT R2 AT END OF FIELD IN W/A      E 030200
         BCTR  R14,0               DECREMENT R14 FOR SHUFFLE LENGTH     E 030300
DETLG01  CLI   0(R1),C' '          IS THIS POSITION BLANK               E 030400
         BNE   DETLG02             BR IF NOT BLANK                      E 030500
         EX    R14,CLCBLWA         IS REMAINDER OF FIELD BLANK          E 030600
         BE    DETLG03             BR IF YES: COMPRESSIOM COMPLETE      E 030700
         EX    R14,MVCUPWA         MOVE REMAINDER BACK OVER THIS BLANK  E 030800
         MVI   0(R2),C' '          INSERT TRAILING BLANK                E 030900
         B     DETLG01             LOOP BACK TO SEE IF STILL BLANK      E 031000
DETLG02  LA    R1,1(,R1)           INCREMENT TO NEXT POSITION           E 031100
         BCTR  R14,0               DECREMENT SHUFFLE LENGTH             E 031200
         BCT   R15,DETLG01         LOOP BACK IF ANY BYTES LEFT          E 031300
         EJECT                                                          E 031400
*********************************************************************** E 031500
*        DETAL LEVEL PROCESSING:   EXTRACT VALUE FROM FREE FORMAT FLD * E 031600
*********************************************************************** E 031700
         SPACE 1                                                        E 031800
*                                  R1 POINTS AT END + 1                 E 031900
DETLG03  LA    R15,$WRKAREA        POINT R15 AT START OF W/A            E 032000
         SR    R1,R15              DETERMINE TRUE LENGTH OF FIELD       E 032100
         BCTR  R1,0                OBTAIN EXECUTABLE LENGTH             E 032200
         LR    R15,R1              SET EXECUTABLE LENGTH IN REG 15      E 032300
         L     R9,$VPARTT          REFRESH PARROTT ADDRESS JUST IN CASE E 032400
         MVI   STRTAB,X'00'        SET LOW VALUES AT START OF TABLE ... E 032500
         MVC   STRTAB+1(255),STRTAB ... AND PROPAGATE THROUGH           E 032600
         SR    R14,R14             ZEROISE WORK REGISTER                E 032700
         IC    R14,C'.'            SET '.' IN WORK REG                  E 032800
         STC   R14,STRTAB(R14)     SET TABLE TO DETECT '.'              E 032900
         EX    R15,FINDSIGN        LOCATE PERIOD, IF ANY                E 033000
         BC    8,DETLG05           BR IF NO PERIOD                      E 033100
         BC    4,DETLG04           BR IF EMBEDDED PERIOD                E 033200
*                                  MUST HAVE A TRAILING PERIOD          E 033300
         BCTR  R15,0               ADJUST LENGTH TO DROP PERIOD         E 033400
         B     DETLG05             GO PROCESS NUMERIC FIELD             E 033500
DETLG04  LR    R14,R15             PRESERVE EXECUTABLE ELNGTH           E 033600
         LA    R3,$WRKAREA         POINT AT START OF FIELD              E 033700
         SR    R1,R3               DETERMINE DISPLACEMENT OF PERIOD     E 033800
         SR    R15,R1              COMPUTE NO. OF DECIMAL PLACES        E 033900
         STC   R15,$FPNDEC          ... AND SET FOR FP CONVERSION       E 034000
         LA    R1,0(R3,R1)         RECALCULATE ADDRESS OF PERIOD        E 034100
         BCTR  R15,0               GET EXECUTABLE LENGTH OF DECIMALS    E 034200
         EX    R15,MVCUPWA         SHUFFLE LEFT OVER PERIOD             E 034300
         LR    R15,R14             REFRESH ORIGINAL EXECUTABLE LENGTH   E 034400
         BCTR  R15,0               DECREMENT OT ALLOW FOR DROPED PERIOD E 034500
DETLG05  LA    R6,$WRKAREA         POINT REG6 AT FIELD IN WORK AREA     E 034600
         EX    R15,DETLPACK        PACK INTO $FPDEC                     E 034700
         SR    R2,R2               ZEROISE REG2 READY FOR TRT           E 034800
         TRT   $FPDEC,PDTRT        TRT TO DETERMINE IF FIELD IS VALID   E 034900
         BC    12,DETLGY           BR IF NO SIGN OR TOO EARLY           E 035000
         B     *(R2)               DETERMINE IF SIGN BYTE VALID         E 035100
         B     DETLGY              BR - SIGN BYTE INVALID               E 035200
         CLI   FREESIGN,C'-'       DETERMINE IF VALUE IS NEGATIVE       E 035300
         BNE   *+10                BR IF NOT MINUS SIGN                 E 035400
         MP    $FPDEC,=P'-1'       REVERSE SIGN SO NEGATIVE             E 035500
DETLGX   CLI   *,X                 SET COND CODE TO SHOW SUCCESS        E 035600
         B     *+8                 BYPASS RESETTING COND CODE           E 035700
DETLGY   CLI   *,Y                 SET COND CODE TO SHOW ERROR          E 035800
        SUBOUT ,                   RETURN TO CALLER                     E 035900
         DROP  R9                  DROP PARROTT ADDRESSABILITY          E 036000
         EJECT                                                          E 036100
*********************************************************************** E 036200
*        DETAIL LEVEL PROCESSING:  EXTRACT CHARACTER FIELDS           * E 036300
*********************************************************************** E 036400
         SPACE 1                                                        E 036500
         USING LIBNTRY,R8          ESTABLISH LIB ADDRESSABILITY         E 036600
         USING FDBNTRY,R7          ESTABLISH FDB ADDRESSABILITY         E 036700
         USING FSANTRY,R1          ESTABLISH FSA ADDRESSABILITY         E 036800
DETLCHAR SUBIN SAVE=(R4,R6)        PRESERVE RETURN ADDRESS              E 036900
         L     R8,$LIBLIB          GET ADDRESS OF 1ST LIB ON CHAIN      E 037000
         B     *+8                 BYPASS FORWARD CHAINING              E 037100
DETLCH1  L     R8,LIBLIB           GET ADDRESS OF NEXT LIB              E 037200
         LTRR  R8                  PURIFY AND TEST FOR END OF CHAIN     E 037300
         BZ    DETLCHX             EXIT IF END OF CHAIN                 E 037400
         NULCB LIB,DETLCH1         GET NEXT LIB IF THIS IS NULLIFIED    E 037500
         TM    LIBTYPE,LIBTNAME+LIBTKEY IS THIS A KEY OR NAME FIELD     E 037600
         BNZ   DETLCH1             LOOP BACK FOR NEXT LIB IF KEY OR NAM E 037700
         TM    LIBTYPE,LIBTCHAR    IS THIS A CHARACTER LIB              E 037800
         BZ    DETLCH1             LOOP BACK FOR NEXT LIB IF NOT        E 037900
         L     R7,LIBFDB           GET ADDRESS OF 1ST FDB FOR THIS LIB  E 038000
         B     *+8                 BYPASS FORWARD CHAINING              E 038100
         EJECT                                                          E 038200
*********************************************************************** E 038300
*        DETAIL LEVEL PROCESSING:  EXTRACT CHARACTER FIELDS ( CONT'D )* E 038400
*********************************************************************** E 038500
         SPACE 1                                                        E 038600
DETLCH2  L     R7,FDBFDB           GET ADDRESS OF NEXT FDB              E 038700
         LTRR  R7                  PURIFY AND TEST FOR END OF CHAIN     E 038800
         BZ    DETLCH1             LOOP BACK FOR NEXT LIB IF E-O-C      E 038900
         NULCB FDB,DETLCH2         GET NEXT FDB IF THIS IS NULLIFIED    E 039000
         TM    FDBSW,MFDBINP       IS THIS A FIELD EXTRACTED FROM INPUT E 039100
         BZ    DETLCH2             LOOP BACK FOR NEXT FDB IF NOT        E 039200
         SUBLR R6                  REFRESH R6 FROM SUBIN SAVE AREA      E 039300
         LTA   R10,FDBSCE,DETLCH3  GET ADDRESS OF 1ST SCE ( IF ANY )    E 039400
         CBAL  R4,SCEPROC          DETERMINE IF SELECTION CRITERIA SATS E 039500
         BNE   DETLCH2             LOOP BACK FOR NEXT FDB IF NOT        E 039600
DETLCH3  L     R1,LIBFSA           GET ADDRESS OF FSA                   E 039700
         AH    R6,FDBFLDP          POINT R6 AT THE SOUCE FIELD          E 039800
         IC    R15,FDBFLDL         RETRIEVE EXECUTABLE LENGTH           E 039900
         EX    R15,DETLMOVE        MOVE SOURCE FIELD TO STORAGE AREA    E 040000
         OI    LIBSW,MLIBEXT       FLAG THAT VALUE EXTRACTED FROM REC   E 040100
         B     DETLCH2             LOOP BACK FOR NEXT FDB               E 040200
DETLCHX SUBOUT RESTORE=(R4,R6)     RESTORE AND RETURN TO CALLER         E 040300
         DROP  R1                  DROP FSA ADDRESSABILITY              E 040400
         DROP  R7                  DROP FDB ADDRESSABILITY              E 040500
         DROP  R8                  DROP LIB  ADDRESSABILITY             E 040600
         EJECT                                                          E 040700
*********************************************************************** E 040800
*        DETAIL LEVEL PROCESSING:  PRODUCE HEADINGS IF REQUIRED       * E 040900
*********************************************************************** E 041000
         SPACE 1                                                        E 041100
*        THIS ROUTINE WRITES HEADINGS TO ANY REPORT DATA SETS IF        E 041200
*         KEY-BREAK PROCESSING TRIGGERED A SKIP TO A NEW PAGE.  NOTE    E 041300
*         THAT THIS CANNOT BE DONE WITHIN KEY-BREAK PROCESSING ITSELF   E 041400
*         BECAUSE NOT ALL THE FIELDS FOR ANY HEADING-TYPE LCD'S WILL    E 041500
*         NECESSARILY BE AVAILABLE AT THAT TIME.                        E 041600
         SPACE 1                                                        E 041700
         USING OCBNTRY,R7          ESTABLISH OCB ADDRESSABILITY         E 041800
DETLHD   SUBIN SAVE=R4             PRESERVE RETURN ADDRESS              E 041900
         TM    $PROCESS,PROCKEYH   ARE HEADINGS REQUIRED                E 042000
         BZ    DETLHDX             GO TO EXIT IF NOT                    E 042100
         NI    $PROCESS,FF-PROCKEYH SET OFF FLAG THAT TRIGGERS HEADINGS E 042200
         L     R7,$OCBOCB          GET ADDRESS OF 1ST OCB ( 'PRINT' )   E 042300
         B     *+8                 BYPASS FORWARD CHAINING              E 042400
DETLHD1  L     R7,OCBOCB           GET ADDRESS OF NEXT OCB              E 042500
         LTRR  R7                  PURIFY AND TEST FOR END OF CHAIN     E 042600
         BZ    DETLHDX             GO TO EXIT IF END OF CHAIN           E 042700
         NULCB OCB,DETLHD1         GET NEXT OCB IF THIS ONE NULLIFIED   E 042800
         TM    OCBSW,MOCBREPT      IS THIS A REPORT DATA SET            E 042900
         BZ    DETLHD1             LOOP BACK FOR NEXT OCB IF NOT REPORT E 043000
         TM    OCBSW,MOCB2080      IS THIS A TWENTY80 REPORT D/S        E 043100
         BO    DETLHD1             LOOP BACK FOR NEXT OCB IF YES        E 043200
         L     R2,OCBIOSW          GET ADDRESS OF ASSOCIATED DCBSW      E 043300
         L     R5,IOPSRECA(R2)     GET CURRENT BUFFER ADDRESS           E 043400
         CBAL  R4,WRITEH           PERFORM HEADING ROUTINE              E 043500
         NI    OCBSW,FF-MOCBTOTL   SET OFF 'TOTAL PRINTED' INDICATOR    E 043600
         B     DETLHD1             LOOP BACK FOR NEXT OCB               E 043700
DETLHDX SUBOUT RESTORE=R4          RESTORE AND RETURN TO CALLER         E 043800
         DROP  R7                  DROP OCB ADDRESSABILITY              E 043900
         EJECT                                                          E 044000
*********************************************************************** E 044100
*        DETAIL LEVEL PROCESSING:  SPACE AS NECESSARY                 * E 044200
*********************************************************************** E 044300
         SPACE 1                                                        E 044400
*        PARROT HAS COMPLEX CRITERIA DICTATING LINE SPACING.  IN THE    E 044500
*         CASE OF A DETAIL LINE, IF THE LAST LINE WRITTEN WAS A TOTAL   E 044600
*         LINE, THEN THE DETAIL LINE SHOULD BE PRECEDED BY THREE BLANK  E 044700
*         LINES IF THE REPORT IS DOUBLE OR TRIPLE SPACED, AND PRECEDED  E 044800
*         BY TWO BLANK LINES IF THE REPORT IS SINGLE SPACED.            E 044900
*        NOTE THAT THIS ROUTINE IS INVOKED REGARDLESS OF WHETHER OR NOT E 045000
*         DETAIL LINES ARE BEING PRINTED, AND THUS APPLIES EQUALLY TO   E 045100
*         DETAIL LINES AND TO THE LOWEST LEVEL OF KEY IF DETAILS ARE    E 045200
*         NOT BEING PRINTED.                                            E 045300
         SPACE 1                                                        E 045400
         USING OCBNTRY,R7          ESTABLISH OCB ADDRESSABILITY         E 045500
DETLSPC  SUBIN SAVE=R4             PRESERVE RETURN ADDRESS              E 045600
         LTA   R7,$OCBOCB          GET ADDRESS OF 1ST OCB ('PRINT')     E 045700
         B     *+8                 BYPASS FORWARD CHAINING              E 045800
DETLSP1  LTA   R7,OCBOCB,DETLSPX   GET ADDRESS OF NEXT OCB              E 045900
         NULCB OCB,DETLSP1         GET NEXT OCB IF THIS NULLIFIED       E 046000
         TM    OCBSW,MOCBREPT+MOCBTOTL IS THIS A REPORT DATA SET & JUST E 046100
*                                  PRINTED A TOTAL LINE.                E 046200
         BNO   DETLSP1             LOOP BACK FOR NEXT IF NOT            E 046300
         L     R2,OCBIOSW          RETRIEVE ADDRESS OF ASSOCIATED DCBSW E 046400
         L     R5,IOPSRECA(R2)     GET ADDRESS OF CURRENT BUFFER        E 046500
         MVI   0(R5),SPCE2AFT      ESTABLISH DOUBLE SPACE               E 046600
         CLI   OCBPCC,SPCE1AFT     IS THE REPORT SINGLE SPACED          E 046700
         BE    *+8                 BR IF YES                            E 046800
         MVI   0(R5),SPCE3AFT      ESTABLISH TRIPLE SPACE               E 046900
         CBAL  R4,WRITEP,NESTED=YES SPACE THREE BLANK LINES             E 047000
         NI    OCBSW,FF-MOCBTOTL   SET OFF 'TOTAL PRINTED' INDICATOR    E 047100
         B     DETLSP1             LOOP BACK FOR NEXT OCB               E 047200
DETLSPX SUBOUT RESTORE=R4          RESTORE AND RETURN TO CALLER         E 047300
         DROP  R7                  DROP OCB ADDRESSABILITY              E 047400
         EJECT                                                          E 047500
*********************************************************************** E 047600
*        DETAIL LEVEL PROCESSING:  PROCESS DETAIL LEVEL LCD'S         * E 047700
*********************************************************************** E 047800
         SPACE 1                                                        E 047900
         USING LCDNTRY,R8          ESTABLISH LCD ADDRESSABILITY         E 048000
DETLLCD  SUBIN SAVE=R4             PRESERVE RETURN ADDRESS              E 048100
         TM    $STATUS,STATDETL    ARE ANY DETAIL LINES REQUIRED        E 048200
         BZ    DETLLCDX            BYPASS PROCESSING IF NOT             E 048300
         TM    $DETLSW,MDET$1+MDET$2 ARE DETAIL LINES SUPPRESSED        E 048400
         BNZ   DETLLCDX            BYPASS PROCESSING IF YES             E 048500
         L     R8,$LCDDETL         GET ADDRESS OF 1ST LCD IN DETAIL CHA E 048600
         B     *+8                 BYPASS FORWARD CHAINING              E 048700
DETLLCD1 L     R8,LCDLCD           GET ADDRESS OF NEXT LCD              E 048800
         LTRR  R8                  PURIFY AND TEST FOR END OF CHAIN     E 048900
         BZ    DETLLCDX            EXIT IF END OF CHAIN                 E 049000
         CBAL  R4,PROCLCD,NESTED=YES PROCESS SINGLE LCD                 E 049100
         BL    DETLLCDX            TERMINATE IF EXECUTED 'DELETE'       E 049200
         B     DETLLCD1            LOOP BACK FOR NEXT LCD               E 049300
DETLLCDX SUBOUT RESTORE=R4         RESTORE AND RETURN TO CALLER         E 049400
         DROP  R8                  DROP LCD  ADDRESSABILITY             E 049500
         EJECT                                                          E 049600
*********************************************************************** E 049700
*        DETAIL LEVEL PROCESSING:  OUTPUT ANY REQUIRED DETAIL LINES   * E 049800
*********************************************************************** E 049900
         SPACE 1                                                        E 050000
         USING OCBNTRY,R7          ESTABLISH OCB ADDRESSABILITY         E 050100
DETLOCB  SUBIN SAVE=R4             PRESERVE RETURN ADDRESS              E 050200
         TM    $STATUS,STATDETL    ARE ANY DETAIL LINES REQUIRED        E 050300
         BZ    DETLOCBX            BYPASS PROCESSING IF NOT             E 050400
         TM    $DETLSW,MDET$1+MDET$2 ARE DETAIL LINES SUPPRESSED        E 050500
         BNZ   DETLOCBX            EXIT IF DETAIL LINES SUPPRESSED      E 050600
         LTA   R7,$OCBOCB          GAT ADDRESS OF 1ST OCB ('PRINT')     E 050700
         B     *+8                 BYPASS FORWARD CHAINING              E 050800
DETLOCB1 LTA   R7,OCBOCB,DETLOCB3  GET ADDRESS OF NEXT OCB              E 050900
         NULCB OCB,DETLOCB1        GET NEXT OCB IF THIS IS NULLIFIED    E 051000
         TM    OCBSW,MOCBDETL      DOES THIS OCB USE DETAIL LINES       E 051100
         BZ    DETLOCB1            LOOP BACK FOR NEXT OCB IF NOT        E 051200
         TM    OCBSW,MOCBRITE      IS THERE A WRITE PENDING             E 051300
         BZ    DETLOCB1            LOOP BACK FOR NEXT IF NOT            E 051400
         TM    OCBSW,MOCBREPT      IS THIS A REPORT DATA SET            E 051500
         BO    DETLOCB2            BR IF IT IS A REPORT DATA SET        E 051600
         CBAL  R4,WRITE            ISSUE PUT TO NON-REPORT DATA SET     E 051700
         B     DETLOCB1            LOOP BACK FOR NEXT OCB               E 051800
DETLOCB2 CBAL  R4,WRITEP,NESTED=YES WRITE LINE OF REPORT                E 051900
         B     DETLOCB1            LOOP BACK FO NEXT OCB                E 052000
DETLOCB3 CBAL  R4,KEYBLCT          RESET LINE COUNTS AS NECESSARY       E 052100
DETLOCBX SUBOUT RESTORE=R4         RESTORE AND RETURN TO CALLER         E 052200
         DROP  R7                  DROP OCB  ADDRESSABILITY             E 052300
         EJECT                                                          E 052400
*********************************************************************** E 052500
*        DETAIL LEVEL PROCESSING:  ADD DETAIL VALUES INTO MINOR KEY   * E 052600
*********************************************************************** E 052700
         SPACE 1                                                        E 052800
*        THIS ROUTINE ADDS OR MOVES NUMERIC VALUES FROM THE DETAIL      E 052900
*         LEVEL ACCUMULATORS INTO THE ACCUMULATORS FOR THE MINOR KEY.   E 053000
         SPACE 1                                                        E 053100
         USING LIBNTRY,R8          ESTABLISH LIB ADDRESSABILITY         E 053200
         USING FSANTRY,R7          ESTABLISH FSA ADDRESSABILITY         E 053300
DETLTOTL SUBIN ,                   ENTER ROUTINE                        E 053400
         TM    $DETLSW,MDET$2      ARE VALUES NOT TO BE ROLLED UPWARDS  E 053500
         BO    DETLTOTX            EXIT IF VALUES NOT TO BE ROLLED UP   E 053600
         LTA   R8,$LIBLIB          GET ADDRESS OF 1ST LIB               E 053700
         B     *+8                 BYPASS FORWARD CHAINING              E 053800
DETLTOT1 LTA   R8,LIBLIB,DETLTOTX  GET ADDRESS OF NEXT LIB              E 053900
         NULCB LIB,DETLTOT1        GET NEXT LIB IF THIS NULLIFIED       E 054000
         TM    LIBTYPE,LIBTNUM     IS THIS A NUMERIC LIB                E 054100
         BZ    DETLTOT1            LOOP BACK FOR NEXT LIB IF NOT NUMERI E 054200
         TM    LIBTYPE,LIBTSCAL+LIBTKEY IS THIS A KEY OR A SCALAR       E 054300
         BNZ   DETLTOT1            LOOP BACK IF YES: NOTHING TO ACCUMUL E 054400
         TM    LIBSW,MLIBNROL      ARE VALUES NOT TO BE ROLLED UPWARDS  E 054500
         BO    DETLTOT1            LOOP BACK FOR NEXT IF NOT            E 054600
         LTA   R7,LIBFSA           GET ADDRESS OF ASSOCIATED FSA        E 054700
         LH    R1,$NUMKEYS         GET NO. OF KEYS DEFINED              E 054800
         SLL   R1,3                MULTIPLY BY 8 FOR DOUBLEWORD INDEX   E 054900
         LA    R1,FSAVALUT(R1)     POINT R1 AT ACCUM FOR MINOR KEY      E 055000
         MVC   $FPVAL1,FSAVALUR    MOVE DETAIL VALUE TO FP ACCUMULATOR  E 055100
         MVC   $FPVAL2,0(R1)       MOVE MINOR KEY VALUE TO FP ACCUM'R   E 055200
         LD    FPR0,$FPVAL2        MOVE MINOR KEY VALUE TO FP REGISTER  E 055300
         AD    FPR0,$FPVAL1        ADD DETAIL VALUE TO MINOR KEY VALUE  E 055400
         STD   FPR0,$FPFP          PRESERVE UPDATED VALUE IN FP ACCUM'R E 055500
         MVC   0(8,R1),$FPFP       MOVE UPDATED VALUE TO MINOR KEY ACCU E 055600
         TM    LIBSW,MLIBMOVE      IS VALUE TO BE MOVED, ^ACCUMULATED   E 055700
         BZ    DETLTOT1            LOOP BACK FOR NEXT LIB IF NOT        E 055800
         CLC   LIBMKEYN,$NUMKEYS+1 DOES MOVE APPLY TO MINOR KEY         E 055900
         BH    *+10                BR IF MOVE DOES NOT APPLY            E 056000
         MVC   0(8,R1),FSAVALUR    MOVE DETAIL VALUE INTO MINOR KEY ACC E 056100
         B     DETLTOT1            LOOP BAC FOR NEXT LIB                E 056200
DETLTOTX NI    $DETLSW,FF-MDET$1-MDET$2 SET OFF PRINT & ROLL SUPPRESS   E 056300
        SUBOUT ,                   RETURN TO CALLER                     E 056400
         DROP  R7                  DROP FSA ADDRESSABILITY              E 056500
         DROP  R8                  DROP LIB ADDRESSABILITY              E 056600
         EJECT                                                          E 056700
*********************************************************************** E 056800
*        DETAIL LEVEL PROCESSING:  ACCUMULATE FOR TWENTY80 ANALYSES   * E 056900
*********************************************************************** E 057000
         SPACE 1                                                        E 057100
DETLTW80 SUBIN SAVE=R4             PRESERVE RETURN ADDRESS              E 057200
         TM    $STATUS2,STAT2080   IS TWENTY80 PROCESSING REQUIRED      E 057300
         BZ    DETLTW8X            EXIT IF NOT REQUIRED                 E 057400
         CBAL  R4,TW80ADD          PERFROM NECESSARY ACCUMULATION       E 057500
DETLTW8X SUBOUT RESTORE=R4         RESTORE AND RETURN TO CALLER         E 057600
         TITLE 'PARROTE - EXECUTABLE INSTRUCTIONS'                      E 057700
*********************************************************************** E 057800
*        EXECUTABLE INSTRUCTIONS                                      * E 057900
*********************************************************************** E 058000
         SPACE 1                                                        E 058100
         USING FSANTRY,R7          ESTABLISH FSA ADDRESSABILITY         E 058200
NULLCHAR MVC   FSACHAR+1(0),FSACHAR PROPAGATE BLANKS THROUGH FIELD      E 058300
         DROP  R7                  DROP FSA ADDRESSABILITY              E 058400
         USING FSANTRY,R1          ESTABLISH FSA ADDRESSABILITY         E 058500
DETLMOVE MVC   FSACHAR(0),0(R6)    MOVE SOURCE FIELD TO STORE           E 058600
         DROP  R1                  DROP FSA ADDRESSABILITY              E 058700
DETLZAP  ZAP   $FPDEC,0(0,R6)      ZAP PACKED DECIMAL FLD INTO WORK ARE E 058800
DETLPDT  TRT   0(0,R6),PDTRT       TRT TO DETERMINE IF DATA VALID PD    E 058900
DETLFP   MVC   $FPFP(0),0(R6)      MOVE SOURCE FP NO TO WORK AREA       E 059000
DETLBIN  MVC   0(0,R1),0(R6)       MOVE SOURCE BINARY NO. TO WORK AREA  E 059100
DETLPACK PACK  $FPDEC,0(0,R6)      PACK SOURCE DISPLAY FIELD INTO WORK  E 059200
DETLBCLC CLC   0(0,R6),$SPACES     IS SOURCE FIELD BLANK                E 059300
KEYMOVE  MVC   0(0,R2),0(R3)       MOVE NEW KEY TO CURRENT              E 059400
KEYCOMP  CLC   0(0,R3),0(R2)       COMPARE CHARACTER KEYS (NEW:OLD)     E 059500
MVCNAMEN MVC   0(0,R1),0(R6)       MOVE NEW NAME FIELD TO STORE         E 059600
MVCCKEYN MVC   0(0,R1),0(R6)       MOVE NEW (CHAR) KEY TO STORE         E 059700
DETLWORK MVC   $WRKAREA(0),0(R6)   MOVE FREE FORMAT FIELD TO W/A        E 059800
TRFREE   TR    $WRKAREA(0),FREETR  DELETE ALL BUT 0-9 AND '.'           E 059900
         USING PARROTT,R9          ESTABLISH PARROTT ADDRESSABILITY     E 060000
FINDSIGN TRT   $WRKAREA(0),STRTAB  LOCATE '-' IN FREE FORMAT FIELD      E 060100
FINDPER  TRT   0(0,R3),STRTAB      LOCATE PERIOD IN COMPRESSED STRING   E 060200
         DROP  R9                  DROP PARROTT ADDRESSABILITY          E 060300
CLCBLWA  CLC   1(0,R1),0(R1)       DETERMINE IF REMAINDER IS BLANK      E 060400
MVCUPWA  MVC   0(0,R1),1(R1)       SHUFFLE STRINF 1 POSN TO LEFT        E 060500
FREEBL   CLC   $WRKAREA(0),$SPACES DETERMINE IF FIELD IS ALL BLANK      E 060600
         TITLE 'PARROTE - TRANSLATE TABLE FOR PD DATA VALIDATION'       E 060700
*        THIS TRANSLATE TABLE IS USED ( BY A TRT INSTRUCTION ) TO       E 060800
*         DETERMINE IN A PACKED DECIMAL FIELD CONTAINS VALID PACKED     E 060900
*         DECIMAL DATA.  THE MEANING OF THE TRT CODES IS :-             E 061000
*              00 - BOTH HALF BYTES CONTAIN 0 - 9                       E 061100
*              04 - FIRST HALF CONTAINS 0 - 9 & 2ND HALF A - F          E 061200
*              08 - FIRST HALF CONTAINS A - F : NEVER VALID             E 061300
         SPACE 1                                                        E 061400
*        INSTRUCTION SEQUENCE TO VALIDATE A FIELD IS :-                 E 061500
*        SR    R2,R2               ZEROISE REG2 FOR TRT CODE            E 061600
*        TRT   FIELD,PDTRT         TRANSLATE TO LOCATE IST A-F          E 061700
*        BC    12,ERROR            NO A-F OR A-F BEFOR LAST BYTE        E 061800
*        B     *(R2)               DETERMINE VALIDITY OF LAST BYTE      E 061900
*        B     ERROR        (04)   A-F IN FIRST HALF OF BYTE: INVALID   E 062000
*        B     GOOD         (08)   A-F IN LAST HALF: VALID              E 062100
         SPACE 5                                                        E 062200
PDTRT    DS    0CL256              TRANSLATE TABLE                      E 062300
         DC    X'00000000000000000000080808080808' 00-09 & 0A-0F        E 062400
         DC    X'00000000000000000000080808080808' 10-19 & 1A-1F        E 062500
         DC    X'00000000000000000000080808080808' 20-29 & 2A-2F        E 062600
         DC    X'00000000000000000000080808080808' 30-39 & 3A-3F        E 062700
         DC    X'00000000000000000000080808080808' 40-49 & 4A-4F        E 062800
         DC    X'00000000000000000000080808080808' 50-59 & 5A-5F        E 062900
         DC    X'00000000000000000000080808080808' 60-69 & 6A-6F        E 063000
         DC    X'00000000000000000000080808080808' 70-79 & 7A-7F        E 063100
         DC    X'00000000000000000000080808080808' 80-89 & 8A-8F        E 063200
         DC    X'00000000000000000000080808080808' 90-99 & 9A-9F        E 063300
         DC    16X'04'             A0-AF                                E 063400
         DC    16X'04'             B0-BF                                E 063500
         DC    16X'04'             C0-CF                                E 063600
         DC    16X'04'             D0-DF                                E 063700
         DC    16X'04'             E0-EF                                E 063800
         DC    16X'04'             F0-FF                                E 063900
         TITLE 'PARROTE - TRANSLATE TABLE FOR FREE FORMAT PROCESSING'   E 064000
*        THIS TRANSLATE TABLE IS USED TO CONVERT THE CONTENTS OF A      E 064100
*         FREE FORMAT DISPLAY NUMERIC FIELD TO BLANKS WITH THE XCEPTION E 064200
*         OF 0 - 9 AND '.'                                              E 064300
         SPACE 1                                                        E 064400
FREETR   DC    256C' '             BASIC TRANSLATE TABLE                E 064500
         ORG   FREETR+C'0'         ORG TO NUMERICS                      E 064600
         DC    C'0123456789'       TRANSLATE NUMERICS TO THEMSELVES     E 064700
         ORG   FREETR+C'.'         ORG TO PERIOD                        E 064800
         DC    C'.'                LEAVE PERIOD UNCHANGED               E 064900
         ORG                                                            E 065000
         TITLE 'PARROTE - ERROR MESSGAES'                               E 065100
LINE01   DS    0CL92                                                    E 065200
         DC    C'PRTE-001-W  NON-NUMERIC DATA FOUND IN FIELD '          E 065300
LINE01L  DC    CL2' '                                                   E 065400
         DC    C' DEFINED IN C/C NO.'                                   E 065500
LINE01C  DC    X'4020202020202120'                                      E 065600
         DC    C' - ZERO SUBSTITUTED'                                   E 065700
         TITLE 'PARROTE - MISCELLANEOUS CONSTANTS AND FIELDS'           E 065800
FPZERO   DC    D'0E1'              FLOATING POINT ZERO VALUE            E 065900
GR11IND  DS    CL1                 INDICATOR FOR 'GR11' REQUESTS        E 066000
HEXTABLE DC    C'0123456789ABCDEF' HEX STRING CONVERSION TABLE          E 066100
CNTVALID DC    X'00'               COUNT OF NON-NUMERIC INPUT FIELDS    E 066200
FREESIGN DC    C'+'                SIGN OF FREE FORMAT FIELD            E 066300
         SPACE 5                                                        E 066400
        SCSEND E                   TERMINATE CSET PARROTE               E 066500
         END                                                            E 066600
