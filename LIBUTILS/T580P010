         TITLE 'T580P010 - LIST AND REFORMAT HASP ACCOUNTING CARDS'
T580P010    CSECT
         PRINT ON,GEN,NODATA
         SPACE 1
*        REGISTER EQUATES AND USAGE
         SPACE 1
R0       EQU   0
R1       EQU   1
R2       EQU   2         WORK REGISTER
R3       EQU   3         WORK REGISTER
R4       EQU   4         BAL RETURN ADDRESS
R5       EQU   5         ADDRESS OF SYSPRINT BUFFER
R6       EQU   6         ADDRESS OF SYSUT1 BUFFER
R7       EQU   7         ADDRESS OF SYSUT2 BUFFER
R8       EQU   8         ADDRESS OF SYSOUT BUFFER
R9       EQU   9         ADDRESS OF SYSIN BUFFER / PARM POINTER
R10      EQU   10        WORK REGISTER
R11      EQU   11        BASE REGISTER 3
R12      EQU   12        BASE REGISTER 2
R13      EQU   13        SAVE AREA POINTER / BASE REGISTER 1
R14      EQU   14        BALR RETURN ADDRESS
R15      EQU   15        BALR ROUTINEADDRESS
         EJECT
***********************************************************************
*                                                                     *
*        THIS DSECT DESCRIBES THE FORMAT OF THE HASP ACCOUNTING       *
*         CARD PRODUCED FROM THE ..TH JUNE 1977  , FOLLOWINGING       *
*         THE START OF MVS.                                           *
*                                                                     *
***********************************************************************
         SPACE 1
XFDCARD  DSECT
DJOBNAME DS    CL8                 JOB NAME                    - EBCDIC
DCHRGCDE DS    CL4                 ACCT'G CHARGE CODE          - EBCDIC
DCATCODE DS    CL2                 ACCT'G CATEGORY CODE        - EBCDIC
DREADCLS DS    CL1                 JOB CLASS AT INPUT          - EBCDIC
DEXECCLS DS    CL1                 JOB CLASS AT EXECT          - EBCDIC
DJOBPRTY DS    CL1                 JOB PRIORITY AT INPUT       - BINARY
DPRTID   DS    CL1                 PRINTER I.D.                - BINARY
DPUNID   DS    CL1                 PUNCH I.D.                  - BINARY
DREADATE DS    CL3                 DATE READ (JULIAN)          - PACKED
DREADTIM DS    CL3                 TIME READ - /100 SEC        - BINARY
DRDRTIME DS    CL3                 JOB READ TIME - /100 SECS   - BINARY
DCARDSIN DS    CL2                 NUMBER OF CARDS READ        - BINARY
DLINEOUT DS    CL3                 NUMBER OF LINES PRINTED     - BINARY
DCARDOUT DS    CL2                 NUMBER OF CARDS PUNCHED     - BINARY
DSTRTDAT DS    CL5                 JULIAN DATE STARTED         - EBCDIC
DSTRTIME DS    CL6                 TIME STARTED (HHMMSS)       - EBCDIC
DXEQTIME DS    CL3                 ELAPSED EXEC TIME - /100 SEC- BINARY
DPRTDATE DS    CL3                 DATE PRINTED (JULIAN)       - PACKED
DOUTTIME DS    CL3                 TIME PRINTED - /100 SEC     - BINARY
DPRTIME  DS    CL3                 ELAPSED PRINT TIME - /100   - BINARY
         DS    CL7                 UNUSED (ZEROES)             - BINARY
DENTITY  DS    CL2                 ENTITY CODE                 - EBCDIC
DMAJCC   DS    CL2                 MAJOR COST CENTRE           - PACKED
DMINCC   DS    CL2                 MINOR COST CENTRE           - EBCDIC
DIDENT   DS    CL1                 IDENTIFIER (X'FD')          - BINARY
DCRDDATE DS    0CL5                JULIAN DATE RECORD PUNCHED  - EBCDIC
DCRDYEAR DS    CL2                 YEAR YY.                    - EBCDIC
DCRDDAYS DS    CL3                 DAYS   .DDD                 - EBCDIC
DJOBNO   DS    CL3                 JES2-ASSIGNED JOB NUMBER    - EBCDIC
XFDLNGTH EQU   *-XFDCARD           LENGTH OF DSECT
T580P010 CSECT
         SPACE 1
DOSJOBNO EQU   DJOBNO              OS JOBNO = JES JOBNO
DPUNDATE EQU   DPRTDATE            PUNCH DATE = PRINT DATE
DPUNTIME EQU   DPRTIME             PUNCH TIME = PRINT TIME
         EJECT
***********************************************************************
*                                                                     *
*        THIS DSECT DESCRIBES THE FORMAT OF THE HASP ACCOUNTING       *
*         CARD PRODUCED FROM THE 17TH JANUARY '73, FOLLOWINGING       *
*         THE GENERATION OF HASP 3.1.                                 *
*                                                                     *
***********************************************************************
         SPACE 1
XFECARD  DSECT
EJOBNAME DS    CL8                 JOB NAME                    - EBCDIC
ECHRGCDE DS    CL4                 ACCT'G CHARGE CODE          - EBCDIC
ECATCODE DS    CL2                 ACCT'G CATEGORY CODE        - EBCDIC
EREADCLS DS    CL1                 JOB CLASS AT INPUT          - EBCDIC
EEXECCLS DS    CL1                 JOB CLASS AT EXECT          - EBCDIC
EJOBPRTY DS    CL1                 JOB PRIORITY AT INPUT       - BINARY
EPRTID   DS    CL1                 PRINTER I.D.                - BINARY
EPUNID   DS    CL1                 PUNCH I.D.                  - BINARY
EREADATE DS    CL3                 DATE READ (JULIAN)          - PACKED
EREADTIM DS    CL3                 TIME READ - /100 SEC        - BINARY
ERDRTIME DS    CL3                 JOB READ TIME - /100 SECS   - BINARY
ECARDSIN DS    CL2                 NUMBER OF CARDS READ        - BINARY
ELINEOUT DS    CL3                 NUMBER OF LINES PRINTED     - BINARY
ECARDOUT DS    CL2                 NUMBER OF CARDS PUNCHED     - BINARY
ESTRTDAT DS    CL5                 JULIAN DATE STARTED         - EBCDIC
ESTRTIME DS    CL6                 TIME STARTED (HHMMSS)       - EBCDIC
EXEQTIME DS    CL3                 ELAPSED EXEC TIME - /100 SEC- BINARY
EPRTDATE DS    CL3                 DATE PRINTED (JULIAN)       - PACKED
EOUTTIME DS    CL3                 TIME PRINTED - /100 SEC     - BINARY
EPRTIME  DS    CL3                 ELAPSED PRINT TIME - /100   - BINARY
EPUNDATE DS    CL3                 DATE PUNCHED (JULIAN)       - PACKED
EPUNTIME DS    CL3                 ELAPSED PUNCH TIME /100     - BINARY
EOSJOBNO DS    CL3                 O.S.-ASSIGNED JOB NUMBER    - EBCDIC
EMAJCC   DS    CL2                 MAJOR COST CENTRE           - PACKED
EMINCC   DS    CL2                 MINOR COST CENTRE           - EBCDIC
EIDENT   DS    CL1                 IDENTIFIER (X'FE')          - BINARY
ECRDDATE DS    0CL5                JULIAN DATE RECORD PUNCHED  - EBCDIC
ECRDYEAR DS    CL2                 YEAR YY.                    - EBCDIC
ECRDDAYS DS    CL3                 DAYS   .DDD                 - EBCDIC
EJOBNO   DS    CL3                 HASP-ASSIGNND JOB NUMBER    - EBCDIC
XFELNGTH EQU   *-XFECARD           LENGTH OF DSECT
T580P010 CSECT
         EJECT
***********************************************************************
*                                                                     *
*        THIS DSECT DESCRIBES THE FORMAT OF THE HASP ACCOUNTING       *
*         CARD PRODUCED UNTIL 17TH JANUARY 73 BY HASP 3.0.            *
*                                                                     *
***********************************************************************
         SPACE 1
XFFCARD  DSECT
FPROGRNM DS    CL20                PROGRAMMER'S NAME           - EBCDIC
FJOBCLSI DS    CL1                 JOB CLASS WHEN READ         - EBCDIC
FJOBCLSE DS    CL1                 JOB CLASS AT EXECUTION      - EBCDIC
FCATCODE DS    CL2                 CATEGORY CODE               - EBCDIC
         DS    CL3                 UNUSED
FCHRGCDE DS    CL4                 CHARGE CODE                 - EBCDIC
FJOBPRTY DS    CL1                 JOB PRIORITY                - BINARY
FINPTIME DS    CL3                 JOB INPUT TIME IN /100 SECS - BINARY
FOUTTIME DS    CL3                 JOB OUTPUT TIME - /100 SECS - BINARY
FCARDSIN DS    CL2                 NUMBER OF CARDS RAED        - BINARY
FLINEOUT DS    CL3                 NUMBER OF OUTPUT LINES      - BINARY
FCARDOUT DS    CL2                 NIMBER OF CARDS PUNCHED     - BINARY
FRDRTIME DS    CL3                 TOTAL READER TIME /100 SECS - BINARY
FEXECTME DS    CL3                 TOTAL EXEC TIME - /100 SECS - BINARY
FPRTTIME DS    CL3                 TOTAL PRIN TTIME  /100 SECS - BINARY
FPUNTIME DS    CL3                 TOTAL PUNCHTTIME  /100 SECS - BINARY
FJOBNAME DS    CL8                 JON NAME                    - EBCDIC
         DS    CL6                 UNUSED
FIDENT   DS    CL1                 IDENTIFIER (X'FF')          - BINARY
FCRDDATE DS    0CL5                JULIAN DATE RECORD PUNCHED  - EBCDIC
FJULYEAR DS    CL2                 YEAR YY.                    - EBCDIC
FJULDAYS DS    CL3                 DAYS   .DDD                 - EBCDIC
FJOBNUMB DS    CL3                 HASP-ASSIGNED JOB NUMBER    - EBCDIC
XFFLNGTH EQU   *-XFFCARD           LENGTH OF DSECT
T580P010 CSECT
         EJECT
***********************************************************************
*                                                                     *
*        THIS DSECT DESCRIBES THE RE-FORMATED HASP ACCOUNTING         *
*         RECORD, WITH THE BINARY FIELDS CONVERTED TO EBCDIC          *
*         OR PACKED DECIMAL, SO THAT THEY CAN BE PROCESSED            *
*         BY A HIGH-LEVEL LANGUAGE.                                   *
*                                                                     *
***********************************************************************
         SPACE 1
REFORMAT DSECT
RJOBNO   DS    CL3                 HASP-ASSIGNED JOB NUMBER    - EBCDIC
RJOBNAME DS    CL8                 JOB NAME                    - EBCDIC
RJOBPRTY DS    CL2                 JOB PRIORITY AT INPUT       - EBCDIC
RRECDATE DS    CL5                 JULIAN DATE RECORD PUNCHED  - EBCDIC
RCHRGCDE DS    CL4                 ACCT'G CHARGE CODE          - EBCDIC
RREADCLS DS    CL1                 JOB CLASS AT READ TIME      - EBCDIC
REXECCLS DS    CL1                 JOB CLASS AT EXEC TIME      - EBCDIC
RCATCODE DS    CL2                 ACCT'G CATEGORY CODE        - EBCDIC
RPRTID   DS    CL2                 PRINTER I.D.                - EBCDIC
RPUNID   DS    CL2                 PUNCH I.D.                  - EBCDIC
RCOSTMAJ DS    CL3                 MAJOR COST CENTRE           - EBCDIC
RCOSTMIN DS    CL2                 MINOR COST CENTRE           - EBCDIC
RSTRTDAT DS    CL5                 JULIAN DATE JOB STARTED     - EBCDIC
RSTRTIME DS    CL6                 TIME JOB STARTED (HHMMSS)   - EBCDIC
RREADTME DS    CL6                 TIME JOB READ               - EBCDIC
RPRNTIME DS    CL6                 TIME JOB PRINTED (HHMMSS)   - EBCDIC
RCARDSIN DS    CL3                 NUMBER OF CARDS READ        - PACKED
RCARDOUT DS    CL3                 NUMBER OF CARDS PUNCHED     - PACKED
RLINEOUT DS    CL3                 NUMBER OF LINES PRINTED     - PACKED
RRDRTIME DS    CL4                 TOTAL READ TIME /100 SECS   - PACKED
RXEQTIME DS    CL4                 TOTAL EXEC TIME (/100 SECS) - PACKED
RPRTTIME DS    CL4                 TOTAL PRINT TIME (/100 SEC) - PACKED
RPUNTIME DS    CL4                 TOTAL PUNCH TIME (/100 SEC) - PACKED
RREADATE DS    CL5                 JULIAN DATE JOB READ        - EBCDIC
RPRTDATE DS    CL5                 JULIAN DATE JOB PRINTED     - EBCDIC
RPUNDATE DS    CL5                 JULIAN DATE JOB PUNCHED     - EBCDIC
ROSJOBNO DS    CL3                 OS-ASSIGNED JOB NUMBER      - EBCDIC
RENTITY  DS    CL2                 ENTITY CODE
         DS    CL7                 UNUSED
REFLNGTH EQU   *-REFORMAT          LENGTH OF DSECT
T580P010 CSECT
         EJECT
***********************************************************************
*                                                                     *
*        FORMAT OF A CHAIN ELEMENT CONSTRUCTED FROM A SYSTABLE        *
*         ENTRY.  EACH VALID ENTRY ON A SYSTABLE RECORD IS MADE       *
*         INTO A MEMBER OF A CHAIN OF ELEMENTS.  THESE ARE LATER      *
*         MOVED IN TO AN AREA OF CONTIGUOUS CORE AND THEN SORTED      *
*         INTO CHARGE CODE SEQUENCE.  EACH ENTRY ON THIS FINAL        *
*         TABLE COMPRISES A FOUR-BYTE CHARGE CODE AND A FIVE-BYTE     *
*         COST CENTRE WHICH BECOMES THE DEFAULT COST CENTRE FOR       *
*         ANY HASP ACCOUNTING CARDS WHICH DO NOT CONTAIN ONE.         *
*                                                                     *
***********************************************************************
         SPACE 5
*********************************************
* CHNNEXT  *          *          *          *
*        ADDRESS OF NEXT CHAIN ELEMENT      *
*          *          *          *          *
*********************************************
* CHNCHRG  *          *          *          *
*              CHARGE CODE                  *
*          *          *          *          *
*********************************************
* CHNCOST  *          *          *          *
*              COST CENTRE                  *
*          *          *          *          *
*********************************************
*   COST   * CHNLAST  *          *          *
*  CENTRE  * ADDRESS OF LAST CHAIN ELEMENT  *
*  CONT'D  *           *         *          *
*********************************************
         SPACE 5
CHNNEXT  EQU   0                   ADDRESS OF NEXT CHAIN ELEMENT
CHNCHRG  EQU   4                   CHARGE CODE
CHNCOST  EQU   8                   COST CENTRE
CHNLAST  EQU   12                  ADDRESS OF LAST CHAIN ELEMENT
CHNLGTH  EQU   16                  LENGTH OF TEMPOR ARY ELEMENT
         EJECT
***********************************************************************
*                                                                     *
*        FORMAT OF THE SYSTABLE RECORDS                               *
*                                                                     *
***********************************************************************
         SPACE 1
PROJCARD DSECT
PROJPROJ DS    CL4                 PROJECT NUMBER
PROJCHRG DS    CL4                 CHARGE CODE
PROJCC   DS    CL5                 COST CENTRE
PROJPERC DS    CL3                 % OF COST TO BE BORN
PROJACRO DS    CL8                 SYSTEM ACRONYM
PROJDESC DS    CL29                DESCRIPTIOM OF CHARGE CODE
PROJISUE DS    CL15                ISSUED TO ...
PROJDATO DS    CL6                 DATE CHARGE CODE OPENED
PROJDATC DS    CL6                 DATE CHARGE CODE CLOSED
PROJLGTH EQU   *-PROJCARD          LENGTH OD DSECT
T580P010       CSECT
         EJECT
***********************************************************************
*        FORMAT OF TABLE04 ENTIRES                                    *
***********************************************************************
         SPACE 1
TABLE4   DSECT
TAB4ID   DS    CL7                 TABLE IDENTIFIER
         DS    CL8                 UNUSED
TAB4DESC DS    CL12                SORT FIELD DESCRIPTION
         DS    CL1                 UNUSED
TAB4NAME DS    CL8                 NAME ASSOCIATED WITH FIELD
         DS    CL44                UNUSED
TAB4LGTH EQU   *-TABLE4            LENGTH OF DSECT
T580P010 CSECT
         SPACE 5
***********************************************************************
*        FORMAT OF TEMPORARY CHAIN OF ELEMENTS                        *
***********************************************************************
         SPACE 1
TAB4CHN  DSECT
TAB4NEXT DS    CL4                 POINTER TO NEXT ELEMENT
TAB4DES  DS    CL12                DESDRIPTION OF SORT FIELD
TAB4NME  DS    CL8                 NAME OF SORT FIELD
TAB4CHNL EQU   *-TAB4CHN           LENGTH OF CHAIN ELEMENT
T580P010 CSECT
         SPACE 5
NTRYCHRG EQU   0                   CHARGE CODE
NTRYCOST EQU   4                   COST CENTRE
         SPACE 5
*        NOTE :
*              THE PREVIOUS EQUATES ALSO APPLY TO THE
*               FINAL TABLE ENTRIES CONTRUCTED IN A SINGLE TABLE.
         EJECT
***********************************************************************
*        HOUSEKEEPING                                                 *
***********************************************************************
         SPACE 1
         PGMIN EQUATES=NO,USING=(R13,R12,R11) ESTABLISH ADDRESSABILITY
         PRINT NOGEN               SUPPRESS MACRO EXPANSION
         ST    R1,PARMPNTR         PRESERVE PARM POINTER
         ST    R13,E15R13S1        PRESERVE REG 13 FOR E15
         ST    R13,E35R13S1        PRESERVE REG 13 FOR E35
         L     R15,DATEADDR        GET ADDRESS OF DATERTN
         LA    R1,ADATEFLD         POINT R1 AT ADDRESS OF DATE FIELD
         BALR  R14,R15             PASS CONTROL TO DTERTN
         SPACE 5
***********************************************************************
*        OPEN DATA SETS                                               *
***********************************************************************
         SPACE 1
         LA    R10,MAXDS           ESTABLISH LOOP
         LA    R2,DCBTABLE         POINT AT AD-CON TABLE
LOOP1    BAL   R4,DDFIND           VERIFY DD STATEMENT EXISTS
         BAL   R4,OPEN             OPEN DATA SET IF PRESENT
         LA    R2,NTRYSIZE(,R2)    POINT AT NEXT TABLE ENTRY
         BCT   R10,LOOP1           PROCESS NEXT DATA SET
         LA    R5,SAFETY           POINT BUFFER POINTERS AT
         LA    R7,UT2REC            PSEUDO-BUFFER, LEST NO
         LA    R8,SAFETY            DD STATEMENT IS PRESENT
         BAL   R4,PRINT            GET ADDRESS OF 1ST PRINT BUFFERS
         USING REFORMAT,R7         ESTABLISH DSECT ADDRESSABILITY
         BAL   R4,UT2INIT           INIT PSEUDO BUFFER
         EJECT
***********************************************************************
*        THIS ROUTINE PUTS OUT INITIAL INFORMATORY MESSAGES           *
*         TO SYSPRINT AND SYSOUT (IF PRESENT).                        *
***********************************************************************
         SPACE 1
         MVI   0(R8),PAGESKIP      ESTABLISH PAGE SKIP FOR SYSOUT
         MVI   0(R5),PAGESKIP       AND FOR SYSPRINT
         BAL   R4,PRINT            SKIP TO NEW PAGE
         MVI   0(R5),SPCE3AFT      ESTABLISH TRIPLE SPACE
         MVC   5(L'LINE01,R5),LINE01 ADD HEADING LINE
         MVI   0(R8),SPCE3AFT      ESTABLISH TRIPLE SPACE FOR SYSOUT
         MVC   5(L'LINE01,R8),LINE01 ADD HEADING LINE TO SYSOUT
         BAL   R4,PRINT            WRITE HEADING LINE
         MVC   5(L'LINE02,R5),LINE02 ADD SUB-HEADING
         MVC   5(L'LINE02,R8),LINE02 ADD SUB-HEADING TO SYSOUT
         BAL   R4,PRINT            WRITE SUB-HEADING
         LA    R10,MAXDS           ESTABLISH DETAIL LOOP
         LA    R2,DCBTABLE         POINT AT AD-CON TABLE
LOOP2    TM    0(R2),DDSTAT        TEST IF DD STATEMENT PRESENT
         BZ    *+20                BYPASS PRINT IF NOT
         MVC   10(8,R5),4(R2)      ADD DD NAME TO PRINT LINE
         MVC   10(8,R8),4(R2)      ADD DD NAME TO SYSOUT
         BAL   R4,PRINT            PRINT DETAIL LINE
         LA    R2,NTRYSIZE(,R2)    POINT TO NEXT TABLE ENTRY
         BCT   R10,LOOP2           PROCESS NEXT ENTRY
         MVI   0(R5),SPCE2AFT      ESTABLISH DOUBLE BLANK LINE
         MVI   0(R8),SPCE2AFT       IN SYSPRINT AND SYSOUT
         BAL   R4,PRINT             AND WRITE THEM
         SPACE 3
***********************************************************************
*        VERIFY THAT SYSUT1 DD STATEMENT EXISTS                       *
***********************************************************************
         SPACE 1
TESTUT1  TM    SYSUT1SW,DDSTAT     TEST FOR SYSUT1 STATEMENT
         BO    TESTUT1X            BRANCH IF ONE EXISTS
         MVC   COMPCODE,COND16     SET CONDITION CODE TO 16
         WTO   'T580P010     ***** NO SYSUT1 STATEMENT *****'
         WTO   'T580P010     ***** PROCESSING BYPASSED *****'
         MVC   5(L'LINE08,R5),LINE08 ADD ERROR MESSAGE
         MVC   5(L'LINE08,R8),LINE08 ADD ERROR MESSAGE TO SYSOUT
         BAL   R4,PRINT            WRITE ERROR MESSAGE
         MVI   0(R5),SPCE2AFT      ESTABLISH DOUBLE SPACE
         MVC   5(L'LINE09,R5),LINE09 TELL OF INACTION
         MVC   5(L'LINE09,R8),LINE09 TELL OF INACTION
         BAL   R4,PRINT            WRITE MESSAGE
         B     PRINTCDE            PRINT CONDITION CODE
TESTUT1X EQU   *                   EXIT FROM RTN
         SPACE 3
***********************************************************************
*        VERIFY THAT TABLE04 DD STATEMENT EXISTS                      *
***********************************************************************
         SPACE 1
TESTTB4  TM    TABLE4SW,DDSTAT     TEST FOR TABLE04 STATEMENT
         BO    TESTTB4X            BRANCH IF ONE EXISTS
         MVC   COMPCODE,COND16     SET CONDITION CODE TO 16
         WTO   'T580P010    ***** NO TABLE04 STATEMENT *****'
         WTO   'T580P010     ***** PROCESSING BYPASSED *****'
         MVC   5(L'LINE08B,R5),LINE08B ADD ERROR MESSAGE
         MVC   5(L'LINE08B,R8),LINE08B ADD ERROR MESSAGE TO SYSOUT
         BAL   R4,PRINT            WRITE ERROR MESSAGE
         MVI   0(R5),SPCE2AFT      ESTABLISH DOUBLE SPACE
         MVC   5(L'LINE09,R5),LINE09 TELL OF INACTION
         MVC   5(L'LINE09,R8),LINE09 TELL OF INACTION
         BAL   R4,PRINT            WRITE MESSAGE
         B     PRINTCDE            PRINT CONDITION CODE
TESTTB4X EQU   *                   EXIT FROM RTN
         EJECT
***********************************************************************
*        BUILD UP TABLE OF SORT DESCRIPTIONS                          *
***********************************************************************
         SPACE 1
         USING TABLE4,R6           ESTABLISH RECORD AND
         USING TAB4CHN,R2           EMELENT ADDRESSABILTTY
         SPACE 1
         TM    TABLE4SW,DDOPEN     TEST FRO DD STATEMENT PRESENT
         BZ    BLDTAB4X            BRANCH IF NOT
         SR    R3,R3               ZEROISE COUNTING REGISTER
         LA    R2,CHAIN4           POINT R2 AT FIRST CHAIN FIELD
GETTAB03 GET   TABLE04             GET TABLE RECORD
         LR    R6,R1               ESTABLISH ADDRESSABILITY OF RECORD
         CLC   TAB4ID,=C'TABLE04'  TEST FOR DETAIL IDENTIFIER
         BNE   GETTAB03            GET ANOTHER IF NOT
         AP    CNTTAB4,ONE         INCREMENT COUNTER
       GETMAIN R,LV=24             GET CORE TO BUILG ELEMENT
         ST    R1,TAB4NEXT         POINT PREVIOUS ELEMENT AT THIS ONE
         LR    R2,R1               POINT R2 AT THIS ELEMENT
         XC    TAB4NEXT,TAB4NEXT   ZEROISE FORWARD POINTER
         MVC   TAB4DES,TAB4DESC    ADD DESCRIPTION TO ELEMENT
         MVC   TAB4NME,TAB4NAME    ADD FIELD NAME TO ELEMENET
         LA    R3,1(,R3)           INCREMENT BINARY COUNTER
         B     GETTAB03            GET NEXT RECORD
         SPACE 1
         DROP  R2                  DROP ELEMENT ADDRESSABILITY
         USING TAB4CHN,R1           AND RE-ESTABLISH IT
         SPACE 1
ENDTAB03 ST    R3,NUMSRTAB         PRESERVE NUMBER OF ENTRIES
         ZAP   DECIMAL,CNTTAB4     ELEMENT COUNT TO WORK AREA
         CP    DECIMAL,ZERO        TEST IF NO ELEMENTS
         BE    BLDTAB4X            EXIT IF NOT
         MP    DECIMAL,TWENTY      CALCULATE TABLE SIZE
         CVB   R1,DECIMAL          CONVERT SIZE TO BINARY
         LA    R1,7(0,R1)          * ROUND TO NEXT
         N     R1,=F'65528'        * DOUBLEWORD
         STH   R1,SIZESTAB         SAVE SIZE
         LR    R0,R1               MOVE TO R0 FOR GETMAIN
       GETMAIN R,LV=(R0)           ACQUIRE CORE FOR TABLE
         ST    R1,ADRSRTAB         PRESERVE ADDRESS OF TABLE
         LR    R2,R1               INITIALISE TABLE POINTER
         L     R3,CHAIN4           GET ADDRESS OF 1ST CHAIN ELEMENT
TAB4LOOP LTR   R1,R3               TEST FOR END OF CHAIN
         BZ    BLDTAB4X            EXIT
         MVC   0(20,R2),TAB4DES    ADD ELEMENT CONTENTS TO TABLE
         LA    R2,20(,R2)          INCREMENT TO NEXT TABLE ENTRY
         L     R3,TAB4NEXT         GET ADDRESS OF NEXT ELEMENT
      FREEMAIN R,LV=24,A=(R1)      FREE ELEMENT'S CORE
         B     TAB4LOOP            LOOP BACK TO PROCESS NEXT
BLDTAB4X LA    R2,TABLE4SW         POINT AT DCB POINTER
         DROP  R1                  DROP
         DROP  R6                   ADDRESSABILITY
         EJECT
***********************************************************************
*        DETERMINE WHETHER THE DATA ARE TO BE SORTED                  *
***********************************************************************
         SPACE 1
TESTSORT LA    R10,SORTDS          ESTABLISH LOOP
         SR    R3,R3               ZEROISE COUNTER
         LA    R2,SORTABLE         POINT AT SORT DD TABLE
         BAL   R4,DDFIND           VERIFY DD STATEMENT EXISTS
         LA    R3,1(,R3)           INCREMENT 'FOUND' COUNT
         LA    R2,NTRYSIZ2(,R2)    POINT AT NEXT TABLE ENTRY
         BCT   R10,*-12            VERIFY NEXT DD STATEMENT
         LA    R10,SORTDS          SET UP VALUE FOR COMPARE
         CR    R10,R3              TEST IF ALL STATEMENTS SUPPLIED
         BE    TSTSRTND            BRANCH IF YES TO ROUTINE END
         LTR   R3,R3               TEST IF NO SORT STATEMENTS SUPPLIED
         BZ    NOSORT              BRANCH IF NOT
         MVC   5(L'LINE18,R5),LINE18 TELL OF INSUFFICIENT DD
         MVC   5(L'LINE18,R8),LINE18  STATEMENTS IN SYSPRINT & SYSOUT
         BAL   R4,PRINT            WRITE THE MESSAGE
         MVC   5(L'LINE19,R5),LINE19 ADD 'MISSING' MESSAGE TO
         MVC   5(L'LINE19,R8),LINE19  SYSPRINT AND SYSOUT
         BAL   R4,PRINT            WRITE THE LINES
         LA    R10,SORTDS          ESTABLISH LOOP
         LA    R2,SORTABLE         POINT AT START OF TABLE
LOOP3    TM    0(R2),DDSTAT        TEST IF DD STATEMENT PRESENT
         BO    *+20                BRANCH IF YES
         MVC   10(8,R5),4(R2)      MOVE DD NAME TO SYSPRINT
         MVC   10(8,R8),4(R2)       AND SYSOUT
         BAL   R4,PRINT            PRINT THE NAME
         LA    R2,NTRYSIZ2(,R2)    POINT TO NEXT TABLE ENTRY
         BCT   R10,LOOP3           PROCESS NEXT ENTRY
         B     TELNOSRT            TELL OF NO SORT FUNCTION
         SPACE 1
NOSORT   MVC   5(L'LINE21,R5),LINE21 TELL OF NO SORT DD STATEMENTS
         MVC   5(L'LINE21,R8),LINE21  IN SYSPRINT AND SYSOUT
         BAL   R4,PRINT               AND WRITE THE LINES
         SPACE 1
TELNOSRT MVI   0(R5),SPCE3AFT      ESTABLISH FOLLOWING SPACES
         MVC   5(L'LINE20,R5),LINE20 MOVE IN 'NO SORT' MESSAGE
         MVC   0(133,R8),0(R5)     ADD MESSAGE TO SYSOUT
         BAL   R4,PRINT            WRITE THE MESSAGE
         OI    SORTSW+1,X'F0'      ENSSURE SORT IS BYPASSED
         B     PARMEND             BYPASS PARM PROCESSING
         SPACE 1
TSTSRTND EQU   *                   END OF 'TEST FOR SORT' ROUTINE
         EJECT
***********************************************************************
*        PROCESS PARM FIELDS ( DETERMINE SORT SEQUENCE )              *
***********************************************************************
         SPACE 1
PARM     EQU   *                   PROCESS PARM SUB-FIELDS
         LA    R2,E15EXIT          GET ADDRESS OF E15 TERMINATION RTN
         L     R3,SYSUT1SW         GET ADDRESS OF SYSUT1 DCB
         ST    R2,DCBEODAD-IHADCB(,R3) ALTER SYSUT1 EODAD ADDR FOR SORT
         MVC   5(L'LINE25,R5),LINE25 TELL THAT DATA
         MVC   5(L'LINE25,R8),LINE25  WILL BE SORTED
         BAL   R4,PRINT            WRITE THE LINES
PARMGET  BAL   R4,GETPARM          GET SUB-FIELD FROM PARM
         B     PARMDONE            END OF PARM SO DESCRIBE
          L    R4,ADRSRTAB         POINT R4 AT SORT FIELD TABLE
         L     R10,NUMSRTAB        ESTABLISH LOOP THRU TABLE
         B     *+8                 BYPASS FIRST TIME
LOOP4    LA    R4,NTRYSIZ3(,R4)    POINT AT NEXT ENTRY
         EX    R3,PARMCLC          TEST FOR MATCH
         BE    PARMGOOD            BRANCH IF YES
         BCT   R10,LOOP4           TEST AGAINST NEXT TABLE ENTRY
         MVC   5(L'LINE29,R5),LINE29 TELL PARM INVALID
         MVC   5(L'LINE29,R8),LINE29 IN SYSPRINT AND SYSOUT
         BAL   R4,PRINT               AND WRITE
         EX    R3,PARMMVC          ADD PARM SUB-FIELD
         MVC   0(133,R8),0(R5)      TO SYSPRINT AND SYSOUT
         BAL   R4,PRINT             AND PRINT IT
DEFAULT3 MVC   5(L'LINE30,R5),LINE30 TELL IT WILL
         MVC   5(L'LINE30,R8),LINE30  BE IGNORED
         BAL   R4,PRINT               AND PRINT MESSAGE
         B     DEFAULT2            TELL OF DEFAULT SEQUENCE
         SPACE 1
PARMCLC  CLC   12(0,R4),0(R2)      EXECUTED COMPARE INSTRUCTION
PARMMVC  MVC   10(0,R5),0(R2)      EXECUTED MOVE INSTRUCTION
         SPACE 1
PARMGOOD CP    CNTPARM,PARMLIMT    TEST IF LIMIT EXCEEDED
         BNH   PARMPROC            BRANCH IF NOT
         MVC   5(L'LINE31,R5),LINE31 TELL OF EXCESSION
         MVC   5(L'LINE31,R8),LINE31  IN SYSPRINT AND SYSOUT
         BAL   R4,PRINT               AND WRITE IT
         BAL   R4,PARMPUT          PRINT THE PARM
         B     DEFAULT3            TELL PARM IGNORED
         SPACE 1
PARMPROC LR    R2,R4               POINT R2 AT TABLE ENTRY
         BAL   R4,FLDADD           MODIFY SORT FIELD AREA
         B     PARMGET             GET NEXT SUB-FIELD
         EJECT
***********************************************************************
*        TERMINATE PARM PROCESSING                                    *
***********************************************************************
         SPACE 1
PARMDONE CP    CNTPARM,ZERO        TEST IF PARM SUPPLIED
         BE    DEFAULT             BRANCH IF NOT
         LA    R2,SORTDUP          POINT R2 AT ADDITIONAL SORT FIELD
         BAL   R4,FLDADD           MODIFY FIELD TO GROUP DUPLICATES
         MVC   FLDADDR(8),REQADDR  ESTABLISH MODIFIED FIELD IN SORT
         MVC   5(L'LINE32,R5),LINE32 TELL OF REQUESTED SORT SEQUENCE
         MVC   5(L'LINE32,R8),LINE32  IN SYSPRINT AND SYSOUT
         BAL   R4,PRINT               AND PRINT MESSGAE
         BAL   R4,PARMPUT          PRINT THE PARM
         B     PARMEND             TERMINATE PARM PROCESSING
         SPACE 1
DEFAULT  MVC   5(L'LINE26,R5),LINE26 TELL OF DEFAULT
         MVC   5(L'LINE26,R8),LINE26  SORT SEQUENCE
         BAL   R4,PRINT            WRITE THE LINES
DEFAULT2 MVI   0(R5),SPCE3AFT      ESTABLISH FOLLOWING DOUNLE SPACE
         MVC   10(L'LINE27,R5),LINE27 INDICATE SEQUENCE
         MVC   0(133,R8),0(R5)     SET UP IN SYSOUT AS WELL
         BAL   R4,PRINT            WRITE THE LINES
PARMEND  EQU   *                   END OF PARM PROCESSING
***********************************************************************
*        PROCESS CONTROL RECORDS                                      *
***********************************************************************
         SPACE 1
GETIN    BAL   R4,GET              READ CONTROL CARDS
ENDIN    LA    R2,SYSINSW          POINT AT DCB TABLE ENTRY
         EJECT
***********************************************************************
*        BUILD COST CENTRE / CHARGE CODE TABLE IN CORE                *
***********************************************************************
         SPACE 1
***********************************************************************
*    1.  SYSTABLE IS READ AND EVERY NON-BLANK TABLE ENTRY             *
*         FOUND BECOMES AN ELEMENT IN A CHAIN OF ENTRIES.             *
***********************************************************************
         SPACE 1
         USING PROJCARD,R3         ESTABLISH PROJECT LOG ADDRESSABILITY
         MVI   0(R8),SPCE2AFT       DOUBLE SPACE
         BAL   R4,PRINT         PRINT THE LINE
         TM    TABLESW,DDSTAT      TEST FOR SYSTABLE STATEMENT
         BZ    GETTABLX            BYPASS PROCESSING IF NONE
         LA    R2,CHAIN            POINT R2 AT FIRST CHAIN FIELD
GETTABLE GET   SYSTABLE            GET TABLE RECORD
         AP    CNTTAB,ONE          INCREMENT RECORD COUNT
         LR    R3,R1               POINR R3 AT START OF RECORD
         CLC   PROJPERC,=C'000'    TEST IF OCCASIONAL USER
         BE    GETTABLE            IGNORE ENTRY ENTIRELY IF SO
         CLC   PROJPERC,=C'100'    VERIFY THAT ALL CHARGES TO 1 COST CN
         BE    TABBLD              BRANCH IF YES TO BUILD CHAIN
         CLC   PROJCHRG,CHNCHRG(R2) TST IF CHANGE OF CHARGE CODE
         BE    GETTABLE            GET NEXT RE ORD IF NOT
         OI    SWITCH,NON100       INDICATE THAT NON-100 ENTRY BUILT
         B     TABBLD+L'TABBLD     BUILD CHAIN ELEMENT
TABBLD   NI    SWITCH,255-NON100   SET NON-100 SWITCH OFF
         AP    CNTNTRYS,ONE        INCREMENT ENTRY COUNT
         LA    R0,CHNLGTH          SET LENGTH REQUIRED
       GETMAIN R,LV=(0)            ACQUIRE CORE FOR ELEMENT
         ST    R1,CHNNEXT(R2)      POINT PREVIOUS ELEMENT AT THIS ONE
         ST    R2,CHNLAST(R1)      POINT THIS ELEMENT AT LAST
         LR    R2,R1               POINT R2 AT THIS ELEMENT
         MVC   CHNCHRG(4,R2),PROJCHRG  CHARGE CODE TO ELEMENT
         MVI   CHNCOST(R2),C'P'    ASSUME PSEUDO CODE NEEDED ..
         MVC   CHNCOST+1(4,R2),PROJCHRG ... AND SET IT UP
         TM    SWITCH,NON100       TEST IF PSEUDO CODE NEEDED
         BO    *+10                BRANCH IF YES
         MVC   CHNCOST(5,R2),PROJCC SET UP TRUE ENTRY
         XC    CHNNEXT(4,R2),CHNNEXT(R2)  AND ZEROISE FORWARD POINTER
         B     GETTABLE            GET NEXT RECORD
         EJECT
***********************************************************************
*        BUILD COST CENTRE / CHARGE CODE TABLE ( CONTINUED )          *
***********************************************************************
         SPACE 1
***********************************************************************
*    2.  AN AREA OF CORE LARGE ENOUGH TO CONTAIN ALL THE              *
*         COST CENTRE / CHARGE CODE ENTRIES CONTIGUOUSLY IS           *
*         ACQUIRED, THE CHAIN ELEMENTS ARE MOVED TO THIS AREA,        *
*         AND THE CHAIN ELEMENTS ARE RELEASED.                        *
*        MOD 6/75.  THE ABOVE CAUSES CORE FRAGMENTATION, SO THE BLOCK *
*          TABLE CREATED IS MOVED AGAIN INTO THE CHAIN ELEMENT AREA.  *
***********************************************************************
         SPACE 1
ENDTABLE ZAP   DECIMAL,CNTNTRYS    MOVE ELEMENT COUNT TO WORK AREA
         CP    DECIMAL,ZERO        TEST FOR ANY ELEMENTS
         BE    GETTABLX            BRANCH IF NOT TO BYPASS PROCESSING
         AP    DECIMAL,ONE         ALLOW ROOM FOR DELIMITER
         MP    DECIMAL,NINE         MULTIPLY BY ELEMENT SIZE
         CVB   R0,DECIMAL          CONVEERT REQUIRED SIZE TO BINARY
         LR    R1,R0               MOVE TO REB1 FOR MANIPULATION
         LA    R1,7(0,R1)          * ROUND TO NEXT
         N     R1,=F'65528'        * DOUBLEWORD
         LR    R0,R1               RETURN TO REG0
         STH   R0,SIZETAB          SAVE SIZE OF TABLE
       GETMAIN R,LV=(R0)           GET NECESSARY AREA OF CORE
         ST    R1,ADRTABLE         PRESERVE TABLE ADDRESS
         LR    R2,R1               INITIALISE TABLE POINTER
         L     R3,CHAIN            GET ADDRESS OF 1ST CHAIN ELEMENT
TABLOOP2 LTR   R1,R3               TEST FOR END OF CHAIN
         BZ    TAB5MOVE            IF YES BRANCH TO EXTRA MOVE
         MVC   0(9,R2),CHNCHRG(R1) MOVE ELEMENT CONTENTS TO TABLE
         LA    R2,9(,R2)           ADJUST TABLE POINTER TO NEXT ENTRY
         L     R3,CHNNEXT(R1)      GET ADDRESS OF NEXT CHAIN ELEMENT
         LA    R0,CHNLGTH          INDICATE ELEMENT SIZE IN R0
      FREEMAIN R,LV=(R0),A=(R1)    FREE THE CHAIN ELEMENT
         NI    CCSW,X'0F'          ENABLE 'COST CENTRE' RTN
         B     TABLOOP2            PROCESS THE NEXT ELEMENT
         SPACE
STABMOVE MVC   0(0,R1),0(R2)       EXECUTED MOVE INSTN. OF SORT TABLE
         SPACE
TAB5MOVE EQU   *
         LA    R2,TABLESW          POINT AT DCB TABLE
         BAL   R4,CLOSE            CLOSE SYSTABLE D/S IF OPEN
         LA    R2,TABLE4SW         POINT AT DCB TABLE
         BAL   R4,CLOSE            CLOSE TABLE04 D/S IF OPEN
         LA    R2,SYSINSW          POINT AT DCB TABLE
         BAL   R4,CLOSE            CLOSE SYSIN D/S IF OPEN
*        MOVE SORT TABLE TO HIGH CORE.
         LH    R0,SIZESTAB         GET SORT TABLE SIZE
         GETMAIN R,LV=(0)          GET HIGH ADDRESS CORE
         L     R2,ADRSRTAB         GET OLD TABLE ADDRESS
         LR    R3,R0               PUT LENGTH IN GOOD REG
         BCTR  R3,R0                   REDUCE LENGTH BY ONE FOR MOVE
         EX    R3,STABMOVE         MOVE TABLE TO NEW LOCATION
         ST    R1,ADRSRTAB         SAVE NEW TABLE LOCATION.
         LR    R1,R2               GET OLD TABLE ADDRESS FOR FREEMAIN
         FREEMAIN R,LV=(0),A=(1)   RELEASE OLD SORT TABLE CORE
*        USE MOVE LONG TO MOVE BLOCKED TABLE TO HIGH CORE.
         LH    R0,SIZETAB          RESTORE TABLE SIZE
         GETMAIN R,LV=(0)          GET HIGH ADDRESS CORE.
         LR    R2,R1               ADDRESS OF NEW CORE
         L     R14,ADRTABLE        ADDRESS OF BLOCKED TABLE
         LH    R3,SIZETAB          LENGTH OF TABLE
         LH    R15,SIZETAB         DITTO
         MVCL  R2,R14              MOVE TABLE TO HIGH CORE
         BC    14,*+8              ABEND IF FIELDS OVERLAP
         DC    H'0',H'0'           CONSTANT TO FORCE 0C1 ABEND.
         LH    R0,SIZETAB          GET OLD TABLE LENGTH
         LR    R2,R1               SAVE NEW ADDRESS OF TABLE
         L     R1,ADRTABLE         LOAD OL TABLE ADDRESS
         ST    R2,ADRTABLE         UPDATE TABLE POINTER
         FREEMAIN  R,LV=(0),A=(1)  FREE CORE USED BY OLD TABLE
GETTABLX EQU   *                   END OF COST/CHRG TABLE BUILD RTN
         EJECT
***********************************************************************
*        INVOKE THE SORT AND PROCESS THE ACCOUNTIND CARDS             *
***********************************************************************
         SPACE 1
SORTSW   BC    0,PPROCESS          OPTIONALLY BYPASS THE SORT
         BAL   R4,HEADING          WRITE INITIAL REPORT HEADINGS
         STM   R5,R12,40(R13)      PRESERVE T580P010'S REGISTERS
         LA    R1,SORTPARM         ESTABLISH PARAMETER LINKAGE
         LINK  EP=SORT             PERFORM THE SORT
          CH   R15,COMPCODE        TEST IF SORT'S COMP CODE > PGM'S
         BNH   *+8                 BRANCH IF NOT
         STH   R15,COMPCODE        SAVE THE SORT'S COMPLETION CODE
         B     ENDUT1              PRINT TERMINATION MESSAGES
         EJECT
***********************************************************************
*        SORT EXIT E15 - REFORMAT THE ACCOUNTING RECORDS              *
***********************************************************************
         SPACE 1
         USING *,R15               ESTABLISH TEMPORARY ADDRESSABILITY
E15      SUBIN ,                   ENTER SORT EXIT E15
         STM   R14,R12,12(R13)     SAVE SORT'S REGISTERS
         ST    R13,E15R13S2        SAVE SORT'D SAVE AREA ADDRESS
         L     R13,E15R13S1        RETRIEVE T580P010'S SAVE AREA ADDR
         MVC   E15REGSV(64),12(R13)    SAVE REGS FOR RET. FROM SORT
         LM    R5,R12,40(R13)      RETRIEVE T580P010'S REGISTERS
         B     E15CONT             BRANCH AROUND SAVE AREAS
E15R13S1 DS    F                   SAVE AREA FOR T580P010'S REG 13
E15R13S2 DS    F                   SAVE AREA FOR SORT'S REG 13
E15REGSV DS    16F                 REGS SAVE AREA FOR RET. FROM SORT
E15CONT  EQU   *                   CONTINUE
         DROP  R15                 DROP TEMPORARY ADDRESSABILITY
         SPACE 5
E15LOOP  BAL   R4,READ             GET HASP ACCOUNTING RECORD
         MVC   INTERIM,0(R6)       MOVE RECORD TO WORK AREA
         CLI   71(R6),FF           TEST FOR IDENTIFIER OF X'FF'
         BE    E15XFF              BRANCH IF YES
         CLI   71(R6),FE           TEST FOR IDENTIFIER OF X'FE'
         BE    E15XFE              BRANCH IF YES
         CLI   71(R6),FD           TEST FOR IDENTIFIER OF X'FD'
         BE    E15XFD              BRANCH IF YES
         AP    CNTINV,ONE          INCREMENT INVALID COUNTER
         B     E15LOOP             GET NEXT RECORD
         SPACE 5
E15EXIT  LA    R15,NORETURN        TELL SORT NOT TO RETURN
         LA    R1,INTERIM          POINT R1 AT RECORD
         MVC   12(64,R13),E15REGSV     RESTORE REGS FOR RET. FROM SORT
         STM   R5,R12,40(R13)      PRESERVE T580P010'S REGISTERS
         L     R13,E15R13S2        RESTORE SORT'S SAVE AREA POINTER
         L     R14,12(R13)         RESTORE THE SORT'S
         L     R0,20(R13)           GENERAL PURPOSE
         LM    R2,R12,28(R13)       REGISTERS
         BR    R14                 RETURN TO THE SORT
         EJECT
***********************************************************************
*        E15 (CONTINUED)                                              *
***********************************************************************
         SPACE 1
E15XFF   EQU   *                   REFORMAT XFF CARDS FOR THE SORT
         USING XFFCARD,R6          ESTABLISH CARD INAGE ADDRESSABILIRY
         MVC   XJOBNAME,FJOBNAME   FOR THE SORT, SET UP JOB NAME
         MVC   XCRDDATE,FJULYEAR   FOR THE SORT, SET UP óECORD DATE
         MVC   XCHRGCDE,FCHRGCDE   FOR THE SORT, SET UP "HARGE CODE
         MVC   XJOBNO,FJOBNUMB     FOR THE SORT, SET UP JOB NUMBER
         MVC   XCATCODE,FCATCODE   FOR THE SORT, SET UP CATEGORY CODE
         MVC   CCCHARGE,FCHRGCDE   MOVE CHRG CODE TO BE MATCHED
         BAL   R4,COSTCNTR         GET DEFAULT COST CENTRE
         MVC   XCOSTCNT,CC         FOR THE SORT, SET UP COST CENTRE
         MVC   TESTCAT,FCATCODE    FOR THE TEST, SET UP CATEGORY CODE
         MVC   TESTDATE,FJULYEAR   FOR THE TEST, SET UP RECORD DATE
         MVC   TESTCC,XCOSTCNT     MOVE IN EEFAULT COST CENTRE (IF ANY)
         BAL   R4,SELECT           DETERMINE WHETHER RECORD REQUIRED
         B     E15LOOP             RECORD NOT REQUIRED
         LA    R15,INSERT          TELL SORT OF NEW RECORD
         B     E15EXIT+4           RETURN TO THE SOTT
         SPACE 1
         DROP  R6                  DROP CARD IMAGE ADDRESSABILITY
         EJECT
***********************************************************************
*        E15 ( CONTINUED )                                            *
***********************************************************************
         SPACE 1
E15XFE   EQU   *                   REFORMAT XFE CARDS FOR THE SORT
         USING XFECARD,R6          ESTABLISH CARD IMAGE ADDRESSABILITY
         MVC   XJOBNAME,EJOBNAME   FOR SORT, SET UP JOB NAME
         MVC   XCRDDATE,ECRDYEAR   FOR SORT, SET UP RECORD DATE
         MVC   XCHRGCDE,ECHRGCDE   FOR SORT, SET UP "HARGE CODE
         MVC   XJOBNO,EJOBNO       FOR SORT, SET UP JOB NUMBER
         MVC   XCATCODE,ECATCODE   FOR SORT, SET UP "ATEGORY CODE
         MVC   CCCHARGE,ECHRGCDE   MOVE CHRG CODE TO BE MATCHED
         BAL   R4,COSTCNTR         GET DEFAULT COST CENTRE
         MVC   XCOSTCNT,CC         SET DEFAULT COST SENTRE FOR SORT
         CLC   EMAJCC,LOWVALUE     TEST FOR MAJOR COST CENTRE
         BE    *+16                BRANCH IF NONE SUPPLIED
         UNPK  XCOSTCNT(3),EMAJCC  UNPACJ MAJOR COST CENTRE
         OC    XCOSTCNT(3),ORCC    ENSURE SIGNS ARE HEX F'S
         CLC   EMINCC,LOWVALUE     TEST FOR MINOR COST CENTRE
         BE    *+16                BRANCH IF NONE SUPPLIED
         MVC   XCOSTCNT+3(2),EMINCC SET UP MINOR COST CENTRE
         OC    XCOSTCNT+3(2),ORCC  ENSURE SIGNS ARE HEX F'S
         MVC   TESTCC,XCOSTCNT     FOR EEST, SET UP COST CENTRE
         MVC   TESTCAT,ECATCODE    FOR TEST, SET UP "ATEGORY CODE
         MVC   TESTCHRG,ECHRGCDE   FOR TEST, SET UP CHARGE CODE
         MVC   TESTDATE,ECRDYEAR   FOR TEST, SET UP RECORD DATE
         BAL   R4,SELECT           DETERMINE WHTEHER RECORD REQUIRED
         B     E15LOOP             RECORD NOT REQUIRED
         LA    R15,INSERT          TELL SORT TO INSERT RECORD
         B     E15EXIT+4           RETURN TO THE SORT
         SPACE 1
         DROP  R6                   DROP TEMPORARY ADDRESSABILITY
         EJECT
***********************************************************************
*        E15 ( CONTINUED )                                            *
***********************************************************************
         SPACE 1
E15XFD   EQU   *                   REFORMAT XFE CARDS FOR THE SORT
         USING XFDCARD,R6          ESTABLISH CARD IMAGE ADDRESSABILITY
         MVC   XJOBNAME,DJOBNAME   FOR SORT, SET UP JOB NAME
         MVC   XCRDDATE,DCRDYEAR   FOR SORT, SET UP RECORD DATE
         MVC   XCHRGCDE,DCHRGCDE   FOR SORT, SET UP "HARGE CODE
         MVC   XJOBNO,DJOBNO       FOR SORT, SET UP JOB NUMBER
         MVC   XCATCODE,DCATCODE   FOR SORT, SET UP "ATEGORY CODE
         MVC   CCCHARGE,DCHRGCDE   MOVE CHRG CODE TO BE MATCHED
         BAL   R4,COSTCNTR         GET DEFAULT COST CENTRE
         MVC   XCOSTCNT,CC         SET DEFAULT COST SENTRE FOR SORT
         CLC   DMAJCC,LOWVALUE     TEST FOR MAJOR COST CENTRE
         BE    *+16                BRANCH IF NONE SUPPLIED
         UNPK  XCOSTCNT(3),DMAJCC  UNPACJ MAJOR COST CENTRE
         OC    XCOSTCNT(3),ORCC    ENSURE SIGNS ARE HEX F'S
         CLC   DMINCC,LOWVALUE     TEST FOR MINOR COST CENTRE
         BE    *+16                BRANCH IF NONE SUPPLIED
         MVC   XCOSTCNT+3(2),DMINCC SET UP MINOR COST CENTRE
         OC    XCOSTCNT+3(2),ORCC  ENSURE SIGNS ARE HEX F'S
         MVC   TESTCC,XCOSTCNT     FOR TEST, SET UP COST CENTRE
         MVC   TESTCAT,DCATCODE    FOR TEST, SET UP "ATEGORY CODE
         MVC   TESTCHRG,DCHRGCDE   FOR TEST, SET UP CHARGE CODE
         MVC   TESTDATE,DCRDYEAR   FOR TEST, SET UP RECORD DATE
         BAL   R4,SELECT           DETERMINE WHTEHER RECORD REQUIRED
         B     E15LOOP             RECORD NOT REQUIRED
         LA    R15,INSERT          TELL SORT TO INSERT RECORD
         B     E15EXIT+4           RETURN TO THE SORT
         SPACE 1
         DROP  R6                   DROP TEMPORARY ADDRESSABILITY
         EJECT
***********************************************************************
*        SORT EXIT E35 - PROCESS THE SORTED ACCOUNTING RECORDS        *
***********************************************************************
         SPACE 1
         USING *,R15               ESTABLISH TEMPORARY ADDRESSABILITY
E35      SUBIN ,                   ENTER SORT EXIT E35
         STM   R14,R12,12(R13)     SAVE SORT'S REGISTERS
         ST    R13,E35R13S2        SAVE SORT'D SAVE AREA SDDRESS
         L     R13,E35R13S1        RETRIEVE T580P010'S SAVE RREA ADDR
         MVC   E35REGSV(64),12(R13)    SAVE REGS FOR RET. FROM SORT
         LM    R5,R12,40(R13)      RETRIEVE T580P010'S REGISTERS
         B     E35CONT             BRANCH AROUND SAVE AREAS
E35R13S1 DS    F                   SAVE AREA FOR T580P010'S REG13
E35R13S2 DS    F                   SAVE AREA FOR SORT'D REG 13
E35REGSV DS    16F                 REGS SAVE AREA FOR RET. FROM SORT
E35CONT  EQU   *                   CONTINUE
         DROP  R15                 DROP TEMPORARY ADDRESSABILITY
         SPACE 1
         L     R6,0(,R1)           GET ADDRESS OF RECORD FROM SORT
         LA    R6,0(,R6)           PURIFY HIGH ORDER BYTE
         LTR   R6,R6               TEST FOR END OF DATA
         BNZ   E35CONT2             BRANCH IF NOT
         LA    R15,NORETURN        TELL THE SORT NOT TO RERURN
         B     *+8                 BYPASS REG 15 LOAD
         SPACE 1
E35EXIT  LA    R15,DELETE          TELL THE SORT TO DELETE THE RECORD
         MVC   12(64,R13),E35REGSV     RESTORE REGS FOR RET. FROM SORT
         STM   R5,R12,40(R13)      PRESERVE T580P010'S REGISTERS
         L     R13,E35R13S2        RESTORE THE SORT'S REG 13
         L     R14,12(R13)         RESTORE THE SORT'S
         LM    R0,R12,20(R13)       REGISTERS
         BR    R14                 RETURN TO THE SORT
         SPACE 1
E35CONT2 LA    R4,E35EXIT          ESTABLISH SUB-ROUTINE RETURN
         CLC   RECSTORE,0(R6)      TEST FOR DUPLICATE RECORD
         BNE   *+14                BRANCH IF NOT
         AP    CNTDUP,ONE          INCREMENT DUPLICATE COUNT
         B     E35EXIT             RETURN TO THE SORT
         MVC   RECSTORE,0(R6)      STORE RECORD TO TEST NEXT TIME
         CLI   71(R6),FF           TEST FOR X'FF' IDENTIFIER
         BE    XFF                 BRANCH IF YES
         CLI   71(R6),FE           TEST FOR X'FE' IDENTIFIER
         BE    XFE                 BRANCH IF YES
         CLI   71(R6),FD           TEST FOR X'FD' IDENTIFIER
         BE    XFD                 BRANCH IF YES
         AP    CNTINV,ONE          INCREMENT INVALID COUNTER
         B     E35EXIT             RETURN TO THE SORT
         SPACE 1
         EJECT
***********************************************************************
*        PROCESS HASP ACCOUNTING CARDS WITHOUT SORTING                *
***********************************************************************
         SPACE 1
PPROCESS BAL   R4,HEADING          WRITE INITIAL REPORT HEADINGS
PROCESS  BAL   R4,READ             GET NEXT ACCT'G RECORD
         CLC   RECSTORE,0(R6)      TEST FOR DUPLICATE RECORD
         BNE   *+14                BRANCH IF NOT
         AP    CNTDUP,ONE          INCREMENT DUPLICATE COUNT
         B     PROCESS             GET NEXT RECORD
         MVC   RECSTORE,0(R6)      SAVE RECORD FOR NEXT TIME
         LA    R4,PROCESS          ESTABLISH RETURN TO PROCESS
         CLI   71(R6),X'FF'        TEST FOR X'FF' IDENTIFIER
         BE    XFF                 PROCESS IF YES
         CLI   71(R6),X'FE'        TEST FOR X'FE' IDENTIFIER
         BE    XFE                 PROCESS IF YES
         CLI   71(R6),X'FD'        TEST FOR X'FD' IDENTIFIER
         BE    XFD                 PROCESS IF YES
         AP    CNTINV,ONE          INCREMENT COUNT OF REJECTED RECORDS
         B     PROCESS             GET NEXT RECORD
         EJECT
***********************************************************************
*        PUT OUT TERMINATION MESSAGES TO SYSPRINT AND SYSOUT.         *
***********************************************************************
         SPACE 1
ENDUT1   MVC   CNTLINE,ZERO        ZEROISE LINE COUNTER LEST GET OVERFL
         BAL   R4,PRINT            SPACE 1 LINE
         MVC   5(L'LINE23,R5),LINE23 TELL OF REPORT END
         MVC   5(L'LINE23,R8),LINE23  ON SYSPRINT AND SYSOUT
         BAL   R4,PRINT            PRINT END MESSAGE
         MVI   0(R5),PAGESKIP      ESTABLISH SKIPS
         MVI   0(R8),PAGESKIP       TO NEW PAGES
         BAL   R4,PRINT             AND ISSUE THEM
         MVI   0(R5),SPCE3AFT      ESTABLISH TRIPLE SPACE
         MVC   5(L'LINE17,R5),LINE17 ADD TERMINATION HEADING
         MVC   0(133,R8),0(R5)     SET UP IN SYSOUT TOO
         BAL   R4,PRINT            WRITE FINAL HEADING
         EJECT
***********************************************************************
*        TERMINATION MESSAGES (CONTINUED)                             *
***********************************************************************
         SPACE 1
         MVC   5(L'LINE03,R5),LINE03         **
         MVC   L'LINE03+5(7,R5),EDITMASK      *
         ED    L'LINE03+5(7,R5),CNTPARM       ** SUB-PARM COUNT
         MVC   0(133,R8),0(R5)                *
         BAL   R4,PRINT                      **
         SPACE 1
         MVC   5(L'LINE37,R5),LINE37         **
         MVC   L'LINE37+5(7,R5),EDITMASK      *
         ED    L'LINE37+5(7,R5),CNTTAB        ** SYSTABLE RECORDS READ
         MVC   0(133,R8),0(R5)                *
         BAL   R4,PRINT                      **
         SPACE 1
         MVC   5(L'LINE34,R5),LINE34         **
         MVC   L'LINE34+5(7,R5),EDITMASK      *
         ED    L'LINE34+5(7,R5),CNTNTRYS      ** COST/CHRG TABLE ENTRYS
         MVC   0(133,R8),0(R5)                *
         BAL   R4,PRINT                      **
         SPACE 1
         MVC   5(L'LINE05,R5),LINE05         **
         MVC   L'LINE05+5(7,R5),EDITMASK      *
         ED    L'LINE05+5(7,R5),CNTIN         ** SYSIN RECORDS READ
         MVC   0(133,R8),0(R5)                *
         BAL   R4,PRINT                      **
         SPACE 1
         MVC   5(L'LINE04,R5),LINE04         **
         MVC   L'LINE04+5(7,R5),EDITMASK      *
         ED    L'LINE04+5(7,R5),CNTUT1        ** SYSTT1 RECORDS READ
         MVC   0(133,R8),0(R5)                *
         BAL   R4,PRINT                      **
         SPACE 1
         MVC   5(L'LINE11,R5),LINE11         **
         MVC   L'LINE11+5(7,R5),EDITMASK      *
         ED    L'LINE11+5(7,R5),CNTFF         ** X'FF' RECORDS READ
         MVC   0(133,R8),0(R5)                *
         BAL   R4,PRINT                      **
         SPACE 1
         MVC   5(L'LINE12,R5),LINE12         **
         MVC   L'LINE12+5(7,R5),EDITMASK      *
         ED    L'LINE12+5(7,R5),CNTFE         ** X'FE' RECORDS READ
         MVC   0(133,R8),0(R5)                *
         BAL   R4,PRINT                      **
         SPACE 1
         MVC   5(L'LINE12B,R5),LINE12B       **
         MVC   L'LINE12B+5(7,R5),EDITMASK      *
         ED    L'LINE12B+5(7,R5),CNTFD         ** X'FD' RECORDS READ
         MVC   0(133,R8),0(R5)                *
         BAL   R4,PRINT                      **
         SPACE 1
         MVC   5(L'LINE28,R5),LINE28         **
         MVC   L'LINE28+5(7,R5),EDITMASK      *
         ED    L'LINE28+5(7,R5),CNTDUP        ** REJECTED DUPLIBATES
         MVC   0(133,R8),0(R5)                *
         BAL   R4,PRINT                      **
         EJECT
***********************************************************************
*        TERMINATION MESSAGES ( CONTINUED )                           *
***********************************************************************
         SPACE 1
         MVC   5(L'LINE13,R5),LINE13         **
         MVC   L'LINE13+5(7,R5),EDITMASK      *
         ED    L'LINE13+5(7,R5),CNTREJ        ** RECORDS NOT SELECTED
         MVC   0(133,R8),0(R5)                *
         BAL   R4,PRINT                      **
         SPACE 1
         MVC   5(L'LINE24,R5),LINE24         **
         MVC   L'LINE24+5(7,R5),EDITMASK      *
         ED    L'LINE24+5(7,R5),CNTINV        ** INVALID RECORD COUNT
         MVC   0(133,R8),0(R5)                *
         BAL   R4,PRINT                      **
         SPACE 1
         MVC   5(L'LINE06,R5),LINE06         **
         MVC   L'LINE06+5(7,R5),EDITMASK      *
         ED    L'LINE06+5(7,R5),CNTUT2        ** SYSUT2 RECORDS WRITTEN
         MVC   0(133,R8),0(R5)                *
         BAL   R4,PRINT                      **
         SPACE 1
         MVC   5(L'LINE22,R5),LINE22
         MVC    L'LINE22+5(7,R5),EDITMASK
         ED    L'LINE22+5(7,R5),CNTTAB4
         MVC   0(133,R8),0(R5)
         BAL   R4,PRINT
         SPACE 1
         MVI   0(R5),SPCE2AFT      ESTABLISH DOUBLE SPACE
         BAL   R4,PRINT             AND ISSUE IT
         EJECT
***********************************************************************
*        PRINT CONDITION CODE                                         *
***********************************************************************
         SPACE 1
PRINTCDE MVC   5(L'LINE07,R5),LINE07 ADD COND CODE MESSAGE
         MVI   0(R5),SPCE2AFT      ESTABLISH DOUBLE SPACE
         LH    R2,COMPCODE         GET CONDITION CODE
         CVD   R2,WORKAREA         CONVERT IT TO DECIMAL
         ED    CONDMASK,WORKAREA+6 CONVERT IT TO PRINTABLE EBCDIC
         MVC   L'LINE07+6(2,R5),CONDMASK+2 ADD IT TO PRINT LINE
         MVC   0(133,R8),0(R5)     ADD MESSAGE TO SYSOUT
         BAL   R4,PRINT            PRINT COND CODE MESSGAE
         MVC   5(L'LINE10,R5),LINE10 MOVE IN FINAL MESSAGE
         MVC   5(L'LINE10,R8),LINE10  TO SYSPRINT AND SYSOUT
         SPACE 5
***********************************************************************
*        JOB TERMINATION ROUTINE - CLOSE ANY OPEN DATA SETS,          *
*         SET A COMPLETION CODE IN REGISTER 15, AND RETURN .          *
***********************************************************************
         SPACE 1
JOBEND   LA    R10,MAXDS           ESTABLISH LOOP
         TM    SYSOUTSW,DDSTAT     TEST FOR SYSOUT
         BZ    *+8                 BRANCH IF NOT
         OI    SYSOUTSW,DDOPEN     'RE-CONNECT' FOR CLOSE
         TM    PRINTSW,DDSTAT      TEST FOR SYSPRINT
         BZ    *+8                 BRANCH IF NOT
         OI    PRINTSW,DDOPEN      'RE-CONNECT' FOR CLOSE
         LA    R2,DCBTABLE         POINT AT AD-CON TABLE
         BAL   R4,CLOSE            CLOSE DATA SET
         LA    R2,NTRYSIZE(,R2)    POINT AT NEXT TABLE ENTRY
         BCT   R10,*-8             CLOSE NEXT DATA SET
        PGMOUT RC=COMPCODE         SET COND CODE AND RETURN
         EJECT
***********************************************************************
*                                                                     *
*        THIS ROUTINE PROCESS OLD HASP CARDS (X'FF'),                 *
*         REFORMATING IT, AND PRODUCING TWO REPORTS.                  *
*                                                                     *
***********************************************************************
         SPACE 1
XFF      SUBIN PREFIX=F,SAVE=R4    PROCESS X'FF'-TYPE RECORD
         USING XFFCARD,R6          ESTABLISH DSECT ADDRESSABILITY
         CLC   FJOBCLSI(4),LOWVALUE TEST ACCT'G INFO FOR LOW-VALUES
         BNE   *+10                BRANCH IF NOT
         MVC   FJOBCLSI(4),ASTERISK SET ACCT'G INFO TO ASTERISKS
         CLC   FJOBCLSI(4),SPACES  TEST ACCT'G INFO FOR SPACES
         BNE   *+10                BRANCH IF NOT
         MVC   FJOBCLSI(4),ASTERISK SET ACCT'G INFO TO ASTERISKS
         CLC   FJOBCLSI(4),HIVALUE TEST ACCT'G INFO FOR HIGH-VALUES
         BNE   *+10                BRANCH IF NOT
         MVC   FJOBCLSI(4),ASTERISK SET ACCT'G INFO TO ASTERISKS
         CLC   FCHRGCDE,SPACES     TEST ACCT'G INFO FOR SPACES
         BNE   *+10                BRANCH IF NOT
         MVC   FCHRGCDE,ASTERISK   SET THE ACCT'G INFO TO ASTERISKS
         CLC   FCHRGCDE,LOWVALUE   TEST ACCT'G DATA FOR LOW-VALUES
         BNE   *+10                BRANCH IF NOT
         MVC   FCHRGCDE,ASTERISK   SET THE ACCT'G INFO TO ASTERISKS
         CLC   FCHRGCDE,HIVALUE    TEST ACCT'G INFO FOR HIGH-VALUES
         BNE   *+10                BRANCH IF NOT
         MVC   FCHRGCDE,ASTERISK   SET THE ACCT'G INFO TO ASTERISKS
         SPACE 1
         MVC   TESTCAT,FCATCODE    MOVE CAT CODE TO TEST AREA
         MVC   TESTCHRG,FCHRGCDE   MOVE CHARGE CODE TO TEST AREA
         MVC   TESTDATE,FJULYEAR   MOVE RECORD DATE TO TEST AREA
         MVC   CCCHARGE,FCHRGCDE   MOVE CHRG CODE TO BE MATCHED
         BAL   R4,COSTCNTR         GET DEFAULT COST CENTRE
         MVC   TESTCC,CC           SET UP COST CENTRE IN TEST AREA
         BAL   R4,SELECT           DETERMINE IF RECORD REQUIRED
         B     XFFEXIT             RECORD NOT REQUIRED
         SPACE 1
         MVC   33(2,R5),FJOBCLSI   READ & EXEC CLASS TO SYSPRINT
         MVC   RREADCLS,FJOBCLSI   MOVE READ CLASS TO SYSUT2
         MVC   REXECCLS,FJOBCLSE   MOVE EXEC CLASS TO SYSUT2
         SPACE 1
         MVC   36(2,R5),FCATCODE   CATEGORY CODE TO SYSPRINT
         MVC   RCATCODE,FCATCODE    AND TO SYSUT2
         SPACE 1
         MVC   28(4,R5),FCHRGCDE   CHARGE CODE TO SYSPRINT
         MVC   RCHRGCDE,FCHRGCDE    AND TO SYSUT2
         SPACE 1
         MVC   STORCOL1,FJOBPRTY   BINARY PRIORITY TO WORK AREA
         BAL   R4,CVD              CONVERT TO EBCDIC
         MVC   16(2,R5),DISPLAY+14 PRIORITY TO PRINT LINE
         MVC   RJOBPRTY,DISPLAY+14  AND TO SYSUT2
         EJECT
***********************************************************************
*        X'FF' PROCESSING ( CONTINUED )                               *
***********************************************************************
         SPACE 1
         MVC   STORCOL3,FINPTIME   CONVERT BINARY INPUT
         BAL   R4,CVD               TIME TO
         BAL   R4,HHMMSS            EDITED HH.MM.SS
         MVC   62(8,R5),TIMEHMS     AND MOVE TO SYSPRINT
         MVC   36(8,R8),TIMEHMS     AND TO SYSOUT
         MVC   RREADTME,TIMEHMS2    AND UNEDITED TO SYSUT2
         SPACE 1
         MVC   STORCOL3,FOUTTIME   CONVERT BINARY OUTPUT
         BAL   R4,CVD               TIME TO
         BAL   R4,HHMMSS            EDITED HH.MM.SS
         MVC   72(8,R5),TIMEHMS     AND MOVE TO SYSPRINT
         MVC   72(8,R8),TIMEHMS     AND TO SYSOUT
         MVC   RPRNTIME,TIMEHMS2    AND TO SYSUT2
         SPACE 1
         MVC   STORCOL2,FCARDSIN   CONVERT BINARY CARDS READ
         BAL   R4,CVD               TO EBCDIC
         MVC   82(5,R5),DISPLAY+11  AND MOVE TO SYSPRINT
         MVC   RCARDSIN,DECIMAL+5   AND TO SYSUT2
         SPACE 1
         MVC   STORCOL3,FLINEOUT   CONVERT BINARY LINES
         BAL   R4,CVD               OUT TO EBCDIC
         MVC   95(6,R5),DISPLAY+10  AND MOVE TO SYSPRINT
         MVC   RLINEOUT,DECIMAL+5   AND TO SYSUT2
         SPACE 1
         MVC   STORCOL2,FCARDOUT   CONVERT BINARY CARDS
         BAL   R4,CVD               OUT TO EBCDIC
         MVC   89(5,R5),DISPLAY+11  AND MOVE TO SYSPRINT
         MVC   RCARDOUT,DECIMAL+5   AND TO SYSUT2
         SPACE 1
         MVC   STORCOL3,FRDRTIME   CONVERT BINARY ELAPSED
         BAL   R4,CVD               READ TIME TO DECIMAL,
         MVC   RRDRTIME,DECIMAL+4   ADD TO SYSUT2, CONVERT TO
         BAL   R4,MMMSS             EDITED MMM.SS
         MVC   103(6,R5),TIMEMS     ADD TO SYSPRINT
         MVC   98(6,R8),TIMEMS      AND TO SYSOUT
         SPACE 1
         MVC   STORCOL3,FEXECTME   CONVERT BINARY ELAPSED
         BAL   R4,CVD               EXEC TIME TO DECIMAL,
         MVC   RXEQTIME,DECIMAL+4   ADD TO SYSUT2, CONVERT TO
         BAL   R4,MMMSS             EDITED MMM.SS
         MVC   111(6,R5),TIMEMS     AND MOVE TO SYSPRINT
         MVC   106(6,R8),TIMEMS     AND TO SYSOUT
         EJECT
***********************************************************************
*        X'FF' PROCESSING ( CONTINUED )                               *
***********************************************************************
         SPACE 1
         MVC   STORCOL3,FPRTTIME   CONVERT BINARY ELAPSED
         BAL   R4,CVD               PRINT TIME TO DECIMAL,
         MVC   RPRTTIME,DECIMAL+4   ADD TO SYSUT2, CONVERT TO
         BAL   R4,MMMSS             EDITED MMM.SS
         MVC   119(6,R5),TIMEMS     AND MOVE TO SYSPRINT
         MVC   114(6,R8),TIMEMS     AND TO SYSOUT
         SPACE 1
         MVC   STORCOL3,FPUNTIME   CONVERT BINARY ELPASED
         BAL   R4,CVD               PUNCH TIME TO DECIMAL,
         MVC   RPUNTIME,DECIMAL+4   ADD TO SYSUT2, CONVERT TO
         BAL   R4,MMMSS             EDITED MMM.SS
         MVC   127(6,R5),TIMEMS     AND MOVE TO SYSPRINT
         MVC   122(6,R8),TIMEMS     AND TO SYSOUT
         SPACE 1
         MVC   6(8,R5),FJOBNAME    MOVE JOB NAME TO SYSPRINT
         MVC   13(8,R8),FJOBNAME    AND TO SYSOUT
         MVC   RJOBNAME,FJOBNAME    AND TO SYSUT2
         SPACE 1
         MVC   20(2,R5),FJULYEAR   MOVE RECORD YEAR TO SYSPRINT
         MVI   22(R5),PERIOD       ADD EDITING PERIOD
         MVC   23(3,R5),FJULDAYS   MOVE RECORD DDD TO SYSPRINT
         MVC   90(6,R8),20(R5)     MOVE RECORD DATE TO SYSOUT
         MVC   RRECDATE,FJULYEAR   MOVE RECORD DATE TO SYSUT2
         SPACE 1
         MVC   1(3,R5),FJOBNUMB    MOVE HASP-ASSIGEED NUMBER
         MVC   8(3,R8),FJOBNUMB     TO SYSPRINT AND SYSOUT
         MVC   RJOBNO,FJOBNUMB      AND TO SYSUT2
         SPACE 1
         MVC   RCOSTMAJ,TESTCC     DEFAULT MAJOR COST CENTRE TO REFORMA
         MVC   RCOSTMIN,TESTCC+3   DEFAULT MINOR COST CENTRE TO REFORMA
         MVC   40(3,R5),TESTCC     SET UP MAJOR COST CENTRE IN SYSPRINT
         MVC   44(2,R5),TESTCC+3   SET UP MINOR COST CENTRE IN SYSPRINT
         CLC   40(6,R5),SPACES     TEST IF DEFAULT SUPPLIED
         BE    *+8                 BRANCH IF NOT
         MVI   43(R5),PERIOD       ADD PUNCTUATING PERIOD
         SPACE 1
         BAL   R4,PRINT            WRITE DETAIL LINES
         BAL   R4,WRITE            WRITE RE-FORMATED RECORD
         AP    CNTFF,ONE           INCREMENT PROCESS COUNT
XFFEXIT SUBOUT PREFIX=F,RESTORE=R4 PROCESS NEXT RECORD
         SPACE 1
         DROP  R6                  DROP DSECT ADDRESSABILITY
         EJECT
***********************************************************************
*                                                                     *
*        THIS ROUTINE PROCESSES HASP ACCOUNTING CARDS WITH AN         *
*         IDENTIFIER OF X'FE', RE-FORMATING THEM, AND PRODUCING       *
*         TWO REPORTS.                                                *
*                                                                     *
***********************************************************************
         SPACE 1
XFE      SUBIN PREFIX=E,SAVE=R4    PROCESS X'FE'-TYPE RECORD
         USING XFECARD,R6          ESTABLISH DSECT ADDRESSABILITY
         MVC   TESTCAT,ECATCODE    MOVE CATEGORY CODE TO TEST AREA,
         MVC   TESTCHRG,ECHRGCDE    DITTO CHARGE CODE,
         MVC   TESTDATE,ECRDYEAR    AND DATE OF RECORD
         MVC   CCCHARGE,ECHRGCDE   MOVE CHRG CODE TO BE MATCHED
         BAL   R4,COSTCNTR         GET DEFAULT COST CENTRE
         MVC   TESTCC,CC           SET UP DEFAULT COST CENTRE
         CLC   EMAJCC,LOWVALUE     TEST FOR MAJOR COST CENTRE SUPPLIED
         BE    *+16                BRANCH IF NOT
         UNPK  TESTCC(3),EMAJCC    UNPACK MAJOR COST CENTRE
         OC    TESTCC(3),ORCC      ENSURE SIGNS ARE HEX F'S
         CLC   EMINCC,LOWVALUE     TEST FOR MINOR COST CENTRE SUPPLIED
         BE    *+16                BRANCH IF NOT
         MVC   TESTCC+3(2),EMINCC  SET UP MINOR COST CENTRE
         OC    TESTCC+3(2),ORCC    ENSURE SIGNS ARE HEX F'S
         BAL   R4,SELECT           DETERMINE WHETHER RECORD IS REQUIRED
         B     XFEEXIT             RECORD NOT REQUIRED
         SPACE 1
         MVC   6(8,R5),EJOBNAME    JOB NAME TO SYSPRINT,
         MVC   13(8,R8),EJOBNAME    AND TO SYSOUT,
         MVC   RJOBNAME,EJOBNAME    AND TO SYSUT2
         SPACE 1
         MVC   28(4,R5),ECHRGCDE   CHARGE CODE TO SYSPRINT
         MVC   RCHRGCDE,ECHRGCDE    AND TO SYSUT2
         SPACE 1
         MVC   33(2,R5),EREADCLS   READ AND EXEC CLASSES TO SYSPRINT
         MVC   RREADCLS,EREADCLS   JOB CLASS AT READ TO SYSUT2
         MVC   REXECCLS,EEXECCLS   JOB CLASS AT EXEC TO SYSUT2
         SPACE 1
         MVC   STORCOL1,EJOBPRTY   CONVERT BINARY PRIORITY
         BAL   R4,CVD               TO EBCDIC,
         MVC   16(2,R5),DISPLAY+14  AND MOVE TO SYSPRINT
         MVC   RJOBPRTY,DISPLAY+14  AND TO SYSUT2
         SPACE 1
         MVC   STORCOL1,EPRTID     CONVERT BINARY PRINTER I.D.
         BAL   R4,CVD               TO EBCDIC,
         MVC   58(2,R5),DISPLAY+14  AND MOVE TO SYSPRINT
         MVC   RPRTID,DISPLAY+14    AND TO SYSUT2
         SPACE 1
         MVC   36(2,R5),ECATCODE   MOVE CATEGORY CODE TO
         MVC   RCATCODE,ECATCODE    SYSPRINT AND SYSUT2
         EJECT
***********************************************************************
*        X'FE' PROCESSING ROUTINE ( CONTINUED )                       *
***********************************************************************
         SPACE 1
         MVC   STORCOL1,EPUNID     CONVERT BINARY PUNCH I.D.
         BAL   R4,CVD               TO EBCDIC,
         MVC   53(2,R5),DISPLAY+14  AND MOVE TO SYSPRINT
         MVC   RPUNID,DISPLAY+14    AND SYSUT2
         SPACE 1
         CLC   EREADATE,LOWVALUE   TEST FOR READ DATE
         BE    *+24                BRANCH IF NONE
         LA    R2,EREADATE         CONVERT PACKED JULIANREAD DATE
         BAL   R4,YYDDD             TO EBCDIC,
         MVC   28(6,R8),DATEJUL     AND MOVE TO SYSOUT
         MVC   RREADATE,DATEJUL2    AND TO SYSUT2
         SPACE 1
         MVC   STORCOL3,EREADTIM   CONVERT BINARY TIME READ
         BAL   R4,CVD               TO DECIMAL AND EBCDIC,
         BAL   R4,HHMMSS            CONVERT TO HH.MM.SS,
         MVC   62(8,R5),TIMEHMS     AND MOVE TO SYSPRINT
         MVC   36(8,R8),TIMEHMS     AND SYSOUT
         MVC   RREADTME,TIMEHMS2    AND TO SYSUT2
         SPACE 1
         MVC   STORCOL3,ERDRTIME   CONVERT BINARY ELAPSED READ TIME
         BAL   R4,CVD               TO DECIMAL,
         MVC   RRDRTIME,DECIMAL+4   ADD PACKED TIME TO SYSUT2,
         BAL   R4,MMMSS             CONVERT TO MMM.SS,
         MVC   103(6,R5),TIMEMS     AND ADD TO SYSPRINT
         MVC   98(6,R8),TIMEMS      AND TO SYSOUT
         SPACE 1
         MVC   STORCOL2,ECARDSIN   CONVERT BINARY CARDS READ
         BAL   R4,CVD               TO DECIMAL AND EBCDIC,
         MVC   82(5,R5),DISPLAY+11  AND ADD IT TO SYSPRINT
         MVC   RCARDSIN,DECIMAL+5   AND TO SYSUT2
         SPACE 1
         MVC   STORCOL3,ELINEOUT   CONVERT BINARY LINES PRINTED
         BAL   R4,CVD               TO DECIMAL AND EBCDIC,
         MVC   95(6,R5),DISPLAY+10  AND ADD TO SYSPRINT
         MVC   RLINEOUT,DECIMAL+5   AND TO SYSUT2
         SPACE 1
         MVC   STORCOL2,ECARDOUT   CONVERT BINARY CARDS PUNCHED
         BAL   R4,CVD               TO DECIMAL AND EBCDIC,
         MVC   89(5,R5),DISPLAY+11  AND ADD TO SYSPRINT
         MVC   RCARDOUT,DECIMAL+5   AND TO SYSUT2
         SPACE 1
         CLC   ESTRTDAT,LOWVALUE   TEST FOR START DATE FROM O.S.
         BE    *+26                BRANCH IF NONE
         MVC   46(2,R8),ESTRTDAT   MOVE DATE
         MVI   48(R8),PERIOD        STARTED
         MVC   49(3,R8),ESTRTDAT+2  TO SYSOUT
         MVC   RSTRTDAT,ESTRTDAT    AND SYSUT2
         EJECT
***********************************************************************
*        X'FE' PROCESSING ROUTINE ( CONTINUED )                       *
***********************************************************************
         SPACE 1
         CLC   ESTRTIME,LOWVALUE   TEST FOR START TIME FROM O.S.
         BE    *+36                BRANCH IF NONE
         MVC   54(2,R8),ESTRTIME   MOVE
         MVI   56(R8),PERIOD        TIME
         MVC   57(2,R8),ESTRTIME+2  STARTED
         MVI   59(R8),PERIOD        TO
         MVC   60(2,R8),ESTRTIME+4  SYSOUT
         MVC   RSTRTIME,ESTRTIME    AND SYSUT2
         SPACE 1
         MVC   STORCOL3,EXEQTIME   CONVERT BINARY ELAPSED XEQ TIME
         BAL   R4,CVD               TO DECIMAL,
         MVC   RXEQTIME,DECIMAL+4   MOVE TO SYSUT2,
         BAL   R4,MMMSS             CONVERT TO MMM.SS,
         MVC   111(6,R5),TIMEMS     AND ADD TO SYSPRINT
         MVC   106(6,R8),TIMEMS     AND TO SYSOUT
         SPACE 1
         CLC   EPRTDATE,LOWVALUE   TEST FOR PRINT DATE
         BE    *+24                BRANCH IF NONE
         LA    R2,EPRTDATE         CONVERT PACKED PRINT DATE
         BAL   R4,YYDDD             TO JULIAN,
         MVC   64(6,R8),DATEJUL     AND MOVE TO SYSOUT
         MVC   RPRTDATE,DATEJUL2    AND TO SYSUT2
         SPACE 1
         MVC   STORCOL3,EOUTTIME   CONVERT BINARY TIME PRINTED
         BAL   R4,CVD               TO DECIMAL
         BAL   R4,HHMMSS            AND THEN TO HH.MM.SS,
         MVC   72(8,R5),TIMEHMS     AND ADD TO SYSPRINT
         MVC   72(8,R8),TIMEHMS     TO SYSOUT,
         MVC   RPRNTIME,TIMEHMS2    AND TO SYSUT2
         SPACE 1
         MVC   STORCOL3,EPRTIME    CONVERT BINARY ELAPSED PRINT TIME
         BAL   R4,CVD               TO DECIMAL,
         MVC   RPRTTIME,DECIMAL+4   ADD IT TO SYSUT2,
         BAL   R4,MMMSS             CONVERT IT TO MMM.SS,
         MVC   119(6,R5),TIMEMS     AND ADD IT TO SYSPRINT
         MVC   114(6,R8),TIMEMS     AND TO SYSOUT
         SPACE 1
         CLC   EPUNDATE,LOWVALUE   TEST FOR PUNCH DATE
         BE    *+24                BRANCH IF NONE
         LA    R2,EPUNDATE         CONVERT PACKED PUNCH DATE
         BAL   R4,YYDDD             TO JULIAN,
         MVC   82(6,R8),DATEJUL     AND ADD IT TO SYSOUT
         MVC   RPUNDATE,DATEJUL2    AND TO SYSUT2
         EJECT
***********************************************************************
*        X'FE' PROCESSING ROUTINE ( CONTINUED )                       *
***********************************************************************
         SPACE 1
         MVC   STORCOL3,EPUNTIME   CONVERT BINARY PUNCH TIME
         BAL   R4,CVD               TO DECIMAL,
         MVC   RPUNTIME,DECIMAL+4   ADD IT TO SYSUT2,
         BAL   R4,MMMSS             CONVERT IT TO MMM.SS,
         MVC   127(6,R5),TIMEMS     AND ADD IT TO SYSPRINT
         MVC   122(6,R8),TIMEMS     AND TO SYSOUT
         SPACE 1
         CLC   EOSJOBNO,LOWVALUE   TEST FOR O.S. JOB NO.
         BE    *+16                BRANCH IF NOT
         MVC   23(3,R8),EOSJOBNO   MOVE OS JOB NO TO SYSOUT,
         MVC   ROSJOBNO,EOSJOBNO    AND TO SYSUT2
         SPACE 1
         MVC   40(3,R5),TESTCC     SET UP MAJOR AND MINOR
         MVC   44(2,R5),TESTCC+3    COST CENTRES IN SYSPRINT
         CLC   40(6,R5),SPACES     TEST IF COST CENTRE EXISTS
         BE    *+8                 BRANCH IF NOT
         MVI   43(R5),PERIOD       ADD PUNCTUATING PERIOD
         MVC   RCOSTMAJ,TESTCC     SET UP MAJOR AND MINOR
         MVC   RCOSTMIN,TESTCC+3    COST CENTRES IN REFORMATED RECORD
         SPACE 1
         MVC   20(2,R5),ECRDYEAR   SET UP THE DATE
         MVI   22(R5),PERIOD        OF THE ACCOUNTING RECORD
         MVC   23(3,R5),ECRDDAYS    IN SYSPRINT,
         MVC   90(6,R8),20(R5)      IN SYSOUT,
         MVC   RRECDATE,ECRDYEAR    AND ALSO IN SYSUT2
         SPACE 1
         MVC   1(3,R5),EJOBNO      SET UP HASP JOB NO IN SYSPRINT,
         MVC   8(3,R8),EJOBNO       IN SYSOUT,
         MVC   RJOBNO,EJOBNO        AND IN SYSUT2
         SPACE 1
         BAL   R4,PRINT            WRITE THE REPORT LINES
         BAL   R4,WRITE            WRITE THE RE-FORMATED RECORD
         AP    CNTFE,ONE           INCREMENT COUNTER
XFEEXIT SUBOUT PREFIX=E,RESTORE=R4 PROCESS NEXT RECORD
         SPACE 1
         DROP  R6                  DROP DSECT ADDRESSABILITY
         EJECT
***********************************************************************
*                                                                     *
*        THIS ROUTINE PROCESSES HASP ACCOUNTING CARDS WITH AN         *
*         IDENTIFIER OF X'FD', RE-FORMATING THEM, AND PRODUCING       *
*         TWO REPORTS.                                                *
*                                                                     *
***********************************************************************
         SPACE 1
XFD      SUBIN PREFIX=D,SAVE=R4    PROCESS X'FD'-TYPE RECORD
         USING XFDCARD,R6          ESTABLISH DSECT ADDRESSABILITY
         SPACE 1
         MVC   TESTCAT,DCATCODE    MOVE CATEGORY CODE TO TEST AREA,
         MVC   TESTCHRG,DCHRGCDE    DITTO CHARGE CODE,
         MVC   TESTDATE,DCRDYEAR    AND DATE OF RECORD
         MVC   CCCHARGE,DCHRGCDE   MOVE CHRG CODE TO BE MATCHED
         BAL   R4,COSTCNTR         GET DEFAULT COST CENTRE
         MVC   TESTCC,CC           SET UP DEFAULT COST CENTRE
         CLC   DMAJCC,LOWVALUE     TEST FOR MAJOR COST CENTRE SUPPLIED
         BE    *+16                BRANCH IF NOT
         UNPK  TESTCC(3),DMAJCC    UNPACK MAJOR COST CENTRE
         OC    TESTCC(3),ORCC      ENSURE SIGNS ARE HEX F'S
         CLC   DMINCC,LOWVALUE     TEST FOR MINOR COST CENTRE SUPPLIED
         BE    *+16                BRANCH IF NOT
         MVC   TESTCC+3(2),DMINCC  SET UP MINOR COST CENTRE
         OC    TESTCC+3(2),ORCC    ENSURE SIGNS ARE HEX F'S
         BAL   R4,SELECT           DETERMINE WHETHER RECORD IS REQUIRED
         B     XFDEXIT             RECORD NOT REQUIRED
         SPACE 1
         MVC   6(8,R5),DJOBNAME    JOB NAME TO SYSPRINT,
         MVC   13(8,R8),DJOBNAME    AND TO SYSOUT,
         MVC   RJOBNAME,DJOBNAME    AND TO SYSUT2
         SPACE 1
         MVC   28(4,R5),DCHRGCDE   CHARGE CODE TO SYSPRINT
         MVC   RCHRGCDE,DCHRGCDE    AND TO SYSUT2
         SPACE 1
         MVC   33(2,R5),DREADCLS   READ AND EXEC CLASSES TO SYSPRINT
         MVC   RREADCLS,DREADCLS   JOB CLASS AT READ TO SYSUT2
         MVC   REXECCLS,DEXECCLS   JOB CLASS AT EXEC TO SYSUT2
         SPACE 1
         MVC   STORCOL1,DJOBPRTY   CONVERT BINARY PRIORITY
         BAL   R4,CVD               TO EBCDIC,
         MVC   16(2,R5),DISPLAY+14  AND MOVE TO SYSPRINT
         MVC   RJOBPRTY,DISPLAY+14  AND TO SYSUT2
         SPACE 1
         MVC   STORCOL1,DPRTID     CONVERT BINARY PRINTER I.D.
         BAL   R4,CVD               TO EBCDIC,
         MVC   58(2,R5),DISPLAY+14  AND MOVE TO SYSPRINT
         MVC   RPRTID,DISPLAY+14    AND TO SYSUT2
         SPACE 1
         MVC   36(2,R5),DCATCODE   MOVE CATEGORY CODE TO
         MVC   RCATCODE,DCATCODE    SYSPRINT AND SYSUT2
         EJECT
***********************************************************************
*        X'FD' PROCESSING ROUTINE ( CONTINUED )                       *
***********************************************************************
         SPACE 1
         MVC   STORCOL1,DPUNID     CONVERT BINARY PUNCH I.D.
         BAL   R4,CVD               TO EBCDIC,
         MVC   53(2,R5),DISPLAY+14  AND MOVE TO SYSPRINT
         MVC   RPUNID,DISPLAY+14    AND SYSUT2
         SPACE 1
         CLC   DREADATE,LOWVALUE   TEST FOR READ DATE
         BE    *+24                BRANCH IF NONE
         LA    R2,DREADATE         CONVERT PACKED JULIANREAD DATE
         BAL   R4,YYDDD             TO EBCDIC,
         MVC   28(6,R8),DATEJUL     AND MOVE TO SYSOUT
         MVC   RREADATE,DATEJUL2    AND TO SYSUT2
         SPACE 1
         MVC   STORCOL3,DREADTIM   CONVERT BINARY TIME READ
         BAL   R4,CVD               TO DECIMAL AND EBCDIC,
         BAL   R4,HHMMSS            CONVERT TO HH.MM.SS,
         MVC   62(8,R5),TIMEHMS     AND MOVE TO SYSPRINT
         MVC   36(8,R8),TIMEHMS     AND SYSOUT
         MVC   RREADTME,TIMEHMS2    AND TO SYSUT2
         SPACE 1
         MVC   STORCOL3,DRDRTIME   CONVERT BINARY ELAPSED READ TIME
         BAL   R4,CVD               TO DECIMAL,
         MVC   RRDRTIME,DECIMAL+4   ADD PACKED TIME TO SYSUT2,
         BAL   R4,MMMSS             CONVERT TO MMM.SS,
         MVC   103(6,R5),TIMEMS     AND ADD TO SYSPRINT
         MVC   98(6,R8),TIMEMS      AND TO SYSOUT
         SPACE 1
         MVC   STORCOL2,DCARDSIN   CONVERT BINARY CARDS READ
         BAL   R4,CVD               TO DECIMAL AND EBCDIC,
         MVC   82(5,R5),DISPLAY+11  AND ADD IT TO SYSPRINT
         MVC   RCARDSIN,DECIMAL+5   AND TO SYSUT2
         SPACE 1
         MVC   STORCOL3,DLINEOUT   CONVERT BINARY LINES PRINTED
         BAL   R4,CVD               TO DECIMAL AND EBCDIC,
         MVC   95(6,R5),DISPLAY+10  AND ADD TO SYSPRINT
         MVC   RLINEOUT,DECIMAL+5   AND TO SYSUT2
         SPACE 1
         MVC   STORCOL2,DCARDOUT   CONVERT BINARY CARDS PUNCHED
         BAL   R4,CVD               TO DECIMAL AND EBCDIC,
         MVC   89(5,R5),DISPLAY+11  AND ADD TO SYSPRINT
         MVC   RCARDOUT,DECIMAL+5   AND TO SYSUT2
         SPACE 1
         CLC   DSTRTDAT,LOWVALUE   TEST FOR START DATE FROM O.S.
         BE    *+26                BRANCH IF NONE
         MVC   46(2,R8),DSTRTDAT   MOVE DATE
         MVI   48(R8),PERIOD        STARTED
         MVC   49(3,R8),DSTRTDAT+2  TO SYSOUT
         MVC   RSTRTDAT,DSTRTDAT    AND SYSUT2
         EJECT
***********************************************************************
*        X'FD' PROCESSING ROUTINE ( CONTINUED )                       *
***********************************************************************
         SPACE 1
         CLC   DSTRTIME,LOWVALUE   TEST FOR START TIME FROM O.S.
         BE    *+36                BRANCH IF NONE
         MVC   54(2,R8),DSTRTIME   MOVE
         MVI   56(R8),PERIOD        TIME
         MVC   57(2,R8),DSTRTIME+2  STARTED
         MVI   59(R8),PERIOD        TO
         MVC   60(2,R8),DSTRTIME+4  SYSOUT
         MVC   RSTRTIME,DSTRTIME    AND SYSUT2
         SPACE 1
         MVC   STORCOL3,DXEQTIME   CONVERT BINARY ELAPSED XEQ TIME
         BAL   R4,CVD               TO DECIMAL,
         MVC   RXEQTIME,DECIMAL+4   MOVE TO SYSUT2,
         BAL   R4,MMMSS             CONVERT TO MMM.SS,
         MVC   111(6,R5),TIMEMS     AND ADD TO SYSPRINT
         MVC   106(6,R8),TIMEMS     AND TO SYSOUT
         SPACE 1
         CLC   DPRTDATE,LOWVALUE   TEST FOR PRINT DATE
         BE    *+24                BRANCH IF NONE
         LA    R2,DPRTDATE         CONVERT PACKED PRINT DATE
         BAL   R4,YYDDD             TO JULIAN,
         MVC   64(6,R8),DATEJUL     AND MOVE TO SYSOUT
         MVC   RPRTDATE,DATEJUL2    AND TO SYSUT2
         SPACE 1
         MVC   STORCOL3,DOUTTIME   CONVERT BINARY TIME PRINTED
         BAL   R4,CVD               TO DECIMAL
         BAL   R4,HHMMSS            AND THEN TO HH.MM.SS,
         MVC   72(8,R5),TIMEHMS     AND ADD TO SYSPRINT
         MVC   72(8,R8),TIMEHMS     TO SYSOUT,
         MVC   RPRNTIME,TIMEHMS2    AND TO SYSUT2
         SPACE 1
         MVC   STORCOL3,DPRTIME    CONVERT BINARY ELAPSED PRINT TIME
         BAL   R4,CVD               TO DECIMAL,
         MVC   RPRTTIME,DECIMAL+4   ADD IT TO SYSUT2,
         BAL   R4,MMMSS             CONVERT IT TO MMM.SS,
         MVC   119(6,R5),TIMEMS     AND ADD IT TO SYSPRINT
         MVC   114(6,R8),TIMEMS     AND TO SYSOUT
         SPACE 1
         CLC   DCARDOUT,LOWVALUE   TEST FOR CARDS PUNCHED
         BNE   *+10                YES - BRANCH
         MVC   DPUNDATE,LOWVALUE   MOVE ZEROES IN PRINT DATE
         CLC   DPUNDATE,LOWVALUE   TEST FOR PUNCH DATE
         BE    *+24                BRANCH IF NONE
         LA    R2,DPUNDATE         CONVERT PACKED PUNCH DATE
         BAL   R4,YYDDD             TO JULIAN,
         MVC   82(6,R8),DATEJUL     AND ADD IT TO SYSOUT
         MVC   RPUNDATE,DATEJUL2    AND TO SYSUT2
         EJECT
***********************************************************************
*        X'FD' PROCESSING ROUTINE ( CONTINUED )                       *
***********************************************************************
         SPACE 1
         CLC   DCARDOUT,LOWVALUE   TEST FOR CARDS PUNCHED
         BNE   *+10                YES - BRANCH
         MVC   DPUNTIME,LOWVALUE   MOVE ZEROES IN PRINT TIME
         MVC   STORCOL3,DPUNTIME   CONVERT BINARY PUNCH TIME
         BAL   R4,CVD               TO DECIMAL,
         MVC   RPUNTIME,DECIMAL+4   ADD IT TO SYSUT2,
         BAL   R4,MMMSS             CONVERT IT TO MMM.SS,
         MVC   127(6,R5),TIMEMS     AND ADD IT TO SYSPRINT
         MVC   122(6,R8),TIMEMS     AND TO SYSOUT
         SPACE 1
         CLC   DOSJOBNO,LOWVALUE   TEST FOR O.S. JOB NO.
         BE    *+16                BRANCH IF NOT
         MVC   23(3,R8),DOSJOBNO   MOVE OS JOB NO TO SYSOUT,
         MVC   ROSJOBNO,DOSJOBNO    AND TO SYSUT2
         SPACE 1
         MVC   40(3,R5),TESTCC     SET UP MAJOR AND MINOR
         MVC   44(2,R5),TESTCC+3    COST CENTRES IN SYSPRINT
         CLC   40(6,R5),SPACES     TEST IF COST CENTRE EXISTS
         BE    *+8                 BRANCH IF NOT
         MVI   43(R5),PERIOD       ADD PUNCTUATING PERIOD
         MVC   RCOSTMAJ,TESTCC     SET UP MAJOR AND MINOR
         MVC   RCOSTMIN,TESTCC+3    COST CENTRES IN REFORMATED RECORD
         SPACE 1
         MVC   20(2,R5),DCRDYEAR   SET UP THE DATE
         MVI   22(R5),PERIOD        OF THE ACCOUNTING RECORD
         MVC   23(3,R5),DCRDDAYS    IN SYSPRINT,
         MVC   90(6,R8),20(R5)      IN SYSOUT,
         MVC   RRECDATE,DCRDYEAR    AND ALSO IN SYSUT2
         SPACE 1
         MVC   1(3,R5),DJOBNO      SET UP HASP JOB NO IN SYSPRINT,
         MVC   8(3,R8),DJOBNO       IN SYSOUT,
         MVC   RJOBNO,DJOBNO        AND IN SYSUT2
         SPACE 1
         CLC   DENTITY,LOWVALUE     TEST FOR ENTITY CODE
         BE    *+16                 BRANCH IF NONE
         MVC   49(2,R5),DENTITY    MOVE ENTITY CODE TO SYSPRINT,
         MVC   RENTITY,DENTITY      AND TO SYSUT2
         SPACE 1
         BAL   R4,PRINT            WRITE THE REPORT LINES
         BAL   R4,WRITE            WRITE THE RE-FORMATED RECORD
         AP    CNTFD,ONE           INCREMENT COUNTER
XFDEXIT SUBOUT PREFIX=D,RESTORE=R4 PROCESS NEXT RECORD
         SPACE 1
         DROP  R6                  DROP DSECT ADDRESSABILITY
***********************************************************************
*        CONVERT BINARY WORD TO DECIMAL AND EBCDIC                    *
***********************************************************************
         SPACE 1
CVD      SUBIN ,                   CONVERT COLUMN BINARY
         L     R3,BINSTORE         LOAD BINARY FIELD TO WORK REGISTER
         CVD   R3,DECIMAL          CONVERT TO DECIMAL
         OI    DECIMAL+7,X'0F'     SET ZONE TO 'F'
         XC    BINSTORE,BINSTORE   SET WORK AREA TO BINARY ZEROES
         MVC   DISPLAY,EDITCVD     MOVE EDIT PATTERN TO DISPLAY AREA
         ED    DISPLAY,DECIMAL     CONVERT TO EBCDIC
        SUBOUT ,                   RETURN TO CALLER
         SPACE 5
***********************************************************************
*        CONVERT /100 SECS TO MMM.SS                                  *
***********************************************************************
         SPACE 1
MMMSS    SUBIN ,                   CONVERT 100'THS OF SEC TO MMM.SS
         DP    DECIMAL,HUNDRED     CONVERT HUMDREDTHS TO SECS
         CP    DECIMAL+6(2),FIFTY  TEST IF REMAINDER GREATER THAN 49
         BL    *+10                BYPASS ROUNDING IF NOT
         AP    DECIMAL(6),ONE      ROUND UP BY ONE SECOND
         DP    DECIMAL(6),SIXTY    CONVERT TO MINUTES AND SECONDS
         MVC   EDITWORK(7),EDMMMSS MOVE EDIT PATTERN OO WORK AREA
         ED    EDITWORK(7),DECIMAL+2 CONVERT MMMSS TO DISPLAY
         MVI   EDITWORK+4,PERIOD   ADD PUNCTUATION
         MVC   TIMEMS,EDITWORK+1   PRESERVE MMM.SS
        SUBOUT ,                   RETURN TO CALLER
         EJECT
***********************************************************************
*        CONVERT /100 SECS TO HH.MM.SS                                *
***********************************************************************
         SPACE 1
HHMMSS   SUBIN ,                   CONVERT 100'THS OF SEC TO HH.MM.SS
         DP    DECIMAL,HUNDRED     CONVERT HUNDREDTHS TO SECONDS
         CP    DECIMAL+6(2),FIFTY  TEST IF REMAINDER GREATER THAN 49
         BL    *+10                BYPASS ROUNDING IF NOT
         AP    DECIMAL(6),ONE      ROUND UP BY 1 SECOND
         DP    DECIMAL(6),SIXTY    CONVERT TO MUNUTES & SECONDS
         DP    DECIMAL(4),SIXTY    CONVERT TO HOURS & MINUTES
         MVC   EDITWORK,EDHHMMSS   MOVE EDIT PATTERN TO WORK AREA
         ED    EDITWORK,DECIMAL    CONVERT TO CHARACTER,
         MVI   EDITWORK+4,PERIOD    AND INSERT THE
         MVI   EDITWORK+7,PERIOD    PUNCTUATING PERIODS
         MVC   TIMEHMS,EDITWORK+2  SAVE EDITED HH.MM.SS
         MVC   TIMEHMS2(2),TIMEHMS  AND ALSO
         MVC   TIMEHMS2+2(2),TIMEHMS+3 SAVE UNEDITED
         MVC   TIMEHMS2+4(2),TIMEHMS+6 HHMMSS
        SUBOUT ,                   RETURN TO CALLER
         SPACE 5
***********************************************************************
*        CONVERT PACKED JULIAN DATE TO YY.DDD                         *
***********************************************************************
         SPACE 1
YYDDD    SUBIN ,                   CONVERT PACKED JULIAN DATE TO EBCDIC
         OI    2(R2),X'0F'         ENSURE SIGN IS HEX 'F'
         MVC   EDITWORK(7),EDITJUL SET UP EDIT PATTERN IN WORK AREA
         ED    EDITWORK(7),0(R2)   CONVERT TO YY.DDD
         MVC   DATEJUL,EDITWORK+1  PRESERVE EDITED JULIAN DATE
         UNPK  DATEJUL2,0(3,R2)    UNPACK DATE AS YYDDD
        SUBOUT ,                   RETURN TO CALLER
         EJECT
***********************************************************************
*        ROUTINE TO INITIALISE AN AREA OF CORE TO HIGH-VALUES.        *
*         ON ENTRY, THE FIELD DECIMAL CONTAINS THE LENGTH OF          *
*         THE AREA TO BE INITIALISED, AND THE AREA IS POINTED         *
*         TO BY R1.  R2 AND R3 ARE USED AS WORK REGISTERS,            *
*         AND THE CONTENTS OF R1 ARE DESTROYED.                       *
***********************************************************************
         SPACE 1
FFINIT   SUBIN ,                   INITIALISE TO X';;'
         CVB   R2,DECIMAL          LENGTH OF AREA TO R2
FFINIT2  LA    R3,256              INITIALISE R3 FOR USE AS COMPARAND
         MVI   0(R1),X'FF'         MOVE IN PROPAGATION CHARACTER
         CR    R2,R3               TEST IF MORE THAN 256 BYTES LEFT
         BNH   FFINIT3             BRANCH IF NOT
         SR    R2,R3               DECREMENT RESIDUAL COUNT BY 256
         BCTR  R3,0                DECREMENT FOR 255 BYTE MOVE
         BCTR  R3,0                DECREMENT R3 FOR EXECUTE
         EX    R3,FFMVC            INITIALISE 256 BYTES TO X'FF'
         LA    R1,256(,R1)         INCREMENT R1 TO UNINITIALISED AREA
         B     FFINIT2             REPEAT FOR NEXT 256 BYTES
FFINIT3  BCTR  R2,0                DECREMENT FOR (LENGTH-1) MOVE
         BCTR  R2,0                DECREMENT R2 FOR EXECUTE
         EX    R2,FFMVC            INITIALISE REMAINDER TO X'FF'
        SUBOUT ,                   RETURN TO CALLER
         SPACE 1
FFMVC    MVC   1(0,R1),0(R1)       EXECUTED MOVE INSTRUCTION
         SPACE 5
***********************************************************************
*        ROUTINE TO REVERSE THE CONTENTS OF R2 AND R3                 *
***********************************************************************
         SPACE 1
REVERSE  SUBIN ,                   REVERSE R2 AND R3
         XR    R2,R3               EXCLUSIVELY 'OR' THE
         XR    R3,R2                CONTENTS OF THE REGISTERS
         XR    R2,R3                TO REVERSE THEM.
        SUBOUT ,                   RETURN TO THE CALLER
         EJECT
***********************************************************************
*        THIS ROUTINE IS GIVEN CONTROL IF,WHILE BUILDING THE          *
*         COST CENTRE / CHARGE CODE TABLE, A DUPLICATE CHARGE         *
*         CODE IS DETECTED.  ERROR MESSAGES ARE CONSTRUCTED FOR       *
*         SYSPRINT AND SYSOUT, AND RETURN IS SUCH THAT THE            *
*         THE DUPLICATE IS SUBSEQUENTLY OVER-WRITTEN.                 *
***********************************************************************
         SPACE 1
TABLEREJ SUBIN PREFIX=T,SAVE=(R1,R4) TELL OF DUP KEY
         CLI   0(R1),X'EE'         TEST FOR PREVIOUSLY REJECTED KEY
         BE    REJEXIT             BRANCH IF YES
         MVC   5(L'LINE35,R5),LINE35 MOVE ERROR MESSAGE 1 TO
         MVC   5(L'LINE35,R8),LINE35  TSYSPRINT AND SYSOUT
         BAL   R4,PRINT               AND WRITE IT
         MVC   10(L'LINE36,R5),LINE36 SECOND LINE TO SYSPRINT
         L     R1,TSAVER1          RETRIEVE ELEMENT POINTER
         MVC   34(4,R5),NTRYCHRG(R1) CHARGE CODE TO SYSPRINT
         MVC   39(5,R5),NTRYCOST(R1)  COST CENTRE TO SYSPRINT
         MVC   0(133,R8),0(R5)     ERROR MEESAGE TO SYSOUT
         BAL   R4,PRINT            WRITE ERROR MEDDAGE
         SP    CNTNTRYS,ONE        DECREMENT TABLE ENTRY COUNT
         CP    CNTLINE,OVERFLOW    TEST FOR END OF PAGE
         BL    *+16                BRANCH IF NOT
         MVI   0(R5),PAGESKIP      ESTABLISH
         MVI   0(R8),PAGESKIP       PAGE SKIP AND
         BAL   R4,PRINT             ISSUE THEM
REJEXIT SUBOUT PREFIX=T,RESTORE=(R1,R4) RETURN TO CALLER
         EJECT
***********************************************************************
*        THIS ROUTINE USES THE BINARY CHOP SEARCH TECHNIUUE TO        *
*         SC+N THE TABLE OF COST CENTRE / CHARGE CODE ENTRIES TO      *
*         GAT A DEFAULT COST CENTRE FOR A SPECIFIC CHARGE CODE.       *
*         ON ENTRY, CCCHARGE CONTAINS THE CHARGE CODE TO BE           *
*         MATCHED, AND THE CORRESPONDING CODT CEBTRE IS PLACED        *
*         IN CC.  IF NO MATCH IS FOUND, CC IS SET TO SPACES.          *
*         CC IS ALSO INITIALISED TO SPACES, AND THE ROUTINE IS        *
*         BYPASSED IF NO TABLE WAS CREATED.                           *
***********************************************************************
         SPACE 1
COSTCNTR SUBIN ,                   GET DEFAULT COST CENTRE
CCSW     EQU   *+1                 BRANCH SET OFF IF TABLE EXISTS
         B     CCEND               BYPASS SEARCH IF NO TABLE
         MVC   CC,SPACES           SET TO DEFAULT DEFAULT OF SPACES
         ZAP   CNTLO,ZERO          ZEROISE LO COUNTER
         ZAP   CNTHI,CNTNTRYS      INITIALISE
         AP    CNTHI,ONE            HI COUNTER
         L     R2,ADRTABLE         POINT R2 AT THE TABLE
         SPACE 1
CCLOOP   ZAP   DECIMAL,CNTHI       MOVE HI TO WORK AREA
         SP    DECIMAL,CNTLO       SUBTRACT LO FROM HI
         CP    DECIMAL,ONE         TEST IF DIFFERENCE IS 1
         BE    CCEND               BRANCH IF YES ( NO MATCH )
         SPACE 1
         ZAP   DECIMAL,CNTHI       MOVE HI COUNT TO WORK AREA
         AP    DECIMAL,CNTLO       ADD LO TO HI
         DP    DECIMAL,TWO         DIVIDE BY TWO
         SP    DECIMAL(6),ONE      DECREMENT FOR CORRECT DISPLACEMENT
*                                   - ENTRY X HAS DISPLACEMENT 9*(X01)
         ZAP   CNTMID,DECIMAL(6)   PRESERVE THE RESULT ( NEW INDEX )
         SPACE 1
         ZAP   DECIMAL,CNTMID      MOVE SEARCH INDEX TO WORK AREA
         AP    CNTMID,ONE          INCREMENT FROM DISPLACEMENT TO INDEX
         MP    DECIMAL,NINE        MULTIPLY BY ELEMENT LENGTH
         CVB   R3,DECIMAL          CONVERT INDEX TO BINARY
         AR    R3,R2               POINT R3 AT ENTRY TO BE TESTED
         CLC   CCCHARGE,NTRYCHRG(R3) TEST FOR MATCH
         BE    CCFOUND             BRANCH IF EQUAL ( MATCH )
         SPACE 1
         BL    *+14                BRANCH IF LOW
         ZAP   CNTLO,CNTMID        ADJUST LO TO NEW SEARCH VALUE
         B     CCLOOP              RE-ITERATE
         ZAP   CNTHI,CNTMID        ADJUST HI TO NEW SEARCH VALUE
         B     CCLOOP              RE-ITERATE
         SPACE 1
CCFOUND  MVC   CC,NTRYCOST(R3)     SET DEFAULT INTO CC
CCEND   SUBOUT ,                   RETURN TO CALLER
         EJECT
***********************************************************************
*        WRITE TO SYSUT2                                              *
***********************************************************************
         SPACE 1
WRITE    SUBIN SAVE=(R4)           WRITE TO SYSUT2
         TM    SYSUT2SW,DDOPEN     TEST IF DATA SET OPEN
         BZ    0(R4)               RETURN IF NOT
         PUT   SYSUT2,(R7)         WRITE SYSUT2 RECORD
         LR    R7,R1               SAVE NEW BUFFER ADDRESS
         AP    CNTUT2,ONE          INCREMENT RECORD COUNT
         BAL   R4,UT2INIT          INIT NEW BUFFER AREA
        SUBOUT RESTORE=(R4)        RETURN TO CALLER
         SPACE 1
*        INIT SYSUT2 REFORMATED RECORDS
         SPACE 1
UT2INIT  SUBIN ,                   INIT SYSUT2 OUTPUT AREA
         MVI   0(R7),SPACE         MOVE SPACE TO START OF RECORD
         MVC   1(110,R7),0(R7)      AND PROPAGATE THROUGH
         MVC   RRECDATE,ZEROES     SET ZERO DEFAULT IN RRECDATE
         MVC   RSTRTDAT,ZEROES     SET ZERO DEFAULT IN RSTRTDAT
         MVC   RSTRTIME,ZEROES     SET ZERO DEFAULT IN RSTRTIME
         MVC   RREADTME,ZEROES     SET ZERO DEFAULT IN RREADTME
         MVC   RPRNTIME,ZEROES     SET ZERO DEFAULT IN RPRNTIME
         MVC   RREADATE,ZEROES     SET ZERO DEFAULT IN RREADATE
         MVC   RPRTDATE,ZEROES     SET ZERO DEFAULT IN RPRTDATE
         MVC   RPUNDATE,ZEROES     SET ZERO DEFAULT IN RPUNDATE
UT2INITX SUBOUT ,                  RETURN TO CALLER
         EJECT
***********************************************************************
*        THIS ROUTINE DETERMINES WHETHER OR NOT TO PROCESS A RECORD.  *
*         IF THE RECORD IS TO BE PROCESSED, RETURN IS TO R4+4,        *
*         OTHERWISE RETURN IS TO R4.                                  *
***********************************************************************
         SPACE 1
SELECT   SUBIN ,                   TEST IF RECORD REQUIRED
*        AP    CNTREJ,ONE
*        B     0(R4)
        SUBOUT RETURN=4(R4)        RETURN AND PROCESS RECORD
         EJECT
***********************************************************************
*        PRINT ROUTINE FOR SYSPRINT AND SYSOUT                        *
***********************************************************************
         SPACE 1
PRINT    SUBIN ,                   WRITE TO SYSPRINT AND SYSOUT
         AP    CNTLINE,ONE         INCREMENT LINE COUNT
         TM    PRINTSW,DDOPEN      TEST IF SYSPRINT OPEN
         BZ    PRINT2              BRANCH IF NOT
         PUT SYSPRINT              WRITE SYSPRINT LINE
         LR    R5,R1               SAVE NEW BUFER ADDRESS
         MVI   1(R5),SPACE         MOVE SPACE TO START OF LINE
         MVC   2(131,R5),1(R5)      AND PROPAGATE THROUGH
         MVI   0(R5),SPCE1AFT      INSERT DEFAULT SINGLE SPACE
PRINT2   TM    SYSOUTSW,DDOPEN     TEST IF SYSOUT OPEN
         BZ    PRINT3              BRANCH IF NOT
         PUT   SYSOUT              WRITE SYSOUT RECORD
         LR    R8,R1               SAVE NEW BUFFER ADDRESS
         MVI   1(R8),SPACE         MOVE SPACE TO START OF LINE
         MVC   2(131,R8),1(R8)      AND PROPAGATE THROUGH
         MVI   0(R8),SPCE1AFT      INSERT DEFAULT SINGLE SPACE
PRINT3   CP    CNTLINE,ENDOPAGE    TEST FOR END OF PAGE
         BH    HEADING             PERFORM HEADINGS IF YES
        SUBOUT ,                   RETURN TO CALLER
         EJECT
***********************************************************************
*        HEADING ROUTINE FOR SYSPRINT AND SYSOUT                      *
***********************************************************************
         SPACE 1
HEADING  SUBIN PREFIX=H,SAVE=R4    ENTER HEADING ROUTINE
         ZAP   CNTLINE,ZERO        ZEROISE LINE COUNT
         AP    CNTPAGE,ONE         INCREMENT PAGE COUNT
         MVI   0(R5),PAGESKIP      ESTABLISH
         MVI   0(R8),PAGESKIP       PAGE SKIPS
         BAL   R4,PRINT             AND ISSUE THEM
         MVC   4(9,R5),DATEFLD     SET UP
         MVC   4(9,R8),DATEFLD      DATE
         MVC   122(4,R5),PAGE      SET UP
         MVC   122(4,R8),PAGE       PAGE CONSTANT
         MVC   126(4,R5),EDITPAGE  SET UP EDIT MASK
         ED    126(4,R5),CNTPAGE    AND EDIT PAGE NUMBER
         MVC   126(4,R8),EDITPAGE  SET UP EDIT MASK
         ED    126(4,R8),CNTPAGE   CONVERT PAGE NO. TO EBCDIC
         MVC   48(38,R5),HEADING0+14 ADD SYSPRINT HEADING
         MVC   42(52,R8),HEADING0  ADD SYSOUT HEADING
         MVI   0(R5),SPCE3AFT      ESTABLISH
         MVI   0(R8),SPCE3AFT       TRIPLE SPACING
         BAL   R4,PRINT            WRITE HEADING LINES
         MVC   0(133,R5),HEADP1    SET UP 2ND SYSPRINT HEADING
         MVC   0(133,R8),HEADO1    SET UP 2ND SYSOUT HEADING
         BAL   R4,PRINT            WRITE 2ND HEADINGS
         MVC   0(133,R5),HEADP2    SET UP 3RD SYSPRINT HEADING
         MVC   0(133,R8),HEADO2    SET 3P 3RD SYSOUT HEADING
         BAL   R4,PRINT            WRITE 3RD HEADING LINES
         ZAP   CNTLINE,SIX         SET LINE COUNT TO SIX
        SUBOUT PREFIX=H,RESTORE=R4 RETURN TO MAIN-LINE
         EJECT
***********************************************************************
*                                                                     *
*        THIS ROUTINE SCANS THE TIOT TO DETERMINE  WHETHER            *
*         A SPECIFIC DD STATEMENT IS PRESENT IN THE JCL.  ON          *
*         ENTRY TO THE ROUTINE, R2 POINTS AT THE ENTRY IN             *
*         THE DCB AD-CON TABLE OF THE REQUIRED DATA SET NAME.         *
*         IF THE SPECIFIED DD STATEMENT IS FOUND, CONTROL IS          *
*         RETURNED TO THE ADDRESS IN REGISTER 4, OTHERWISE            *
*         CONTROL IS RETURNED TO R4+4.                                *
*                                                                     *
***********************************************************************
         SPACE 5
DDFIND   SUBIN SAVE=(R3,R10)       ENTRY TO DD SEARCH ROUTINE
         SR    R10,R10             ZEROISE WORK REGISTER
         L     R3,16               GET CVT ADDRESS
         L     R3,0(,R3)           GET ADDRESS OF TCB DISPATCH FIELDS
         L     R3,4(,R3)           GET ADDRESS OF THIS TCB
         L     R3,12(,R3)          GET ADDRESS OF TIOT
         LA    R3,24(,R3)          POINT AT FIRST DD ENTRY
DDLOOP   CLC   0(4,R3),ZEROWORD    TEST FOR END OF TIOT
         BE    DDNOTFND            BRANCH IF YES
         CLC   4(8,R3),4(R2)       TEST FOR DD NAME MATCH
         BE    DDFOUND             BRANCH IF YES
         IC    R10,0(R3)           INSERT ENTRY LENGTH
         AR    R3,R10              INCREMENT TO NEXT ENTRY
         B     DDLOOP              PROCESS NEXT ENTRY
         SPACE 1
DDFOUND  OI    0(R2),DDSTAT        INDICATE DD STATEMENT FOUND
        SUBOUT RESTORE=(R3,R10)    RETURN TO MAIN-LINE
         SPACE 1
DDNOTFND EQU   *                   RETURN TO R4+4
        SUBOUT RESTORE=(R3,R10),RETURN=4(R4)
         EJECT
***********************************************************************
*        OPEN / CLOSE ROUTINES                                        *
***********************************************************************
         SPACE 5
OPEN     SUBIN ,                   ENTRY TO OPEN ROUTINE
         L     R3,0(,R2)           GET DCB ADDRESS
         CLC   12(L'INPUT,R2),INPUT TEST FOR INPUT DATA SET
         BE    OPEN2               BRANCH IF YES
         OPEN  ((R3),(OUTPUT))     OPEN OUTPUT DATA SET
         B     OPEN3               SET SWITCH
OPEN2    OPEN  ((R3),(INPUT))      OPEN INPUT DATA SET
OPEN3    OI    0(R2),DDOPEN        INDICATE DATA SET OPEN
        SUBOUT ,                   RETURN TO MAIN-LINE
         SPACE 5
CLOSE    SUBIN ,                   ENTRY TO CLOSE SUB-ROUTINE
         TM    0(R2),DDOPEN        TEST IF DATA SET OPEN
         BZ    0(R4)               RETURN IF NOT
         L     R3,0(,R2)           GET DCB ADDRESS
         CLOSE ((R3))              CLOSE DATA SET
         FREEPOOL (R3)             FREE BUFFERS
         NI    0(R2),255-DDOPEN    SET OFF 'OPEN' SWITCH
        SUBOUT ,                   RETURN TO MAIN-LINE
         SPACE 5
BLKSZRTN SUBIN ,                   SUPPLY DEFAULT IF NO BLKSIZE
         USING IHADCB,R1           ESTABLISH DCB ADDRESSABILITY
         CLC   DCBBLKSI,ZEROWORD   HAS BLOCK-SIZE BEEN SUPPLIED
         BNE   0(R14)              RETURN TO OPEN IF YES
         MVC   DCBBLKSI,DCBLRECL   MOVE LRECL TO BLKSIZE
        SUBOUT RETURN=(R14)        RETURN TO OPEN ROUTINES
         DROP  R1                  DROP DCB ADDRESSABILITY
         EJECT
***********************************************************************
*        READ SUB-ROUTINES                                            *
***********************************************************************
         SPACE 1
READ     SUBIN ,                   READ FROM SYSUT1
         GET   SYSUT1              GET NEXT RECORD
         LR    R6,R1               SAVE BUFFER ADDRESS
         AP    CNTUT1,ONE          INCREMENT COUNTER
         AP    CNTINV,ONE          INCREMENT REJECT COUNTER
         CLI   71(R6),X'FD'        TEST FOR VALID RECORD ID
         BE    READOK              YES - PROCESS RECORD
         CLI   71(R6),X'FE'        TEST FOR VALID RECORD ID
         BE    READOK              YES - PROCESS RECORD
         CLI   71(R6),X'FF'        TEST FOR VALID RECORD ID
         BE    READOK              YES - PROCESS RECORD
         B     READ                GET NEXT RECORD IF NOT
READOK   EQU   *                   ACCEPTED RECORDS
         SP    CNTINV,ONE          DECREMENT REJECT COUNTER
        SUBOUT ,                   RETURN TO MAIN-LINE
         SPACE 5
GET      SUBIN ,                   READ FROM SYSIN
         TM    SYSINSW,DDOPEN      TEST IF DATA SET OPEN
         BZ    ENDIN               BRANCH TO EODAD ADDRESS IF NOT
         GET   SYSIN               GET NEXT RECORD
         LR    R9,R1               SAVE BUFFER ADDRESS
         AP    CNTIN,ONE           INCREMENT COUNTER
        SUBOUT ,                   RETURN TO MAIN-LINE
         EJECT
***********************************************************************
*                                                                     *
*        THIS SUB-ROUTINE RETRIEVES SUB-FIELDS FROM THE               *
*         PARM FIELD IN THE EXEC STATEMENT.  CONTROL RETURNS TO       *
*         R4+0 IF NO PARAMETER IS PRESENT, OR IF THE PARAMETER        *
*         HAS BEEN EXHAUSTED.  CONTROL RETURNS TO R4+4 IF A           *
*         SUB-FIELD HS BEEN LOCATED, WITH R2 CONTAINING THE           *
*         SUB-FIELD ADDRESS AND R3 CONTAINING THE LENGTH.             *
*                                                                     *
***********************************************************************
         SPACE 1
GETPARM  SUBIN PREFIX=G,SAVE=(R7,R8) RETRIEVE PARAMTTER SUB-FIELD
         LM    R7,R8,PARMR7R8      RETRIEVE R7 AND R8 VALUES
         BC    0,GETPARM2          FIRST TIME SWITCH
         OI    *-3,X'F0'           SET UP FIRST TIME BRANCH
         L     R9,PARMPNTR         RETRIEVE PARM POINTER
         L     R9,0(,R9)           POINT R8  AT PARAMETER AREA
         LH    R8,0(R9)            RETRIEVE COUNT FIELD
         LTR   R8,R8               TEST IF PARM SUPPLIED
         BNZ   GETPARM3            BRANCH IF YES
        SUBOUT PREFIX=G,RESTORE=(R7,R8),RETURN=(R4) NO - RETURN
GETPARM3 LA    R9,2(,R9)           POINT TT START OF DATA
         LR    R7,R9               POINT R7 AT PARAMETER AREA
         AR    R9,R8               POINT R9 AT END OF PARM
         LA    R9,0(,R9)           PURIFY HIGH ORDER BYTE
         BCTR  R9,0                RE-ADJUST R9 FOR USE AS BXLE COMPAR
GETPARM2 LA    R8,1                ESTABLISH BXLE INCREMENT
         CR    R7,R9               TEST IF PARM EXHAUSTED
         BNH   GETPARM4            BRANCH IF NO
        SUBOUT PREFIX=G,RESTORE=(R7,R8),RETURN=(R4) NO - RETURN
GETPARM4 LR    R2,R7               POINT R2 AT START OF SUB-FIELD
PARMLOOP CLI   0(R7),COMMA         TEST FOR COMMA
         BE    PARMLGTH            BRANCH IF NOT
PARMADD  BXLE  R7,R8,PARMLOOP      TEST NEXT CHARACTER
PARMLGTH LR    R3,R7               POINT AT END OF SUBFIELD
         SR    R3,R2               DETERMINE SUBFIELD LENGTH
         LA    R7,1(,R7)           POINT AT START OF NEXT SUBFIELD
         BCTR  R3,0                DECREMENT FOR EXECUTE
         LTR   R3,R3               TEST IF R3 NEGATIVE
         BM    GETPARM2            GET NEXT SUB-FIELD IF YES
         AP    CNTPARM,ONE         INCREMENT COUNTER
         STM   R7,R8,PARMR7R8      PRESERVE R7 AND R8 FOR FUTURE
        SUBOUT PREFIX=G,RESTORE=(R7,R8),RETURN=4(R4) RETURN TO R4+4
         EJECT
***********************************************************************
*        MODIFY DYNAMIC SORT FIELDS PARAMETER                         *
***********************************************************************
         SPACE 1
FLDADD   SUBIN ,                   ADD FIELD TO SOTR FIELD AREA
         L     R10,REQADDR+4       RETRIEVE ADDRESS OF BLANK AFTER FLD
         BCTR  R10,0               STEP BACK TO CLOSING PARENTHESIS
         MVC   0(12,R10),0(R2)     ADD NEW FIELD TO PARAMETER AREA
         LA    R10,12(,R10)        ADJUST R10 TO NEW FIELD END
         ST    R10,REQADDR+4        AND PRESERVE THE ADDRESS
         MVI   REQSTART+13,OPENBRAK ENSURE OPENING PARENTHESIS
        SUBOUT ,                   RETURN TO CALLER
         SPACE 5
***********************************************************************
*        PRINT THE PARM FIELD                                         *
***********************************************************************
         SPACE 1
PARMPUT  SUBIN PREFIX=P,SAVE=R4    PRINT THE PARM FIELD
         L     R3,PARMPNTR         RETRIEVE THE PARM POINTER
         L     R3,0(R3)            POINT R3 AT PARAMETER AREA
         LH    R10,0(R3)           RETRIEVE THE COUNT FIELD
         LTR   R10,R10             TEST IF PARM SUPPLIED
         BNZ   PARMPUT2            BRANCH IF PARM SUPPLIED
         MVC   10(L'LINE33,R5),LINE33 TELL OF NO PARM
         MVC   10(L'LINE33,R8),LINE33  IN SYSPRINT AND SYSOUT
         B     PARMPUT3            PRINT THE MESSAGE
         SPACE 1
PARMPUT2 LA    R3,2(,R3)           POINT R3 AT STERT OF DATA
         BCTR  R10,0               DECREMENT LENGTH FOR EXECUTE
         EX    R10,PARMPTMV        ADD PARM TO SYSPRINT
         MVC   0(133,R8),0(R5)     ADD IT TO SYSOUT
PARMPUT3 BAL   R4,PRINT            PRINT THE PARM
        SUBOUT PREFIX=P,RESTORE=R4 RETURN TO THE CALLER
         SPACE 1
PARMPTMV MVC   10(0,R5),0(R3)      EXECUTED MOVE INSTRUCTION
         EJECT
***********************************************************************
*        SYNAD ROUTINES FOR ALL I/O                                   *
***********************************************************************
         SPACE 1
IOERROR  SUBIN ,                   PROCESS I/O ERROR
         BAL   R4,IOERROR3         ANALYSE I/O ERROR & TELL OPERATOR
         TM    PRINTSW,DDOPEN      TEST FOR SYSPRINT DATA SET
         BZ    JOBEND              TERMINATE JOB IF NOT
         NI    SYSOUTSW,255-DDOPEN 'DIS-CONNECT' SYSOUT
         BAL   R4,PRINT            PRINT BLAKK LINE
         MVC   5(L'LINE15,R5),LINE15 MOVE IN ERROR MESSAGE
         BAL   R4,PRINT            WRITE ERROR MESSAGE
         MVI   0(R5),SPCE2AFT      ESTABLISH DOUBLE SPACE
         MVC   5(L'LINE16,R5),LINE16 TELL OF TERMINATION
         BAL   R4,PRINT             AND WRITE LINE
        SUBOUT RETURN=PRINTCDE     PRINT CONDITION CODE
         SPACE 5
IOERROR2 SUBIN ,                   PROCESS SYSPRINT I/O ERROR
         BAL   R4,IOERROR3         ANALYSE I/O ERROR & TELL OPERATOR
         TM    SYSOUTSW,DDOPEN     TEST FOR SYSOUT DATA SET
         BZ    JOBEND              TERMINATE JOB IF NOT
         NI    PRINTSW,255-DDOPEN  'DIS-CONNECT' SYSPRINT
         BAL   R4,PRINT            PRINT BLANK LINE
         MVC   5(L'LINE15,R8),LINE15 MOVE IN ERROR MESSAGE
         BAL   R4,PRINT            PRINT ERROR MESSAGE
         MVI   0(R8),SPCE2AFT      ESTABLISH DOUBLE SPACE
         MVC   5(L'LINE16,R8),LINE16 MOVE IN TERMINATION MESSAGE
         BAL   R4,PRINT             AND WRITE IT
        SUBOUT RETURN=PRINTCDE     TERMINATE JOB
         SPACE 5
IOERROR3 SUBIN ,                   ANALYSE ERROR & TELL OPERATOR
         MVC   COMPCODE,COND12     SET CONDITION CODE
         SYNADAF ACSMETH=QSAM      CALL O.S. ROUTINE
         MVC   LINE15+12(86),50(R1) SAVE RESULT OF ANALYSIS
         SYNADRLS ,                RELEASE O.S. BUFFER
         WTO   MF=(E,LINE14)       TELL OPERATOR OF ERROR
        SUBOUT ,                   RETURN TO CALLER
         EJECT
*        MISCELLANAOUS EQUATES
         SPACE 1
MAXDS    EQU   7                   ***** ALTER IF DDNAMES ADDED *****
*                                   NUMBER OF DATA SETS UT433 CAN OPEN
SORTDS   EQU   2                  ***** ALTER IF SORT NOT SYNCSORT ****
*                                   NUMBER OF SORT DD STATEMENTS THAT
*                                   MUST BE PRESENT BEFORE THE SORT
*                                   IS INVOKED.
SORTFLDS EQU   6                   ***** ALTER IF SORT IS CHANGED*****
*                                   NUMBER OF FIELDS ON WHICH DATA MAY
*                                   BE SORTED.  NOTE THAT IF THIS VALUE
*                                   IS ALTERED THEN PARMLIMT MUST ALSO
*                                   BE CHANGED.
DELETE   EQU   4                   TELL SORT TO DELETE
NORETURN EQU   8                   TELL THE SORT NOT TO RETURN
INSERT   EQU   12                  TELL SORT TO INSERT RECORD
DDSTAT   EQU   1                   DD STATEMENT FOUND
DDOPEN   EQU   2                   DATA SET OPEN
SPCE1AFT EQU   X'09'               ADVANCE 1 AFTER PRINTING
SPCE2AFT EQU   X'11'               ADVANCE 2 AFTER PRINTING
SPCE3AFT EQU   X'19'               ADVANCE 3 AFTER PRINTING
PAGESKIP EQU   X'8B'               SKIP TO NEW PAGE
COMMA    EQU   C','                COMMA FOR PARM SCAN
PERIOD   EQU   C'.'                PERIOD
OPENBRAK EQU   C'('                OPENING PARENTHESIS
SPACE    EQU   X'40'               BLANK
QUOTE    EQU   X'7D'               QUOTE MARK
FF       EQU   X'FF'               HASP ACCOUNTING CARD ID X'FF'
FE       EQU   X'FE'               HASP ACCOUNTING CARD ID X'FE'
FD       EQU   X'FD'               HASP ACCOUNTING CARD ID X'FD'
         SPACE 5
BINSTORE DS    0F
         DC    X'00'
STORCOL3 DS    0CL3
         DC    X'00'
STORCOL2 DS    0CL2
         DC    X'00'
STORCOL1 DC    X'00'
         SPACE 1
PARMSW   DC    X'00'
         EJECT
LINE01   DC    C'T580P010 - INITIATION MESSAGES'
LINE02   DC    C'THE FOLLOWING DD STATEMENTS WERE ENCOUNTERED -'
LINE03   DC    C'NUMBER OF SUB-FIELDS FOUND IN THE PARM ='
LINE04   DC    C'NUMBER OF RECORDS READ FROM SYSUT1     ='
LINE05   DC    C'NUMBER OF RECORDS READ FROM SYSIN      ='
LINE06   DC    C'NUMBER OF RECORDS WRITTEN TO SYSUT2    ='
LINE07   DC    C'CONDITION CODE ='
LINE08   DC    C'***** NO SYSUT1 STATEMENT *****'
LINE08B  DC    C'***** NO TABLE04 STATEMENT *****'
LINE09   DC    C'***** PROCESSING BYPASSED *****'
LINE10   DC    C'END OF T580P010'
LINE11   DC    C'NUMBER OF X''FF'' RECORDS PROCESSED      ='
LINE12   DC    C'NUMBER OF X''FE'' RECORDS PROCESSED      ='
LINE12B  DC    C'NUMBER OF X''FD'' RECORDS PROCESSED      ='
LINE13   DC    C'NUMBER OF RECORDS REJECTED             ='
LINE14   DS    0F
         DC    AL2(WTOEND-*),H'0',C'T580P010 - '
LINE15   DS    0CL98
         DC    C'I/O ERROR - '
         DC    CL86' '
WTOEND   EQU   *
LINE16   DC    C'***** PROCESSING TERMINATED *****'
LINE17   DC    C'T580P010 - TERMINATION MESSAGES'
LINE18   DC    C'INSUFFICIENT SORT DD STATEMENTS FOUND'
LINE19   DC    C'THE FOLLOWING DD STATEMENTS WERE MISSING -'
LINE20   DC    C'***** THE DATA WILL NOT BE SORTED *****'
LINE21   DC    C'NO SORT DD STATEMENTS WERE FOUND'
LINE22   DC    C'NUMBER OF SORT FIELD DESC READ         ='
LINE23   DC    C'END OF REPORT'
LINE24   DC    C'NUMBER OF INVALID RECORDS              ='
LINE25   DC    C'***** THE DATA WILL BE SORTED *****'
LINE26   DC    C'IN THE ABSENCE OF A PARM, IT WILL BE SORTED -'
LINE27   DC    C'DATE WITHIN JOB NAME'
LINE28   DC    C'NUMBER OF DUPLICATE RECORDS REJECTED   ='
LINE29   DC    C'THE FOLLOWING PARM SUB-FIELD IS UNRECOGNISABLE -'
LINE30   DC    C'THE PARM WILL BE IGNORED, AND THE DATA WILL BE SORTED'
LINE31   DC    C'TOO MANY SUB-FIELDS IN THE PARM -'
LINE32   DC    C'THE SORT FIELDS ( MAJOR TO MINOR ) ARE -'
LINE33   DC    C'THERE IS NO PARM'
LINE34   DC    C'NUMBER OF VALID SYSTABLE ENTRIES       ='
LINE35   DC    C'DUPLICATE CHARGE CODE IN SYSTABLE INPUT -'
LINE36   DC    C'CHARGE/COST COMBINATION XXXX/YYYYY IGNORED'
LINE37   DC    C'NUMBER OF SYSTABLE RECORDS READ        ='
         EJECT
HEADING0 DC    C'SUPPLEMENTARY LISTING OF HASP ACCOUNTING INFORMATION'
HEADP1   DS    0CL133
         DC    X'09'               WRITE AND SPACE 1 AFTER
         DC    C'*------JOB------*  JULIAN  ACCOUNTING   COST   ENTI '
         DC    C'*-IDS-*  *------TIME------*  CARDS  CARDS  LINES  '
         DC    C'*-----TOTAL ELAPSED TIME-----*'
HEADP2   DS    0CL133
         DC    X'11'               WRITE AND SPACE 2 AFTER
         DC    C'NO.    NAME    PR   DATE      DATA     CENTRE  -TY  '
         DC    C'PUN PRT   INPUT     OUTPUT     IN    OUT    OUT   '
         DC    C'READER   EXEC    PRINT   PUNCH'
HEADO1   DS    0CL133
         DC    X'09'               WRITE AND SPACE 1 AFTER
         DC    C'      HASP  *-JOB--*  O.S  *-----READ-----*  *----'
         DC    C'START-----*  *----PRINT-----*  PUNCH   RECORD  '
         DC    C'*-----TOTAL ELAPSED TIME-----*     '
HEADO2   DS    0CL133
         DC    X'11'               WRITE AND SPACE 2 AFETR
         DC    C'       NO.    NAME    NO.   DATE     TIME     DATE'
         DC    C'     TIME     DATE     TIME      DATE   DATE   READER'
         DC    C'   EXEC    PRINT   PUNCH     '
         EJECT
SORTPARM DS    0F                  ADDRESS OF SORT PARAMETERS
         DC    X'80',AL3(SORTLIST) ADDRESS OF SORT PARAMETERS
         DC    X'0000'             FILLER
SORTLIST DC    X'0028'             LENGTH OF PARAMETER AREA
FLDADDR  DC    A(DEFSTART)         ADDRESS OF DEFAULT FIELD
         DC    A(DEFEND)           END OF DEFAULT SORT FIELD
         DC    A(RECSTART)         START OF RECORD STATEMENT
         DC    A(RECEND)           END OF RECORD STATEMENT
         DC    A(E15)              ADDRESS OF E15 SORT EXIT
         DC    A(E35)              ADDRESS OF E35 SORT EXIT
         DC    X'00',C'MAX'        REQUEST CORE OPTIMISATION
         DC    X'01',AL3(8)        NOMIAL CORE RESERVATION
         DC    X'03',AL3(LISTSW+4) SPECIFY MESSAGE DD-NAME
         DC    X'FF',X'00',C'AP'   REQUEST ALL MESSAGES TO THE PRINTER
         SPACE 1
DEFSTART DC    C' SORT FIELDS=(81,13,CH,A'   RECORD DATE WITHIN NAME
SORTDUP  DC    C',01,80,CH,A)'     ENSURE DUPLICATE RECORDS ARE TOGETHE
DEFEND   DC    C' '
RECSTART DC    C' RECORD LENGTH=(80,107,80),TYPE=F'
RECEND   DC    C' '
         SPACE 1
REQSTART DC    C' SORT FIELDS=(',CL80' '
         SPACE 1
REQADDR  DC    A(REQSTART),A(REQSTART+14)
         SPACE 1
INTERIM  DS    CL80                HASP ACCOUNTING CARD IMAGE
XJOBNAME DS    CL8                 EXTRACTED JOB NAME
XCRDDATE DS    CL5                 EXTRACTED RECORD DATE
XCHRGCDE DS    CL4                 EXTRACTED CHARGE CODE
XJOBNO   DS    CL3                 EXTRACTED HASP JOB NO.
XCATCODE DS    CL2                 EXTRACTED CATEGORY CODE
XCOSTCNT DS    CL5                 EXTRACTED/DEFAULT COST CENTRE
         EJECT
SORTABLE DS    0F
LISTSW   DC    X'00',AL3(0),CL8'SYSLIST'
         DC    X'00',AL3(0),CL8'SORTWK01'
         DC    X'00',AL3(0),CL8'SORTWK02'
         DC    X'00',AL3(0),CL8'SORTWK03'
TABEND   EQU   *                   END OF SORT'S DD TABLE
TABSIZE  EQU   *-SORTABLE          LENGTH OF TABLE
NTRYSIZ2 EQU   TABSIZE/SORTDS      SIZE OF TABLE ENTRY
         SPACE 1
SORTTAB2 EQU   *                   TABLE OF SORT FIELDS
         DC    C',081,8,CH,A)',CL8'JOBNAME'
         DC    C',089,5,CH,A)',CL8'RECDATE'
         DC    C',094,4,CH,A)',CL8'CHARGE'
         DC    C',098,3,CH,A)',CL8'JOBNO'
         DC    C',101,2,CH,A)',CL8'CATEGORY'
         DC    C',103,5,CH,A)',CL8'COSTCNTR'
TAB2ENDL EQU   *                   END OF TABLE
TAB2SIZE EQU   *-SORTTAB2          LENGTH OF TABLE
NTRYSIZ3 EQU   TAB2SIZE/SORTFLDS   SIZE OF TABLE ENTRY
         SPACE 1
CHAIN4   DC    A(0)                ADDRESS OF FIRST TEMPORARY CHAIN ELE
ADRSRTAB DC    A(SORTTAB2)         ADDRESS OF DEFAULT SORT TABLE
NUMSRTAB DC    A(6)                NUMBER OF ENTRIES IN DEFAULT TABLE
         EJECT
WORKAREA DS    D
DECIMAL  DS    D                   WORK AREA FOR PACKED OPERATIONS
CHAIN    DC    A(0)                ADDRESS OF 1ST CHAIN ELEMENT
ADRTABLE DS    F                   ADDRESS OF COST/CHARGE TANLE
ADRSORT1 DS    F                   ADDRESS OF SORT WORK AREA 1
ADRSORT2 DS    F                   ADDRESS OF SORT WORK AREA 2
ZEROWORD DC    F'0'
PARMPNTR DS    F                   POINTER TO PARM
PARMR7R8 DS    2F                  SAVE AREA FOR R7 & R8 USED IN GETPA
SIZETAB  DC    H'0'
SIZESTAB DC    H'0'
COMPCODE DC    H'0'
COND4    DC    H'4'                ERROR IN PARM FIELD
COND12   DC    H'12'               I/O ERROR CONDITION CODE
COND16   DC    H'16'
         SPACE 1
CNTPARM  DC    PL3'0'              COUNT OF SUB-PRRMS
CNTNTRYS DC    PL3'0'              COUNT OF VALID SYSTABLE ENTRIES
CNTUT1   DC    PL3'0'              COUNT OF SYSUT1 RECORDS READ
CNTUT2   DC    PL3'0'              COUNT OF SYSUT2 RECORDS WRITTEN
CNTIN    DC    PL3'0'              COUNT OF SYSIN RECORDS READ
CNTTAB   DC    PL3'0'              COUNT OF SYSTABLE RECPRDS READ
CNTFF    DC    PL3'0'              COUNT OF X'FF' RECORDS
CNTFE    DC    PL3'0'              COUNT OF X'FE' RECORDS
CNTFD    DC    PL3'0'              COUNT OF X'FD' RECORDS
CNTINV   DC    PL3'0'              COUNT OF INVALID RECORDS
CNTDUP   DC    PL3'0'              COUNT OF DUPLICATE RECORDS REJECTED
CNTREJ   DC    PL3'0'              COUNT OF REJECTED RECORDS
CNTLINE  DC    PL2'0'              LINE COUNT FOR SYSOUT
CNTPAGE  DC    PL2'0'              PAGE COUNT FOR SYSOUT
CNTHI    DC    PL3'0'              COUNTER FOR BINARY CHOP TABLE SEARCH
CNTLO    DC    PL3'0'              COUNTER FOR BINARY CHOP TABLE SEARCH
CNTMID   DC    PL3'0'              COUNTER FOR BINARY CHOP TABLE SEARCH
CNTTAB4  DC    PL3'0'              COUNT OF SORT FIELD RECORDS
TWENTY   DC    PL3'20'             CONSTANT OF TWENTY
TEN      DC    PL3'10'             CONSTANT OF TEN
ZERO     DC    PL2'0'              ZERO
ONE      DC    PL2'1'              ONE
TWO      DC    PL2'2'              TWO
FIVE     DC    PL2'5'              FIVE
SIX      DC    PL2'6'              SIX
NINE     DC    PL2'9'              NINE
FIFTY    DC    PL2'50'             FIFTY
SIXTY    DC    PL2'60'             SIXTY
HUNDRED  DC    PL2'100'            ONE HUNDRED
PARMLIMT DC    PL2'6'              NO. OF POSSIBLE FIELDS
ENDOPAGE DC    PL2'55'             END OF PAGE
OVERFLOW DC    PL2'54'             END OF PAGE COUNT USED PRE REPOETS
         EJECT
EDITMASK DC    X'4020206B202120'   EDIT WORD FOR PL3
CONDMASK DC    X'40202120'
EDITCVD  DC    X'40202020202020202020202020202120'
EDITPAGE DC    X'40202120'
EDITJUL  DC    X'4021204B202020'
EDMMMSS  DC    X'40202021212020'
EDHHMMSS DC    X'40212020212020212020'
         SPACE 1
DISPLAY  DS    CL16                EBCDIC WORK AREA
EDITWORK DS    CL10                EDIT WORK AREA
SAFETY   DS    CL133               PSEUDO-BUFFER
RECSTORE DC    CL80' '             STORE FOR DUPLICATE RECORD TEST
UT2REC   DS    CL110               SYSUT2 RECORD FOR SUBSTITUTE BUFF
         SPACE 1
TESTCAT  DS    CL2                 WORK RREA FOR SELECT ON CAT
TESTCHRG DS    CL4                 WORK AREA FOR SELECT ON CHARGE-CODE
TESTDATE DS    CL5                 WORK AREA FOR SELECT ON RECORD DATE
TESTCC   DS    CL5                 WORK AREA FOR SELECT ON COST-CENTRE
         SPACE 1
CC       DS    0CL5                DEFAULT COST CENTRE FROM 'COSTCNTR'
CCMAJ    DC    CL3' '              DEFAULT MAJOR COST CENTRE
CCMIN    DC    CL2' '              DEFAULT MINOR COST CENTRE
CCCHARGE DS    CL4                 CHARGE CODE TO BE MATCHED
ORCC     DC    X'F0F0F0F0F0'       'OR' FIELD FOR COST CENTRE
         SPACE 1
SWITCH   DC    X'00'               GENERAL BIT SWITCH
NON100   EQU   1                   NON-100 % LOG ENTRY ENCOUNTERED
         EJECT
DATEADDR DC    V(DTERTN)           ADDRESS OF DATE ROUTINE
ADATEFLD DC    A(DATEFLD)          ADDRESS OF RECEIVING AREA
         SPACE 1
DATEFLD  DC    C'COBOLDATE'        FOR DTERTN
PAGE     DC    C'PAGE'             PAGE
LOWVALUE DC    8X'00'
HIVALUE  DC    9X'FF'              HIGH-VALUES
ASTERISK DC    8C'*'
SPACES   DC    CL10' '             SPACES (10)
ZEROES   DC    8C'0'               EBCDIC CONCSTANT OF ZERO
         SPACE 1
TIMEHMS  DS    CL8                 EDITED HH.MM.SS
TIMEHMS2 DS    CL6                 UNEDITED HHMMSS
DATEJUL  DS    CL6                 EDITED YY.DDD
DATEJUL2 DS    CL5                 UNEDITED YYDDD
TIMEMS   DS    CL6                 EDITED MMM.SS
         SPACE 1
INPUT    DC    CL8'INPUT'          INPUT CONSTANT FOR OPEN ROUTINE
         SPACE 1
         LTORG
         EJECT
DCBTABLE DS    0F
PRINTSW  DC    X'00',AL3(SYSPRINT),CL8'SYSPRINT',CL8'OUTPUT'
SYSOUTSW DC    X'00',AL3(SYSOUT),CL8'SYSOUT',CL8'OUTPUT'
SYSUT1SW DC    X'00',AL3(SYSUT1),CL8'SYSUT1',CL8'INPUT'
SYSUT2SW DC    X'00',AL3(SYSUT2),CL8'SYSUT2',CL8'OUTPUT'
SYSINSW  DC    X'00',AL3(SYSIN),CL8'SYSIN',CL8'INPUT'
TABLESW  DC    X'00',AL3(SYSTABLE),CL8'SYSTABLE',CL8'INPUT'
TABLE4SW DC    X'00',AL3(TABLE04),CL8'TABLE04',CL8'INPUT'
TABLEEND EQU   *                   END OF AD-CON TABLE
TABLESIZ EQU   *-DCBTABLE          LENGTH OF TABLE
NTRYSIZE EQU   TABLESIZ/MAXDS      SIZE OF TABLE ENTRY
         SPACE 1
EXITLIST DC    X'85',AL3(BLKSZRTN) ENTRY FOR DCB MODIFICATION
         SPACE 4
SYSPRINT DCB   DDNAME=SYSPRINT,                                        *
               DSORG=PS,                                               *
               MACRF=PL,                                               *
               RECFM=FBM,                                              *
               LRECL=133,                                              *
               SYNAD=IOERROR2,                                         *
               EXLST=EXITLIST
         SPACE 4
SYSOUT   DCB   DDNAME=SYSOUT,                                          *
               DSORG=PS,                                               *
               MACRF=PL,                                               *
               RECFM=FBM,                                              *
               LRECL=133,                                              *
               SYNAD=IOERROR,                                          *
               EXLST=EXITLIST
         SPACE 4
SYSUT1   DCB   DDNAME=SYSUT1,                                          *
               DSORG=PS,                                               *
               MACRF=GL,                                               *
               RECFM=FB,                                               *
               LRECL=80,                                               *
               EODAD=ENDUT1,                                           *
               SYNAD=IOERROR,                                          *
               EXLST=EXITLIST
         EJECT
SYSUT2   DCB   DDNAME=SYSUT2,                                          *
               DSORG=PS,                                               *
               MACRF=PM,                                               *
               BFTEK=E,                                                *
               RECFM=FB,                                               *
               LRECL=110,                                              *
               BUFNO=1,                                                *
               SYNAD=IOERROR,                                          *
               EXLST=EXITLIST
         SPACE 4
SYSIN    DCB   DDNAME=SYSIN,                                           *
               DSORG=PS,                                               *
               MACRF=GL,                                               *
               RECFM=FB,                                               *
               LRECL=80,                                               *
               EODAD=ENDIN,                                            *
               SYNAD=IOERROR,                                          *
               EXLST=EXITLIST
         SPACE 5
SYSTABLE DCB   DDNAME=SYSTABLE,                                        *
               DSORG=PS,                                               *
               MACRF=GL,                                               *
               RECFM=FB,                                               *
               LRECL=80,                                               *
               EODAD=ENDTABLE,                                         *
               SYNAD=IOERROR,                                          *
               EXLST=EXITLIST
         SPACE 5
TABLE04  DCB   DDNAME=TABLE04,                                         *
               DSORG=PS,                                               *
               MACRF=GL,                                               *
               RECFM=FB,                                               *
               LRECL=80,                                               *
               EODAD=ENDTAB03,                                         *
               SYNAD=IOERROR,                                          *
               EXLST=EXITLIST
         EJECT
         DCBD  DSORG=PS            GENERATE DCB DSECT
T580P010    CSECT
         PRINT NOGEN               SUPPRESS MACRO EXPANSION
         SPACE 1
         LTORG
         SPACE 1
$L       EQU   *-T580P010
$L1      EQU   $L/100000*100000
$L2      EQU   ($L-$L1)/10000*10000
$L3      EQU   ($L-$L1-$L2)/1000*1000
$L4      EQU   ($L-$L1-$L2-$L3)/100*100
$L5      EQU   ($L-$L1-$L2-$L3-$L4)/10*10
$L6      EQU   ($L-$L1-$L2-$L3-$L4-$L5)
         SPACE 1
$LENGTH  EQU   $L1/100000*1048576+$L2/10000*65536+$L3/1000*4096+$L4/100*
               256+$L5/10*16+$L6
         SPACE 1
         END
