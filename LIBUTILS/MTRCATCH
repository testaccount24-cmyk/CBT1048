* CATCH IS A PROGRAM THAT MONITORS ALL MODULES FETCHED INTO CORE.
* FOR EACH MODULE FETCHED A RECORD OF THE FOLLOWING FORMAT IS GENERATED
*      BYTE    1     RECORD TYPE   HEX '00','40', OR '80'
*      BYTES 2-9     MODULE NAME
*      BYTE   10     LIBRARY INDICATOR  HEX '00'   PRIVATE
*                                           '01'   LINKLIB
*                                           '03'   SVCLIB
* THESE RECORDS ARE ACCUMULATED IN ONE OR OTHER OF TWO 3300 BYTE BUFFER
* WHEN A BUFFER IS FULL IT IS WRITTEN TO THE FILE (DDNAME=CATCHOUT).
* CATCH PICKS UP THE ADDRESS OF PROGRAM FETCH FROM CVTBOSV AND SUBTRACT
*      TO LOCATE FINCH.  IT THEN REPLACES THE FIRST THREE WORDS OF FINC
*      BRANCH TO CATCH.
* TO STOP CATCH REPLY 'NOMAN' TO AN OUTSTANDING WTOR.
* AT TERMINATION CATCH RESTORES THE FINCH CODE AND GENERATES A RECORD W
*      BYTE 1 = HEX'88' TO INDICATE END OF DATA IN THE BUFFER WHICH IT
*      WRITES OUT.
*      IT WRITES OUT A FURTHER BUFFER WITH THE FORMAT : -
*           BYTE      1    HEX '99'
*           BYTES  2- 5    RUN START TIME
*           BYTES  6- 9    RUN END TIME
*           BYTES 10-13    DATE
*           BYTES 14-16    NO. LOST ENTRIES (PACKED DECIMAL)
CTCH  TITLE 'CATCH: ROUTINE TO MONITOR MODULES LOADED INTO CORE '
CATCH    CSECT
         STM   14,12,12(13)
         BALR  11,0
         USING *,11
         USING FNCHTRP,12
         CNOP  0,4
         L     12,*+8         ADDRESS OF FNCHTRP
         B     *+8
         DC    A(FNCHTRP)
         LA    9,SAVE
         ST    9,8(0,13)
         ST    13,4(0,9)
         LR    13,9
         OPEN  (CATCHOUT,OUTPUT)
         LA    1,BUFFS             POINT TO BUFFER AREA
         ST    1,BUF1         A(BUF1)
         ST    1,CURR         CURRENT POS
         A     1,=F'3290'     A(LAST REC IN BUF1)
         ST    1,ENPB
         ST    1,BUF1E
         A     1,=F'10'       A(BUF2)
         ST    1,BUF2
         A     1,=F'3290'     A(LAST REC IN BUF2)
         ST    1,BUF2E
         LA    15,SYNCH       ADDR OF SYNCH EXIT RTN
         SVC   12             ISSUE SYNCH SVC
         L     8,16
         L     8,132(8)       PGM FETCH RTN
         SH    8,H30                       -30
         ST    8,FINCH        SAVE ADDR
         MVC   CODESV,0(8)    SAVE FINCH CODE
         STAE  ABTERM,CT           PROTECT AGAINST ABEND
         MVC   0(12,8),CODE
         TIME  DEC            OBTAIN START TIME
         ST    0,STRT         SAVE IT
         L     5,BUF1         R5-> FIRST REC TO BE WRITTEN
         B     WAIT           NOTHING TO DO NOW BUT WAIT
         CNOP  0,4
FNCHTRP  SSM   72(15)         FINCH EXIT RTN-NO INTERRUPTS
         STM   0,14,12(15)    SAVE REGS
         B     74(15)         BRANCH ROUND SAVE AREA
SAVE15   DS    15F            SAVE AREA FOR EXIT RTN
ZERO     DC    H'0'
CONT     LR    12,15          SET UP BASE REG
         L     8,CURR         ADDR NEXT REC
         C     4,TCB          IS IT OUR REQUEST ?
         BE    L278
         TM    BECB,64        IS BECB POSTED
         BNO   L116           -NO FILL BUFFER
         CLC   CURR,ENPB
         BL    L116           -RESET SO FILL BUFF
         AP    NUM,=PL1'1'    COUNT AS LOST
         B     L274
L116     DS    0H
         L     6,8(1)
         MVC   1(8,8),0(10)   PGM NAME FROM RB
         L     7,16           CVT
         CLC   85(3,7),1(1)   IS IT FROM SVCLIB ?
         BNE   NOTSVC
         MVI   9(8),3         SET SVC IND
         MVC   WRK,10(10)     XRBSTAB BYTE 1
         NI    WRK,240
         CLI   WRK,192        TYPE 3 OR 4 BEING LOADED
         BE    L186
         CLI   0(6),C'I'
         BNE   L186
         MVC   1(8,8),0(6)    MOVE MODULE NAME
         B     L206
L186     MVC   1(3,8),=C'IGC' FILL IN NAME FOR SVC
         OI    4(8),240
         B     L206
NOTSVC   MVC   9(1,8),12(6)   MOVE IN LIBRARY IND
L206     LA    8,10(8)        UP POINTER
         C     8,ENPB         BUFF FULL
         BNH   L274
         POST  BECB,0         POST BUFFER FULL ECB
         TM    BUFSW,1        BUF1 OR BUF2
         BO    BUF2W
         MVI   BUFSW,1
         MVC   CURR,BUF2      SWITCH ADDR.
         MVC   ENPB,BUF2E
         B     L278
BUF2W    MVI   BUFSW,0
         MVC   CURR,BUF1
         MVC   ENPB,BUF1E
         B     L278
L274     ST    8,CURR
L278     L     15,FINCH       FINCH ADDR
         LM    0,14,12(12)    RESTORE REGS
         LR    2,4            EXECUTE REMOVED FINCH CODE
         LA    4,4(15)
         LR    5,1
         LM    7,9,0(5)
         LA    13,1
         SSM   5(15)          RESTORE SYSTEM MASK
         B     14(15)         RETURN TO FINCH
CHAT     OC    REP,=CL4' '    CONVERT TO UPPER CASE
         CLC   REP,=C'STOP'  CHECK FOR END REPLY
         BE    ENDJ           END OF JOB
         XC    WECB,WECB      CLEAR ECB
         MVI   BECB,0         CLEAR ECB
WAIT     WAIT  1,ECBLIST=ECBL SIT BACK WITH FEET UP
         TM    WECB,64        IS IT OPERATOR CHATTING ?
         BO    CHAT           -YES
         MVI   BECB,0              RESET ECB
         BAL   8,WRTN         WRITE BUFFER
         BCT   3,*+8               END OF JOB?
         B     ENDJ                YES
         B     WAIT           GO BACK TO SLEEP
WRTN     DS    0H                  WRITE A BUFFER
WRTBR1   BC    0,WRTBR2            ** MODIFIED **
         L     3,COUNT             PICK UP LOOP COUNT
         OI    WRTBR1+1,X'F0'      SKIP THIS AFTER FIRST GO
         B     WRTBR3              SKIP CHECK FIRST TIME
WRTBR2   DS    0H
         CHECK DECB                WAIT FOR PREVIOUS I/O
WRTBR3   DS    0H                  FIRST TIME ENTRY
         WRITE DECB,SF,CATCHOUT,(5) WRITE A BLOCK
         TM    BUFSW,1        WHICH BUFF WAS WRIT
         BO    BUF2N          BUF1 WRIT-BUF2 NEXT
         L     5,BUF1
         BR    8              RETURN
BUF2N    L     5,BUF2
         BR    8              RETURN
SYNAD    WTO   '  JOB  TERMINATED: BSAM WRITE ERROR'
         B     ENDJ
ENDJ     L     6,FINCH        RESTORE FINCH CODE
         MVC   0(14,6),CODESV
         TIME  DEC            TIME OF END OF ANALYSIS
         ST    0,ENDT
         ST    1,DATE         DATE OF ANALYSIS
         L     7,ENPB
         L     6,CURR
         TM    BECB,64        REC TO BE WRIT ?
         BZ    *+8            -NO
         BAL   8,WRTN
         CR    6,7            LAST REC ?
         BL    L658           -YES
         MVI   0(6),X'88'     INDICATE TIME IN NEXT REC
         BAL   8,WRTN         WRITE REC
         LR    6,5
L658     MVC   0(16,6),EOJ    MOVE IN DATE & TIMES
         BAL   8,WRTN         WRITE LAST REC
         CHECK DECB                TEST LAST WRITE
         CLOSE CATCHOUT
         L     13,SAVE+4
         RETURN (14,12),RC=0
         EJECT
ABTERM   DS    0H                  STAE ROUTINE
         BALR  3,0
         USING *,3                 SET UP ADDRESSABILITY
         STM   0,15,STAESAVE       SAVE REGISTERS
         L     6,FINCH             GET FINCH ADDRESS
         MVC   0(14,6),CODESV      RESTORE FINCH CODE
         LM    0,15,STAESAVE       RESTORE REGISTERS
         SR    15,15               INDICATE NO RETRY
         BR    14                  EXIT
STAESAVE DS    16F                 REGISTER SAVE AREA
         DROP  3                   CEASE ADDRESSABILITY
         SPACE 3
SYNCH    ST    3,SV3          SAVE R3
         L     3,16           CVT
         L     3,0(3)         CVTTCB
         L     3,4(3)         OUR TCB
         ST    3,TCB
         L     3,0(3)         RB ADDR
         L     3,28(0,3)      RBLINK
         MVI   17(3),4        SET OPSW TO PK 0 & SUPV STATUS
         L     3,SV3          RESTORE R3
         BR    14             RETURN
SAVE     DS    18F            SAVE AREA
H30      DC    H'30'
FINCH    DC    A(0)           ADDR(FINCH RTN)
CODE     L     15,8(0,15)     CODE INSERTED INTO FINCH
         BR    15              -------//----
         DC    A(FNCHTRP)
CODESV   DC    CL14' '        AREA TO SAVE FINCH CODE
DUM      DS    CL5
EOJ      DC    X'99'          EOJ IND IN ENTRY
STRT     DC    F'0'           START TIME
ENDT     DC    F'0'           END   TIME
DATE     DC    F'0'           DATE OF RUN
NUM      DC    PL3'0'         NO. OF ENTRIES LOST
CURR     DC    F'0'           POSN OF CURRENT ENTRY
ENPB     DC    F'0'           A(LAST ENTRY IN CURRENT BUFFER)
BUF1     DC    F'0'           A(BUF1)
BUF1E    DC    F'0'           A(LAST ENTRY IN BUF1)
BUF2     DC    F'0'           A(BUF2)
BUF2E    DC    F'0'           A(LAST ENTRY IN BUF2)
TCB      DC    F'0'           A(OUT TCB)
ECBL     DC    A(BECB),X'80',AL3(WECB)  ECBLIST
WECB     DC    F'0'           WTOR ECB
BECB     DC    F'0'           BUF WRITE ECB
BUFSW    DC    X'00'          IND  0=BUF1,1=BUF2
WRK      DC    X'00'          SPARE
REPLY    EQU   *
REP      DC    CL4'STOP'      REPLY AREA
SV3      DC    F'0'           AREA TO SAVE R3
COUNT    DC    AL4(3*3-1)          COUNT - FILL THREETRACKS
CATCHOUT DCB   DSORG=PS,MACRF=(R,W),SYNAD=SYNAD,BLKSIZE=3300,RECFM=F,  *
               DDNAME=CATCHOUT
         LTORG
BUFFS    DC    66XL100'00'         BUFFER AREA
         END
