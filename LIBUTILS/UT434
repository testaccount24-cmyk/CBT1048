         TITLE 'UT434 (GDGRESET) - RESET GENERATION DATA GROUP'
UT434    CSECT
***********************************************************************
*                                                                     *
*                                                                     *
*        THE FOLLOWING VARIABLE SYMBOL HAS BEEN INCLUDED TO           *
*        ALLOW THE PROGRAM TO ACCESS THE HIGHEST LEVEL OS             *
*        MASTER CATALOG AS IF IT WERE THE MVS MASTER CATALOG.         *
*            THE VOLUME SPECIFIED MUST CONTAIN THE REQUIRED           *
*        SYSCTLG DATA SET.                                            *
*            IF THE SETC IS OMMITTED OR THE VARIABLE SET TO           *
*        A NULL VALUE, PROCESSING WILL CONTINUE AS FOR MFT.           *
*                                                                     *
*            THIS MODULE ALSO USES MACRO 'TESTOS' TO DETERMINE        *
*        UNDER WHICH OPERATING SYSTEM IT IS RUNNING.                  *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
***********************************************************************
         PRINT ON,NODATA
         SPACE 1
*        REGISTER EQUATES AND USAGE
         SPACE
R0       EQU   0
R1       EQU   1
R2       EQU   2   WORK REGISTER
R3       EQU   3   WORK REGISTER / BCT VALUE
R4       EQU   4   BAL RETURN ADDRESS
R5       EQU   5   POINTER TO CURRENT SYSPRINT BUFFER
R6       EQU   6   BASE REGISTER 3
R7       EQU   7   FIRST OPERAND FOR BXLE (CURRENT BYTE IN BUFFER)
R8       EQU   8   INCREMENT FOR BXLE / BCT VALUE
R9       EQU   9   POINTER TO CURRENT SYSIN BUFFER, AND END OF BUFFER
R10      EQU   10  POINTER TO START OF PARAMETER / WORK REGISTER
R11      EQU   11  WORK REGISTER
R12      EQU   12  BASE REGISTER 2
R13      EQU   13  SAVE AREA POINTER / BASE REGISTER 1
R14      EQU   14  BALR RETURN ADDRESS
R15      EQU   15  BALR ROUTINE ADDRESS / MACRO CONDITION CODE
         SPACE 4
         USING UT434,R15        **
         SAVE  (14,12)           *
         BAL   R12,SAVEAREA+72   *
SAVEAREA DS    18F               *
         ST    R12,8(R13)        *
         ST    R13,4(R12)        ** HOUSEKEEPING
         LR    R13,R12           *
         LA    R12,2048(R12)     *
         LA    R12,2048(R12)     *
         LA    R6,2048(R12)      *
         LA    R6,2048(R6)       *
         DROP  R15               *
         USING SAVEAREA,R13,R12,R6
         EJECT
         EXTRACT ADRTIOT,FIELDS=TIOT    EXTRACT TASK I/O TABLE ADDRESS
         L     R2,ADRTIOT          LOAD ADDRESS OF TASK I/O TABLE
         LA    R2,24(R2)           POINT R2 AT START OF FIRST DD ENTRY
         LA    R3,TABLEDD          LOAD ADDRESS OF DD'S TABLE
         SR    R5,R5               ZEROES
LTIOT1   LA    R10,IGNOREDD        ADDRESS OF DDNAME TO IGNORE
         LA    R11,MAXDDIGN        NUMBER OF DDNAME TO IGNORE
         CLC   0(4,R2),ZEROBIN     TEST IF END OF TIOT
         BE    ENDTIOT             BRANCH IF YES
LTIOT2   CLC   4(8,R2),0(R10)      TEST IF CUR. DDN FROM TIOT = IGNO.DD
         BE    NEXTDD              BRANCH IF YES
         LA    R10,8(R10)          POINT TO NEXT IGNOREDD IN TABLE
         BCT   R11,LTIOT2          REPEAT TEST
         MVC   DDNAME,4(R2)        GET DDNAME TO WORK AREA
         NC    DDNAME+3(5),SYSREF+3 RESET 5 LAST BYTES TO HEX 'X0'
         CLC   DDNAME,SYSREF       TEST IF DDNAME WAS = TO 'SYSNNNNN'
         BE    NEXTDD              IF YES, BRANCH AND IGNORE THIS DDN
         MVC   0(8,R3),4(R2)       MOVE THIS DDNAME TO TABLE
         LA    R3,14(R3)           GET NEXT MOVE ADDRESS
         LA    R5,1(R5)            = NUMBER OF DDN IN TABLE
         STH   R5,NDDINTAB         STORE NUMBER OF DDN LOADED IN TABLE
         CH    R5,=H'10'           TEST IF NUMB.OF DD IN TABLE IS = 10
         BE    ENDTIOT             BRANCH IF YES
NEXTDD   CLC   SYSINDD,4(R2)       TEST IF SYSIN DD PRESENT
         BNE   *+8                 BRANCH IF NO
         MVI   SYSINSW,X'FF'       TELL OF SYSIN HAS BEEN FOUND
         SR    R10,R10             ZEROES
         IC    R10,0(R2)           LOAD LENGTH OF CURRENT DD ENTRY
         LA    R2,0(R10,R2)        GET ADDRESS OF NEXT DDN IN TIOT
         B     LTIOT1
ENDTIOT  EQU   *
         SPACE 2
         OPEN  (SYSPRINT,(OUTPUT))
         CLI   SYSINSW,X'FF'       TEST IF SYSIN DD SUPPLIED
         BNE   NDDIN               BRANCH IF NO
         OPEN  (SYSIN,(INPUT))
NDDIN    EQU   *
         BAL   R4,OPENDUMP   OPEN SNAP DUMP DATA SET IF AVAILABLE
         BAL   R4,PRINT      OBTAIN & STORE ADDRESS OF FIRST BUFFER
         UT458 ,                   REQUIRE IPL DATE
         MVC   DATEFLD,UTREPORT MOVE DATE TO HEADING LINE
         BAL   R4,HEADINGS   WRITE INITIAL HEADINGS
         BAL   R4,GETPARM    LOCATE EXEC PARM
         B     PROCESS2      BYPASS INITIAL READ
         TITLE 'UT434 - MAIN-LINE LOGIC'
PROCESS  EQU   *
         CLI   SYSINSW,X'FF'       TEST IF SYSIN DD SUPPLIED
         BNE   ENDODATA            BRANCH IF NO
         BAL   R4,READ       READ CONTROL CARD
PROCESS2 EQU   *
         BAL   R4,ANALYSE    ANALYSE AND VALIDATE CONTROL CARD
         BAL   R4,PRINT      PRINT BLANK LINE TO FORWARD SPACE
         BAL   R4,GETCVOL    GET OS CVOL IF IT WAS NOT SPECIFIED
         TM    SWITCH,DELETEON WAS DELETE REQUESTED
         BO    PROCESS6        YES, SO GO PROCESS
         TM    SWITCH,RESETON WAS RESET REQUESTED
         BO    PROCESS3      YES, SO GO PROCESS
         TM    SWITCH,REMOVEON WAS REMOVE REQUESTED
         BO    PROCESS4      YES, SO GO PROCESS
         B     ABEND         IF REACH HERE, THEN LOGIC ERROR
         SPACE 1
PROCESS3 EQU   *             MAIN-LINE LOGIC FOR RESET REQUEST
         TM    SWITCH,GDGON  WAS GDG KEYWORD SUPPLIED
         BZ    NOGDG         NO - GO TELL OF ERROR
         BAL   R4,POINTER    GET GENERATION INDEX POINTER ENTRY
         BAL   R4,GETONAME   GET ABSOLUTE NAME OF GENERATION (0)
         CLI   WORKAREA+4,X'20' Q - IS DEVICE DIRECT ACCESS
         BNE   UNCAT         NO - SO BYPASS SCRATCH ROUTINE
         BAL   R4,SCRATCH    SCRATCH ZERO'TH GENERATION
         CLI   SCRTCHRC,X'00' CHECK IF SCRATCH WAS SUCCESSFULL
         BNE   LISTCAT       SKIP UNCAT AND NEW CAT IF SCRATCH FAILED
UNCAT    EQU   *
         BAL   R4,UNCATALG   UNCATALOG ZERO'TH GENERATION
         BAL   R4,PRINT      TELL OF UNCATALOGUING
         BAL   R4,GETOLDNM   DETERMINE ABSOLUTE NAME OF -NTH GENERATION
         BAL   R4,CATLGOLD   CATALOG -NTH GENERATION
LISTCAT  EQU   *
         BAL   R4,LISTCTLG   LIST OFF CURRENT CATALOG ENTRIES
         B     PROCESS       GO READ NEXT CONTROL CARD
         SPACE 1
PROCESS4 EQU   *             MAIN-LINE LOGIC FOR REMOVE REQUEST
         TM    SWITCH,GDGON+DSNAMEON WAS GDG OR DSN KEYWORD SUPPLIED
         BZ    SYNTAXER      NO. THEN SYSTAN ERROR
         OI    SWITCH,FIRSTIME TURN ON FIRST TIME SWITCH
PROCESS5 BAL   R4,READDSN    VERIFY THE DATA SET IS CATALOGUED
         CLI   WORKAREA+4,DADEVICE IS DS ON A DIRECT ACCESS DEVICE
         BNE   UNCATAL       NO, SO BYPASS SCRATCH
         BAL   R4,SCRATCH    SCRATCH THE DATA SET
         CLI   SCRTCHRC,X'00' TEST IF SCRATCH WAS SUCCESSFULL
         BNE   PROCESS       GO TO PROCESS NEXT CTL CARD
UNCATAL  EQU   *
         BAL   R4,UNCATALG   UNCATALOG THE DATA SET
         BAL   R4,PRINT      TELL OF UNCATALOGUING
         NI    SWITCH,FIRSTOFF TURN OFF FIRST TIME SWITCH
         TM    SWITCH,GDGON  ARE WE REMOVING A GDG
         BO    PROCESS5      YES, SO LOOP BACK TO PROCESS REST
         B     PROCESS       GO READ NEXT CONTROL CARD
         EJECT
PROCESS6 EQU   *                   MAIN-LOGIC FOR DELETE REQUEST
         TM    SWITCH,INDSNON+MEMBERON TEST IF INDSN AND MEMBER SUPPL.
         BNO   NODSNMEB            NO - GO TELL OF ERROR
         BAL   R4,READDSN          VERIFY IF THE DATA SET IS CATALOGUED
         CLI   VOLUMLST+1,X'01'    TEST IF ONLY ONE VOLUME
         BNE   MULTIVER            BRANCH IF NO (ERROR)
         CLI   VOLUMLST+4,DADEVICE TEST IF DASD VOLUME
         BNE   NDASD               BRANCH IF NO (ERROR)
FTSW     NOP   NFT                 SWITCH FIRST TIME
         MVI   FTSW+1,X'F0'        CHANGE SWITCH
         BAL   R4,FTIME            EXECUTE THIS SUBR. ONLY FIRST TIME
NFT      BAL   R4,DELEMEMB         DELETE PDS MEMBERS
         B     PROCESS
         SPACE 5
ENDODATA EQU   *
         BAL   R4,HEADINGS   SKIP TO NEW PAGE AND WRITE HEADINGS
         BAL   R4,WRITECDE   TELL OF HIGHEST COMPLETION CODE FOUND
         BAL   R4,CLOSDUMP   CLOSE SNAP DUMP DATA SET IF NECESSARY
         CLOSE (SYSPRINT)
         CLI   SYSINSW,X'FF'       TEST IF SYSIN DD SUPPLIED
         BNE   NSYSIN              BRANCH IF NO
         CLOSE (SYSIN)
NSYSIN   EQU   *
         L     R15,COMPCODE
         L     R13,4(R13)
        RETURN (14,12),RC=(15)
         EJECT
GETCVOL  EQU   *
         TM    SWITCH,X'40'  CHECK IF CVOL WAS SPECIFIED
         BO    GETCVOL8      BRANCH IF YES
         LA    R0,8          INIT LOOP CTR FOR MOVE INDEX
         LA    R1,INDEX      GET 'TO FIELD' ADDR
         LA    R14,GDGNAME   GET 'FROM FIELD' ADDR
         MVI   INDEX,C' '    INIT 'TO FIELD'
         MVC   INDEX+1(L'INDEX-1),INDEX
GETCVOL2 EQU   *
         CLI   0(R14),C'A'   CHECK IF CHAR. IS ALPHA
         BL    GETCVOL4      BRANCH IF NO
         CLI   0(R14),C'9'
         BH    GETCVOL4      BRANCH IF NOT ALPHA
         MVC   0(1,R1),0(R14) MOVE 1 ALPHA CHAR.
         LA    R1,1(R1)      INCR PTR IN 'TO FIELD'
         LA    R14,1(R14)    INCR PTR IN 'FROM FIELD'
         BCT   R0,GETCVOL2   DECR LOOP CTR AND BRANCH IF NTO ZERO
GETCVOL4 EQU   *
         CLC   INDEX(8),=CL8' ' CHECK IF INDEX IS BLANK
         BE    GETCVOL8      BRANCH IF INDEX IS BLANK
         LOCATE OSCVOL       LOCATE INDEX FROM VSAM MASTER
         LTR   R15,R15       CHECK IF LOCATE SUCCESSFULL
         BNZ   GETCVOL8      BRANCH IF NO
         CLC   INDEX(9),=C'SYSCTLG.V' CHECK IF IT IS A CVOL PTR
         BNE   GETCVOL8      BRANCH IF NO
         MVC   CVOLSER,WORKAREA+6 MOVE VOLSER TO CVOLSER
         OI    SWITCH,X'40'  SET CVOL BIT ON
GETCVOL8 EQU   *
         BR    R4            RETURN
         SPACE 2
INDEX    DC    CL44' '
OSCVOL   CAMLST NAME,INDEX,,WORKAREA
         DS    0H            TO ALIGN
         TITLE 'UT434 - ROUTINE TO OBTAIN PARM'
GETPARM  EQU   *
         ST    R4,STORER4G   SAVE RETURN ADDRESS
         L     R1,4(R13)     POINT R1 AT PREVIOUS SAVE AREA
         L     R1,24(R1)     RESTORE R1 TO VALUE AT ENTRY INTO PGM
         L     R1,0(R1)      POINT R1 AT PARM FIELD
         LH    R11,0(R1)     LOAD PARAMETER LENGTH INTO R11
         LTR   R11,R11       TEST IF A PARAMETER IS PRESENT
         BZ    4(R4)         THERE ISN'T SO RETURN TO R4+4
         LA    R3,2(R1)      POINT R3 AT START OF PARM
         AR    R11,R3        POINT R11 AT END OF PARM
         LH    R2,0(R1)      MOVE PARM LENGTH TO R2
         BCTR  R2,0          DECREMENT FOR EXECUTED MOVES
         MVC   10(45,R5),MESAGE36 MOVE PARM COMMENT TO PRINT LINE
         BAL   R4,PRINT      PRINT LINE
         EX    R2,MOVEPARM   MOVE PARM INFORMATION TO PRINT LINE
         BAL   R4,PRINT      PRINT PARM INFO
         EX    R2,PARMMOVE   MOVE PARM INFO TO DUMMY CARD
         LA    R9,DUMMYCRD    POINT R9 AT FAKE CARD
         L     R4,STORER4G   RESTORE RETURN ADDRESS
         BR    R4            RETURN TO MAIN-LINE
         SPACE 5
PARMMOVE MVC   DUMMYCRD+1(0),0(R3) ESTABLISH PARM INFO IN DUMMY CARD
MOVEPARM MVC   5(0,R5),0(R3) MOVE PARM INFO TO PRINT-LINE
         TITLE 'UT434 - ROUTINE TO ANALYSE AND VALIDATE CONTROL CARD'
ANALYSE  EQU   *
         ST    R4,STOREG4A   STORE RETURN ADDRESS
         MVI   SWITCH,X'00'  ZEROISE SWITCH
         MVI   CVOLSER,X'40' MOVE SPACE TO START OF CVOL SERIAL NO
         MVC   CVOLSER+1(5),CVOLSER AND PROPAGATE THROUGH
         MVI   GDGNAME,X'40' MOVE SPACE TO START OF GDG NAME
         MVC   GDGNAME+1(43),GDGNAME AND PROPAGATE THROUGH
         LR    R7,R9          POINT R7  AT START OF CONTROL CARD
         LR    R10,R9         POINT R10 AT START OF CONTROL CARD
         LA    R8,1          SET R8 TO 1 FOR BXLE INCREMENT
         LA    R9,80(R9)      POINT R9 AT END OF CARD FOR BXLE COMPAR
LOOP1    CLI   0(R7),X'40'   Q - PAST END OF NAME FIELD ?
         BE    LOOP2         YES - GO LOCATE OPERATION
         BXLE  R7,R8,LOOP1   INCREMENT POINTER & CHECK STILL WITHIN CRD
         B     SYNTAXER      NO - GO TELL OF ERROR
LOOP2    CLI   0(R7),X'40'   Q - FOUND START OF OPERATION FIELD
         BNE   OPRATION      YES - GO DETERMINE IF VALID
         BXLE  R7,R8,LOOP2   NO - INCREMENT R7 - LOOP IF STILL IN CARD
         B     SYNTAXER      OUT OF CARD - GO TELL OF ERROR
OPRATION EQU   *              PROCESS OPERATION CODE
         CLC   0(8,R7),=CL8'SCRATCH ' IS IT UT454 FORMAT REQUEST
         BNE   *+10           BRANCH IF NOT UT454 'SCRATCH' REQUEST
         MVC   0(8,R7),=CL8'REMOVE ' ALTER TO UT434 FORMAT
         CLC   0(6,R7),RESET Q - IS OPERATION EQUAL TO 'RESET '
         BE    RESETOP       YES, SO GO SET SWITCH
         CLC   0(7,R7),REMOVE IS THE OPERATION 'REMOVE '
         BE    REMOVEOP      YES, SO GO SET SWITCH
         CLC   0(8,R7),SCRATCHL TEST IF OPERATION IS 'SCRATCH '
         BE    SCRTCHOP            BRANCH IF YES
         CLC   0(7,R7),DELETE TEST IF OPERATION IS 'DELETE '
         BE    DELETEOP       BRANCH IF YES
         B     OPERROR       GO TELL OF INVAIID OPERATION
SCRTCHOP OI    SWITCH,REMOVEON INDICATE SCRATCH OPERATION FOUND
         LA    R7,7(R7)       POINT R7 AT FIRST SPACE FOLLOWING OPS CDE
         B     LOOP3          GO SEARCH FOR OPERANDS
DELETEOP OI    SWITCH,DELETEON INDICTTE DELETE OPERATION FOUND
         LA    R7,6(R7)       POINT R7 AT FIRST SPACE FOLLOWING OPS CDE
         B     LOOP3          GO SEARCH FOR OPERANDS
REMOVEOP OI    SWITCH,REMOVEON INDICATE REMOVE OPERATION FOUND
         LA    R7,6(R7)      POINT R7 AT FIRST SPACE AFTER OPERATION
         B     LOOP3         GO SEARCH FOR OPERANDS
RESETOP  OI    SWITCH,RESETON INDICATE RESET OPRRATION FOUND
         LA    R7,5(R7)      POINT R7 AT FIRST SPACE FOLLOWING OPERATN
LOOP3    CLI   0(R7),X'40'   Q - FOUND START OF KEYWORDS
         BNE   KEYWORDS      YES - THEN GO PROCESS
         BXLE  R7,R8,LOOP3   INCREMENT R7 - IF STILL IN CARD LOOP BACK
         B     SYNTAXER      OUT OF CARD - GO TELL OF ERROR
KEYWORDS BCTR  R7,0          DECREMENT R7 BECAUSE OF INCREMENT IN LOOP
KEYSERCH TM    SWITCH,X'10'  Q - HAS LAST KEYWORD BEEN PROCESSED
         BO    GOTKEYS       YES - GO PREPARE RETURN TO MAIN LINE
         LA    R10,1(R7)     POINT R10 AT START OF NEXT PARAMETER
         BAL   R4,GETKEY     GO POINT R7 AT END OF PARAMETER
         OI    SWITCH,X'10'  IF LAST PARAMETER, SET SWITCH
         CR    R10,R7        Q - DOES END OF PARM COINCIDE WITH START
         BNL   SYNTAXER      YES - THEN ', ' OR ',,' - GO TELL OF ERROR
         CLC   0(4,R10),GDG  Q - IS KEYWORD 'GDG='
         BE    KEYGDG        YES - GO PROCESS GDG KEYWORD
         CLC   0(5,R10),CVOL Q - IS KEYWORD 'CVOL='
         BE    KEYCVOL       YES - GO PROCESS CVOL KEYWORD
         CLC   0(6,R10),PURGEB Q - IS KEYWORD 'PURGE '
         BE    KEYPURGE      YES - GO PROCESS PURGE KEYWORD
         CLC   0(6,R10),PURGE Q - IS KEYWORD 'PURGE,' ?
         BE    KEYPURGE      YES - GO PROCESS PURGE KEYWORD
         CLC   0(4,R10),DSN  IS KEYWORD 'DSN='
         BE    KEYDSN        YES - SO GO PROCESS
         CLC   0(7,R10),DSNAME IS THE KEYWORD 'DSNAME='
         BE    KEYDSN        YES - SO GO PROCESS
         CLC   0(6,R10),INDSN Q - IS KEYWORD 'INDSN='
         BE    KEYINDSN       YES - GO PROCESS INDSN KEYWORD
         CLC   0(9,R10),INDSNAME Q - IS KEYWORD 'INDSNAME='
         BE    KEYINDSN          YES - GO PROCESS INDSNAME KEYWORD
         CLC   0(7,R10),MEMBER Q- IS KEYWORD 'MEMBER='
         BE    KEYMEMB         YES - GO PROCESS MEMBER KEYWORD
         B     KEYERROR      GO TELL OF INVALID KEYWORD
GOTKEYS  L     R4,STOREG4A   RESTORE RETURN ADDRESS
         BR    R4            RETURN TO MAIN-LINE
         EJECT
KEYGDG   EQU   *
         TM    SWITCH,X'80'  Q - GDG KEYWORD ALREADY PROCESSED
         BO    SYNTAXER      YES - GO TELL OF ERROR
         TM    SWITCH,DSNAMEON HAS A DSN OPERAND ALREADY BEEN PROCESSED
         BO    SYNTAXER      YES - GO TELL OF ERROR
         OI    SWITCH,X'80'  INDICATE GDG KEYWORD SUPPLIED
         LA    R10,4(R10)    POINT R10 AT START OF GDG NAME
         LR    R11,R7        POINT R11 1 PAST END OF NAME
         CR    R10,R11       Q - IS AT LEAST 1 CHARACTER NAME SUPPLIED
         BNL   SYNTAXER      NO - GO TELL OF ERROR
         SR    R11,R10       DETERMINE LENGTH OF NAME FIELD
         C     R11,FORTYFOR  Q - IS LENGTH GREATER THAN 44
         BH    NAMERROR      YES - GO TELL OF ERROR
         BCTR  R11,0         DECREMENT LENGTH FOR MOVE
         EX    R11,MOVENAME  MOVE GDG NAME TO STORE
         STH   R11,NAMELNGT  STORE (LENGTH - 1) OF NAME
         B     KEYSERCH      GO GET NEXT KEYWORD
         SPACE 1
MOVENAME MVC   GDGNAME(0),0(R10) EXECUTED MOVE INSTRUCTION
         SPACE 3
KEYMEMB  EQU   *
         TM    SWITCH,DELETEON     TEST IF DELETE OPERATION
         BNO   SYNTAXER            BRANCH IF NO (ERROR)
         TM    SWITCH,MEMBERON     TEST IF MEMBER KEYWORD ALREADY PROC.
         BO    SYNTAXER            YES - GO TELL OF ERROR
         TM    SWITCH,GDGON        TEST IF A GDG OPERAND ALREADY PROC.
         BO    SYNTAXER            YES - GO TELL OF ERROR
         OI    SWITCH,MEMBERON     INDICATE MEMBER KEYWORD SUPPLIED
         MVI   MEMBNAME,X'40'      MOVE SPACE TO START OF MEMBER NAME
         MVC   MEMBNAME+1(7),MEMBNAME   AND PROPAGATE THROUGH
         LA    R10,7(R10)          POINT R10 AT START OF MEMBER NAME
         LR    R11,R7              POINT R11 1 PAST END OF NAME
         CR    R10,R11             Q - IS AT LEAST 1 CHAR. NAME SUPPL.
         BNL   SYNTAXER            NO  - GO TELL OF ERROR
         SR    R11,R10             DETERMINE LENGTH OF NAME FIELD
         CLI   0(R10),C'('         TEST IF ONLY ONE NAME SPECIFIED
         BE    KEYMEMB1            NO - GO LOAD MEMBERS NAME IN TABLE
         C     R11,=F'8'           Q - IS LENGTH IS GREATER THAN 8
         BH    MENAMERR            YES - GO TELL OF ERROR
         BCTR  R11,0               DECREMENT LENGTH FOR MOVE
         EX    R11,MVCMNAME        MOVE MEMBER NAME TO STORE
         B     KEYSERCH            GO GET NEXT KEYWORD
KEYMEMB1 LA    R10,1(R10)          POINT R10 AT START OF FIRST MEMBER
         BCTR  R11,0               -1 FOR LENGTH
         SR    R0,R0               ZEROISE
         LA    R2,MEMBTAB          LOAD MEMBERS NAME TABLE ADDRESS
LKEYM    SR    R1,R1               ZEROISE
         LR    R3,R10              SAVE ADDRESS OF CURRENT MEMBER
LKEYMEMB CLI   0(R10),C','         TEST IF COOMMA CHAR.
         BE    KEYMEMB2            BRANCH IF YES
         CLI   0(R10),C')'         TEST IF CLOSE PARENT. CHAR.
         BE    KEYMEMB3            BRANCH IF YES
         LA    R10,1(R10)          ADDRESS FOR NEXT TEST
         LA    R1,1(R1)            GET LENGTH OF CURRENT MEMBER NAME
         BCT   R11,LKEYMEMB        REPEAT TEST
         B     SYNTAXER            SYNTAX ERROR
KEYMEMB2 LTR   R1,R1               TEST IF VALUE R1 = ZERO
         BZ    SYNTAXER            SYSTAX ERROR IF YES
         CH    R1,=H'8'            TEST IF LENGTH IS > 8
         BH    SYNTAXER            SYNTAX ERROR IF YES
         BCTR  R1,0                -1 FOR EXECUTE INSTRUCTION
         MVI   0(R2),X'40'
         MVC   1(7,R2),0(R2)
         EX    R1,MVCMTAB          MOVE CURRENT MEMBER NAME IN TABLE
         AH    R0,=H'1'            ADD ONE TO NUMBER OF MEMBERS IN TAB.
         CH    R0,=H'20'           TEST IF NUMB. OF MEMB. IN TAB. > 20
         BH    SYNTAXER            SYNTAX ERROR IF YES
         LA    R2,8(R2)            GET ADDRESS FOR NEXT MOVE
         LA    R10,1(R10)          GET ADDRESS FOR NEXT TEST
         B     LKEYM               GO SEARCH LENGTH OF NEXT MEMBER NAME
KEYMEMB3 LTR   R1,R1               TEST IF VALUE R1 = ZERO
         BZ    SYNTAXER            SYSTAX ERROR IF YES
         CH    R1,=H'8'            TEST IF LENGTH IS > 8
         BH    SYNTAXER            SYNTAX ERROR IF YES
         BCTR  R1,0                -1 FOR EXECUTE INSTRUCTION
         MVI   0(R2),X'40'
         MVC   1(7,R2),0(R2)
         EX    R1,MVCMTAB          MOVE CURRENT MEMBER NAME IN TABLE
         AH    R0,=H'1'            ADD ONE TO NUMBER OF MEMBERS IN TAB.
         CH    R0,=H'20'           TEST IF NUMB. OF MEMB. IN TAB. > 20
         BH    SYNTAXER            SYNTAX ERROR IF YES
         STH   R0,NUMBMEMB         STORE NUMBER OF MEMBERS IN TABLE
         B     KEYSERCH            GO GET NEXT KEYWORD
         SPACE 1
MVCMNAME MVC   MEMBNAME(0),0(R10)  EXECUTED MOVE INSTRUCTION
MVCMTAB  MVC   0(0,R2),0(R3)       EXECUTED MOVE INSTRUCTION
         EJECT
KEYCVOL  EQU   *
         TM    SWITCH,X'40'  Q - CVOL KEYWORD ALREADY PROCESSED
         BO    SYNTAXER      YES - GO TELL OF ERROR
         OI    SWITCH,X'40'  INDICATE CVOL KEYWORD SUPPLIED
         LA    R10,5(R10)    POINT R10 AT DEVICE TYPE
         CLC   0(4,R10),TYPE Q - IS IT 3330
         BNE   DEVICERR      NO - GO TELL OF ERROR
         LA    R10,5(R10)    POINT R10 AT SERIAL NUMBER
         CR    R10,R7        Q - POINTING PAST INDICATED END OF PARM
         BNL   SYNTAXER      YES - GO TELL OF ERROR
         LR    R11,R7        POINT R11 AT END-OF-PARM+1
         SR    R11,R10       SUBTRACT START OF PARAMETER
         C     R11,SIX       Q - IS LENGTH OF SERIAL NO GREATER THAN 6
         BH    SYNTAXER      YES - GO TELL OF ERROR
         BCTR  R11,0         DECREMENT LENGTH FOR MOVE
         EX    R11,MOVESER   MOVE SERIAL NO TO STORE
         B     KEYSERCH      GO GET NEXT KEYWORD
         SPACE 1
MOVESER  MVC   CVOLSER(0),0(R10) EXECUTED MOVE INSTRUCTION
         SPACE 2
KEYINDSN EQU   *
         TM    SWITCH,DELETEON     TEST IF DELETE OPERATION
         BNO   SYNTAXER            BRANCH IF NO (ERROR)
         LA    R10,2(R10) BYPASS 'IN' OF INDSN= OR INDSNAME= KEYWORDS
         B     KEYDSN     GO TO NORMAL KEYWORD DSN= OR DSNAME=
         SPACE 2
KEYDSN   EQU   *
         TM    SWITCH,DSNAMEON HAS A DSN OPERAND ALREADY BEEN PROCESSED
         BO    SYNTAXER      YES - GO TELL OF ERROR
         TM    SWITCH,GDGON  HAS A GDG OPERAND ALREADY BEEN PROCESSED
         BO    SYNTAXER      YES - GO TELL OF ERROR
         OI    SWITCH,DSNAMEON INDICATE DSN OPERAND SUPPLIED
         CLI   3(R10),C'='   IS THE KEYWODD 'DSN='
         BNE   *+12          NO, THEN IT IS 'DSNAME='
         LA    R10,4(R10)    POINT R10 AT START OF NAME
         B     *+8           BYPASS ALTERNATE INCREMENT
         LA    R10,7(R10)    POINT R10 AT START OF NAME
         MVI   DSNNAME,C' '  MOVE SPACE TO START OF NAME STORE
         MVC   DSNNAME+1(43),DSNNAME AND PROPAGATE THROUGH
         LR    R11,R7        POINT R11 1 PAST END OF NAME
         CR    R10,R11       IS NAME AT LEAST 1 BYTE LONG
         BNL   SYNTAXER      NO - GO TELL OF ERROR
         SR    R11,R10       DETERMINE LENGTH OF NAME FIELD
         CH    R11,=H'44'    IS THE NAME TOO LONG
         BH    NAMERROR      YES - SO GO TELL OF ERROR
         BCTR  R11,0         DECREMENT LENGTH FOR MOVE
         EX    R11,MOVEDSN   MOVE NAME TO STORE
         STH   R11,NAMELNGT  STORE (LENGTH - 1) OF NAME
         B     KEYSERCH      GO GET NEXT KEYWORD
         SPACE 1
MOVEDSN  MVC   DSNNAME(0),0(R10) EXECUTED MOVE INSTRUCTION
         EJECT
KEYPURGE EQU   *
         TM    SWITCH,X'20' Q - PURGE PARAMETER ALREADY PROCESSED
         BO    SYNTAXER     YES - GO TELL OF ERROR
         OI    SWITCH,X'20' INDICATE PURGE PARAMETER SUPPLIED
         B     KEYSERCH     GO GET NEXT KEYWORD
         SPACE 5
GETKEY   EQU   *
         BXLE  R7,R8,GETKEY2 INCREMENT POINTER AND TEST IF VALID
         B     SYNTAXER      REACHED END OF CARD - TELL OF ERROR
GETKEY2  CLI   0(R7),C'('          TEST IF OPEN PARENT. CHAR.
         BE    GETKEY3             YES - GO SEARCH CLOSE PARENT. CHER.
         CLI   0(R7),C')'          TEST IF CLOSE PARENT. CHAR.
         BE    SYNTAXER            YES - TELL OF ERROR
         CLI   0(R7),X'40'         TEST IF SPACE CHAR.
         BE    0(R4)         YES - RETURN INDICATING LAST PARAMETER
         CLI   0(R7),X'6B'   Q - FOUND COMMA FOLLOWING PARAMETER
         BE    4(R4)         YES - RETURN TO DETERMINE KEYWORD
         B     GETKEY        GO TEST NEXT COLUMN
GETKEY3  BXLE  R7,R8,GETKEY4       INCR. POINTER AND TEST IF VALID
         B     SYNTAXER            REACHED END OF CARD - TELL OF ERROR
GETKEY4  CLI   0(R7),C')'          TEST IF CLOSE PARENT. CHAR.
         BE    GETKEY              YES - GO TEST NEXT POSITION
         B     GETKEY3             GO TEST NEXT POSITION
         EJECT
WRITEROR EQU   *
         BAL   R4,PRINT           WRITE ERROR LINE
         CLC   COMPCODE,COND8     Q - IS COMPLETION CODE LESS THAN 8
         BNL   *+10               NO - THEN DO NOT ALTER
         MVC   COMPCODE,COND8     SET COMPLETION CODE TO 8
         B     PROCESS            GO READ NEXT CONTROL CARD
         SPACE 1
SYNTAXER MVC   80(53,R5),MESAGE01 MOVE ERROR MESSAGE TO BUFFER
         B     WRITEROR           GO WRITE LINE
OPERROR  MVC   80(53,R5),MESAGE02 MOVE ERROR MESSAGE TO BUFFER
         B     WRITEROR           GO WRITE LINE
KEYERROR MVC   80(53,R5),MESAGE03 MOVE ERROR MESSAGE TO BUFFER
         B     WRITEROR           GO WRITE LINE
DEVICERR MVC   80(53,R5),MESAGE04 MOVE ERROR MESSAGE TO BUFFER
         B     WRITEROR           GO WRITE LINE
NAMERROR MVC   80(53,R5),MESAGE05 MOVE ERROR MESSAGE TO BUFFER
         B     WRITEROR           GO WRITE LINE
NOGDG    MVC   80(53,R5),MESAGE06 MOVE ERROR MESSAGE TO BUFFER
         B     WRITEROR           GO WRITE LINE
MENAMERR MVC   80(53,R5),MESAGE44  MOVE ERROR MESSAGE TO BUFFER
         B     WRITEROR            GO WRITE LINE
NODSNMEB MVC   80(53,R5),MESAGE45  MOVE ERROR MESSAGE TO BUFFER
         B     WRITEROR            GO WRITE LINE
NDASD    MVC   80(53,R5),MESAGE38  MOVE ERROR MESSAGE TO BUFFER
         B     WRITEROR            GO WRITE LINE
MULTIVER MVC   80(53,R5),MESAGE39  MOVE ERROR MESSAGE TO BUFFER
         B     WRITEROR            GO WRITE LINE
VOLNMOER MVC   80(53,R5),MESAGE40  MOVE ERROR MESSAGE TO BUFFER
         B     WRITEROR            GO WRITE LINE
         TITLE 'UT434 - ROUTINE TO DELETE PDS MEMBERS'
DELEMEMB SUBIN SAVE=(R4)
         L     R1,16               GET CVT ADDR
         TM    116(R1),X'10'       TEST IF UNDER MVS
         BNZ   MVS                 BRANCH IF YES
MFT      EQU   *
         LA    R2,TABLEDD          GET ADDRESS OF TABLE DDNAME
         LH    R3,NDDINTAB         LOAD NUMBER OF DDN IN TABLE
         LTR   R3,R3               TEST IF VALUE R3 = ZERO
         BZ    VOLNMOER            BRANCH IF YES (ERROR)
LTABDD1  CLC   8(6,R2),VOLUMLST+6  TEST IF VOL. IS IN TABLE
         BE    DDNF                BRANCH IF YES
         LA    R2,14(R2)           GET ADDRESS FOR NEXT TEST
         BCT   R3,LTABDD1          REPEAT TEST
         B     VOLNMOER            ERROR
DDNF     MVC   CURDDN(8),0(R2)     MOVE DDNAME FROM TABLE TO DCB PARTID
         RDJFCB (PARTIDS)          READ JFCB
         MVC   JFCBDSNM,DSNNAME    MOVE DSNAME OF PDS
         OI    JFCBMASK+4,B'10000000' SET ON HIGH BIT
         OPEN (PARTIDS,(UPDAT)),TYPE=J   OPEN PDS
         B     BOTH
MVS      EQU   *
         CLI   UT501SW,X'FF'       CHECK IF UT501 HAS BEEN LOADED
         BE    LOADED              BRANCH IF YES
         LOAD  EP=UT501            LOAD UT501
         ST    R0,UT501ADD         SAVE ENTRY POINT ADDR
         MVI   UT501SW,X'FF'       SET UT501 SW TO LOADED
LOADED   EQU   *
         BAL   R4,ALLOC            DYN. ALLOC. OF DATA SET
         B     *+4(R15)
         B     ALLOCOK             DYN. ALLOC. WAS SUCCESSFULL
         B     ALLOCER             DYN. ALLOC. FAILED
         B     DSNBUSY             DATA SET ALLREADY ALLOCATED
ALLOCER  EQU   *
         MVC   STOWCC,COND16       SET RET. CODE
         MVC   80(53,R5),MESAGE56  MOVE MSG TEXT TO PRINT AREA
         B     ALLOCEXT
DSNBUSY  EQU   *
         MVC   STOWCC,COND16       SET RET. CODE
         MVC   80(53,R5),MESAGE55  MOVE TEXT TO PRINT AREA
         B     ALLOCEXT
ALLOCOK  EQU   *
         OPEN  (PARTIDS,(UPDAT))   OPEN PDS
BOTH     EQU   *
         CLI   MEMBNAME,X'40'      TEST IF MULTI-LIST OF MEMBERS
         BNE   *+8                 BRANCH IF NO
         B     MULTIMEM
         STOW  PARTIDS,MEMBNAME,D  SCRATCH MEMBER
         B     *+4(R15)
         B     SUCESFUL  SUCCESFUL
         B     PERROR42  ?
         B     MENOTFOU  MEMBER NOT FOUND
         B     PERROR42  ?
         B     PERROR46  PERMANENT I/O ERROR
         B     ABEND     DCB NOT OPEN OR IS OPENED INCORRECTLY/ILLOGIC.
         B     ABEND     CONDITIONAL GETMAIN WITH STOW - ILLOGICAL
SUCESFUL MVC   80(53,R5),MESAGE48  MOVE SUCCESFUL MESAGE
         MVC   STOWCC,=F'0'        MOVE COMPLETION CODE
         B     WRITEMES            GO WRITE MESSAGE
PERROR42 MVC   80(53,R5),MESAGE42  MOVE ERROR MESSAGE
         MVC   STOWCC,COND8        MOVE COMPLETION CODE
         B     WRITEMES            GO WRITE MESSAGE
MENOTFOU MVC   80(53,R5),MESAGE47  MOVE ERROR MESSAGE
         MVC   STOWCC,COND4        MOVE COMPLETION CODE
         B     WRITEMES            GO WRITE MESSAGE
PERROR46 MVC   80(53,R5),MESAGE46  MOVE ERROR MESSAGE
         MVC   STOWCC,COND8        MOVE COMPLETION CODE
WRITEMES BAL   R4,PRINT            WRITE LINE
         CLC   COMPCODE,STOWCC
         BNL   *+10
         MVC   COMPCODE,STOWCC
CLOSEPDS CLOSE PARTIDS             CLOSE PDS
**       L     R1,16               GET CVT ADDR
**       TM    116(R1),X'10'       TEST IF UNDER MVS
**       BZ    DELMEMXT            BRANCH IF NO
**       BAL   R4,DALOC            DYN. DEALLOC. DATA SET
**       B     *+4(R15)
**       B     DALOCOK             DYN. DEALLOC. WAS SUCCESSFULL
**       B     DALOCER             DYN. DEALLOC. FAILED
DALOCER  EQU   *
**       MVC   STOWCC,COND16       SET RET. CODE
**       MVC   80(53,R5),MESAGE57  MOVE TEXT TO PRINT AREA
ALLOCEXT EQU   *
         BAL   R4,PRINT            PRINT MSG
         CLC   COMPCODE,STOWCC     COMPARE OLD RET. CODE WITH NEW ONE
         BNL   *+10                SKIP UPDATE IF OLD RC .GE. NEW RC
         MVC   COMPCODE,STOWCC     UPDATE COMPL. CODE
DALOCOK  EQU   *
DELMEMXT EQU   *
         SUBOUT RESTORE=(R4)
         EJECT
MULTIMEM LA    R2,MEMBTAB          LOAD ADDRESS OF TABLE MEMBERS NAME
         LH    R3,NUMBMEMB         LOAD NUMBER OF MEMBERS IN TABLE
         LTR   R3,R3               TEST IF NUMBER OF MEMB. IN TABLE = 0
         BZ    SYNTAXER            SYNTAX ERROR IF YES
LSTOW    STOW  PARTIDS,(R2),D      SCRATCH CURRENT MEMBER
         B     *+4(R15)
         B     SUCFUL              SUCCESSFUL
         B     PERROR42            ?
         B     MENOTF              MEMBER NOT FOUND
         B     PERROR42            ?
         B     PERROR46            PERMANENT I/O ERROR
         B     ABEND     DCB NOT OPEN OR IS OPENED INCORRECTLY/ILLOGIC.
         B     ABEND     CONDITIONAL GETMAIN WITH STOW - ILLOGICAL
SUCFUL   MVC   80(28,R5),MESAGE51  MOVE SUCCESSFUL MESSAGE TO BUFFER
         MVC   STOWCC,=F'0'        COMPLETION CODE
         B     MVCM
MENOTF   MVC   80(28,R5),MESAGE52  MOVE ERROR MESSAGE TO PRINT BUFFER
         MVC   STOWCC,COND4        COMPLETION CODE
MVCM     MVC   88(8,R5),0(R2)      MOVE MEMBER TO MESSAGE SUC. AND ERR.
         BAL   R4,PRINT            WRITE LINE
         CLC   COMPCODE,STOWCC
         BNL   *+10
         MVC   COMPCODE,STOWCC
         LA    R2,8(R2)            GET ADDRESS OF NEXT MEMBER
         BCT   R3,LSTOW            REPEAT OPERATION FOR THIS MEMBER
         B     CLOSEPDS            GO CLOSE DS
         SPACE 1
FTIME    EQU   *
         LA    R2,TABLEDD          GET ADDRESS OF TABLE DDNAME
         LH    R3,NDDINTAB         LOAD NUMBER OF DDN IN TABLE
         LTR   R3,R3               TEST IF VALUE R3 = ZERO
         BZ    0(R4)               BRANCH IF YES
LJFCB1   MVC   CURDDN(8),0(R2)     MOVE CURRENT DDNAME TO DCB PARTIDS
         RDJFCB (PARTIDS)          READ JFCB FOR THIS DDNAME
         CLI   JFCBNVOL,X'01'      TEST IF ONLY ONE VOLUME
         BNE   *+10                BRANCH IF NO
         MVC   8(6,R2),JFCBVOLS    VOLUME NUMBER IN TABLE (MOVE)
         LA    R2,14(R2)           GET ADDRESS FOR NEXT MOVE
         BCT   R3,LJFCB1           REPEAT TEST
         BR    R4                  RETURN TO CALLER
         EJECT
ALLOC    EQU   *                   DYN. ALLOC AND DEALLOC SEGMENT
         MVC   CURDDN(8),=CL8'PARTIDS'  MOVE DDN INTO JCL STATEMENT
         MVC   JCLVOL(6),VOLUMLST+6     MOVE VOL INTO JCL STATEMENT
         LA    R0,5                INIT LOOP CTR
         LA    R1,JCLVOL+1         GET ADDR OF VOL+1
SCANVOL  EQU   *
         CLI   0(R1),C' '          SCAN VOL FOR BLANK
         BE    MOVEDSNT            YES BRANCH TO MOVE ',DSN='
         LA    R1,1(R1)            INCREMENT PTR IN VOL
         BCT   R0,SCANVOL          DECR. LOOP CTR AND LOOP ON SCAN
MOVEDSNT EQU   *
         MVC   0(5,R1),=C',DSN='   MOVE KEYWORD INTO JCL STATEMENT
         LA    R1,5(R1)            R1 PTS AFTER 'DSN='
         MVC   0(44,R1),DSNNAME    MOVE DSN INTO JCL STATEMENT
         LA    R2,NBLOOPMX         INIT LOOP CTR
         B     ALLOCDSN
ALLOCWT  EQU   *
         STIMER WAIT,DINTVL=WAITTIME
ALLOCDSN EQU   *
*        CALL  UT501,(ALLOCJCL,ALLOCSW,ALLOCRC,ALADDR,DALADDR),VL
         LA    R1,UT501PRM         GET PARAMETERS ADDR
         L     R15,UT501ADD        GET ENTRY POINT ADDR
         BALR  R14,R15             BRANCH TO UT501
         CLI   ALLOCRC,X'20'       TEST IF DYN. ALLOC. WAS SUCCESSFULL
         BL    ALLOCTED            DYN. ALLOC. WAS SUCCESSFULL
         BH    ALLOCERR            DYN. ALLOC. FAILED
         BCT   R2,ALLOCWT          DSN IS BSY,DECR. CTR AND GO TO WAIT
         B     ALLOCBSY            DSN STILL BSY AFTER MAXNBR OF LOOPS
DALOC    EQU   *
**       CALL  UT501,(ALLOCJCL,DALOCSW,ALLOCRC,ALADDR,DALADDR),VL
**       CLI   ALLOCRC,X'00'       TEST IF DYN. DEALLOC. IS SUCCESSFULL
**       BE    DALOCTED            DYN. DEALLOC. IS SUCCESSFULL
**       B     DALOCERR            DYN. DEALLOC. FAILED
ALLOCBSY EQU   *
         LA    R15,8               SET RC (DATA SET STILL BUSY)
         B     ALLOCOUT            AND RETURN
ALLOCERR EQU   *
DALOCERR EQU   *
         LA    R15,4               SET RC (DYN. ALLOC. FAILURE)
         B     ALLOCOUT            AND RETURN
ALLOCTED EQU   *
DALOCTED EQU   *
         SR    R15,R15             SET RC (DYN. ALLOC. SUCCESSFULL)
ALLOCOUT EQU   *
         BR    R4                  AND RETURN TO CALLER
*
***      PARAM AND WORK AREA USED BY ALLOC/DEALLOC SEGMENT
*
NBLOOPMX EQU   120                  MAX NBR OF TRY TO DYN. ALLOC DSN
WAITTIME DC    C'00000500'         WAIT TIME BEFOER NEXT TRY (5 SEC.)
*
UT501PRM DS    0A                  UT501 PARMS ADDRESSES
         DC    A(ALLOCJCL)
         DC    A(ALLOCSW)
         DC    A(ALLOCRC)
         DC    A(ALADDR)
         DC    B'10000000'         LAST PARAM SW
         DC    AL3(DALADDR)
UT501ADD DC    A(0)                UT501 ENTRY POINT ADDR
ALADDR   DS    A
DALADDR  DS    A
ALLOCJCL DS    0H
         DC    AL2(L'JCLDDN+L'JCLVOL+L'JCLDSNAM+L'JCLDSN)
JCLDDN   DC    C'//PARTIDS DD DISP=OLD,FREE=CLOSE,VOL=SER='
JCLVOL   DC    CL6' '         ROOM FOR VOLSER
JCLDSNAM DC    CL5' '         ROOM FOR KEYWORD (',DSN=')
JCLDSN   DC    CL45' '        ROOM FOR DSNAME
ALLOCSW  DC    C'A'
DALOCSW  DC    C'D'
ALLOCRC  DS    XL1
UT501SW  DC    X'00'               UT501 LOAD SW
         EJECT
         TITLE 'UT434 - ROUTINE TO GET GENERATION INDEX POINTER ENTRY'
POINTER  DS    0H
         ST    R4,PSTORER4   STORE R4 BECAUSE OF SUB-ROUTINES
         MVI   READBLK+1,X'00' NULLIFY READBLK'S INTERNAL SWITCH
         MVC   TTRCVOL,CVOLSER ESTABLISH READBLK'S CVOL POINTER
         LA    R11,GDGNAME   POINT R11 AT START OF QUALIFIED NAME
         ST    R11,NAMESTRT   AND STORE FOR LOCATE ROUTINE
         BAL   R4,LOCATE     OBTAIN FIRST SIMPLE NAME
POINTER1 MVC   CURENTTR,FIRSTTR SET TTR FOR FIRST RECORD OF CATALOG
         BAL   R4,READBLK    READ FIRST BLOCK
POINTER2 MVC   SCANNAME,LINKENT SET TO SCAN FOR LINK ENTRY
         BAL   R4,SCANBLK    SEARCH BLOCK FOR LINK ENTRY
         B     *+8           ENTRY FOUND, SO CONTINUE
         B     ABEND         ENTRY NOT FOUND, SO LOGIC ERROR
         MVC   NEXTTR,8(R11) STORE TTR OF NEXT BLOCK IN INDEX
POINTER3 MVC   SCANNAME,SIMPLE SET TO SCAN FOR SIMPLE NAME
         BAL   R4,SCANBLK    SEARCH BLOCK FOR SIMPLE NAME
         B     TYPENTRY      NAME FOUND, DETERMINE ENTRY TYPE
         MVC   CURENTTR,NEXTTR MOVE NEXT TTR TO CAMLST
         CLC   CURENTTR,ZEROTTR IS TTR EQUAL TO ZERO
         BE    PERROR9       YES, THEN INDEX EXHAUSTED
POINTER4 BAL   R4,READBLK    READ NEXT BLOCK
         B     POINTER2      GO SEARCH FOR LINK ENTRY
         EJECT
PERROR7  MVC   80(53,R5),MESAGE07      **
         BAL   R4,PRINT                 *
         MVC   80(53,R5),MESAGE08       *
         MVC   100(6,R5),WORKAREA+259   *
         B     PCOMPCDE                 *
PERROR9  MVC   80(53,R5),MESAGE09       *
         B     PCOMPCDE                 *
PERROR10 MVC   80(53,R5),MESAGE10       *
         B     PCOMPCDE                 *
PERROR11 MVC   80(53,R5),MESAGE11       *   **  MOVE APPROPRIATE
         B     PCOMPCDE                 ** **    ERROR MESSAGE
PERROR12 MVC   80(53,R5),MESAGE12       *   **   TO PRINT-LINE
         B     PCOMPCDE                 *
PERROR13 MVC   80(53,R5),MESAGE13       *
         B     PCOMPCDE                 *
PERROR14 MVC   80(53,R5),MESAGE14       *
         BAL   R4,PRINT                 *
         B     PERROR16                 *
PERROR37 MVC   80(53,R5),MESAGE37       *
         MVC   10(44,R5),NAMEFLD        *
         BAL   R4,PRINT                 *
         B     PERROR16                 *
PERROR43 MVC   80(53,R5),MESAGE43       *
         B     PCOMPCDE                 *
PERROR15 MVC   80(53,R5),MESAGE15       *
         BAL   R4,PRINT                 *
PERROR16 MVC   80(53,R5),MESAGE16      **
         SPACE 2
PCOMPCDE EQU   *
         BAL   R4,PRINT      WRITE ERROR MESSAGE
         CLC   COMPCODE,COND8 TEST IF COMPLETION CODE LESS THAN 8
         BNL   *+10          NO, SO DO NOT ALTER
         MVC   COMPCODE,COND8 SET COMPLETION CODE TO 8
         B     PROCESS       GO READ NEXT CONTROL CARD
         EJECT
TYPENTRY EQU   *             DETERMINE TYPE OF LOCATED ENTRY
         CLI   11(R11),X'02' TEST FOR GENERATION INDEX POINTER
         BNE   TYPE2         IT IS NOT, SO MAKE NEXT TEST
         CLI   DELIMITR,C' ' VERIFY THAT DELIMITER WAS BLANK
         BNE   PERROR10      NO, SO TELL OF ERROR
         CLC   13(1,R11),15(R11) DOES CURRENT GEN COUNT = MAXIMUM
         BNE   PERROR15      IF NOT, TELL RESET REQUEST INVALID
         TM    12(R11),X'01' TEST IF EMPTY OPTION SPECIFIED
         BO    PERROR14      IF YES, TELL RESET REQUEST INVALID
         MVC   GENNUMBR,13(R11) STORE NUMBER OF GENERATIONS
         L     R4,PSTORER4   RESTORE RETURN ADDRESS
         BR    R4            RETURN TO MAIN-LINE
         SPACE 1
TYPE2    EQU   *
         CLI   11(R11),X'01' IS IT A VOLUME CONTROL BLOCK
         BE    PERROR10      YES, SO TELL OF ERROR
         CLI   11(R11),X'06' IS IT A DATA SET POINTER
         BH    PERROR10      YES, SO TELL OF ERROR
         CLI   11(R11),X'04' IS IT AN ALIAS ENTRY
         BNE   TYPE3         NO, SO CONTINUE TESTING
         CLI   DELIMITR,C' ' TEST IF DELIMITER IS BLANK
         BE    PERROR10      IF IT IS, TELL OF ERROR
         MVC   CURENTTR,8(R11) OBTAIN FIRST TTR OF TRUE NAME
         BAL   R4,LOCATE     GET NEXT LEVEL OF NAME
         B     POINTER4      READ FIRST BLOCK OF INDEX
TYPE3    CLI   11(R11),X'05' TEST FOR CVOL POINTER
         BNE   TYPE4         NO - GO TO NEXT TEST
         CLI   DELIMITR,C' ' CHECK FOR BLANK DELIMITER
         BE    PERROR10       IT WAS, SO TELL OF ERROR
         MVI   READBLK+1,X'F0' INDICATE CVOL TO READ
         MVC   TTRCVOL,16(R11) MOVE CVOL SER NO. TO CAMLST
         B     POINTER1      GO RETRIEVE 1ST BLOCK OF NEW CATALOG
TYPE4    CLI   11(R11),X'00' VERIFY IT IS AN INDEX POINTER
         BNE   ABEND         IF NOT, THERE IS A LOGIC ERROR
         CLI   DELIMITR,C' ' WAS DELIMITER A BLANK
         BE    PERROR10      NO, SO TELL OF ERROR
         MVC   CURENTTR,8(R11) GET TTR OF START OF NEXT LEVEL
         BAL   R4,LOCATE     GET NEXT SIMPLE NAME
         B     POINTER4       GO READ FIRST BLOCK OF INDEX
         EJECT
SCANBLK  EQU   *             SCAN BLOCK FOR ENTRY WITH SPECIFIC NAME
         LA    R2,WORKAREA   POINT R2 AT START OF BLOCK
         AH    R2,WORKAREA   POINT R2 AT END OF MEANINGFUL DATA
         LA    R11,WORKAREA  POINT R11 AT START OF BLOCK
         LA    R11,2(R11)    POINT R11 AT FIRST CATALOG ENTRY
SCANBLK1 CLC   0(8,R11),SCANNAME IS IT THE DESIRED ENTRY
         BE    0(R4)         YES, SO RETURN TO R4+0
         SR    R3,R3         ZEROISE R3
         IC    R3,11(R11)    INSERT COUNT OF HALFWORDS
         SLL   R3,1          MULTIPLY HALFWORD COUNT BY 2
         LA    R11,12(R3,R11) LOCATE NEXT CATALOG ENTRY
         CR    R11,R2        TEST IF EXHAUSTED MEANINGFUL DATA
         BL    SCANBLK1      NO, SO GO TEST ENTRY
         B     4(R4)         ENTRY NOT FOUND - RETURN TO R4+4
         SPACE 5
READBLK  EQU   *             ROUTINE TO READ BLOCK BY TTR
         BC    0,READBLK1    BRANCH SET IF CVOL POINTER IS FOUND
         TM    SWITCH,X'40'  WAS CVOL SERIAL NO. SUPPLIED ?
         BO    READBLK1      YES, SO GO USE APPROPRIATE MACRO
         LOCATE BYTTR        READ BLOCK BY TTR
         B     READBLK2      BYPASS ALTERNATE MACRO
READBLK1 LOCATE BYTTRCVL     READ BLOCK ON CVOL BY TTR
READBLK2 LTR   R15,R15       WAS LOCATE SUCCESSFUL ?
         BZ    0(R4)         YES - SO RETURN
         CH    R15,HALFWD4   *
         BE    PERROR7        *
         CH    R15,HALFWD24   * DETERMINE NATURE OF ERROR
         BE    PERROR12       *  AND GO REPORT IT.
         CH    R15,HALFWD28   *
         BE    PERROR13      *
         B     ABEND         IF REACH HERE, LOGIC ERROR
         SPACE 2
BYTTR    CAMLST BLOCK,CURENTTR,,WORKAREA
BYTTRCVL CAMLST BLOCK,CURENTTR,TTRCVOL,WORKAREA
         EJECT
LOCATE   EQU   *             GET SIMPLE NAME FROM QUALIFIED ONE
         MVI   SIMPLE,C' '   MOVE SPACE TO START OF SIMPLE STORE
         MVC   SIMPLE+1(7),SIMPLE AND PROPAGATE THROUGH
         ST    R11,STORER11  PRESERVE R11
         L     R11,NAMESTRT  POINT R11 AT START OF FIELD TO BE SEARCHED
         TRT   0(9,R11),DELIMTAB SEARCH 9 BYTES FOR DELIMITER
         BZ    PERROR11      IF NONE FOUND, THEN NAME INVALID
         STC   R2,DELIMITR   PRESERVE DELIMITER
         LR    R2,R1         STORE DELIMITER ADDRESS IN R2
         LA    R2,1(R2)      POINT R2 AT START OF NEXT SIMPLE NAME
         SR    R1,R11        GET LENGTH OF SIMPLE NAME
         ST    R2,NAMESTRT   STORE START OF NAME FOR NEXT TIME
         BCTR  R1,0          DECREMENT FOR EXECUTED INSTRUCTIONS
         EX    R1,MVESMPLE   STORE SIMPLE NAME
         EX    R1,NMEVALID   CHECK NAME FOR ALPHAMERIC AND SPECIAL
         BNZ   PERROR11      IF OTHERS, THEN NAME INVALID
         CLI   SIMPLE,C'0'   CHECK THAT FIRST CHARACTER NOT NUMERIC
         BNL   PERROR11      IF NUMERIC, THEN NAME INVALID
         L     R11,STORER11  RESTORE R11 TO VALUE AT ENTRY
         BR    R4            RETURN
         SPACE 5
MVESMPLE MVC   SIMPLE(0),0(R11)    EXECUTED MOVE
NMEVALID TRT   SIMPLE(0),VALIDTAB  EXECUTED TRABSLATE AND TEST
         SPACE 1
DELIMTAB DC    64X'00'
         DC    X'40'         TRANSLATE AND TEST TABLE
         DC    10X'00'        THAT WILL DETECT ONLY
         DC    X'4B'          BLANKS AND PERIODS.
         DC    180X'00'
         SPACE 1
VALIDTAB DC    90X'FF'       TRANSLATE AND TEST TABLE
         DC    X'00'    $     THAT WILL DETECT ANY
         DC    4X'FF'         CHARACTER NOT VALID IN
         DC    X'00'    -     A DATA SET NAME.
         DC    26X'FF'
         DC    2X'00'   #@
         DC    69X'FF'
         DC    9X'00'   A-I
         DC    7X'FF'
         DC    9X'00'   J-R
         DC    8X'FF'
         DC    8X'00'   S-Z
         DC    6X'FF'
         DC    10X'00'   0-9
         DC    6X'FF'
         TITLE 'UT434 - ROUTINE TO OBTAIN ABSOLUTE NAME OF GEN (0)'
GETONAME EQU   *
         LA    R11,NAMEFLD   POINT R11 AT NAME FIELD
         AH    R11,NAMELNGT  ADD LENGHT OF GDG NAME
         LA    R11,1(R11)    INCREMENT BY 1 TO POINT AT FIRST BLANK
         MVC   NAMEFLD,GDGNAME MOVE GDG NAME TO FIELD
         MVC   0(3,R11),ZERO MOVE RELATIVE GEN NO. OF (0) TO FIELD
         TM    SWITCH,X'40'  Q - WAS CVOL SERIAL NO. SUPPLIED
         BO    GETNAME2      YES - GO USE APPROPRIATE LOCATE MACRO
         LOCATE ZEROGEN      GE VOLUME LIST AND ABSOLUTE NAME
         B     GETNAME3      BYPASS ALTERNATE LOCATE
GETNAME2 LOCATE ZEROGENC     GET VOL LIST & ABSOLUTE NAME - CVOL VERSN
GETNAME3 MVC   VOLUMLST(200),WORKAREA        SAVE THE VOLUME LIST
         MVC   VOLUMLST+200(65),WORKAREA+200  OF THE ZERO'TH GENERATION
         LTR   R15,R15       Q - LOCATE SUCCESSFUL
         BNZ   GETNAME4      NO, SO DETERMINE CAUSE OF ERROR
         LA    R11,2(R11)    POINT AT NNNN WITHIN GNNNNV00
         PACK  CVBAREA,0(4,R11) PACK NNNN
         CVB   R2,CVBAREA    CONVERT ABSOLUTE NNNN TO BINARY
         SR    R3,R3         ZEROISE R3
         IC    R3,GENNUMBR   INSERT SIZE OF CYCLE OF GENERATIONS
         CR    R2,R3         IS ABSOLUTE NO. > CYCLE FREQUENCY
         BNH   PERROR37      NO, SO TELL RESET REQUEST INVALID
         BR    R4            RETURN TO MAIN-LINE
GETNAME4 EQU   *
         CH    R15,HALFWD24  Q - I/O ERROR WHILE READING CATALOG
         BE    PERROR12      YES - GO TELL OF ERROR
         B     ABEND         OTHER ERRORS MEAN LOGIC FLAW SO DUMP
         SPACE 1
ZEROGEN  CAMLST NAME,NAMEFLD,,WORKAREA
ZEROGENC CAMLST NAME,NAMEFLD,CVOLSER,WORKAREA
         TITLE 'UT434 - ROUTINE TO OBTAIN VOLUME LIST FOR REMOVE'
READDSN  EQU   *
         MVC   NAMEFLD,DSNNAME MOVE NAME TO WORK FIELD
         TM    SWITCH,GDGON  IS IT A GDG OPERATION
         BZ    READDSN2      NO, THEN SKIP REL. GEN. NO. MOVES
         LA    R11,NAMEFLD   POINT R11 AT NAME FIELD
         AH    R11,NAMELNGT  ADD LENGTH OF GDG NAME
         LA    R11,1(R11)    INCREMENT BY 1 TO POINT AT FIRST BLANK
         MVC   0(3,R11),ZERO MOVE REL. GEN. NO. OF (0) TO FIELD
READDSN2 TM    SWITCH,CVOLON WAS CVOL SERIAL NO. SUPPLIED
         BO    READDSN3      YES, GO USE APPROPRITE LOCATE MACRO
         LOCATE DATASET      GET VOLUME LIST AND ABSOLUTE NAME
         B     READDSN4      BYPASS ALTERNATE LOCATE
READDSN3 LOCATE DATASETC     GET VOL LIST & ABSOLUTE NAME FROM CVOL
READDSN4 MVC   VOLUMLST(200),WORKAREA PRESERVE THE VOLUME LIST
         MVC   VOLUMLST+200(65),WORKAREA+200 OF THE DATA SET
         B     READDSN5(R15) TAKE ACTION DEPENDIMG ON CONDITION CODE
READDSN5 B     0(R4)         LOCATE SUCCESSFUL SO RETURN TO MAIN-LINE
         B     PERROR7       CONTROL VOLUME NOT MOUNTED OR HAS NO CATLG
         B     READDSN6      NAME NOT FOUND - MAKE FURTHUR TESTS
         B     READDSN7      SUPPLIED NAME NOT A DS - TEST FURTHUR
         B     READDSN7      SUPPLIED NAME NOT A DS - TEST FURTHUR
         B     PERROR11      SYNTAX ERROR IN NAME FIRLD
         B     PERROR12      PERMANENT I/O ERROR WHILE READING CATALOG
         B     ABEND         SUPPLIED TTR NOT IN CATALOG - ILLOGICAL
         B     ABEND         INVALID WORK AREA POINTER - ILLOGICAL
READDSN6 TM    SWITCH,DSNAMEON WAS SEARCH FOR A DATA SET
         BO    PERROR9       YES, THEN TELL DATA SET NOT CATALOGUED
         TM       SWITCH,GDGON+FIRSTIME WAS IT FIRST SEARCH FOR A GDG
         BO    PERROR9       YES, THEN TELL DATA SET NOT CATALOGUED
         B     PROCESS       OK.  SUBSEQUENT GDG SEARCH WILL VALIDLY
*                             NOT BE SATISFIED.  GO READ NEXT REQUEST
READDSN7 TM    SWITCH,GDGON  WAS IT A GDG SEARCH
         BO    PERROR10      YES, GO TELL NAME NOT A GDG
         B     PERROR43      GO TELL NAME NOT A DATA SET
         SPACE 1
DATASET  CAMLST NAME,NAMEFLD,,WORKAREA
DATASETC CAMLST NAME,NAMEFLD,CVOLSER,WORKAREA
         TITLE 'UT434 - ROUTINE TO UNCATALOG A DATA SET'
UNCATALG EQU   *
         MVC   10(44,R5),NAMEFLD MOVE ABSOLUTE NAME OF GEN (0) TO LINE
         MVC   60(15,R5),UNCATLG MOVE UNCATALOGED MESSAGE TO LINE
         TM    SWITCH,X'40'  Q - WAS CVOL SERIAL NO. SUPPLIED
         BO    UNCATLG2      YES - GO USE APPROPRIATE CATALOG MACRO
         CATALOG UNCTLG      UNCATALOG ZERO'TH GENERATION
         B     UNCATLG3      BYPASS ALTERNATE MACRO
UNCATLG2 CATALOG UNCTLGCV    UNCATLG ZERO'TH GEN - CVOL SUPPLIED
UNCATLG3 LTR   R15,R15       Q - WAS UNCATALOG SUCCESSFUL
         BZ    0(R4)         YES - RETURN TO MAIN-LINE
         CH    R15,HALFWD28  Q - WAS IT AN I/O ERROR
         BNE   ABEND         NO - THEN ILLOGICAL ERROR SO DUMP
         MVC   60(15,R5),NOTUNCAT MOVE UNCATALOGED MESSAGE TO LINE
         MVC   80(53,R5),MESAGE12 MOVE I/O-ERROR EXPLANATN TO LINE
         MVC   COMPCODE,COND16 MOVE '16' TO UTILITY COMPLETION CDE
         BAL   R4,PRINT      WRITE LINE
         MVC   80(53,R5),MESAGE17 TELL OF TERMINATED OPERATION
         BAL   R4,PRINT      WRITE LINE
         B     PROCESS       GO READ NEXT CONTROL CARD
         SPACE 1
UNCTLG   CAMLST UNCAT,NAMEFLD
UNCTLGCV CAMLST UNCAT,NAMEFLD,CVOLSER
         TITLE 'UT434 - ROUTINE TO SCRATCH A DATA SET'
SCRATCH  EQU   *
         ST    R4,STOREG4S   STORE RETURN ADDRESS
         SPACE 1
*---------------------------------------------------------------------
         TESTOS MVS                TEST FOR MVS OPERATING SYSTEM
         LTR   R15,R15             TEST RETURN CODE
         BNZ   CONTMFT             NOT MVS. CARRY ON
*
******** ASSUME DEVICE TYPE IS '3050200D'
*
         MVC   WORKAREA+2(4),=X'3050200D'  TEMPORARY DEVICE TYPE
*
******** ASSUME PURGE REQUEST
*
         OI    SWITCH,X'20'  TEMPORARY FORCE PURGE REQUEST
*---------------------------------------------------------------------
         SPACE 1
CONTMFT  EQU   *
         MVI   SCRTCHRC,X'00'  ASSUME SCRATCH WILL BE SUCCESSFULL
         SR    R0,R0         ZEROISE R0 TO INDICATE NO UCB AVAILABLE
         TM    SWITCH,X'20'  Q - WAS PURGE SPECIFIED
         BO    SCRATCH2      YES - GO USE APPROPRIATE SCRATCH MACRO
         SCRATCH ZEROTH      SCRATCH ZERO'TH GEN FROM ALL VOLUMES
         B     SCRATCH3      BYPASS ALTERNATE SCRATCH
SCRATCH2 SCRATCH ZEROTHPG    SCRATCH (+ PURGE) OF ZERO'TH GEN
SCRATCH3 LA    R11,WORKAREA+2 POINT R11 AT 1ST VOLUME POINTER
         SR    R3,R3         ZEROISE REG 3
         LH    R3,WORKAREA   LOAD R3 WITH NO. OF VOLUME POINTERS
LOOP4    MVC   10(44,R5),NAMEFLD MOVE ABSOLUTE NAME TO PRINT LINE
         MVC   80(53,R5),MESAGE18 MOVE 'FROM VOLUME' TO PRINT LINE
         MVC   92(6,R5),4(R11) ADD VOLUME SERIAL NO. TO MESSAGE
         CLI   11(R11),X'00' Q - WAS SCRATCH SUCCESSFUL FOR THIS VOLUME
         BNE   SCRERROR      NO - THEN GO DETERMINE ERROR
         MVC   60(15,R5),SCR MOVE 'SCRATCHED' MESSAGE TO PRINT LINE
SCRATCH4 BAL   R4,PRINT      WRITE LINE
         LA    R11,12(R11)   POINT R11 AT NEXT VOLUME POINTER
         BCT   R3,LOOP4      LOOP BACK IF ANY POINTERS LEFT TO PROCESS
         L     R4,STOREG4S   RESTORE RETURN ADDRESS
         BR    R4            RETURN TO MAIN-LINE
         SPACE 5
ZEROTH   CAMLST SCRATCH,NAMEFLD,,WORKAREA
ZEROTHPG CAMLST SCRATCH,NAMEFLD,,WORKAREA,,OVRD
SCRTCHRC DS    XL1           SCRATCH RC. ('00'=OK, 'FF'=FAILED)
         DS    0H            FOR ALIGNEMENT
         EJECT
SCRERROR MVC   60(15,R5),NOTSCR MOVE 'NOT SCRATCHED' MSGE TO LINE
         BAL   R4,PRINT      WRITE LINE
         CLI   11(R11),X'01' Q - WAS DSCB NOT ON VTOC
         BNE   SCRATCH6      NOT MISSING - GO DETERMINE SOURCE OF ERROR
         MVC   80(53,R5),MESAGE19 TELL OF DATA SET NOT FOUND
         CLC   COMPCODE,COND4 Q - IS COMPLETION CODE LESS THAN 4
         BNL   *+10                NO - THEN DO NOT RESET
         MVC   COMPCODE,COND4 SET COMPLETION CODE TO 4
         B     SCRATCH4      GO WRITE LINE
         SPACE 1
SCRATCH5 CLC   COMPCODE,COND12 Q - IS COMPLETION CODE LESS THAN 12
         BNL   *+10          NO - THEN DO NOT ALTER
         MVC   COMPCODE,COND12 SET COMPLETION CODE TO 12
         MVI   SCRTCHRC,X'FF' SET SCRATCH RC. TO UNSUCCESSFULL
         B     SCRATCH4      GO WRITE ERROR MESSAGE
         SPACE 1
SCRATCH6 CLI   11(R11),X'03' Q - IS REASON UNEXPIRED RETENTION DATE
         BNE   SCRATCH7      NO - THEN GO MAKE NEXT TEST
         MVC   80(53,R5),MESAGE20 MOVE EXPLANATION TO PRINT LINE
         B     SCRATCH5      GO SET COMPLETION CODE
SCRATCH7 CLI   11(R11),X'04' Q - IS REASON AN I/O ERROR
         BNE   SCRATCH8      NO - THEN GO MAKE NEXT TEST
         MVC   80(53,R5),MESAGE21 MOVE EXPLANATION TO PRINT LINE
         B     SCRATCH5      GO SET COMPLETION CODE
SCRATCH8 CLI   11(R11),X'05' Q - WAS DEVICE UNAVAILABLE
         BNE   SCRATCH9      NO - GO MAKE NEXT TEST
         MVC   80(53,R5),MESAGE22 MOVE EXPLANATION TO PRINT LINE
         B     SCRATCH5      GO SET COMPLETION CODE
SCRATCH9 CLI   11(R11),X'06' Q - WAS OPERATOR UNABLE TO MOUNT VOLUME
         BNE   ABEND         NO - THEN INVALID RETURN CODE SO DUMP
         MVC   80(53,R5),MESAGE23 MOVE EXPLANATION TO PRINT LINE
         B     SCRATCH5      GO SET COMPLETION CODE
         TITLE 'UT434 - ROUTINE TO DETERMINE ABSOLUTE NAME OF GEN (-N)'
GETOLDNM EQU   *
         LA    R11,NAMEFLD   POINT R11 AT ABSOLUTE NAME
         AH    R11,NAMELNGT  POINT R11 AT NNNN
         LA    R11,3(R11)     WITHIN ....GNNNNV00
         PACK  PAKDNO,0(4,R11) PACK NNNN
         SR    R3,R3         ZEROISE REGISTER 3
         IC    R3,GENNUMBR   SET R3 TO NO  OF GENERATIONS
SUBLOOP  SP    PAKDNO,ONE    ** DECREMENT CURRENT ABSOLUTE GEN NO
         BCT   R3,SUBLOOP    *   BY MAX NO. OF GENERATIONS
         UNPK  UNPAKDNO,PAKDNO  UNPACK MODIFIED ABSOLUTE NO
         MVC   0(4,R11),UNPAKDNO+1 MOVE NEW NO TO ABSOLUTE NAME
         OI    3(R11),X'F0'  'OR' SIGN TO HEX ;
         BR    R4            RETURN TO MAIN LINE
         TITLE 'UT434 - ROUTINE TO CATALOG GENERATION (-N)'
CATLGOLD EQU   *
         ST    R4,STOREG4C   STORE RETURN ADDRESS
         MVC   10(44,R5),NAMEFLD MOVE ABSOLUTE NAME TO PRINT LINE
         TM    SWITCH,X'40'  Q - WAS CVOL SERIAL NO. SUPPLIED
         BO    CTLGOLD2      YES - GO USE APPROPRIATE MACRO
         CATALOG OLDGEN      CATALOG -NTH GENERATION
         B     CTLGOLD3      BYPASS ALTERNATE MACRO
CTLGOLD2 CATALOG OLDGENCV    CATALOG (-N)TH GENERATION VIA CVOL
CTLGOLD3 LTR   R15,R15       Q - WAS CATALOG OPERATION SUCCESSFUL
         BZ    CTLGOLD4      YES - GO CREATE PRINT LINE
         CH    R15,HALFWD28  Q - IS IT AN I/O ERROR
         BNE   ABEND         NO - LOGICALLY IMPOSSIBLE ERROR SO ABEND
         MVC   60(15,R5),NOTCATLG MOVE 'NOT CATALOGED' MSGE TO LINE
         MVC   80(53,R5),MESAGE12 MOVE EXPLANATION TO PRINT LINE
         BAL   R4,PRINT      WRITE LINE
         MVC   COMPCODE,COND16 SET COMPLETION CODE TO '16'
         L     R4,STOREG4C   RESTORE RETURN ADDRESS
         BR    R4            RETURN TO MAIN LINE
CTLGOLD4 MVC   60(15,R5),CATLG MOVE 'CATALOGED' MESSAGE TO LINE
         MVC   80(53,R5),MESAGE24 MOVE 'ON VOLUME(S)' TO LINE
         SR    R11,R11       ZEROISE REGISTER 11
         LH    R11,VOLUMLST  MOVE NO. OF VOLUME POINTERS TO REG 11
         LA    R2,93(R5)     POINT R2 AT REQUIRED POINT IN LINE
         LA    R3,VOLUMLST+2 POINT R3 AT FIRST VOLUME POINTER
         LA    R8,4          SET R8 TO VALUE 4 (MO. OF VOL SERS / LINE)
         B     CTLGOLD7      GO MOVE 1ST VOL SER NO TO PRINT LINE
CTLGOLD5 BAL   R4,PRINT      PRINT LINE
         LA    R2,93(R5)     POINT R2 AT REQUIRED POINT IN LINE
         LA    R8,4          SET R8 TO VALUE 4
         B     CTLGOLD7      GO MOVE NEXT VOL SER TO LINE
CTLGOLD6 MVI   0(R2),C','    ADD COMMA AFTER VOL SER NO
         LA    R2,2(R2)      POINT R2 AT NEXT VOL SER ADDR IN LINE
         BCTR  R8,0          DECREMENT ENTRIES-IN-LINE COUNT
         LTR   R8,R8         HAVE WE REACHED THE END OF THE LINE
         BZ    CTLGOLD5      YES, SO GO WRITE
CTLGOLD7 MVC   0(6,R2),4(R3) MOVE VOLUME SERIAL NO TO PRINT LINE
         LA    R2,6(R2)      POINT R2 AT NEXT BLANK IN PRINT LINE
         LA    R3,12(R3)     POINT R3 AT NEXT VOLUME SERIAL NUMBER
         BCT   R11,CTLGOLD6  Q - ANY MORE POINTERS - YES, GO PROCESS
         BAL   R4,PRINT      WRITE LINE
         L     R4,STOREG4C   RESTORE RETURN ADDRESS
         BR    R4            RETURN TO MAIN LINE
         SPACE 1
OLDGEN   CAMLST CAT,NAMEFLD,,VOLUMLST
OLDGENCV CAMLST CAT,NAMEFLD,CVOLSER,VOLUMLST
         TITLE 'UT434 - ROUTINE TO LIST CURRENT CATALOG ENTRIES'
LISTCTLG EQU   *
         ST    R4,STOREG4L   STORE RETURN ADDRESS
         BAL   R4,PRINT      WRITE A BLANK LINE TO FORWARD SPACE
         MVC   10(19,R5),MESAGE33 MOVE SUB-HEADING TO PRINT LINE
         BAL   R4,PRINT      WRITE THE SUB-HEADING
         MVC   20(6,R5),MESAGE35 SET UP SECOND SUB-HEADING
         MVC   60(6,R5),MESAGE34  IN PRINT LINE
         BAL   R4,PRINT      WRITE THE SECOND SUB-HEADING
         LA    R2,NAMEFLD    POINT R2 AT START OF GDG NAME
         AH    R2,NAMELNGT   ADD LENGTH OF NAME TO R2
         LA    R2,1(R2)      ADD 1 TO R2 TO POINT AT FIRST SPACE
         SR    R3,R3         ZEROISE REG 3
         IC    R3,GENNUMBR   INSERT NO. OF GENERATIONS IN REG 3
         C     R3,NUMBER9    Q - IS IT GREATER THAN 9
         BNH   LIST2         NO - ALL IS WELL SO CONTINUE PROCESSING
         L     R3,NUMBER9    ALTER GEN NO. TO 9 FOR CANNOT COPE
LIST2    LA    R10,RELGENTB  POINT R10 AT START OF RELATIVE GEN TABLE
LIST3    MVC   NAMEFLD,GDGNAME MOVE GDG NAME TO NAME FIELD
         MVC   0(4,R2),0(R10) ADD RELATIVE GENERATION NUMBER
         TM    SWITCH,X'40'  Q - WAS CVOL SERIAL NO. SUPPLIED
         BO    LIST4         YES - GO USE APPROPRIATE MACRO
         LOCATE GENS         GET ABSOLUTE NAME AND VOLUME LIST
         B     LIST5         BYPASS ALTERNATE LOCATE MACRO
LIST4    LOCATE GENSCVOL     GET ABSOLUTE NAME AND VOLUME LIST - CVOL
LIST5    LTR   R15,R15       Q - WAS LOCATE SUCCESSFUL
         BZ    LIST6         YES - GO PRINT INFO OBTAINED
         LA    R10,4(R10)    POINT R10 AT NEXT RELATIVE GEN NO.
         BCT   R3,LIST3      Q - ANY GENERATIONS LEFT - YES, GO LOCATE
         B     LIST8         GO LEAVE ROUTINE
LIST6    SR    R8,R8         ZEROISE REGISTER 8
         LH    R8,WORKAREA   PUT NO. OF VOLUME POINTERS INTO R8
         MVC   10(44,R5),NAMEFLD MOVE ABSOLUTE NAME TO LINE
         LA    R11,WORKAREA+2 POINT R11 AT 1ST VOLUME POINTER
LIST7    MVC   60(6,R5),4(R11) MOVE VOL SER NO. TO LINE
         BAL   R4,PRINT      WRITE LINE
         LA    R11,12(R11)   POINT R11 AT NEXT VOLUME POINTER
         BCT   R8,LIST7      Q - ANY POINTERS LEFT - YES, GO PROCESS
         LA    R10,4(R10)    POINT R10 AT NEXT RELATIVE GEN NUMBER
         BCT   R3,LIST3      Q - ANY GENERATIONS LEFT - YES, GO PROCESS
LIST8    L     R4,STOREG4L   RESTORE RETURN ADDRESS
         BR    R4            RETURN TO MAIN-LINE
         SPACE 1
GENS     CAMLST NAME,NAMEFLD,,WORKAREA
GENSCVOL CAMLST NAME,NAMEFLD,CVOLSER,WORKAREA
         TITLE 'UT434 - ROUTINE TO PRINT OUT COMPLETION CODE'
WRITECDE EQU   *
         ST    R4,STOREG4W   STORE RETURN ADDRESS
         MVC   5(53,R5),MESAGE25 MOVE 'ENDED' MESSAGE TO LINE
         BAL   R4,PRINT      WRITE LINE
         MVC   0(1,R5),SPCE3AFT MOVE CONTROL CHARACTER TO LINE
         AP    LNECOUNT,TWO  INCREMENT LINE COUNT
         MVC   5(53,R5),MESAGE26 MOVE 'COND CODE' MESSAGE TO LINE
         L     R11,COMPCODE  STORE COMPLETION CODE IN REG 11
         CVD   R11,DECMLCDE  CONVERT COMPLETION CODE TO DECIMAL
         MVC   44(4,R5),EDITCODE MOVE EDIT PATTERN TO LINE
         ED    44(4,R5),DECMLCDE+6 EDIT COMPLETION CODE INTO LINE
         BAL   R4,PRINT      WRITE LINE
         MVC   0(1,R5),SPCE2AFT    **
         AP    LNECOUNT,ONE         *
         MVC   84(26,R5),MESAGE27   *
         BAL   R4,PRINT             *
         MVC   70(44,R5),MESAGE28   *
         BAL   R4,PRINT             *   ** MOVE COMPLETION CODE
         MVC   70(56,R5),MESAGE29   ** **   EXPLANATIONS TO PRINT
         BAL   R4,PRINT             *   **  LINE AND WRITE THEM
         MVC   70(51,R5),MESAGE41   *
         BAL   R4,PRINT             *
         MVC   70(53,R5),MESAGE50   *
         BAL   R4,PRINT             *
         MVC   70(55,R5),MESAGE30   *
         BAL   R4,PRINT             *
         MVC   70(57,R5),MESAGE31   *
         BAL   R4,PRINT             *
         MVC   70(63,R5),MESAGE32   *
         BAL   R4,PRINT            **
         L     R4,STOREG4W   RESTORE RETURN ADDRESS
         BR    R4            RETURN TO MAIN-LINE
         TITLE 'UT434 - MISCELLANEOUS ROUTINES'
HEADINGS EQU   *
         ST    R4,STOREG4    STORE RETURN ADDRESS
         MVC   LNECOUNT,ZEROS ZEROISE LINE COUNT
         AP    PAGECNT,ONE   ADD 1 TO PAGE COUNT
         MVC   0(1,R5),PAGESKIP INSERT PRINTER CONTROL CHARACTER
         BAL   R4,PRINT      PRINT LINE
         MVC   PAGENO,EDITPATN MOVE EDIT PATTERN TO HEADING LINE
         ED    PAGENO,PAGECNT+1 AND EDIT PAGE NUMBER
         MVC   0(133,R5),HEADING MOVE HEADING TO BUFFER
         BAL   R4,PRINT      PRINT HEADING
         MVC   LNECOUNT,FOUR MOVE '4' TO LINE-COUNT
         L     R4,STOREG4    RESTORE RETURN ADDRESS
         BR    R4            RETURN
         SPACE 1
PRINT    EQU   *
         PUT   SYSPRINT       WRITE PRINT LINE
         LR    R5,R1          STORE NEW BUFFER ADDRESS IN R5
         AP    LNECOUNT,ONE   ADD 1 TO LINE COUNT
         MVI   0(R5),X'40'    MOVE SPACE TO START OF PRINT LINE
         MVC   1(132,R5),0(R5) AND PROPAGATE THROUGH LINE
         MVC   0(1,R5),SPCE1AFT INSERT PRINTER CONTROL CHARACTER
         CP    LNECOUNT,ENDOPAGE Q - END OF PAGE REACHED ?
         BH    HEADINGS       YES - GO WRITE PAGE HEADINGS
         BR    R4             RETURN
         SPACE 1
READ     EQU   *
         ST    R4,STOREG4R   STORE RETURN ADDRESS
         GET   SYSIN         READ CONTROL CARD
         LR    R9,R1          STORE BUFFER ADDRESS IN REG R9
READBR1  BC    15,READBR2    BYPASS SPACING FOR FIRST READ
         MVC   0(1,R5),SPCE2AFT INSERT PRINTER CONTROL CHARACTER
         AP    LNECOUNT,TWO  ADD 2 TO LINE COUNT
         AP    LNECOUNT,TWO  INCREASE COUNT TO FORCE SKIP IF NEAR EOP
         BAL   R4,PRINT      PRINT BLANK LINE TO ACHIEVE FORWARD SPACE
         SP    LNECOUNT,TWO  RESET LINE COUNT TO TRUE VALUE
READBR2  MVI   1(R5),C'-'    MOVE DASH TO START OF LINE
         MVC   2(10,R5),1(R5) AND PROPAGATE FOR 10 POSITIONS
         BAL   R4,PRINT      PRINT SEPARATOR LINE
         MVI   READBR1+1,X'00' SET OFF BR&NCH FOR SUBSEQUENT RE&DS
         MVC   1(80,R5),0(R9) MOVE CARD IMAGE TO PRINT LINE
         BAL   R4,PRINT      PRINT CARD IMAGE
         L     R4,STOREG4R   RESTORE RETURN ADDRESS
         BR    R4            RETURN
         SPACE 1
BLKSZRTN EQU   *             ROUTINE EXECUTED WHILE OPENING SYSIN
         CLC   SYSIN+62(2),=X'0000' HAS BLKSIZE BEEN SUPPLIED
         BNE   0(R14)        YES, SO RETURN TO COMPLETE OPEN
         MVC   SYSIN+62(2),SYSIN+82 NO, SO MOVE LRECL TO BLKSIZE
         BR    R14           RETURN TO COMPLETE OPEN
         TITLE 'UT434 - ABEND ROUTINES'
OPENDUMP EQU   *
         MVC   WORKAREA(6),SPACES BLANK OUT START OF WORK AREA
        RDJFCB SNAPDUMP      READ JFCB
         CLC   WORKAREA(6),SPACES Q - IS DD STATEMENT PRESENT
         BE    0(R4)         NO - SO DO NOTHING MORE, RETURN
         MVI   CLOSDUMP+1,X'00' PERMIT CLOSE
         MVI   ABEND+1,X'00' ENSURE SNAP, NOT ABEND
         OPEN  (SNAPDUMP,(OUTPUT)) OPEN SNAP DATA SET
         BR    R4            RETURN TO MAIN-LINE
         SPACE 5
CLOSDUMP EQU   *
         BC    15,0(R4)      IF NO DD STATEMENT THEN RETURN
         CLOSE (SNAPDUMP)    CLOSE SNAP DATA SET
         BR    R4            RETURN TO MAIN-LINE
         SPACE 5
ABEND    EQU *
         BC    15,ABEND2     IF NO SNAP DATA SET, GO ABEND
         SNAP  DCB=SNAPDUMP,SDATA=(TRT,CB),PDATA=ALL
         B     PROCESS
ABEND2   WTO   'UT434 - PROGRAM LOGIC ERROR HAS OCCURRED',ROUTCDE=1
         ABEND 434,DUMP
         EJECT
SNAPDUMP DCB   DDNAME=SNAPDUMP,                                        *
               EXLST=EXITLIST,                                         *
               DSORG=PS,                                               *
               RECFM=VBA,                                              *
               MACRF=(W),                                              *
               BLKSIZE=882,                                            *
               LRECL=125
         SPACE 1
EXITLIST DC    X'87',AL3(WORKAREA)
         SPACE 3
SYSPRINT DCB   DDNAME=SYSPRINT,                                        *
               DSORG=PS,                                               *
               MACRF=PL,                                               *
               RECFM=FBM,                                              *
               LRECL=133,                                              *
               BLKSIZE=133
         SPACE 5
SYSIN    DCB   DDNAME=SYSIN,                                           *
               DSORG=PS,                                               *
               MACRF=GL,                                               *
               RECFM=FB,                                               *
               LRECL=80,                                               *
               EXLST=EXITLST,                                          *
               EODAD=ENDODATA
         SPACE 1
EXITLST  DC    X'85',AL3(BLKSZRTN) DCB EXIT ROUTINE
         SPACE 5
PARTIDS  DCB   DDNAME=PARTIDS,                                         C
               DSORG=PS,                                               C
               MACRF=(R,W),                                            C
               RECFM=F,                                                C
               LRECL=256,                                              C
               BLKSIZE=256,                                            C
               EXLST=STRJFCB,                                          C
               EODAD=ABEND2
CURDDN   EQU   PARTIDS+40
         EJECT
HEADING  DS    0CL133
         DC    X'19'         WRITE, SPACE 3 AFTER PRINT
         DC    CL2' '
DATEFLD  DC    CL9'01 JAN 99'
         DC    CL10' '
         DC    CL47'UT434 - UTILITY TO RESET GENERATION DATA GROUPS'
         DC    CL41', REMOVE DATA SETS AND DELETE PDS MEMBERS'
         DC    CL10' '
         DC    CL4'PAGE'
PAGENO   DC    CL4' '
         DC    CL5' '
         SPACE 1
STOREG4  DS    F
STOREG4R DS    F
STOREG4A DS    F
STOREG4S DS    F
STOREG4C DS    F
STOREG4W DS    F
STOREG4L DS    F
STORER4G DS    F
CVBAREA  DS    D
         SPACE 1
WORKAREA DS    0D
         DS    CL265
VOLUMLST DS    0D
         DS    265C
DUMMYCRD DC    101C' '       DUMMY CARD USED BY PARM ROUTINE
         EJECT
MESAGE01 DC    C'SYNTAX ERROR IN CONTROL STATEMENT                 ***'
MESAGE02 DC    C'UNIDENTIFIED OPERATION IN CONTROL STATEMENT       ***'
MESAGE03 DC    C'UNIDENTIFIED KEYWORD IN CONTROL STATEMENT         ***'
MESAGE04 DC    C'UNSUPPORTED DEVICE TYPE IN CVOL KEYWORD           ***'
MESAGE05 DC    C'NAME FIELD TOO LONG                               ***'
MESAGE06 DC    C'NO GDG KEYWORD SUPPLIED                           ***'
MESAGE07 DC    C'REQUIRED CVOL NOT MOUNTED OR HAS NO CATALOG       ***'
MESAGE08 DC    C'  CONTROL VOLUME IS XXXXXX                        ***'
MESAGE09 DC    C'ONE OF THE QUALIFIED NAMES NOT FOUND              ***'
MESAGE10 DC    C'NAME DOES NOT SPECIFY GENERATION DATA GROUP       ***'
MESAGE11 DC    C'SYNTAX ERROR IN NAME FIELD                        ***'
MESAGE12 DC    C'PERMANENT I/O ERROR WHEN PROCESSING CATALOG       ***'
MESAGE13 DC    C'INVALID DATA IN CATALOG                           ***'
MESAGE14 DC    C'EMPTY OPTION SPECIFIED FOR GDG - RESET INVALID    ***'
MESAGE15 DC    C'CURRENT GENERATION COUNT NOT EQUAL TO MAX ALLOWED ***'
MESAGE16 DC    C'  RESET REQUEST IGNORED                           ***'
MESAGE17 DC    C'  RESET OPERATION TERMINATED                      ***'
MESAGE18 DC    C'FROM VOLUME XXXXXX                                   '
MESAGE19 DC    C'  BECAUSE VOLUME DOES NOT CONTAIN DATA SET        ***'
MESAGE20 DC    C'  BECAUSE RETENTION DATE HAS NOT EXPIRED          ***'
MESAGE21 DC    C'  BECAUSE OF I/O ERROR DURING PROCESSING          ***'
MESAGE22 DC    C'  BECAUSE NO DEVICE AVAILABLE FOR VOLUME          ***'
MESAGE23 DC    C'  BECAUSE OPERATOR UNABLE TO MOUNT VOLUME         ***'
MESAGE24 DC    C'ON VOLUME(S)                                         '
MESAGE25 DC    C'END OF UT434 - GDG RESET UTILITY                     '
MESAGE26 DC    C'HIGHEST COMPLETION CODE ENCOUNTERED WAS NN           '
MESAGE27 DC    CL26'COMPLETION CODE MEANINGS -'
MESAGE28 DC    C' 0 - NO ERRORS ENCOUNTERED DURING PROCESSING'
MESAGE29 DC    C' 4 - SCRATCH FAILED BECAUSE DATA SET NOT FOUND ON '
         DC    C'VOLUME'
MESAGE30 DC    C' 8 - A RESET AND/OR DELETE REQUEST WAS IGNORED '
         DC    C'ENTIRELY'
MESAGE31 DC    C'12 - SCRATCH FAILED OTHER THAN FOR DATA SET NOT ON '
         DC    C'VOLUME'
MESAGE32 DC    C'16 - RESET PARTLY ACTIONED WHEN UNRECOVERABLE ERROR '
         DC    C'ENCOUNTERED'
MESAGE33 DC    C'CATALOG NOW READS -'
MESAGE34 DC    C'VOL ID'           '
MESAGE35 DC    C'DSNAME'
MESAGE36 DC    C'THE FOLLOWING REQUEST WAS IN THE PARM FIELD -'
MESAGE37 DC    C'ABSOLUTE GEN NUMBER NOT GREATER THAN MAX ENTRIES  ***'
MESAGE38 DC    C'DATA SET IS NOT ON DIRECT ACCESS DEVICE           ***'
MESAGE39 DC    C'PDS ON MULTI-VOLUME ? ? ? ? ?                     ***'
MESAGE40 DC    C'VOLUME THAT CONTAINS PDS IS NOT MOUNTED           ***'
MESAGE41 DC    C'     OR A DATA SET TO BE REMOVED WAS NOT CATALOGUED'
MESAGE42 DC    C'RETURN CODE 4 OR 12 FROM STOW MACRO ? SEE TSG.    ***'
MESAGE43 DC    C'NAME DOES NOT SPECIFY A DATA SET                  ***'
MESAGE44 DC    C'NAME FIELD TOO LONG FOR MEMBER KEYWORD            ***'
MESAGE45 DC    C'INDSN OR MEMBER KEYWORD MISSING                   ***'
MESAGE46 DC    C'PERMANENT I/O ERROR WHEN PROCESSING DIRECTORY     ***'
MESAGE47 DC    C'MEMBER NOT FOUND                                  ***'
MESAGE48 DC    C'MEMBER IS DELETED                                    '
MESAGE49 DC    C'IS NOT A PARTITIONED DATA SET                     ***'
MESAGE50 DC    C'     OR A MEMBER TO BE DELETED WAS NOT FOUND         '
MESAGE51 DC    C'MEMBER ''        '' IS DELETED'
MESAGE52 DC    C'MEMBER ''        '' NOT FOUND '
MESAGE55 DC    C'DATA SET UNAVAILABLE - RESUBMIT OR PREALLOC          '
MESAGE56 DC    C'INVALID DATA SET NAME OR DATA SET NOT CATALOGED      '
MESAGE57 DC    C'DYNAMIC DEALLOCATION OF DATA SET FAILED              '
CATLG    DC    CL15'CATALOGUED     '
UNCATLG  DC    CL15'UNCATALOGED    '
SCR      DC    CL15'SCRATCHED      '
NOTCATLG DC    CL15'NOT CATALOGUED '
NOTUNCAT DC    CL15'NOT UNCATALOGED'
NOTSCR   DC    CL15'NOT SCRATCHED  '
RESET    DC    CL6'RESET '
DSN      DC    C'DSN='
DSNAME   DC    C'DSNAME='
REMOVE   DC    C'REMOVE '
GDG      DC    CL4'GDG='
PURGE    DC    CL6'PURGE,'
CVOL     DC    CL5'CVOL='
PURGEB   DC    CL6'PURGE '
TYPE     DC    CL4'3330'
DELETE   DC    C'DELETE '
SCRATCHL DC    C'SCRATCH '
INDSN    DC    C'INDSN='
INDSNAME DC    C'INDSNAME='
MEMBER   DC    C'MEMBER='
         EJECT
         PRINT GEN
         DS    0D
STRJFCB  DC    X'87'
         DC    AL3(INFMJFCB)
         IEFJFCBN
         EJECT
RELGENTB DC    CL4'(0) '
         DC    CL4'(-1)'
         DC    CL4'(-2)'
         DC    CL4'(-3)'
         DC    CL4'(-4)'
         DC    CL4'(-5)'
         DC    CL4'(-6)'
         DC    CL4'(-7)'
         DC    CL4'(-8)'
         DC    CL4'(-9)'
         SPACE 1
HALFWD0  DC    H'0'
HALFWD4  DC    H'4'
HALFWD8  DC    H'8'
HALFWD12 DC    H'12'
HALFWD16 DC    H'16'
HALFWD20 DC    H'20'
HALFWD24 DC    H'24'
HALFWD28 DC    H'28'
HALFWD32 DC    H'32'
         SPACE 1
COMPCODE DC    F'0'
COND4    DC    F'4'
COND8    DC    F'8'
COND12   DC    F'12'
COND16   DC    F'16'
         SPACE 1
EDITPATN DC    X'40202021'
EDITCODE DC    X'40202120'
DECMLCDE DS    D
FORTYFOR DC    F'35'
SIX      DC    F'6'
NUMBER9  DC    F'9'
SPCE1AFT DC    X'09'
SPCE2AFT DC    X'11'
SPCE3AFT DC    X'19'
PAGESKIP DC    X'8B'
PAGECNT  DC    PL3'0'
LNECOUNT DC    PL3'0'
ENDOPAGE DC    PL3'55'
ZEROS    DC    PL3'0'
ONE      DC    PL3'1'
TWO      DC    PL3'2'
ZEROES   DC    CL3'000'
FOUR     DC    PL3'4'
GDGLAST8 DC    CL8' '              RIGHT-MOST PART OF QUALIFIED NAME
GDGNAME  DC    CL44' '
         DC    C' '                BLANK TO DELIMIT 44-BYTE NAME
MEMBNAME DC    CL8' '
CVOLSER  DC    CL6' '
NAMELNGT DS    H
NAMEFLD  DC    CL44' '
DSNNAME  EQU   GDGNAME
SPACES   DC    CL6' '
ZERO     DC    CL3'(0)'
VOLUME   DC    CL6' '
GENNUMBR DS    CL1
PAKDNO   DS    CL3
UNPAKDNO DS    CL5
STORER11 DS    F
NAMESTRT DS    F
SIMPLE   DC    8C' '
DELIMITR DC    C' '
TTRCVOL  DC    CL6' '
FIRSTTR  DC    X'000001'
CURENTTR DC    X'000001'
NEXTTR   DC    X'000000'
PSTORER4 DS    F
SCANNAME DS    CL8
LINKENT  DC    X'FFFFFFFFFFFFFFFF'
ZEROTTR  DC    X'000000'
STOWCC   DC    F'0'
ADRTIOT  DS    F                   TASK INPUT/OUTPUT TABLE
SYSINSW  DC    X'00'
TABLEDD  DC    10CL14' '           TABLE DDNAME/VOLSER (10 ELEMENTS)
NDDINTAB DC    H'0'                NUMBER OF DDNAME LOADED IN TABLE
IGNOREDD DC    CL8'STEPLIB'
         DC    CL8'SYSUDUMP'
         DC    CL8'SYSABEND'
         DC    CL8'SNAPDUMP'
         DC    CL8'SYSPRINT'
SYSINDD  DC    CL8'SYSIN'
ENDDDIGN EQU   *-IGNOREDD
MAXDDIGN EQU   ENDDDIGN/8
SYSREF   DC    CL8'SYS00000'
DDNAME   DC    CL8' '
NUMBMEMB DC    H'0'
MEMBTAB  DC    20CL8' '
ENDMTAB  EQU   *-MEMBTAB
MAXMETAB EQU   ENDMTAB/8
ZEROBIN  EQU   ZEROTTR
         SPACE 1
SWITCH   DC    X'00'
*                      BIT 0 - GDG PARAMETER HAS BEEN PROCESSED
*                      BIT 1 - CVOL PARAMETER HAS BEEN PROCESSED
*                      BIT 2 - PURGE PARAMETER HAS BEEN PROCESSED
*                         OR - MEMBER PARAMETER HAS BEEN FOUND
*                      BIT 3 - LAST PARAMETER HAS BEEN FOUND
*                      BIT 4 - DSN PARAMETER HAS BEEN FOUND
*                      BIT 5 - GDG REMOVE OPERATION - FIRST LOCATE
*                      BIT 6 - REMOVE OPERATION HAS BEEN FOUND
*                      BIT 7 - RESET OPERATION HAS BEEN FOUND
*                      BIT 6 AND 7 - DELETE OPERATION HAS BEEN FOUND
         SPACE 1
GDGON    EQU   X'80'
CVOLON   EQU   X'40'
PURGEON  EQU   X'20'
LASTON   EQU   X'10'
DSNAMEON EQU   X'08'
FIRSTIME EQU   X'04'
DELETEON EQU   X'03'
REMOVEON EQU   X'02'
RESETON  EQU   X'01'
FIRSTOFF EQU   X'FB'
DADEVICE EQU   X'20'
MEMBERON EQU   X'20'
INDSNON  EQU   X'08'
         SPACE 1
         LTORG
         SPACE 1
         END
