 PARROT:  PROC OPTIONS(MAIN);                                              00010
                                                                           00020
          DCL                                                              00030
                                                                           00040
     /* *********************************************************** */     00050
     /*                                                             */     00060
     /* THE FIVE FILES DECLARED HERE ARE MANDATORY FOR ALL          */     00070
     /* APPLICATIONS. THE FILES ARE:                                */     00080
     /*                                                             */     00090
     /*   SYSUT1    - THE INPUT DATA SET TO BE REPORTED ON.         */     00100
     /*               THIS MUST BE A SEQUENTIAL FILE, EITHER        */     00110
     /*               WITH FIXED OR VARYING RECORD LENGTH, AND      */     00120
     /*               CURRENTLY HAS A MAXIMUM LOGICAL RECORD        */     00130
     /*               LENGTH OF 600 BYTES.                          */     00140
     /*                                                             */     00150
     /*   SYSIN     - INPUT CONTROL CARDS. THIS WILL USUALLY BE     */     00160
     /*               A DD * FILE, BUT CAN BE CARD IMAGES ON TAPE/  */     00170
     /*               DISK. LOGICAL RECORD LENGTH MUST BE 80 BYTES. */     00180
     /*                                                             */     00190
     /*   PRINT     - THE OUTPUT REPORT FILE. THIS CAN GO EITHER    */     00200
     /*               DIRECT TO PRINTER, OR TO SPOOL, BUT IN        */     00210
     /*               EITHER CASE THE FULL DCB                      */     00220
     /*                 (RECFM=FBA,LRECL=133,BLKSIZE=133)           */     00230
     /*                       MUST BE SPECIFIED. (IF THE PRINT IS   */     00240
     /*               BEING SPOOLED, THE ATTRIBUTE 'A' IN THE       */     00250
     /*               RECFM PARAMETER IS TO BE ENTERED WHEN THE     */     00260
     /*               PRINT IS TAKEN OFF THE SPOOL).                */     00270
     /*                                                             */     00280
     /*   SYSLIN    - AN INPUT DATA SET CONTAINING PRINT-LINE       */     00290
     /*               IMAGES OF THE PICTURE OF A PARROT WHICH IS    */     00300
     /*               PRINTED BETWEEN THE CONTROL STATEMENTS AND    */     00310
     /*               THE START OF THE REPORT.  THE FULL DCB IS     */     00320
     /*                      DCB=(RECFM=FBA,LRECL=133,BLKSIZE=133)  */     00330
     /*                                                             */     00340
     /*   TW80      - THE OUTPUT RANGE ANALYSIS REPORT. ALL THE     */     00350
     /*               NOTES UNDER 'PRINT' APPLY HERE.               */     00360
     /*                                                             */     00370
     /* *********************************************************** */     00380
                                                                           00390
          SYSUT1 FILE RECORD SEQUENTIAL,                                   00400
          SYSIN  FILE RECORD SEQUENTIAL,                                   00410
          SYSLIN FILE RECORD SEQUENTIAL,                                   00420
          WORK   FILE RECORD SEQUENTIAL,                                   00440
          PRINT  FILE RECORD SEQUENTIAL;                                   00450
                                                                           00460
     /* *********************************************************** */     00470
     /*                                                             */     00480
     /* OTHER FILES WHICH SHOULD BE ENTERED IN DD STATEMENTS IN THE */     00490
     /* JCL ARE:                                                    */     00500
     /*                                                             */     00510
     /*   SYSPRINT  - A PL/1 REQUIREMENT FOR MESSAGES FROM THE      */     00520
     /*               ERROR HANDLER ROUTINE.                        */     00530
     /*                                                             */     00540
     /* AND, IF AN INTERNAL SORT OF THE INPUT DATA IS REQUESTED,    */     00550
     /*                                                             */     00560
     /*   SYSOUT    - REQUIRED FOR MESSAGES FROM THE SORT PACKAGE.  */     00570
     /*   SORTLIB   - THE SYSTEM SORT LIBRARY.                      */     00580
     /*   SORTWKNN  - SORT WORK AREAS.                              */     00590
     /*                                                             */     00600
     /* NOTE THAT SORTIN AND SORTOUT ARE NOT REQUIRED, AND THAT     */     00610
     /* THE SYSIN DATA SET TO THE SORT IS INCLUDED IN THE CONTROL   */     00620
     /* CARDS TO THIS PROGRAM.                                      */     00630
     /*                                                             */     00640
     /* *********************************************************** */     00650
                                                                           00660
                                                                           00670
          DCL                                                              00680
                                                                           00690
     /* *********************************************************** */     00700
     /*                                                             */     00710
     /* 'INREC' IS THE DATA AREA WHEREIN THE CURRENT SYSUT1 RECORD  */     00720
     /* IS BEING PROCESSED.                                         */     00730
     /*                                                             */     00740
     /* *********************************************************** */     00750
                                                                           00760
          INREC CHAR(2000) VARYING STATIC EXTERNAL,                        00770
                                                                           00780
     /* *********************************************************** */     00790
     /*                                                             */     00800
     /* 'INCARD' IS THE RECEIVING AREA FPR THE CONTROL CARDS INTO   */     00810
     /* THE PROGRAM, AND DEFINED ON THIS STRING ARE THE STRUCTURES  */     00820
     /* FOR EACH INDIVIDUAL CARD TYPE.                              */     00830
     /* THE CARD TYPES, WITH REQUIREMENTS AND DESCRIPTION, ARE:     */     00840
     /*                                                             */     00850
     /*    1-4   MIN MAX  DESCRIPTION.                              */     00860
     /*                                                             */     00870
     /*    GR01   0   5   MAKE UP THE 3 LINES OF THE REPORT HEADING */     00880
     /*    GR02   0  20   GIVE CRITERIA FOR SELECTING RECORDS.      */     00890
     /*    GR03   1   1   SPECIFY THE KEY FIELDS FOR TOTALS, ETC.   */     00900
     /*    GR04   1   9   SPECIFY THE VALUE FIELDS ON THE FILE THAT */     00910
     /*                   WILL BE PROCESSED / PRINTED.              */     00920
     /*    GR05   0   1   IF PRESENT, INDICATES THAT ALL DETAIL     */     00930
     /*                   RECORDS ARE TO BE PRINTED.                */     00940
     /*    GR06   0   1   IF PRESENT, WILL CAUSE THE RECORDS TO BE  */     00950
     /*                   SORTED BEFORE BEING PROCESSED.            */     00960
     /*    GR07   0  20   AVAILABLE FOR USER-CODED ARITHMETIC.      */     00970
     /*    GR08   1   1   SPECIFIES WHICH VALUES (FIELDS FROM FILE  */     00980
     /*                   OR ARITHMETIC RESULTS) ARE TO BE PRINTED. */     00990
     /*    GR09   0  20   SPECIFIES THE RANGES FOR 2080 ANALYSES    */     01000
     /*                                                             */     01010
     /* *********************************************************** */     01020
                                                                           01030
          INCARD CHAR (80),                                                01040
          GR04_ALPHAKEY CHAR(1) DEF INCARD POS(14),                        01050
                                                                           01060
          1 GR01 DEFINED INCARD,                                           01070
            3 DES_GR01   CHAR (4),                                         01080
            3 BYTE_GR01  CHAR (1),                                         01090
            3 TITLE_GR01 CHAR (75),                                        01100
                                                                           01110
          1 GR02 DEFINED INCARD,                                           01120
            3 DES_GR02   CHAR (4),                                         01130
            3 FIL_GR02   (4),                                              01140
              5 CPOS_GR02 CHAR(3),                                         01150
              5 CLEN_GR02 PIC '99',                                        01160
              5 CPAK_GR02 CHAR (1),                                        01170
              5 CTYP_GR02 CHAR (2),                                        01180
              5 CLIT_GR02 CHAR (11),                                       01190
                                                                           01200
          1 GR03 DEFINED INCARD,                                           01210
            3 DES_GR03   CHAR (4),                                         01220
            3 FIL_GR03   (4),                                              01230
              5 CPOS_GR03 CHAR(3),                                         01240
              5 CLEN_GR03 PIC '99',                                        01250
              5 CPAK_GR03 CHAR (1),                                        01260
              5 CTOT_GR03 CHAR (1),                                        01270
              5 CPAG_GR03 CHAR (1),                                        01280
              5 CNAM_GR03 CHAR(3),                                         01290
              5 CNML_GR03 PIC '99',                                        01300
              5 CTW8_GR03 CHAR (1),                                        01310
              5 CLCT_GR03 PIC'99',                                         01320
              5 CFIL_GR03 CHAR(3),                                         01330
                                                                           01340
          1 GR04 DEFINED INCARD,                                           01350
            3 DES_GR04   CHAR (4),                                         01360
            3 CFLD_GR04  CHAR (2),                                         01370
            3 CPOS_GR04 CHAR(3),                                           01380
            3 CLEN_GR04  PIC '99',                                         01390
            3 CPAK_GR04  CHAR (1),                                         01400
            3 CDEC_GR04  PIC '9',                                          01410
            3 CKEY_GR04 PIC'9',                                            01420
            3 CFIL_GR04 CHAR(9),                                           01430
            3 FIL_GR04 (3),                                                01440
              5 CSPOS_GR04 CHAR(3),                                        01450
              5 CSLEN_GR04 PIC'99',                                        01460
              5 CSPAK_GR04 CHAR(1),                                        01470
              5 CSTYP_GR04 CHAR(2),                                        01480
              5 CSLIT_GR04 CHAR(11),                                       01490
                                                                           01500
          1 GR05 DEFINED INCARD,                                           01510
            3 DES_GR05   CHAR (4),                                         01520
            3 CPOS_GR05 CHAR(3),                                           01530
            3 CLEN_GR05  PIC '99',                                         01540
            3 CFIL_GR05  CHAR (71),                                        01550
                                                                           01560
          1 GR06 DEFINED INCARD,                                           01570
            3 DES_GR06   CHAR (4),                                         01580
            3 SORT_GR06  CHAR (76),                                        01590
                                                                           01600
          1 GR07 DEFINED INCARD,                                           01610
            3 DES_GR07   CHAR (4),                                         01620
            3 CFLD_GR07  CHAR (2),                                         01630
            3 CARI_GR07  CHAR (73),                                        01640
            3 CTOT_GR07  CHAR (1),                                         01650
                                                                           01660
           1 GR07TEST DEF INCARD,                                          01670
            3 DES_GR07TST  CHAR(4),                                        01680
            3 CFLD_GR07TST CHAR(2),                                        01690
            3 TEST_GR07TST CHAR(4),                                        01700
            3 FLD1_GR07TST CHAR(2),                                        01710
            3 EQGT_GR07TST CHAR(2),                                        01720
            3 FLD2_GR07TST CHAR(2),                                        01730
            3 GOTO_GR07TST CHAR(2),                                        01740
            3 SPRE_GR07TST CHAR(62),                                       01750
                                                                           01760
          1 GR08 DEFINED INCARD,                                           01770
            3 DES_GR08   CHAR (4),                                         01780
            3 CPRT_GR08 (5),                                               01790
              5 CFLD_GR08  CHAR (2),                                       01800
              5 CDEC_GR08  PIC '9',                                        01810
            3 CTW8_GR08  CHAR (2),                                         01820
            3 CDES_GR08  CHAR (59),                                        01830
                                                                           01840
          1 GR09 DEFINED INCARD,                                           01850
            3 DES_GR09   CHAR (4),                                         01860
            3 FILA_GR09  CHAR (6),                                         01870
            3 CVAL_GR09  PIC '999999999R',                                 01880
            3 FILB_GR09 CHAR(60),                                          01890
                                                                           01900
          1 GR10 DEF INCARD,                                               01910
            3 DES_GR10  CHAR(4),                                           01920
            3 KEY_GR10  PIC'9',                                            01930
            3 SPOS_GR10 PIC'999',                                          01940
            3 EPOS_GR10 PIC'999',                                          01950
            3 FLD_GR10  CHAR(5),                                           01960
            3 FMAT_GR10 CHAR(1),                                           01970
            3 DECS_GR10 PIC'9',                                            01980
            3 FILA_GR10 CHAR(2),                                           01990
            3 LIT_GR10  CHAR(60);                                          02000
                                                                           02010
                                                                           03100
          DCL                                                              03110
                                                                           03120
     /* *********************************************************** */     03130
     /*                                                             */     03140
     /* NEXT WE HAVE THE VARIOUS AREAS FOR THE REPORT LINES. THERE  */     03150
     /* ARE FOUR OF THESE, THE THREE HEADING LINES (HEADA, HEADBX,  */     03160
     /* AND HEADCX), AND ONE 'GENERALISED' DETAIL LINE, LINEA.      */     03170
     /* 'CNT_LINE' IS THE POSITION ON THE LINE OF THE RECORD COUNT, */     03180
     /* WHEN PRINTED.                                               */     03190
     /*                                                             */     03200
     /* *********************************************************** */     03210
                                                                           03220
          1 HEADA,                                                         03230
            3 BYTE_HEADA CHAR (20) INIT ('1'),                             03240
            3 HEAD_HEADA CHAR (75),                                        03250
            3 FILE_HEADA CHAR (11) INIT ('     DATE'),                     03260
            3 DATE_HEADA CHAR (9),                                         03270
            3 FILB_HEADA CHAR (11) INIT ('     PAGE'),                     03280
            3 PAGE_HEADA PIC 'ZZZ9BBB',                                    03290
                                                                           03300
          1 HEADBX CHAR (133),                                             03310
          1 HEADB  DEFINED HEADBX,                                         03320
            3 BYTE_HEADB CHAR (1),                                         03330
            3 HED1_HEADB CHAR (75),                                        03340
            3 HED2_HEADB CHAR (57),                                        03350
                                                                           03360
          HEADX CHAR(133),                                                 03370
          HX_BYTE CHAR(1),                                                 03380
          1 HEADCX CHAR (133),                                             03390
          1 HEADC  DEFINED HEADCX,                                         03400
            3 BYTE_HEADC CHAR (1),                                         03410
            3 HED1_HEADC CHAR (75),                                        03420
            3 HED2_HEADC CHAR (57),                                        03430
                                                                           03440
          LINEA CHAR(133) INIT(' '),                                       03450
          1 LINEAXXXXX DEF LINEA,                                          03460
            3 BYTE_LINE CHAR(1),                                           03470
            3  KEY_LINE  CHAR (36),                                        03480
            3 NAME_LINE  CHAR (26),                                        03490
            3 VALUEX_LINE CHAR (70),                                       03500
                                                                           03510
          CNT_LINE PIC 'ZZZZ9BB' DEFINED LINEA POSITION (57),              03520
                                                                           03530
     /* *********************************************************** */     03540
     /*                                                             */     03550
     /* THE FIVE VALUES TO BE PRINTED ARE RIGHT-ALIGNED ON THE      */     03560
     /* SIGN, AND CAN HAVE THE DECIMAL POINT IN VARYING POSITIONS   */     03570
     /* ALONG THE VALUE (MAX = 4D.P.S, MIN = NONE). THE 'LVAL'      */     03580
     /* FIELDS ARE USED TO PUT THE VALUES IN THE CORRECT PLACE ON   */     03590
     /* THE PRINT LINE.                                             */     03600
     /*                                                             */     03610
     /* *********************************************************** */     03620
                                                                           03630
          1 VALUES_LINE DEFINED LINEA POSITION (64),                       03640
            3 VAL_LINE (5) CHAR(14),                                       03650
          STORELINE CHAR(133) INIT(' '),                                   03660
                                                                           03670
          LVALX CHAR (16),                                                 03680
          LVAL PIC 'ZZZZZZZZZZZV9999-' DEFINED LVALX,                      03690
          1 LVAL_FIL DEFINED LVALX,                                        03700
            3 LVAL_UNITS CHAR (11),                                        03710
            3 LVAL_DECS  CHAR (4),                                         03720
            3 LVAL_SIGN  CHAR (1),                                         03730
          FMAT_X  CHAR(60),                                                03740
          FMAT_90 PIC'(15)9-'                              DEF FMAT_X,     03750
          FMAT_91 PIC'(14)9V.9-'                           DEF FMAT_X,     03760
          FMAT_92 PIC'(13)9V.99-'                          DEF FMAT_X,     03770
          FMAT_93 PIC'(12)9V.999-'                         DEF FMAT_X,     03780
          FMAT_94 PIC'(11)9V.9999-'                        DEF FMAT_X,     03790
          FMAT_Z0 PIC'(14)Z9-'                             DEF FMAT_X,     03800
          FMAT_Z1 PIC'(13)Z9V.9-'                          DEF FMAT_X,     03810
          FMAT_Z2 PIC'(12)Z9V.99-'                         DEF FMAT_X,     03820
          FMAT_Z3 PIC'(11)Z9V.999-'                        DEF FMAT_X,     03830
          FMAT_Z4 PIC'(10)Z9V.9999-'                       DEF FMAT_X,     03840
          FMAT_C0 PIC'ZZZ,ZZZ,ZZZ,ZZZ,ZZ9-'                DEF FMAT_X,     03850
          FMAT_C1 PIC'ZZ,ZZZ,ZZZ,ZZZ,ZZ9V.9-'              DEF FMAT_X,     03860
          FMAT_C2 PIC'Z,ZZZ,ZZZ,ZZZ,ZZ9V.99-'              DEF FMAT_X,     03870
          FMAT_C3 PIC'ZZZ,ZZZ,ZZZ,ZZ9V.999-'               DEF FMAT_X,     03880
          FMAT_C4 PIC'ZZ,ZZZ,ZZZ,ZZ9V.9999-'               DEF FMAT_X,     03890
                                                                           03900
     /* *********************************************************** */     03910
     /*                                                             */     03920
     /* THE 'DATE' NAMES FOLLOWING ARE USED TO TRANSLATE THE IBM    */     03930
     /* DATE FORMAT YYMMDD INTO THE MORE READABLE FORM  DD MMM YY.  */     03940
     /*                                                             */     03950
     /* *********************************************************** */     03960
                                                                           03970
          1 XDATE    CHAR (6),                                             03980
          1 XDTE     DEFINED XDATE,                                        03990
            3 XYEAR  CHAR (2),                                             04000
            3 XMONTH PIC '99',                                             04010
            3 XDAY   CHAR (2),                                             04020
          1 YDATE     CHAR (9),                                            04030
          1 YDTE     DEFINED YDATE,                                        04040
            3 YDAY   CHAR (2),                                             04050
            3 YFILA  CHAR (1),                                             04060
            3 YMONTH CHAR (3),                                             04070
            3 YFILB  CHAR (1),                                             04080
            3 YYEAR  CHAR (2),                                             04090
          1 ZMONTH   (12) CHAR (3) INIT ('JAN','FEB','MAR','APR',          04100
                                         'MAY','JUN','JUL','AUG',          04110
                                         'SEP','OCT','NOV','DEC'),         04120
                                                                           04130
     /* *********************************************************** */     04140
     /*                                                             */     04150
     /* FINALLY, AS FAR AS PRINTING GOES, SOME MISCELLANEOUS FIELDS */     04160
     /*                                                             */     04170
     /*   BLANKLINE - WHEN NECESSARY TO SPACE OUT LINES, AND ALSO   */     04180
     /*               USED TO PRINT THE CONTROL CARDS ON INPUT.     */     04190
     /*   KEYX_LINE - FOR PACKING THE FOUR VARIABLE-LENGTH KEYS.    */     04200
     /*   CBYT      - FOR HOLDING THE REQUESTED SPACING OF LINES.   */     04210
     /*   LINECT    - )                                             */     04220
     /*   PAGENO    - ) TO CONTROL PAGE SKIPPING.                   */     04230
     /*                                                             */     04240
     /* *********************************************************** */     04250
                                                                           04260
          1 BLANKLINE CHAR (133) INIT (' '),                               04270
          KEYX_LINE CHAR(36) VARYING STATIC,                               04280
          CBYT    CHAR(1) INIT(' '),                                       04290
          UBYT CHAR(1),                                                    04300
          SKIPPRINT BIT(1) INIT('0'B),                                     04310
          SKIPPRINX BIT(1) INIT('0'B),                                     04320
          PRTOTAL BIT(1) INIT('1'B),                                       04330
          LINECT FIXED(3) INIT(99),                                        04340
          LINECX FIXED(3) INIT(55),                                        04350
          PAGENO PIC '9999';                                               04360
                                                                           04370
                                                                           04380
          DCL                                                              04390
                                                                           04400
          SRTIN ENTRY RETURNS(CHAR(2000) VARYING),                         04660
          SRTOUT  ENTRY,                                                   04670
                                                                           04790
     /* *********************************************************** */     04800
     /*                                                             */     04810
     /* FIELDS WHICH ARE USED IN THE USER-CODED ARITHMETIC SECTION  */     04820
     /* OF THE PROGRAM. THESE ARE:                                  */     04830
     /*                                                             */     04840
     /*   VALUES    - OF THE 27-FOLD ARRAY, ELEMENTS 1 TO 9 ARE FOR */     04850
     /*               FILE VALUES (FIELDS F1 TO F9), ELEMENTS 10 TO */     04860
     /*               18 ARE FOR EXTRA FILE VALUES (G1 TO G9),      */     04870
     /*               ELEMENTS 19 TO 27 ARE FOR ARITHMETIC RESULTS  */     04880
     /*               (W1 TO W9).                                   */     04890
     /*   VALUE   |                                                 */     04900
     /*   VALUE1  |                                                 */     04910
     /*   VALUE2  |                                                 */     04920
     /*   VALUED  | - TEMPORARY WORK AREAS.                         */     04930
     /*   VALUEP  |                                                 */     04940
     /*   VALIT     - 22-FOLD ARRAY FOR CONSTANT LITERALS.          */     04950
     /*   CONST     - A POINTER TO THE LAST-USED IN THE CONSTANTS   */     04960
     /*               SECTION OF THE ARRAY 'VALIT'.                 */     04970
     /*   FLDDES    - A STRING USED IN CONJUNCTION WITH THE BUILTIN */     04980
     /*               FUNCTION INDEX TO TRANSLATE, FOR EXAMPLE, THE */     04990
     /*               FIELD NAME 'W1' INTO THE SUBSCRIPT 19.        */     05000
     /*   ARITHMETIC- AN ARRAY CONTAINING THE TRANSLATED VERSION OF */     05010
     /*               THE USER-CODED ARITHMETIC. FOR EACH GR07 CARD */     05020
     /*               THERE IS ONE ELEMENT IN THIS ARRAY.           */     05030
     /*   ARIFD     - THE RECEIVING FIELD (WX) IN SUBSCRIPT FORM.   */     05040
     /*   ARIOP   - ) ONE OF EACH OF THESE THREE FOR EACH OPERATOR  */     05050
     /*   ARISN   - ) ACROSS THE GR07 CARD. 'OP' IS ONE OF +,-,*,/, */     05060
     /*   ARINO   - ) 'SN' IS '-' IF THIS OPERAND HAD A MINUS       */     05070
     /*               PREFIX, AND 'NO' IS THE SUBSCRIPT OF THE      */     05080
     /*               FIELD NUMBER / NUMERIC LITERAL IN 'VALUES'.   */     05090
     /*   ARICN   - ) SWITCH SET IF OPERAND IS CONSTANT IN 'VALIT'. */     05100
     /*   ARITT     - SWITCH SET IF ARITHMETIC IS TOTAL-TIME.       */     05110
     /*   ARILN     - THE NUMBER OF OPERATORS ACROSS THIS CARD.     */     05120
     /*                                                             */     05130
     /*   ARIFX     - A TEMPORARY AREA FOR HOLDING FIELD NUMBER.    */     05140
     /*   NOARI     - THE TOTAL NUMBER OF GR07 CARDS READ.          */     05150
     /*   NOFLD     - THE TOTAL NUMBER OF GR04 CARDS READ.          */     05160
     /*   BLARITH - )                                               */     05170
     /*   BLBYTES - ) THE ARITHMETIC ON A GR07 CARD.                */     05180
     /*   NBLARI    - THE SAME, WITH ALL BLANKS STRIPPED OUT, AND   */     05190
     /*               PREFIXED WITH A '+'. (FIRST OPERATOR).        */     05200
     /*                                                             */     05210
     /* *********************************************************** */     05220
                                                                           05230
          1 IPMF_VALUES BASED(IPMF1),                                      05240
            3 IPMF_VALS,                                                   05250
            3 VALUES(IPMFVAL REFER(IPMF_VALS),10) FLOAT(16),               05260
          1 VALUE_IDS BASED(ID_VAL),                                       05270
            3 IDS_VAL,                                                     05280
            3 VAL_IDS(IDSVAL REFER(IDS_VAL)) FIXED BIN(15),                05290
          SCALARS(0:9) FLOAT(16) INIT((10)0),                              05291
          SCAFLD CHAR(2),                                                  05292
          SCAPCT CHAR(1) DEF SCAFLD,                                       05293
          SCANO  PIC'9'  DEF SCAFLD POS(2),                                05294
          VALUE  FLOAT(16),                                                05300
          VALUE1 FLOAT(16),                                                05310
          VALUE2 FLOAT(16),                                                05320
          VALUED FLOAT(16),                                                05330
          VALUEP FLOAT(16),                                                05340
 VAL_DEC1 FIXED(15,1),                                                     05350
 VAL_DEC2 FIXED(15,2),                                                     05360
 VAL_DEC3 FIXED(15,3),                                                     05370
 VAL_DEC4 FIXED(15,4),                                                     05380
 VAL_DEC5 FIXED(15,5),                                                     05390
          VALIT (23)    FIXED(15,4) INIT((23)0),                           05400
          CONST         FIXED(3) INIT(0),                                  05410
          1 IPMF_FIELDS BASED(IPMF2),                                      05420
            3 IPMF_FLDS,                                                   05430
            3 FLDDES(IPMFFLD REFER(IPMF_FLDS))  CHAR(2),                   05440
          1 IPMF_ARITH BASED(IPMF3),                                       05450
           2 IPMF_ARI,                                                     05460
           2 ARITHMETIC(IPMFARI REFER(IPMF_ARI)),                          05470
            3 ARIFD FIXED BIN(3),                                          05480
            3 ARIOP (20) CHAR (1),                                         05490
            3 ARISN (20) CHAR (1),                                         05500
            3 ARINO (20) FIXED BIN(3),                                     05510
            3 ARICN (20) BIT(1),                                           05520
            3 ARITT BIT(1),                                                05530
            3 ARILN FIXED(3) INIT((20)0),                                  05540
          ARIFX CHAR (2),                                                  05550
          NOARI FIXED (3) INIT(0),                                         05560
          NOFLD FIXED (3) INIT(0),                                         05570
          BLARITH CHAR (74),                                               05580
          BLBYTES (74) CHAR(1) DEFINED BLARITH,                            05590
          NBLARI  CHAR(75) VARYING STATIC;                                 05600
                                                                           05610
                                                                           05620
          DCL                                                              05630
                                                                           05640
     /* *********************************************************** */     05650
     /*                                                             */     05660
     /* VARIOUS ARRAYS AND ACCUMULATORS USED IN THE PROGRAM.        */     05670
     /*                                                             */     05680
     /*   ARRAY1  - USED TO STORE THE SELECTION TESTS ON THE GR02   */     05690
     /*             CARDS. MAX 20 CARDS, UP TO 4 TESTS ON EACH.     */     05700
     /*             TEST VALUE IS EITHER CHARACTER, WHEN ARN = 1    */     05710
     /*             AND ARLIT IS USED, OR NUMERIC, ARN = 0 AND      */     05720
     /*             ARNUM HOLDS THE VALUE.                          */     05730
     /*                                                             */     05740
     /*   ARRAY2  - NO LONGER EXISTS.                               */     05750
     /*                                                             */     05760
     /*   ARRAY3  - HOLDS DATA FOR THE 4 KEYS FROM THE GR03 CARD.   */     05770
     /*                                                             */     05780
     /*   ARRAY4  - HOLDS THE SELECTED RECORD COUNT FOR EACH OF THE */     05790
     /*             FIVE TOTALS (4 KEYS & GRAND).                   */     05800
     /*                                                             */     05810
     /*   ARRAY5  - HOLDS THE FIELD DESCRIPTIONS FROM THE POSSIBLE  */     05820
     /*             EIGHTEEN GR04 CARDS.                            */     05830
     /*                                                             */     05840
     /*   ARRAY6  - HOLDS THE 5 FIELD NAMES THAT ARE TO BE PRINTED. */     05850
     /*                                                             */     05860
     /* *********************************************************** */     05870
                                                                           05880
          1 IPMF_GR02 BASED(IPMF4),                                        05890
           2 IPMF_GR2,                                                     05900
           2 ARRAY1(IPMFGR2 REFER(IPMF_GR2),4),                            05910
            3 ARPOS FIXED BIN(15),                                         05920
            3 ARLEN FIXED (2),                                             05930
            3 ARPAK CHAR (1),                                              05940
            3 ARTYP CHAR (2) INIT((80)(2)' '),                             05950
            3 ARN   BIT (1),                                               05960
            3 ARLIT CHAR (11),                                             05970
            3 ARNUM FIXED (11),                                            05980
                                                                           05990
          1 ARRAY3(8),                                                     06000
            3 ARPOS_GR03 FIXED BIN(15) INIT((8)0),                         06010
            3 ARLEN_GR03 FIXED (2),                                        06020
            3 ARPAK_GR03 CHAR (1),                                         06030
            3 ARTOT_GR03 CHAR (1),                                         06040
            3 ARPAG_GR03 CHAR(1) INIT((8)(1)' '),                          06050
            3 ARNAM_GR03 FIXED BIN(15),                                    06060
            3 ARNML_GR03 FIXED (3),                                        06070
          UGR03 BIT(1) INIT('0'B),                                         06080
          1 ARRAY4(9),                                                     06090
            3 ARCNT FIXED(5) INIT((9)0),                                   06100
                                                                           06110
          1 IPMF_GR04 BASED(IPMF5),                                        06120
           2 IPMF_GR4,                                                     06130
           2 ARRAY5(IPMFGR4 REFER(IPMF_GR4)),                              06140
            3 ARFLD_GR04 FIXED BIN(15),                                    06150
            3 ARPOS_GR04 FIXED BIN(15),                                    06160
            3 ARLEN_GR04 FIXED (2),                                        06170
            3 ARPAK_GR04 CHAR (1),                                         06180
            3 ARDEC_GR04 FIXED (1),                                        06190
            3 ARKEY_GR04 FIXED(1),                                         06200
            3 ARSEL_GR04(3),                                               06210
              5 ARSPOS_GR04 FIXED BIN(15),                                 06220
              5 ARSLEN_GR04 FIXED(3),                                      06230
              5 ARSPAK_GR04 CHAR(1),                                       06240
              5 ARSTYP_GR04 CHAR(2),                                       06250
              5 ARSLIT_GR04 CHAR(11),                                      06260
              5 ARSNUM_GR04 FIXED(11),                                     06270
              5 ARSN_GR04 BIT(1),                                          06280
                                                                           06290
          1 ARRAY7 BASED(IPMF6X),                                          06300
           2 IPMF_GR10,                                                    06310
           2 ARRAY7X(IPMFGR10 REFER(IPMF_GR10)),                           06320
            3 ARSPOS_GR10 FIXED BIN(15),                                   06330
            3 AREPOS_GR10 FIXED BIN(15),                                   06340
            3 ARFLD_GR10  FIXED BIN(15),                                   06350
            3 ARFMT_GR10  CHAR(1),                                         06360
            3 ARDEC_GR10  FIXED BIN(15),                                   06370
            3 ARLIT_GR10  FIXED BIN(15),                                   06380
          1 ARRAY_GR12X(20),                                               06390
            3 ARRAY_GR12(0:8),                                             06400
              5 ARSPOS_GR12 FIXED BIN(15),                                 06410
              5 AREPOS_GR12 FIXED BIN(15),                                 06420
              5 ARFLD_GR12  FIXED BIN(15),                                 06430
              5 ARFMT_GR12  CHAR(1),                                       06440
              5 ARDEC_GR12  FIXED BIN(15),                                 06450
              5 ARLIT_GR12  FIXED BIN(15),                                 06460
          1 ARRAY8X BASED(IPMF6),                                          06470
           2 IPMF_GR11,                                                    06480
           2 ARRAY8(IPMFGR11 REFER(IPMF_GR11)),                            06490
            3 ARSPOS_GR11 FIXED BIN(15),                                   06500
            3 AREPOS_GR11 FIXED BIN(15),                                   06510
            3 ARFLD_GR11  FIXED BIN(15),                                   06520
            3 ARDEC_GR11  FIXED BIN(15),                                   06530
            3 ARLIT_GR11  FIXED BIN(15),                                   06540
            3 ARFMT_GR11 CHAR(1),                                          06550
            3 ZSW_GR11 BIT(1),                                             06560
            3 BSW_GR11 BIT(1),                                             06570
          1 LITERAL_POOLX BASED(IPMF6XX),                                  06580
           2 IPMF_GRLIT,                                                   06590
           2 LITERAL_POOLY(IPMFGRLIT REFER(IPMF_GRLIT)),                   06600
            3 LITERAL_POOL CHAR(20),                                       06610
          ZSW BIT(1) INIT('1'B),                                           06620
          SW11 BIT(1),                                                     06630
          SW12 BIT(1),                                                     06640
          NO_FMAT_LITS INIT(0),                                            06650
          NO_GR10      INIT(0),                                            06660
          NO_GR11      INIT(0),                                            06670
          NO_GR12(0:9);                                                    06680
          DO I = 0 TO 9;                                                   06690
             NO_GR12(I) = 0;                                               06700
          END;                                                             06710
          DCL                                                              06720
          $EXIT LABEL,                                                     06730
          1 ARRAY6 (5),                                                    06740
            3 ARFLD_GR08 FIXED(3) INIT((5)0),                              06750
            3 ARDEC_GR08 FIXED (1);                                        06760
                                                                           06770
                                                                           06780
          DCL                                                              06790
                                                                           06800
     /* *********************************************************** */     06810
     /*                                                             */     06820
     /* THE NEXT BATCH OF DATA-NAMES ARE USED FOR UNPACKING AND     */     06830
     /* FORMATTING 1) ALPHA / NUMERIC LITERALS FROM THE GR02 CARDS  */     06840
     /*            2) PACKED / KEX KEYS AND VALUES FROM THE FILE.   */     06850
     /*                                                             */     06860
     /* *********************************************************** */     06870
                                                                           06880
          XLIT  CHAR (11),                                                 06890
          NLIT  PIC '9999999999R' DEFINED XLIT,                            06900
          XREC  CHAR (11),                                                 06910
          NREC  PIC '9999999999R' DEFINED XREC,                            06920
          ZREC  CHAR (6),                                                  06930
          PREC  FIXED (11) BASED (P),                                      06940
          PLIT FIXED (11),                                                 06950
                                                                           06960
 /* *************************************************************** */     06970
 /*                                                                 */     06980
 /*      THE FOLLOWING FIELDS ARE USED TO ACCUMULATE THE            */     06990
 /*       NUMBER OF ERRORS ENCOUNTERED, AND TO INDICATE             */     07000
 /*       THESE AT THE END OF THE REPORT.                           */     07010
 /*                                                                 */     07020
 /* *************************************************************** */     07030
                                                                           07040
      ERRORSW BIT(1) INIT('0'B),                                           07050
         LITESW BIT(1) INIT('0'B),                                         07060
          LIT20SW BIT(1) INIT('0'B),                                       07070
          ERR0DIV BIT(1) INIT('0'B),                                       07080
          ZERO_DIVIDE_COUNT FIXED (15) INIT(0),                            07090
                                                                           07100
     /* *********************************************************** */     07110
     /*                                                             */     07120
     /* FINALLY, A MISCELLANY OF ODD DATA NAMES WITH VARIOUS USES.  */     07130
     /*                                                             */     07140
     /*   DREC    - ) USED TO POSITION THE DECIMAL POINT            */     07150
     /*   DECR    - ) IN THE PRINTED VALUES.                        */     07160
     /*   ABIT      - HOLDS THE CURRENT VALUE OF THE GR02           */     07170
     /*               ALPHA/NUMERIC SWITCH ARN(I,J) IN ARRAY1.      */     07180
     /*   LTOTSW    - SET ON WHEN A TOTAL HAS JUST BEEN PRINTED,    */     07190
     /*               OVERRIDING LINE SPACING ON NEXT DETAIL LINE.  */     07200
     /*   EOFSW     - IS SET ON ENDFILE OF THE INPUT DATA FILE.     */     07210
     /*   NAMESW    - IS SET ON IF THERE IS A GR05 CARD.            */     07220
     /*   NAMEPOS - )                                               */     07230
     /*   NAMELEN - ) ARE THE DETAILS ON THAT CARD.                 */     07240
     /*   LASTREC   - IS NEEDED FOR THE NAMES ON A TOTAL LINE, AND  */     07250
     /*               HOLDS THE PREVIOUSLY-PROCESSED RECORD.        */     07260
     /*   KEY1,2..  - ARE THE FOUR CURRENT KEYS.                    */     07270
     /*   LASTKEY1..- ARE THE FOUR PREVIOUS KEYS.                   */     07280
     /*   PRIME     - USED TO TEST FOR ALPHA LITERALS ON GR02 CARD. */     07290
     /*   LABL      - THE GR02 TEST, HOLDS ONE OF EQ, NE, LT, GT.   */     07300
     /*   FIRST_TIME                                                */     07310
     /*   NOKEYS    - NUMBER OF KEYS ON THE GR03 CARD.              */     07320
     /*   NOVALS    - NUMBER OF VALUES TO BE PRINTED.               */     07330
     /*   MIDVAL  - )                                               */     07340
     /*   MIDVAX  - ) TEMPORARY WORK AREAS.                         */     07350
     /*   TN        - USED TO OVERCOME A BUG IN PL/1 WHEN           */     07360
     /*               EXPONENTIATING HALFWORD BINARY NUMBERS        */     07370
     /*               WITH SUBSCRIPTED EXPONENTS.                   */     07380
     /*   REXIT     - LABEL FOR CALLING MAJOR SUBROUTINES.          */     07390
     /*   LEXIT     - LABEL FOR CALLING NESTED SUBROUTINES.         */     07400
     /*                                                             */     07410
     /* *********************************************************** */     07420
                                                                           07430
          DREC CHAR (15),                                                  07440
          DECR PIC '999999999V999999' DEFINED DREC,                        07450
          ABIT BIT (1),                                                    07460
          LTOTSW  BIT(1),                                                  07470
          EOFSW   BIT(1) INIT('0'B),                                       07480
          NAMESW  BIT(1) INIT('0'B),                                       07490
          NAMEPOS FIXED BIN(15),                                           07500
          NAMELEN FIXED(2),                                                07510
                                                                           07520
          LASTREC CHAR(2000),                                              07530
          KEY1     CHAR (28) VARYING STATIC,                               07540
          KEY2     CHAR (28) VARYING STATIC,                               07550
          KEY3     CHAR (28) VARYING STATIC,                               07560
          KEY4     CHAR (28) VARYING STATIC,                               07570
          KEY5     CHAR(28) VARYING STATIC,                                07580
          KEY6     CHAR(28) VARYING STATIC,                                07590
          KEY7     CHAR(28) VARYING STATIC,                                07600
          KEY8     CHAR(28) VARYING STATIC,                                07610
          LASTKEY1 CHAR (28) VARYING STATIC,                               07620
          LASTKEY2 CHAR (28) VARYING STATIC,                               07630
          LASTKEY3 CHAR (28) VARYING STATIC,                               07640
          LASTKEY4 CHAR (28) VARYING STATIC,                               07650
          LASTKEY5 CHAR(28) VARYING STATIC,                                07660
          LASTKEY6 CHAR(28) VARYING STATIC,                                07670
          LASTKEY7 CHAR(28) VARYING STATIC,                                07680
          LASTKEY8 CHAR(28) VARYING STATIC,                                07690
                                                                           07700
          PRIME CHAR (1) INIT (''''),                                      07710
          LABL  CHAR (2),                                                  07720
          FIRST_TIME BIT (1) INIT ('1'B),                                  07730
          NEGPOS  CHAR(3),                                                 07731
          NEGPOSN PIC'999' DEF NEGPOS,                                     07732
          NEGHBYT BIT(4) DEF NEGPOS,                                       07733
                                                                           07740
          NOKEYS FIXED (1) INIT (0),                                       07750
          NOVALS FIXED (1) INIT (0),                                       07760
          MIDVAL FIXED (15,4),                                             07770
          MIDVAX FIXED (15,5),                                             07780
          TN FIXED (3) INIT (10),                                          07790
                                                                           07800
      GR07_IDS (50) CHAR(2) INIT((50)(2)' '),                              07810
                                                                           07820
          LEXIT LABEL,                                                     07830
          PEXIT LABEL,                                                     07840
          REXIT LABEL;                                                     07850
                                                                           07860
          P = ADDR(ZREC);                                                  07870
                                        /* CONVERT THE IBM DATE     */     07880
                                        /* INTO REPORT FORMAT       */     07890
          XDATE  = DATE;                                                   07900
          YYEAR  = XYEAR;                                                  07910
          YDAY   = XDAY;                                                   07920
          YMONTH = ZMONTH(XMONTH);                                         07930
          YFILA  = ' ';                                                    07940
          YFILB  = ' ';                                                    07950
          DATE_HEADA = YDATE;                                              07960
                                                                           08010
                                                                           08020
          PAGENO = 0;                                                      08030
                                        /* ICARD IS A COUNT OF THE  */     08040
                                        /* NUMBER OF GR02 (SELECT)  */     08050
                                        /* CARDS READ.              */     08060
          ICARD = 0;                                                       08070
                                        /* ISW IS USED TO CALL      */     08080
                                        /* SELECTED SUBMODULES OF   */     08090
                                        /* PROCEDURE SRTOUT AFTER   */     08100
                                        /* END-OF-FILE IS REACHED.  */     08110
          ISW = 0;                                                         08120
                                                                           08130
          HEAD_HEADA = ' ';                                                08140
          HEADBX = ' ';                                                    08150
          HEADCX = ' ';                                                    08160
                                                                           08170
          KEY1 = ' ';                                                      08180
          KEY2 = ' ';                                                      08190
          KEY3 = ' ';                                                      08200
          KEY4 = ' ';                                                      08210
                                                                           08220
                                        /* INITIALISE, OPEN FILES,  */     08230
                                        /* SET CONDITIONS.          */     08240
          NUMBER_GR02 = 0;                                                 08250
          NUMBER_GR04 = 0;                                                 08260
          NUMBER_GR07 = 0;                                                 08270
          NUMBER_GR10 = 0;                                                 08280
          NUMBER_LITS = 0;                                                 08290
          NUMBER_GR11 = 0;                                                 08300
          OPEN FILE(SYSIN) INPUT;                                          08310
          OPEN FILE(WORK) OUTPUT;                                          08320
          ON ENDFILE(SYSIN) GO TO $A2;                                     08330
          I = 0;                                                           08340
 $A1:     READ FILE(SYSIN) INTO(INCARD);                                   08350
          IF DES_GR01 = 'GR02' THEN NUMBER_GR02 = NUMBER_GR02 + 1;         08360
          IF DES_GR01 = 'GR04' THEN NUMBER_GR04 = NUMBER_GR04 + 1;         08370
          IF DES_GR01 = 'GR10' THEN NUMBER_GR10 = NUMBER_GR10 + 1;         08380
          IF FLD_GR10 = 'LIT  ' THEN NUMBER_LITS = NUMBER_LITS + 1;        08390
          IF DES_GR01 = 'GR11' THEN NUMBER_GR11 = NUMBER_GR11 + 1;         08400
          IF DES_GR01 = 'GR07'                                             08410
          THEN DO;                                                         08420
              NUMBER_GR07 = NUMBER_GR07 + 1;                               08430
              I = I + 1;                                                   08440
              GR07_IDS (I) = CFLD_GR07;                                    08450
          END;                                                             08460
          WRITE FILE(WORK) FROM(INCARD);                                   08470
          GO TO $A1;                                                       08480
 $A2:     CLOSE FILE(SYSIN);                                               08490
          CLOSE FILE(WORK);                                                08500
          IPMFVAL = NUMBER_GR04 + NUMBER_GR07;                             08510
          IPMFFLD = IPMFVAL;                                               08520
          IPMFARI = NUMBER_GR07;                                           08530
          IPMFGR2 = NUMBER_GR02;                                           08540
          IPMFGR4 = NUMBER_GR04;                                           08550
          IPMFGR11 = NUMBER_GR11;                                          08560
          ALLOCATE ARRAY8X;                                                08570
          ZSW_GR11 = '1'B;                                                 08580
          BSW_GR11 = '0'B;                                                 08590
          IPMFVAL = IPMFVAL + 1;                                           08600
          IPMFGR10 = NUMBER_GR10;                                          08610
          IPMFGRLIT = NUMBER_LITS;                                         08620
          ALLOCATE ARRAY7;                                                 08630
          ALLOCATE LITERAL_POOLX;                                          08640
          ALLOCATE IPMF_VALUES;                                            08650
          ALLOCATE IPMF_FIELDS;                                            08660
          ALLOCATE IPMF_ARITH;                                             08670
          ALLOCATE IPMF_GR02;                                              08680
          ALLOCATE IPMF_GR04;                                              08690
          IDSVAL = IPMFVAL - 1;                                            08700
          ALLOCATE VALUE_IDS;                                              08710
          VAL_IDS = 0;                                                     08720
          FLDDES = ' ';                                                    08730
          ARTYP = ' ';                                                     08740
          ARSTYP_GR04 = '  ';                                              08750
          VALUES = 0;                                                      08760
          DO I = 1 TO 10;                                                  08770
             VALUES(IPMFVAL,  I) = 10 - I;                                 08780
          END;                                                             08790
          ARILN = 0;                                                       08800
          ON ENDFILE(WORK) GO TO E1;                                       08810
          OPEN FILE(WORK) INPUT;                                           08820
          OPEN FILE(PRINT) OUTPUT;                                         08830
                                        /* HEADING FOR LISTING OF   */     08840
                                        /* CONTROL CARDS.           */     08850
          BLANKLINE = '1CONTROL CARD LISTING';                             08860
          WRITE FILE(PRINT) FROM(BLANKLINE);                               08870
                                                                           08880
     /* *********************************************************** */     08890
     /*                                                             */     08900
     /* IN THIS FIRST SECTION OF MAINSTREAM LOGIC, THE CONTROL      */     08910
     /* CARDS ARE READ AND PROCESSED. THE ACTUAL READ IS IN MODULE  */     08920
     /* R1, WHICH ALSO LISTS THE CARDS ON ENTRY.                    */     08930
     /*     THE STATEMENTS INCLUDED IN THE 'A' LABELS READ THROUGH  */     08940
     /* THE GR01 CARDS AND SET UP THE HEADING LINES FOR THE REPORT. */     08950
     /*                                                             */     08960
     /* *********************************************************** */     08970
                                                                           08980
          REXIT = A1;                                                      08990
          GO TO R1;                                                        09000
                                                                           09010
 A1:      IF DES_GR01 ^= 'GR01' THEN GO TO B2;                             09020
          IF BYTE_GR01 = '2' THEN CBYT = '0';                              09030
          IF BYTE_GR01 = '3' THEN CBYT = '-';                              09040
          HEAD_HEADA = TITLE_GR01;                                         09050
          REXIT = A2;                                                      09070
          GO TO R1;                                                        09080
                                                                           09090
 A2:      IF DES_GR01 ^= 'GR01' THEN GO TO B2;                             09100
          IF BYTE_GR01 = '2' THEN BYTE_HEADB = '0';                        09110
          IF BYTE_GR01 = '3' THEN BYTE_HEADB = '-';                        09120
          HED1_HEADB = TITLE_GR01;                                         09130
          REXIT = A3;                                                      09140
          GO TO R1;                                                        09150
                                                                           09160
 A3:      IF DES_GR01 ^= 'GR01' THEN GO TO B2;                             09170
          HED2_HEADB = TITLE_GR01;                                         09180
          REXIT = A4;                                                      09190
          GO TO R1;                                                        09200
                                                                           09210
 A4:      IF DES_GR01 ^= 'GR01' THEN GO TO B2;                             09220
          IF BYTE_GR01 = '2' THEN BYTE_HEADC = '0';                        09230
          IF BYTE_GR01 = '3' THEN BYTE_HEADC = '-';                        09240
          HED1_HEADC = TITLE_GR01;                                         09250
          REXIT = A5;                                                      09260
          GO TO R1;                                                        09270
                                                                           09280
 A5:      IF DES_GR01 ^= 'GR01' THEN GO TO B2;                             09290
          HED2_HEADC = TITLE_GR01;                                         09300
                                                                           09310
     /* *********************************************************** */     09320
     /*                                                             */     09330
     /* THIS SECOND SECTION, WITH LABELS 'B', READS THE GR02 CARDS  */     09340
     /* AND SETS UP THE RELEVANT DATA IN ARRAY1.                    */     09350
     /*                                                             */     09360
     /* *********************************************************** */     09370
                                                                           09380
 B1:      REXIT = B2;                                                      09390
          GO TO R1;                                                        09400
                                                                           09410
 B2:      IF DES_GR02 ^= 'GR02' THEN GO TO C1;                             09420
                                        /* AUGMENT COUNT OF GR02'S  */     09430
          ICARD = ICARD + 1;                                               09440
                                        /* SCAN ACROSS THE 4 TESTS, */     09450
                                        /* MOVING THE DATA, IF      */     09460
                                        /* THERE, INTO THE ARRAY.   */     09470
          DO I = 1 TO 4;                                                   09480
             IF CTYP_GR02(I) = '  ' THEN GO TO B1;                         09490
          NEGPOS = CPOS_GR02(I);                                           09500
          IF NEGHBYT = '1101'B                                             09501
          THEN ARPOS(ICARD,I) = 1000 + NEGPOSN;                            09502
          ELSE ARPOS(ICARD,I) = NEGPOSN;                                   09503
             ARLEN(ICARD,I) = CLEN_GR02(I);                                09510
             ARPAK(ICARD,I) = CPAK_GR02(I);                                09520
             ARTYP(ICARD,I) = CTYP_GR02(I);                                09530
                                        /* FIND OUT IF CONSTANT ON  */     09540
                                        /* CARD IS IN QUOTES OR NOT */     09550
             XLIT = CLIT_GR02(I);                                          09560
             K = INDEX(XLIT,PRIME);                                        09570
                                                                           09580
             IF K = 0                                                      09590
                                        /* IF NOT, MOVE NUMERIC TO  */     09600
                                        /* 'ARN' & LITERAL TO ARRAY */     09610
             THEN DO;                                                      09620
                     ARNUM(ICARD,I) = NLIT;                                09630
                     ARN(ICARD,I) = '0'B;                                  09640
                  END;                                                     09650
                                        /* IF THERE IS A QUOTE,     */     09660
                                        /* LOCATE THE SECOND ONE    */     09670
                                        /* AND MOVE THE IN-BETWEEN  */     09680
                                        /* VALUE TO THE ARRAY.      */     09690
             ELSE DO;                                                      09700
                     SUBSTR(XLIT,K,1) = '*';                               09710
                     L = INDEX(XLIT,PRIME);                                09720
                     L1 = K + 1;                                           09730
                     L2 = L - K - 1;                                       09740
                     ARLIT(ICARD,I) = SUBSTR(XLIT,L1,L2);                  09750
                                        /* SIGNIFY ALPHA IN 'ARN'   */     09760
                     ARN(ICARD,I) = '1'B;                                  09770
                  END;                                                     09780
          END;                                                             09790
                                        /* GET NEXT GR02 RECORD.    */     09800
          GO TO B1;                                                        09810
                                                                           09820
     /* *********************************************************** */     09830
     /*                                                             */     09840
     /* THIS SECTION UNPACKS THE GR03 CARD, UNLOADING THE DATA FOR  */     09850
     /* THE (UP TO) FOUR KEYS INTO ARRAY3. IT ALSO COUNTS HOW MANY  */     09860
     /* KEYS ARE IN FACT USED.                                      */     09870
     /*                                                             */     09880
     /* *********************************************************** */     09890
                                                                           09900
 C1:      IF DES_GR03 ^= 'GR03' THEN GO TO D1;                             09910
          DO I = 1 TO 4;                                                   09920
             IF UGR03                                                      09930
             THEN J = I + 4;                                               09940
             ELSE J = I;                                                   09950
          NEGPOS = CPOS_GR03(I);                                           09960
          IF NEGHBYT = '1101'B                                             09961
          THEN ARPOS_GR03(J) = 1000 + NEGPOSN;                             09962
          ELSE ARPOS_GR03(J) = NEGPOSN;                                    09963
             ARLEN_GR03(J) = CLEN_GR03(I);                                 09970
             ARPAK_GR03(J) = CPAK_GR03(I);                                 09980
             ARTOT_GR03(J) = CTOT_GR03(I);                                 09990
             ARPAG_GR03(J) = CPAG_GR03(I);                                 10000
          NEGPOS = CNAM_GR03(I);                                           10010
          IF NEGHBYT = '1101'B                                             10011
          THEN ARNAM_GR03(J) = 1000 + NEGPOSN;                             10012
          ELSE ARNAM_GR03(J) = NEGPOSN;                                    10013
             ARNML_GR03(J) = CNML_GR03(I);                                 10020
             IF ARPOS_GR03(J) ^= 0 THEN NOKEYS = NOKEYS + 1;               10030
          END;                                                             10050
          IF CLCT_GR03(1) > 0 THEN LINECX = CLCT_GR03(1);                  10060
                                                                           10070
          UGR03 = '1'B;                                                    10080
          REXIT = C1;                                                      10090
          GO TO R1;                                                        10100
                                                                           10110
     /* *********************************************************** */     10120
     /*                                                             */     10130
     /* THIS SECTION UNPACKS THE GR04 CARDS, PUTTING THE DATA FOR   */     10140
     /* THE (UP TO) NINE FIELDS INTO ARRAY5. IT COUNTS HOW MANY     */     10150
     /* FIELDS ARE SPECIFIED.                                       */     10160
     /*                                                             */     10170
     /* *********************************************************** */     10180
                                                                           10190
 D1:      IF DES_GR04 ^= 'GR04' THEN GO TO D5;                             10200
          NOFLD = NOFLD + 1;                                               10210
          NEGPOS = CPOS_GR04;                                              10220
          IF NEGHBYT = '1101'B                                             10221
          THEN ARPOS_GR04(NOFLD) = 1000 + NEGPOSN;                         10222
          ELSE ARPOS_GR04(NOFLD) = NEGPOSN;                                10223
          ARLEN_GR04 (NOFLD) = CLEN_GR04;                                  10230
          ARPAK_GR04 (NOFLD) = CPAK_GR04;                                  10240
          ARDEC_GR04 (NOFLD) = CDEC_GR04;                                  10250
          IF GR04_ALPHAKEY = ' ' THEN GR04_ALPHAKEY = '9';                 10260
          ARKEY_GR04 (NOFLD) = CKEY_GR04;                                  10270
          DO I = 1 TO 3;                                                   10280
             IF CSTYP_GR04(I) = ' ' THEN GO TO D2;                         10290
          NEGPOS = CSPOS_GR04(I);                                          10300
          IF NEGHBYT = '1101'B                                             10301
          THEN ARSPOS_GR04(NOFLD,I) = 1000 + NEGPOSN;                      10302
          ELSE ARSPOS_GR04(NOFLD,I) = NEGPOSN;                             10303
             ARSLEN_GR04(NOFLD,I) = CSLEN_GR04(I);                         10310
             ARSPAK_GR04(NOFLD,I) = CSPAK_GR04(I);                         10320
             ARSTYP_GR04(NOFLD,I) = CSTYP_GR04(I);                         10330
             XLIT = CSLIT_GR04(I);                                         10340
             K = INDEX(XLIT,PRIME);                                        10350
          IF K = 0                                                         10360
          THEN DO;                                                         10370
                     ARSNUM_GR04(NOFLD,I) = NLIT;                          10380
                     ARSN_GR04(NOFLD,I) = '0'B;                            10390
                  END;                                                     10400
             ELSE DO;                                                      10410
                     SUBSTR(XLIT,K,1) = '*';                               10420
                     L = INDEX(XLIT,PRIME);                                10430
                     L1 = K + 1;                                           10440
                     L2 = L - K - 1;                                       10450
                     ARSLIT_GR04(NOFLD,I) = SUBSTR(XLIT,L1,L2);            10460
                     ARSN_GR04(NOFLD,I) = '1'B;                            10470
                  END;                                                     10480
          END;                                                             10490
 D2:      DO I = 1 TO IPMF_FLDS;                                           10500
             IF FLDDES(I) = CFLD_GR04 THEN GO TO D3;                       10510
             IF FLDDES(I) = ' ' THEN GO TO D3;                             10520
          END;                                                             10530
 D3:      FLDDES(I) = CFLD_GR04;                                           10540
          ARFLD_GR04(NOFLD) = I;                                           10550
          VAL_IDS(I) = NOFLD;                                              10560
                                                                           10570
          REXIT = D1;                                                      10580
          GO TO R1;                                                        10590
                                                                           10600
     /* *********************************************************** */     10610
     /*                                                             */     10620
     /* IF A GR05 CARD IS READ, 'NAMESW' IS SET TO SIGNIFY PRINTING */     10630
     /* OF ALL DETAIL RECORDS, AND THE DATA FOR THE DETAIL NAME IS  */     10640
     /* STORED.                                                     */     10650
     /*                                                             */     10660
     /* *********************************************************** */     10670
                                                                           10680
 D5:      IF DES_GR05 ^= 'GR05' THEN GO TO D7;                             10690
                                                                           10730
          REXIT = D7;                                                      10740
          GO TO R1;                                                        10750
                                                                           10760
     /* *********************************************************** */     10770
     /*                                                             */     10780
     /* IF A GR06 CARD IS READ, 'SORTSW' IS SET TO SIGNIFY THAT THE */     10790
     /* SELECTED RECORDS HAVE TO BE SORTED, AND THE 'SORT FIELDS='  */     10800
     /* DATA IS STORED TO PASS TO THE SORT INTERFACE.               */     10810
     /*                                                             */     10820
     /* *********************************************************** */     10830
                                                                           10840
 D7:      IF DES_GR06 ^= 'GR06' THEN GO TO D8;                             10850
                                                                           10880
          REXIT = D8;                                                      10890
          GO TO R1;                                                        10900
                                                                           10910
     /* *********************************************************** */     10920
     /*                                                             */     10930
     /* THE NEXT SECTION, THRU TO LABEL D89, DEALS WITH UNPACKING   */     10940
     /* THE ARITHMETIC CARDS GR07. EACH FIELD NAME HAS TO BE        */     10950
     /* TRANSLATED INTO A SUBSCRIPT FOR THE ARRAY 'VALUES', EACH    */     10960
     /* LITERAL CONSTANT MUST BE PLACED IN THE ARRAY 'VALIT', & THE */     10970
     /* WHOLE ARITHMETIC STATEMENT CODED INTO THE ARRAY             */     10980
     /* 'ARITHMETIC'.                                               */     10990
     /*    FOUR POINTERS, K1 THRU K4, ARE INTRODUCED. K1 WILL POINT */     11000
     /* TO THE OPERATOR CURRENTLY BEING PROCESSED, K2 TO THE NEXT   */     11010
     /* ONE (OR OFF THE END OF THE STATEMENT). K3 IS USED TO SKIP   */     11020
     /* OVER A NEGATIVE PREFIX, AND K4 TO SCAN FOR A DECIMAL POINT  */     11030
     /* IN A LITERAL CONSTANT.                                      */     11040
     /*                                                             */     11050
     /* *********************************************************** */     11060
                                                                           11070
 D8:      IF DES_GR07 ^= 'GR07' THEN GO TO D9;                             11080
                                        /* AUGMENT COUNT OF GR07'S  */     11090
          NOARI = NOARI + 1;                                               11100
          IF TEST_GR07TST = 'TEST'                                         11110
          THEN DO;                                                         11120
                  ARIFD(NOARI) = -1;                                       11130
          IF FLD1_GR07TST = '$K'                                           11140
          THEN DO;                                                         11150
                  J = IPMFVAL;                                             11160
                  GO TO $D80;                                              11170
               END;                                                        11180
                  DO J = 1 TO IPMF_FLDS;                                   11190
                     IF FLDDES(J) = FLD1_GR07TST THEN GO TO $D80;          11200
                  END;                                                     11210
 $D80:            ARINO(NOARI,1) = J;                                      11220
          IF FLD2_GR07TST = '$K'                                           11230
          THEN DO;                                                         11240
                  J = IPMFVAL;                                             11250
                  GO TO $D81;                                              11260
               END;                                                        11270
                  DO J = 1 TO IPMF_FLDS;                                   11280
                     IF FLDDES(J) = FLD2_GR07TST THEN GO TO $D81;          11290
                  END;                                                     11300
 $D81:            ARINO(NOARI,3) = J;                                      11310
          IF GOTO_GR07TST = '$1'                                           11320
                  THEN DO;                                                 11330
                          ARINO(NOARI,4) = -1;                             11340
                          GO TO $D825;                                     11350
                       END;                                                11360
          IF GOTO_GR07TST = '$2'                                           11370
          THEN DO;                                                         11380
                  ARINO(NOARI,4) = -2;                                     11390
                  GO TO $D825;                                             11400
               END;                                                        11410
                  DO I = 1 TO NUMBER_GR07;                                 11420
                      IF GR07_IDS(I) = GOTO_GR07TST                        11430
                      THEN GO TO $82;                                      11440
                  END;                                                     11450
                  EQGT_GR07TST = '**';                                     11460
                  ARINO(NOARI,2) = 0;       /* NULLIFY THIS TEST */        11470
 $82:                                                                      11480
                  ARINO(NOARI,4) = I;                                      11490
 $D825:                                                                    11500
                  IF CTOT_GR07 = ' '                                       11510
                  THEN ARITT(NOARI) = '0'B;                                11520
                  ELSE ARITT(NOARI) = '1'B;                                11530
                  IF EQGT_GR07TST = 'EQ' THEN ARINO(NOARI,2) = 1;          11540
                  IF EQGT_GR07TST = 'NE' THEN ARINO(NOARI,2) = 2;          11550
                  IF EQGT_GR07TST = 'GT' THEN ARINO(NOARI,2) = 3;          11560
                  IF EQGT_GR07TST = 'LT' THEN ARINO(NOARI,2) = 4;          11570
                  DO J = 1 TO IPMF_FLDS;                                   11580
                      IF FLDDES(J) = CFLD_GR07 THEN GO TO $83;             11590
                      IF FLDDES(J) = '  '      THEN GO TO $83;             11600
                  END;                                                     11610
 $83:             FLDDES(J) = CFLD_GR07;                                   11620
                  ARINO(NOARI,5) = J;                                      11630
                  REXIT = D8;                                              11640
                  GO TO R1;                                                11650
               END;                                                        11660
                                        /* SUBSCRIPT OF RECEIVING   */     11670
                                        /* FIELD & PLACE IN ARRAY.  */     11680
          SCAFLD = CFLD_GR07;                                              11681
          IF SCAPCT = '%'                                                  11682
          THEN DO;                                                         11683
                  ARIFD(NOARI) = -100 - SCANO;                             11684
                  GO TO D801;                                              11685
               END;                                                        11686
          DO J = 1 TO IPMF_FLDS;                                           11690
             IF FLDDES(J) = CFLD_GR07 THEN GO TO D80;                      11700
             IF FLDDES(J) = ' ' THEN GO TO D80;                            11710
          END;                                                             11720
 D80:     FLDDES(J) = CFLD_GR07;                                           11730
          ARIFD(NOARI) = J;                                                11740
 D801:                                                                     11741
                                        /* PREFIX STATEMENT WITH +  */     11750
                                        /* AND STRIP OUT BLANKS.    */     11760
          BLARITH = CARI_GR07;                                             11770
          NBLARI = '+';                                                    11780
          DO J = 1 TO 74;                                                  11790
             IF BLBYTES(J) ^= ' ' THEN NBLARI = NBLARI || BLBYTES(J);      11800
          END;                                                             11810
          IF CTOT_GR07 = ' '            /* SET TOTAL-TIME SWITCH    */     11820
          THEN ARITT(NOARI) = '0'B;                                        11830
          ELSE ARITT(NOARI) = '1'B;                                        11840
                                                                           11850
          L = LENGTH(NBLARI);                                              11860
          BLARITH = NBLARI;                                                11870
                                        /* PUT POINTERS TO FIRST    */     11880
                                        /* OPERAND, SCAN K2 TO GET  */     11890
                                        /* TO NEXT ONE.             */     11900
          K1, K2 = 1;                                                      11910
 D81:     K2 = K2 + 1;                                                     11920
                                        /* K2 OFF END OF STATEMENT  */     11930
          IF K2 > L THEN GO TO D82;                                        11940
                                        /* K2 AT NEXT OPERAND.      */     11950
          IF BLBYTES(K2) = '+' | BLBYTES(K2) = '*' | BLBYTES(K2) = '/'     11960
          THEN GO TO D82;                                                  11970
                                        /* (BEWARE OF - PREFIXES).  */     11980
          IF BLBYTES(K2) = '-' & K2 ^= K1+1                                11990
          THEN GO TO D82;                                                  12000
          GO TO D81;                                                       12010
                                        /* POINT K3 AT THE PREFIX.  */     12020
 D82:     IF BLBYTES(K1+1) = '-' THEN K3 = K1 + 1;                         12030
                                 ELSE K3 = K1;                             12040
          IF BLBYTES(K3+1) = '%'                                           12041
          THEN DO;                                                         12042
                  SCAFLD = SUBSTR(BLARITH,K3+1,2);                         12043
                  J = -100 - SCANO;                                        12044
                  GO TO D825;                                              12045
               END;                                                        12046
                                        /* IS OPERAND A FIELD NAME? */     12050
          IF BLBYTES(K3+1) > '{' /* <- HEX 'C0' */                         12060
           & BLBYTES(K3+1) < 'Â' /* <- HEX 'EA' */                         12070
          THEN DO;                                                         12080
                  ARIFX = SUBSTR(BLARITH,K3+1,2);                          12090
                                        /* PUT INTO SUBSCRIPT FORM. */     12100
          DO J = 1 TO IPMF_FLDS;                                           12110
             IF FLDDES(J) = ARIFX THEN GO TO D825;                         12120
          END;                                                             12130
 D825:                                                                     12140
                  K = ARILN(NOARI) + 1;                                    12150
                  ARICN(NOARI,K) = '0'B;     /* SIGNAL VARIABLE     */     12160
                                        /* AUGMENT COUNTER OF NO.   */     12170
                                        /* OF OPERTRS IN STATEMENT. */     12180
 D83:             ARILN(NOARI) = ARILN(NOARI) + 1;                         12190
                  IF K > 20                                                12200
                  THEN DO;                                                 12210
                      LIT20SW = '1'B;                                      12220
                      ERRORSW = '1'B;                                      12230
                      GO TO D89;                                           12240
                  END;                                                     12250
                  ARINO(NOARI,K) = J;                                      12260
                                        /* LOAD OPERAND TO ARRAY.   */     12270
                  ARIOP(NOARI,K) = SUBSTR(BLARITH,K1,1);                   12280
                                        /* LOAD PREFIX TO ARRAY.    */     12290
                  IF K1 = K3 THEN ARISN(NOARI,K) = ' ';                    12300
                             ELSE ARISN(NOARI,K) = '-';                    12310
                  IF K2 < L                                                12320
                                        /* MORE OPERATIONS. SET K1  */     12330
                                        /* TO NEXT ONE & REPEAT.    */     12340
                  THEN DO;                                                 12350
                          K1 = K2;                                         12360
                          GO TO D81;                                       12370
                       END;                                                12380
                                        /* END OF CARD. GET NEXT.   */     12390
                  GO TO D89;                                               12400
               END;                                                        12410
                                        /* ENTRY HERE IF OPERAND    */     12420
                                        /* NUMERIC LITERAL.         */     12430
          DECR = 0;                                                        12440
                                        /* SCAN FOR DECIMAL POINT.  */     12450
          K4 = 0;                                                          12460
          DO K = K3 TO K2;                                                 12470
             IF BLBYTES(K) = '.' THEN K4 = K;                              12480
          END;                                                             12490
                                        /* PUT LITERAL INTO 'DREC'. */     12500
          IF K4 = 0                                                        12510
          THEN SUBSTR(DREC,11+K3-K2,K2-K3-1) =                             12520
                         SUBSTR(BLARITH,K3+1,K2-K3-1);                     12530
          ELSE DO;                                                         12540
                  SUBSTR(DREC,11+K3-K4,K4-K3-1) =                          12550
                         SUBSTR(BLARITH,K3+1,K4-K3-1);                     12560
                  SUBSTR(DREC,10,K2-K4-1) =                                12570
                         SUBSTR(BLARITH,K4+1,K2-K4-1);                     12580
               END;                                                        12590
                                        /* FIND NEXT SLOT IN        */     12600
                                        /* 'VALUES', INSERT LITERAL */     12610
                                        /* & SET SUBSCRIPT IN J.    */     12620
         DO J = 1 TO CONST;                                                12630
               IF VALIT (J) = DECR                                         12640
               THEN GO TO D85;                                             12650
         END;                                                              12660
          CONST = CONST + 1;                                               12670
          VALIT(CONST) = DECR;                                             12680
         J = CONST;                                                        12690
         IF J > 22                                                         12700
         THEN DO;                                                          12710
              J = 23;                                                      12720
              CONST = 22;                                                  12730
             ERRORSW = '1'B;                                               12740
             LITESW  = '1'B;                                               12750
         END;                                                              12760
 D85:    K = ARILN(NOARI) + 1;                                             12770
         IF K > 20                                                         12780
         THEN DO;                                                          12790
             LIT20SW = '1'B;                                               12800
             ERRORSW = '1'B;                                               12810
             GO TO D83;                                                    12820
         END;                                                              12830
          ARICN(NOARI,K) = '1'B;             /* SIGNAL CONSTANT LIT.*/     12840
                                        /* STORE OPERATION IN       */     12850
                                        /* ARITHMETIC ARRAY.        */     12860
          GO TO D83;                                                       12870
                                                                           12880
 D89:                                                                      12890
          REXIT = D8;                                                      12900
          GO TO R1;                                                        12910
                                                                           12920
     /* *********************************************************** */     12930
     /*                                                             */     12940
     /* THE LAST REMAINING CARD TYPE IS THE 'GR08', PRINT REQUEST   */     12950
     /* CARD. WE PLACE THE VALUES FROM THE CARD INTO ARRAY6,        */     12960
     /* KEEPING A COUNT OF HOW MANY VALUES ARE REQUESTED PRINTED.   */     12970
     /*                                                             */     12980
     /* *********************************************************** */     12990
                                                                           13000
 D9:      IF DES_GR08 ^= 'GR08' THEN GO TO D92;                            13010
          REXIT = D92;                                                     13230
          GO TO R1;                                                        13240
                                                                           13250
     /* *********************************************************** */     13260
     /*                                                             */     13270
     /* LATE ADDITION TO THE PROGRAM. THE NEXT BLOCK OF CODING      */     13280
     /* READS THE 'GR09' CARDS, COUNTS THEM, AND STORES THE VALUES  */     13290
     /* IN THE TW-ARRAY.                                            */     13300
     /*                                                             */     13310
     /* *********************************************************** */     13320
                                                                           13330
 D92:     IF DES_GR09 ^= 'GR09' THEN GO TO $D1;                            13340
                                                                           13370
          REXIT = D92;                                                     13380
          GO TO R1;                                                        13390
                                                                           13400
 $D1:     IF DES_GR10 ^= 'GR10' THEN GO TO $D2;                            13410
          NO_GR10    = NO_GR10    + 1;                                     13420
          ARSPOS_GR10(NO_GR10)   = SPOS_GR10;                              13430
          AREPOS_GR10(NO_GR10)   = EPOS_GR10;                              13440
          ARFMT_GR10(NO_GR10)   = FMAT_GR10;                               13450
          ARDEC_GR10(NO_GR10)   = DECS_GR10;                               13460
          IF FLD_GR10 = 'LIT  '                                            13470
          THEN DO;                                                         13480
                  NO_FMAT_LITS = NO_FMAT_LITS + 1;                         13490
                  LITERAL_POOL(NO_FMAT_LITS) = LIT_GR10;                   13500
                  ARLIT_GR10(NO_GR10)   = NO_FMAT_LITS;                    13510
               END;                                                        13520
          I = 0;                                                           13530
          IF FLD_GR10 = 'CNT0 ' THEN I = 980;                              13540
          IF FLD_GR10 = 'CNT1 ' THEN I = 981;                              13550
          IF FLD_GR10 = 'CNT2 ' THEN I = 982;                              13560
          IF FLD_GR10 = 'CNT3 ' THEN I = 983;                              13570
          IF FLD_GR10 = 'CNT4 ' THEN I = 984;                              13580
          IF FLD_GR10 = 'KEY1 ' THEN I = 991;                              13590
          IF FLD_GR10 = 'KEY2 ' THEN I = 992;                              13600
          IF FLD_GR10 = 'KEY3 ' THEN I = 993;                              13610
          IF FLD_GR10 = 'KEY4 ' THEN I = 994;                              13620
          IF FLD_GR10 = 'NAME1' THEN I = 995;                              13630
          IF FLD_GR10 = 'NAME2' THEN I = 996;                              13640
          IF FLD_GR10 = 'NAME3' THEN I = 997;                              13650
          IF FLD_GR10 = 'NAME4' THEN I = 998;                              13660
          IF FLD_GR10 = 'LIT  ' THEN I = 999;                              13670
          IF FLD_GR10 = 'NAME9' THEN I = 1000;                             13680
          IF FLD_GR10 = 'CNT5 ' THEN I = 976;                              13690
          IF FLD_GR10 = 'CNT6 ' THEN I = 977;                              13700
          IF FLD_GR10 = 'CNT7 ' THEN I = 978;                              13710
          IF FLD_GR10 = 'CNT8 ' THEN I = 979;                              13720
          IF FLD_GR10 = 'NAME5' THEN I = 1001;                             13730
          IF FLD_GR10 = 'NAME6' THEN I = 1002;                             13740
          IF FLD_GR10 = 'NAME7' THEN I = 1003;                             13750
          IF FLD_GR10 = 'NAME8' THEN I = 1004;                             13760
          IF FLD_GR10 = 'KEY5 ' THEN I = 1005;                             13770
          IF FLD_GR10 = 'KEY6 ' THEN I = 1006;                             13780
          IF FLD_GR10 = 'KEY7 ' THEN I = 1007;                             13790
          IF FLD_GR10 = 'KEY8 ' THEN I = 1008;                             13800
          IF FLD_GR10 = 'LINE+' THEN I = 1009;                             13810
          IF I ^= 0                                                        13820
          THEN DO;                                                         13830
                  ARFLD_GR10(NO_GR10)   = I;                               13840
                  REXIT = $D1;                                             13850
                  GO TO R1;                                                13860
               END;                                                        13870
          ARIFX = FLD_GR10;                                                13880
          DO I = 1 TO IPMF_FLDS;                                           13890
             IF FLDDES(I) = ARIFX THEN GO TO $D15;                         13900
          END;                                                             13910
 $D15:    ARFLD_GR10(NO_GR10)   = I;                                       13920
          REXIT = $D1;                                                     13930
          GO TO R1;                                                        13940
 $D2:     IF DES_GR10 ^= 'GR11' THEN GO TO $D3;                            13950
          NO_GR11    = NO_GR11    + 1;                                     13960
          ARSPOS_GR11(NO_GR11)   = SPOS_GR10;                              13970
          AREPOS_GR11(NO_GR11)   = EPOS_GR10;                              13980
          ARFMT_GR11(NO_GR11)   = FMAT_GR10;                               13990
          ARDEC_GR11(NO_GR11)   = DECS_GR10;                               14000
          IF FILA_GR10 = 'ZZ' THEN ZSW_GR11(NO_GR11) = '0'B;               14010
          IF FILA_GR10 = 'BL' THEN BSW_GR11(NO_GR11) = '1'B;               14020
          IF FLD_GR10 = 'LIT  '                                            14030
          THEN DO;                                                         14040
                  NO_FMAT_LITS = NO_FMAT_LITS + 1;                         14050
                  LITERAL_POOL(NO_FMAT_LITS) = LIT_GR10;                   14060
                  ARLIT_GR11(NO_GR11)   = NO_FMAT_LITS;                    14070
               END;                                                        14080
          I = 0;                                                           14090
          IF FLD_GR10 = 'CNT0 ' THEN I = 980;                              14100
          IF FLD_GR10 = 'CNT1 ' THEN I = 981;                              14110
          IF FLD_GR10 = 'CNT2 ' THEN I = 982;                              14120
          IF FLD_GR10 = 'CNT3 ' THEN I = 983;                              14130
          IF FLD_GR10 = 'CNT4 ' THEN I = 984;                              14140
          IF FLD_GR10 = 'KEY1 ' THEN I = 991;                              14150
          IF FLD_GR10 = 'KEY2 ' THEN I = 992;                              14160
          IF FLD_GR10 = 'KEY3 ' THEN I = 993;                              14170
          IF FLD_GR10 = 'KEY4 ' THEN I = 994;                              14180
          IF FLD_GR10 = 'NAME1' THEN I = 995;                              14190
          IF FLD_GR10 = 'NAME2' THEN I = 996;                              14200
          IF FLD_GR10 = 'NAME3' THEN I = 997;                              14210
          IF FLD_GR10 = 'NAME4' THEN I = 998;                              14220
          IF FLD_GR10 = 'LIT  ' THEN I = 999;                              14230
          IF FLD_GR10 = 'NAME9' THEN I = 1000;                             14240
          IF FLD_GR10 = 'CNT5 ' THEN I = 976;                              14250
          IF FLD_GR10 = 'CNT6 ' THEN I = 977;                              14260
          IF FLD_GR10 = 'CNT7 ' THEN I = 978;                              14270
          IF FLD_GR10 = 'CNT8 ' THEN I = 979;                              14280
          IF FLD_GR10 = 'NAME5' THEN I = 1001;                             14290
          IF FLD_GR10 = 'NAME6' THEN I = 1002;                             14300
          IF FLD_GR10 = 'NAME7' THEN I = 1003;                             14310
          IF FLD_GR10 = 'NAME8' THEN I = 1004;                             14320
          IF FLD_GR10 = 'KEY5 ' THEN I = 1005;                             14330
          IF FLD_GR10 = 'KEY6 ' THEN I = 1006;                             14340
          IF FLD_GR10 = 'KEY7 ' THEN I = 1007;                             14350
          IF FLD_GR10 = 'KEY8 ' THEN I = 1008;                             14360
          IF FLD_GR10 = 'LINE+' THEN I = 1009;                             14370
          IF I ^= 0                                                        14380
          THEN DO;                                                         14390
                  ARFLD_GR11(NO_GR11)   = I;                               14400
                  REXIT = $D2;                                             14410
                  GO TO R1;                                                14420
               END;                                                        14430
          ARIFX = FLD_GR10;                                                14440
          DO I = 1 TO IPMF_FLDS;                                           14450
             IF FLDDES(I) = ARIFX THEN GO TO $D25;                         14460
          END;                                                             14470
 $D25:    ARFLD_GR11(NO_GR11)   = I;                                       14480
          REXIT = $D2;                                                     14490
          GO TO R1;                                                        14500
 $D3:     IF DES_GR10 ^= 'GR12' THEN GO TO E1;                             14510
          J = KEY_GR10;                                                    14520
          IF J = 0 & FLD_GR10 = 'DELET'                                    14530
          THEN DO;                                                         14540
                  PRTOTAL = '0'B;                                          14550
                  REXIT = $D3;                                             14560
                  GO TO R1;                                                14570
               END;                                                        14580
          NO_GR12(J) = NO_GR12(J) + 1;                                     14590
          NO_GR1J = NO_GR12(J);                                            14600
          ARSPOS_GR12(NO_GR1J,J) = SPOS_GR10;                              14610
          AREPOS_GR12(NO_GR1J,J) = EPOS_GR10;                              14620
          ARFMT_GR12(NO_GR1J,J) = FMAT_GR10;                               14630
          ARDEC_GR12(NO_GR1J,J) = DECS_GR10;                               14640
          IF FLD_GR10 = 'LIT  '                                            14650
          THEN DO;                                                         14660
                  NO_FMAT_LITS = NO_FMAT_LITS + 1;                         14670
                  LITERAL_POOL(NO_FMAT_LITS) = LIT_GR10;                   14680
                  ARLIT_GR12(NO_GR1J,J) = NO_FMAT_LITS;                    14690
               END;                                                        14700
          I = 0;                                                           14710
          IF FLD_GR10 = 'GR11 ' THEN I = 1500;                             14720
          IF FLD_GR10 = 'CNT0 ' THEN I = 980;                              14730
          IF FLD_GR10 = 'CNT1 ' THEN I = 981;                              14740
          IF FLD_GR10 = 'CNT2 ' THEN I = 982;                              14750
          IF FLD_GR10 = 'CNT3 ' THEN I = 983;                              14760
          IF FLD_GR10 = 'CNT4 ' THEN I = 984;                              14770
          IF FLD_GR10 = 'KEY1 ' THEN I = 991;                              14780
          IF FLD_GR10 = 'KEY2 ' THEN I = 992;                              14790
          IF FLD_GR10 = 'KEY3 ' THEN I = 993;                              14800
          IF FLD_GR10 = 'KEY4 ' THEN I = 994;                              14810
          IF FLD_GR10 = 'NAME1' THEN I = 995;                              14820
          IF FLD_GR10 = 'NAME2' THEN I = 996;                              14830
          IF FLD_GR10 = 'NAME3' THEN I = 997;                              14840
          IF FLD_GR10 = 'NAME4' THEN I = 998;                              14850
          IF FLD_GR10 = 'LIT  ' THEN I = 999;                              14860
          IF FLD_GR10 = 'NAME9' THEN I = 1000;                             14870
          IF FLD_GR10 = 'CNT5 ' THEN I = 976;                              14880
          IF FLD_GR10 = 'CNT6 ' THEN I = 977;                              14890
          IF FLD_GR10 = 'CNT7 ' THEN I = 978;                              14900
          IF FLD_GR10 = 'CNT8 ' THEN I = 979;                              14910
          IF FLD_GR10 = 'NAME5' THEN I = 1001;                             14920
          IF FLD_GR10 = 'NAME6' THEN I = 1002;                             14930
          IF FLD_GR10 = 'NAME7' THEN I = 1003;                             14940
          IF FLD_GR10 = 'NAME8' THEN I = 1004;                             14950
          IF FLD_GR10 = 'KEY5 ' THEN I = 1005;                             14960
          IF FLD_GR10 = 'KEY6 ' THEN I = 1006;                             14970
          IF FLD_GR10 = 'KEY7 ' THEN I = 1007;                             14980
          IF FLD_GR10 = 'KEY8 ' THEN I = 1008;                             14990
          IF FLD_GR10 = 'LINE+' THEN I = 1009;                             15000
          IF I ^= 0                                                        15010
          THEN DO;                                                         15020
                  ARFLD_GR12(NO_GR1J,J) = I;                               15030
                  REXIT = $D3;                                             15040
                  GO TO R1;                                                15050
               END;                                                        15060
          ARIFX = FLD_GR10;                                                15070
          DO I = 1 TO IPMF_FLDS;                                           15080
             IF FLDDES(I) = ARIFX THEN GO TO $D35;                         15090
          END;                                                             15100
 $D35:    ARFLD_GR12(NO_GR1J,J) = I;                                       15110
          REXIT = $D3;                                                     15120
          GO TO R1;                                                        15130
                                                                           15140
     /* *********************************************************** */     15150
     /*                                                             */     15160
     /* THE NEXT 20-ODD LINES OF CODING DO THE MAJOR PROCESSING OF  */     15170
     /* THE FILE, BY CALLING SEPARATLY THE INTERNAL PROCEDURES      */     15180
     /* SRTIN, WHICH READS THE INPUT FILE AND PERFORMS THE          */     15190
     /* SELECTION TESTS ON EACH RECORD, AND SRTOUT, WHICH PROCESSES */     15200
     /* THE RECORDS, TAKING OFF THE VALUES, MATCHING KEYS, AND      */     15210
     /* PRINTING THE REPORT.                                        */     15220
     /*                                                             */     15230
     /*     THERE ARE TWO POSSIBLE INVOCATIONS:                     */     15240
     /*                                                             */     15250
     /*   1) IF A SORT IS REQUIRED (SORTSW IS ON BY A GR06 CARD),   */     15260
     /*      THE PROCEDURE IHESRTD IS INVOKED, WHICH CALLS RECORDS  */     15270
     /*      FROM SRTIN UNTIL ENDFILE, SORTS THEM, AND THEN PASSES  */     15280
     /*      THEM ONE AT A TIME TO SRTOUT.                          */     15290
     /*                                                             */     15300
     /*   2) IF SORTSW HAS NOT BEEN SET, WE GO DOWN TO LABEL E15,   */     15310
     /*      AND LOOP THROUGH 3 INSTRUCTIONS, GETTING RECORDS ONE   */     15320
     /*      AT A TIME FROM SRTIN AND PASSING THEM TO SRTOUT.       */     15330
     /*                                                             */     15340
     /*     IN EITHER CASE, WHEN ALL PROCESSING HAS BEEN FINISHED,  */     15350
     /* WE GO TO THE LABEL Z1 FOR OUR END-OF-JOB CLEARUP.           */     15360
     /*                                                             */     15370
     /* *********************************************************** */     15380
                                                                           15390
 E1:      CLOSE FILE(WORK);                                                15400
          NOKEYXX = NOKEYS;                                                15410
          DO I = NOKEYS TO 1 BY -1;                                        15420
             IF ARTOT_GR03(I) = 'T' THEN GO TO TTTTT;                      15430
             NOKEYXX = NOKEYXX - 1;                                        15440
          END;                                                             15450
 TTTTT:                                                                    15460
                                                /* THE FOLLOWING CODE */   15470
                                                /* PRINTS A PARROT AT */   15480
                                                /* THE HEAD OF THE    */   15490
                                                /* REPORT             */   15500
          OPEN FILE(SYSLIN) INPUT;                                         15510
          ON ENDFILE(SYSLIN) GO TO ENDLOGO;                                15520
 LOGO:    READ FILE(SYSLIN) INTO(BLANKLINE);                               15530
          WRITE FILE(PRINT) FROM(BLANKLINE);                               15540
          GO TO LOGO;                                                      15550
 ENDLOGO: CLOSE FILE(SYSLIN);                                              15560
          BLANKLINE = '0                   '                               15570
                      || HEAD_HEADA                                        15580
                      || FILE_HEADA                                        15590
                      || DATE_HEADA;                                       15600
          WRITE FILE(PRINT) FROM(BLANKLINE);                               15610
                                                                           15620
          OPEN FILE(SYSUT1) INPUT;                                         15630
                                        /* RESET BLANK LINE HAVING  */     15650
                                        /* FINISHED PRINTING CARDS. */     15660
          BLANKLINE = ' ';                                                 15670
                                        /* SORT NOT REQUIRED.       */     15850
                                        /* LOOP ROUND PROCEDURES.   */     15860
 E15:     CALL SRTIN;                                                      15870
          IF EOFSW THEN GO TO Z1;                                          15880
          CALL SRTOUT(INREC);                                              15890
          GO TO E15;                                                       15900
                                                                           15910
                                                                           15920
     /* *********************************************************** */     15930
     /*                                                             */     15940
     /* THIS SMALL SUBROUTINE MERELY READS IN THE CONTROL CARDS,    */     15950
     /* PRINTS THEM, AND RETURNS TO THE INVOCATION POINT.           */     15960
     /*                                                             */     15970
     /* *********************************************************** */     15980
                                                                           15990
 R1:      READ FILE(WORK) INTO(INCARD);                                    16000
          BLANKLINE = ' ' || INCARD;                                       16010
          WRITE FILE(PRINT) FROM(BLANKLINE);                               16020
         IF DES_GR01 = 'GR99' THEN GO TO R1;                               16030
          GO TO REXIT;                                                     16040
                                                                           16050
                                                                           16060
     /* *********************************************************** */     16070
     /*                                                             */     16080
     /* END-OF-JOB CLEARUP ROUTINE. AT THIS POINT WE HAVE JUST      */     16090
     /* PRINTED THE LAST DETAIL RECORD, BUT HAVE YET TO PRINT THE   */     16100
     /* TOTALS FOR THE LAST KEY.                                    */     16110
     /*     WE DO THIS BY CALLING SUBROUTINES OF SRTOUT, USING ISW  */     16120
     /* TO SIGNIFY THAT WE DO NOT WANT THE COMPLETE PROCESSING OF   */     16130
     /* THAT PROCEDURE, MERELY PART OF IT.                          */     16140
     /*                                                             */     16150
     /*     HAVING PRINTED THE TOTALS FOR THE FOUR KEYS, WE THEN    */     16160
     /* PRINT A GRAND TOTAL FOR THE FILE, AGAIN USING A SUBROUTINE  */     16170
     /* OF SRTOUT. THEN WE CLOSE THE FILES AND END THE JOB.         */     16180
     /*                                                             */     16190
     /* *********************************************************** */     16200
                                                                           16210
 Z1:      ISW = 2;                                                         16220
          CALL SRTOUT (INREC);                                             16230
          ISW = 3;                                                         16240
          CALL SRTOUT (INREC);                                             16250
          ISW = 4;                                                         16260
          CALL SRTOUT (INREC);                                             16270
          ISW = 5;                                                         16280
          CALL SRTOUT (INREC);                                             16290
          ISW = 6;                                                         16300
          CALL SRTOUT(INREC);                                              16310
          ISW = 7;                                                         16320
          CALL SRTOUT(INREC);                                              16330
          ISW = 8;                                                         16340
          CALL SRTOUT(INREC);                                              16350
          ISW = 9;                                                         16360
          CALL SRTOUT(INREC);                                              16370
                                        /* SET UP GRAND TOTAL LINE. */     16380
 Z5:      KEY_LINE  = 'GRAND TOTAL FOR FILE:';                             16390
          NAME_LINE = '*********    COUNT=';                               16400
                                        /* TOTAL RECORD COUNT.      */     16410
          CNT_LINE = ARCNT(9);                                             16420
          BYTE_LINE = '-';                                                 16430
                                        /* PRINT LINE.              */     16440
          ISW = 10;                                                        16450
          IF PRTOTAL THEN                                                  16460
          CALL SRTOUT (INREC);                                             16470
                                                                           16480
                                                                           16550
                                     /* TELL OF ERRORS FOUND        */     16560
      IF ERRORSW                                                           16570
      THEN DO;                                                             16580
          BYTE_LINE = '1';                                                 16590
          KEY_LINE = ' ';                                                  16600
          NAME_LINE = ' ';                                                 16610
          VALUEX_LINE = ' ';                                               16620
          WRITE FILE(PRINT) FROM(LINEA);                                   16630
          KEY_LINE = 'WARNING : ERRORS FOUND';                             16640
          WRITE FILE(PRINT) FROM(LINEA);                                   16650
             IF LITESW                                                     16660
             THEN DO;                                                      16670
                 BYTE_LINE = ' ';                                          16680
                 KEY_LINE = 'TOO MANY NUMERIC LITERALS';                   16690
                 VALUEX_LINE = '( EXCESS FIELDS SET TO 0 )';               16700
                 WRITE FILE(PRINT) FROM(LINEA);                            16710
             END;                                                          16720
          BYTE_LINE = ' ';                                                 16730
             IF LIT20SW                                                    16740
             THEN DO;                                                      16750
                 BYTE_LINE = ' ';                                          16760
                 KEY_LINE = 'MORE THAN 20 OPERANDS IN 1 GR07';             16770
                 VALUEX_LINE = '( EXCESS OPERANDS IGNORED )';              16780
                 WRITE FILE(PRINT) FROM(LINEA);                            16790
             END;                                                          16800
             IF ERR0DIV                                                    16810
             THEN DO;                                                      16820
          KEY_LINE = '  NO. OF ATTEMPTS TO DIVIDE BY 0 :';                 16830
          NAME_LINE = '             COUNT=';                               16840
          VALUEX_LINE = '( RESULT FIELDS SET TO 0 )';                      16850
          CNT_LINE = ZERO_DIVIDE_COUNT;                                    16860
          WRITE FILE(PRINT) FROM(LINEA);                                   16870
             END;                                                          16880
      END;                                                                 16890
                                                                           16900
                                        /* CLOSE FILES - END JOB.   */     16910
 Z6:      CLOSE FILE(SYSUT1);                                              16920
          CLOSE FILE(PRINT);                                               16930
                                                                           16950
                                                                           16960
     /* *********************************************************** */     16970
     /*                                                             */     16980
     /* THE NEXT PROCEDURE, SRTIN, READS THROUGH THE INPUT DATA     */     16990
     /* FILE, AND PERFORMS THE SELECTION TESTS SPECIFIED ON THE     */     17000
     /* GR02 CARDS.                                                 */     17010
     /*    THESE LATTER ARE ON AN 'OR' BASIS, WITH THE TESTS ON     */     17020
     /* EACH CARD BEING 'AND'. THAT IS, IF ANY ONE OF THE SELECTION */     17030
     /* CARDS OK'S A RECORD, THE RECORD IS ACCEPTED; BUT FOR A      */     17040
     /* RECORD TO BE OK IT MUST PASS EVERY TEST ON THE CARD.        */     17050
     /*    SO, THROUGHOUT THE CODING, THE POINTER 'I' IS SCANNING   */     17060
     /* DOWN THE GR02 CARDS, AND WITHIN EACH CARD, THE POINTER 'J'  */     17070
     /* SCANS ACROSS THE FOUR TESTS.                                */     17080
     /*    ON ENDFILE OF THE INPUT DATA, WE EITHER CALL IHESARC,    */     17090
     /* TO TELL THE SORT THERE ARE NO MORE RECORDS, OR SET EOFSW ON */     17100
     /* DEPENDING ON WHETHER OR NOT THE RECORDS ARE TO BE SORTED.   */     17110
     /*                                                             */     17120
     /* *********************************************************** */     17130
                                                                           17140
 SRTIN:   PROC RETURNS(CHAR(2000) VARYING);                                17150
                                                                           17160
          ON ENDFILE(SYSUT1)                                               17170
          BEGIN;                                                           17180
          EOFSW = '1'B;                                                    17190
                GO TO ENDIN;                                               17320
          END;                                                             17330
                                                                           17340
                                        /* READ NEXT DATA RECORD.   */     17350
 E2:      READ FILE(SYSUT1) INTO(INREC);                                   17360
                                        /* IF NO TESTS, PASS RECORD */     17370
          IF ICARD = 0 THEN GO TO RETREC;                                  17380
                                        /* SCAN THROUGH CARDS       */     17390
          DO I = 1 TO ICARD;                                               17400
                                        /* SCAN TESTS ON CARD.      */     17410
             DO J = 1 TO 4;                                                17420
                                        /* ALL TESTS OK-PASS RECORD */     17430
                IF ARTYP(I,J) = '  ' THEN GO TO RETREC;                    17440
                                        /* LENGTH & POSN OF TEST.   */     17450
                L = ARLEN(I,J);                                            17460
                M = ARPOS(I,J);                                            17470
                                                                           17480
                IF ARPAK(I,J) = 'P'                                        17490
                                        /* FIELD ON FILE IS PACKED. */     17500
                                        /* UNPACK VIA PREC TO NREC. */     17510
                THEN DO;                                                   17520
                        PREC = 0;                                          17530
                        L1 = 7 - L;                                        17540
                        SUBSTR(ZREC,L1,L) = SUBSTR(INREC,M,L);             17550
                        NREC = PREC;                                       17560
                        GO TO E3;                                          17570
                     END;                                                  17580
                                                                           17590
                IF ARN(I,J)                                                17600
                                        /* FIELD HEX AND ALPHA,     */     17610
                                        /* PUT STRAIGHT INTO XREC.  */     17620
                THEN DO;                                                   17630
                        XREC = SUBSTR(INREC,M,L);                          17640
                     END;                                                  17650
                                        /* FIELD HEX AND NUMERIC.   */     17660
                                        /* RIGHT-ALIGN IN NREC.     */     17670
                ELSE DO;                                                   17680
                      XREC = '00000000000';                                17690
                        L1 = 12 - L;                                       17700
                        SUBSTR(XREC,L1,L) = SUBSTR(INREC,M,L);             17710
                     END;                                                  17720
                                                                           17730
 E3:            ABIT = ARN(I,J);                                           17740
                                        /* IF ALPHA, SET TEST VALUE */     17750
                                        /* IN XLIT. IF NUMERIC, SET */     17760
                                        /* IT IN PLIT.              */     17770
                IF ABIT                                                    17780
                THEN XLIT = ARLIT(I,J);                                    17790
                ELSE DO;                                                   17800
                        PREC = NREC;                                       17810
                        PLIT = ARNUM(I,J);                                 17820
                     END;                                                  17830
                                                                           17840
     /* *********************************************************** */     17850
     /*                                                             */     17860
     /* AT THIS POINT, THE FILE VALUE IS IN XREC/PREC, AND THE GR02 */     17870
     /* TEST VALUE IN XLIT/PLIT, DEPENDING ON ALPHA/NUM. WE NOW     */     17880
     /* PUT THE TEST VALUE (EQ, NE, GT, LT) IN 'LABL' AND MAKE THE  */     17890
     /* TEST. FOR EXAMPLE, WITH THE 'EQ' TEST (THE OTHERS ARE       */     17900
     /* ANALOGOUS), LEQ TESTS THE NUMERIC, LEQ1 THE ALPHA VALUES.   */     17910
     /* IF THE TEST IS PASSED, WE GO TO JEX AND RETURN FOR THE NEXT */     17920
     /* TEST ON THE CARD. IF FAILED, IEX TAKES US TO THE NEXT CARD. */     17930
     /*                                                             */     17940
     /* *********************************************************** */     17950
                                                                           17960
                LABL = ARTYP(I,J);                                         17970
                                                                           17980
                IF LABL = 'EQ' THEN GO TO LEQ;                             17990
                IF LABL = 'NE' THEN GO TO LNE;                             18000
                IF LABL = 'GT' THEN GO TO LGT;                             18010
                IF LABL = 'LT' THEN GO TO LLT;                             18020
                                                                           18030
 LEQ:           IF ABIT THEN GO TO LEQ1;                                   18040
                IF PLIT = PREC THEN GO TO JEX;                             18050
               GO TO IEX;                                                  18060
 LEQ1:          IF XLIT = XREC THEN GO TO JEX;                             18070
               GO TO IEX;                                                  18080
 LNE:           IF ABIT THEN GO TO LNE1;                                   18090
                IF PLIT = PREC THEN GO TO IEX;                             18100
               GO TO JEX;                                                  18110
 LNE1:          IF XLIT = XREC THEN GO TO IEX;                             18120
               GO TO JEX;                                                  18130
 LGT:           IF ABIT THEN GO TO LGT1;                                   18140
                IF PLIT < PREC THEN GO TO JEX;                             18150
               GO TO IEX;                                                  18160
 LGT1:          IF XLIT < XREC THEN GO TO JEX;                             18170
               GO TO IEX;                                                  18180
 LLT:           IF ABIT THEN GO TO LLT1;                                   18190
                IF PLIT > PREC THEN GO TO JEX;                             18200
               GO TO IEX;                                                  18210
 LLT1:          IF XLIT > XREC THEN GO TO JEX;                             18220
               GO TO IEX;                                                  18230
                                                                           18240
 JEX:        END;                                                          18250
                                        /* IF WE DROP PAST HERE,    */     18260
                                        /* ALL 4 TESTS ON CARD OK,  */     18270
                                        /* SO PASS RECORD OUT.      */     18280
             GO TO RETREC;                                                 18290
                                                                           18300
 IEX:     END;                                                             18310
                                        /* IF WE DROP PAST HERE, NO */     18320
                                        /* CARD OK'D THE RECORD, SO */     18330
                                        /* DROP IT & READ THE NEXT. */     18340
          GO TO E2;                                                        18350
                                                                           18360
 RETREC:                                                                   18370
                                        /* PASS THE RECORD ACROSS.  */     18440
          RETURN (INREC);                                                  18450
                                        /* END OF PROCEDURE SRTIN.  */     18460
 ENDIN:   END SRTIN;                                                       18470
                                                                           18480
                                                                           18490
     /* *********************************************************** */     18500
     /*                                                             */     18510
     /* THE NEXT PROCEDURE, SRTOUT, PROCESSES EACH RECORD PASSED.   */     18520
     /*                                                             */     18530
     /* THE MAINSTREAM CODING IS IN LABELS F2 THRU I2, WHICH .....  */     18540
     /*   1) UNPACKS THE KEYS FROM THE RECORD.                      */     18550
     /*   2) CHECKS IF THE SAME KEYS AS PREVIOUS RECORD (WITH       */     18560
     /*      NORMAL FIRST-TIME SAFEGUARDS).                         */     18570
     /*   3) PRINTS THE PREVIOUS KEYS TOTALS IF THEY DIFFER.        */     18580
     /*   4) UNPACKS THE VALUE FIELDS FROM THE RECORD.              */     18590
     /*   5) PERFORMS THE REQUIRED ARITHMETIC ON THESE FIELDS.      */     18600
     /*   6) PRINTS THE RECORD DETAIL IF REQUIRED.                  */     18610
     /*                                                             */     18620
     /* ADDITIONALLY, THERE ARE SEVERAL INTERNAL SUBROUTINES CALLED */     18630
     /*                                                             */     18640
     /*   T1    UNPACKS THE KEYS FROM THE FILE.                     */     18650
     /*   TOTS  SETS UP THE KEY TOTAL BREAKS FOR PRINTING.          */     18660
     /*   P1    PRINTS THE PAGE HEADING.                            */     18670
     /*   S1    PRINTS A DETAIL/TOTAL LINE.                         */     18680
     /*   AUG1  ADDS THE KEY TOTALS INTO THE NEXT LEVEL UP.         */     18690
     /*                                                             */     18700
     /* *********************************************************** */     18710
                                                                           18720
 SRTOUT:  PROC (INREC);                                                    18730
                                                                           18740
          DCL INREC CHAR(2000) VARYING;                                    18750
                                                                           18760
                                        /* COUNT RCDS OUT FROM SORT */     18770
                                                                           18790
     /* *********************************************************** */     18800
     /*                                                             */     18810
     /* IT HAS BEEN MENTIONED THAT THE END-OF-JOB ROUTINE USES      */     18820
     /* SUBROUTINES OF THIS PROCEDURE. SO ON ENTRY WE FIRST TEST    */     18830
     /* ISW. IF ZERO, THE WHOLE SRTOUT PROCEDURE IS REQUIRED & WE   */     18840
     /* PASS TO F1. IF NON-ZERO, WE SET THE ROUTINE EXIT LABELS     */     18850
     /* REXIT AND LEXIT TO THE END OF SRTOUT, AND PASS TO THE       */     18860
     /* REQUIRED ROUTINE.                                           */     18870
     /*                                                             */     18880
     /* *********************************************************** */     18890
                                                                           18900
          IF ISW = 0 THEN GO TO F1;                                        18910
                                        /* SET LABELS TO END SRTOUT */     18920
          REXIT = NEXTREC;                                                 18930
          LEXIT = NEXTREC;                                                 18940
                                        /* GO TO RELEVANT ROUTINE.  */     18950
          I = ISW;                                                         18960
          IF I = 10 THEN DO;                                               18970
          PEXIT = F0;                                                      18980
              GO TO P1;                                                    18990
 F0:          LEXIT = NEXTREC;                                             19000
              GO TO S1;                                                    19010
          END;                                                             19020
          GO TO TOTS;                                                      19030
                                                                           19050
     /* *********************************************************** */     19060
     /*                                                             */     19070
     /* THE NEXT SECTION, WITH LABELS 'F', UNPACKS THE KEYS FROM    */     19080
     /* THE RECORD, CALLING THE SUBROUTINE T1 WHICH PUTS THE I'TH   */     19090
     /* KEY INTO VARIABLE KEY4. IT ONLY UNPACKS AS MANY KEYS AS ARE */     19100
     /* REQUIRED (NOKEYS), PASSING TO LABEL G1 WHEN THIS IS DONE.   */     19110
     /*                                                             */     19120
     /* *********************************************************** */     19130
                                                                           19140
 F1:      I = 1;                                                           19150
                                        /* UNPACK FIRST KEY (I = 1) */     19160
          REXIT = F2;                                                      19170
          GO TO T1;                                                        19180
                                        /* SET IN 'KEY1'.           */     19190
 F2:      KEY1 = KEY8;                                                     19200
                                        /* IF ONLY ONE KEY, GO OUT. */     19210
          IF NOKEYS = 1 THEN GO TO G1;                                     19220
                                        /* REPEAT FOR SECOND KEY.   */     19230
          I = 2;                                                           19240
          REXIT = F3;                                                      19250
          GO TO T1;                                                        19260
 F3:      KEY2 = KEY8;                                                     19270
          IF NOKEYS = 2 THEN GO TO G1;                                     19280
                                        /* REPEAT FOR THIRD KEY.    */     19290
          I = 3;                                                           19300
          REXIT = F4;                                                      19310
          GO TO T1;                                                        19320
 F4:      KEY3 = KEY8;                                                     19330
          IF NOKEYS = 3 THEN GO TO G1;                                     19340
                                        /* REPEAT FOR LAST KEY.     */     19350
          I = 4;                                                           19360
          REXIT = F5;                                                      19370
          GO TO T1;                                                        19380
 F5:      KEY4 = KEY8;                                                     19390
          IF NOKEYS = 4 THEN GO TO G1;                                     19400
          I = 5;                                                           19410
          REXIT = F6;                                                      19420
          GO TO T1;                                                        19430
 F6:      KEY5 = KEY8;                                                     19440
          IF NOKEYS = 5 THEN GO TO G1;                                     19450
          I = 6;                                                           19460
          REXIT = F7;                                                      19470
          GO TO T1;                                                        19480
 F7:      KEY6 = KEY8;                                                     19490
          IF NOKEYS = 6 THEN GO TO G1;                                     19500
          I = 7;                                                           19510
          REXIT = F8;                                                      19520
          GO TO T1;                                                        19530
 F8:      KEY7 = KEY8;                                                     19540
          IF NOKEYS = 7 THEN GO TO G1;                                     19550
          I = 8;                                                           19560
          REXIT = G1;                                                      19570
          GO TO T1;                                                        19580
     /* *********************************************************** */     19590
     /*                                                             */     19600
     /* THE LABELS 'G' TEST THE CURRENT KEY VALUES AGAINST THE      */     19610
     /* PREVIOUS ONES. IF THEY DIFFER, 'TOTS' IS CALLED TO PRINT    */     19620
     /* THE PREVIOUS KEYS TOTALS, IF REQUIRED.                      */     19630
     /*                                                             */     19640
     /*    AS THERE ARE NO PREVIOUS KEYS FOR THE FIRST RECORD, THE  */     19650
     /* LASTKEYS ARE SET EQUAL, TO BYPASS THE TOTALS.               */     19660
     /*                                                             */     19670
     /*    IN CALLING 'TOTS', THE PARAMETER I PASSED POINTS TO THE  */     19680
     /* ACCUMULATOR IN ARRAY2 WHICH HOLDS THE RELEVANT VALUES. SO   */     19690
     /* I = 2 FOR KEY4, 3 FOR KEY3, 4 FOR KEY2, 5 FOR KEY1 (MAJOR). */     19700
     /*                                                             */     19710
     /* *********************************************************** */     19720
                                                                           19730
 G1:      IF FIRST_TIME                                                    19740
                                        /* RESET SWITCH & MOVE KEYS */     19750
          THEN DO;                                                         19760
                  FIRST_TIME = '0'B;                                       19770
                  LASTKEY1 = KEY1;                                         19780
                  LASTKEY2 = KEY2;                                         19790
                  LASTKEY3 = KEY3;                                         19800
                  LASTKEY4 = KEY4;                                         19810
                  LASTKEY5 = KEY5;                                         19820
                  LASTKEY6 = KEY6;                                         19830
                  LASTKEY7 = KEY7;                                         19840
                  LASTKEY8 = KEY8;                                         19850
               END;                                                        19860
                                                                           19870
          IF KEY1 ^= LASTKEY1                                              19880
                                        /* MAJOR KEY CHANGE.        */     19890
          THEN DO;                                                         19900
                  REXIT = G2;                                              19910
                                        /* ALL FOUR KEY TOTALS.     */     19920
                  DO I = 2 TO 9;                                           19930
                     GO TO TOTS;                                           19940
 G2:              END;                                                     19950
                  GO TO H1;                                                19960
               END;                                                        19970
                                                                           19980
          IF KEY2 ^= LASTKEY2                                              19990
                                        /* KEY2 CHANGE              */     20000
          THEN DO;                                                         20010
                  REXIT = G3;                                              20020
                                        /* TOTALS FOR KEYS 4, 3 & 2 */     20030
                  DO I = 2 TO 8;                                           20040
                     GO TO TOTS;                                           20050
 G3:              END;                                                     20060
                  GO TO H1;                                                20070
               END;                                                        20080
                                                                           20090
          IF KEY3 ^= LASTKEY3                                              20100
                                        /* KEY3 CHANGE              */     20110
          THEN DO;                                                         20120
                  REXIT = G4;                                              20130
                                        /* TOTALS FOR KEYS 4 & 3.   */     20140
                  DO I = 2 TO 7;                                           20150
                     GO TO TOTS;                                           20160
 G4:              END;                                                     20170
                  GO TO H1;                                                20180
               END;                                                        20190
                                                                           20200
          IF KEY4 ^= LASTKEY4                                              20210
                                        /* KEY4 CHANGE, TOTAL KEY4. */     20220
          THEN DO;                                                         20230
                  REXIT = G5;                                              20240
                  DO I = 2 TO 6;                                           20250
                  GO TO TOTS;                                              20260
 G5:              END;                                                     20270
                  GO TO H1;                                                20280
               END;                                                        20290
          IF KEY5 ^= LASTKEY5                                              20300
          THEN DO;                                                         20310
                  REXIT = G6;                                              20320
                  DO I = 2 TO 5;                                           20330
                     GO TO TOTS;                                           20340
 G6:              END;                                                     20350
                  GO TO H1;                                                20360
               END;                                                        20370
          IF KEY6 ^= LASTKEY6                                              20380
          THEN DO;                                                         20390
                  REXIT = G7;                                              20400
                  DO I = 2 TO 4;                                           20410
                     GO TO TOTS;                                           20420
 G7:              END;                                                     20430
                  GO TO H1;                                                20440
               END;                                                        20450
          IF KEY7 ^= LASTKEY7                                              20460
          THEN DO;                                                         20470
                  REXIT = G8;                                              20480
                  DO I = 2 TO 3;                                           20490
                     GO TO TOTS;                                           20500
 G8:              END;                                                     20510
                  GO TO H1;                                                20520
               END;                                                        20530
          IF KEY8 ^= LASTKEY8                                              20540
          THEN DO;                                                         20550
                  REXIT = H1;                                              20560
                  I = 2;                                                   20570
                     GO TO TOTS;                                           20580
               END;                                                        20590
                                                                           20600
          GO TO H2;                                                        20610
                                                                           20620
 H1:      LASTKEY1 = KEY1;                                                 20630
          LASTKEY2 = KEY2;                                                 20640
          LASTKEY3 = KEY3;                                                 20650
          LASTKEY4 = KEY4;                                                 20660
          LASTKEY5 = KEY5;                                                 20670
          LASTKEY6 = KEY6;                                                 20680
          LASTKEY7 = KEY7;                                                 20690
          LASTKEY8 = KEY8;                                                 20700
                                                                           20710
     /* *********************************************************** */     20720
     /*                                                             */     20730
     /* THE NEXT BLOCK OF CODING UNPACKS THE VALUE FIELDS (AS       */     20740
     /* SPECIFIED IN THE GR04 CARDS) FROM THE RECORD, AND PLACES    */     20750
     /* THEM IN THEIR CORRECT PLACE IN THE ARRAY 'VALUES'.          */     20760
     /*                                                             */     20770
     /* *********************************************************** */     20780
                                                                           20790
 H2:      DO I = 1 TO NOFLD;                                               20800
                                        /* LENGTH & POSITION.       */     20810
          DO IP1 = 1 TO 3;                                                 20820
             IF ARSTYP_GR04(I,IP1) = ' ' THEN GO TO H207;                  20830
             L = ARSLEN_GR04(I,IP1);                                       20840
             M = ARSPOS_GR04(I,IP1);                                       20850
             IF ARSPAK_GR04(I,IP1) = 'P'                                   20860
             THEN DO;                                                      20870
                     PREC = 0;                                             20880
                     L1 = 7 - L;                                           20890
                     SUBSTR(ZREC,L1,L) = SUBSTR(INREC,M,L);                20900
                     NREC = PREC;                                          20910
                     GO TO H203;                                           20920
                  END;                                                     20930
             IF ARSN_GR04(I,IP1)                                           20940
             THEN XREC = SUBSTR(INREC,M,L);                                20950
             ELSE DO;                                                      20960
                     XREC = '00000000000';                                 20970
                     L1 = 12 - L;                                          20980
                     SUBSTR(XREC,L1,L) = SUBSTR(INREC,M,L);                20990
                  END;                                                     21000
 H203:       ABIT = ARSN_GR04(I,IP1);                                      21010
             IF ABIT                                                       21020
             THEN XLIT = ARSLIT_GR04(I,IP1);                               21030
             ELSE DO;                                                      21040
                     PREC = NREC;                                          21050
                     PLIT = ARSNUM_GR04(I,IP1);                            21060
                  END;                                                     21070
             LABL = ARSTYP_GR04(I,IP1);                                    21080
             IF LABL = 'EQ' THEN GO TO H2EQ;                               21090
             IF LABL = 'NE' THEN GO TO H2NE;                               21100
             IF LABL = 'GT' THEN GO TO H2GT;                               21110
             IF LABL = 'LT' THEN GO TO H2LT;                               21120
 H2EQ:       IF ABIT THEN GO TO H2EQ1;                                     21130
             IF PLIT = PREC THEN GO TO H206;                               21140
             GO TO H208;                                                   21150
 H2EQ1:      IF XLIT = XREC THEN GO TO H206;                               21160
              GO TO H208;                                                  21170
 H2NE:       IF ABIT THEN GO TO H2NE1;                                     21180
             IF PLIT = PREC THEN GO TO H208;                               21190
             GO TO H206;                                                   21200
 H2NE1:      IF XLIT = XREC THEN GO TO H208;                               21210
              GO TO H206;                                                  21220
 H2GT:       IF ABIT THEN GO TO H2GT1;                                     21230
             IF PLIT < PREC THEN GO TO H206;                               21240
             GO TO H208;                                                   21250
 H2GT1:      IF XLIT < XREC THEN GO TO H206;                               21260
              GO TO H208;                                                  21270
 H2LT:       IF ABIT THEN GO TO H2LT1;                                     21280
             IF PLIT > PREC THEN GO TO H206;                               21290
             GO TO H208;                                                   21300
 H2LT1:      IF XLIT > XREC THEN GO TO H206;                               21310
              GO TO H208;                                                  21320
 H206:    END;                                                             21330
 H207:                                                                     21340
             L = ARLEN_GR04(I);                                            21350
             M = ARPOS_GR04(I);                                            21360
                                                                           21370
             IF ARPAK_GR04(I) = 'P'                                        21380
                                        /* PACKED NUMERIC -         */     21390
                                        /* TO MIDVAL VIA PREC.      */     21400
             THEN DO;                                                      21410
                     PREC = 0;                                             21420
                     L1 = 7 - L;                                           21430
                     SUBSTR(ZREC,L1,L) = SUBSTR(INREC,M,L);                21440
                     MIDVAL = PREC;                                        21450
                  END;                                                     21460
                                        /* UNPACKED NUMERIC -       */     21470
                                        /* TO MIDVAL VIA NREC.      */     21480
             ELSE DO;                                                      21490
                     NREC = 0;                                             21500
                     L1 = 12 - L;                                          21510
                     SUBSTR(XREC,L1,L) = SUBSTR(INREC,M,L);                21520
                     MIDVAL = NREC;                                        21530
                  END;                                                     21540
                                                                           21550
                                        /* SUBSCRIPT OF FIELD NAME  */     21560
           J = ARFLD_GR04(I);                                              21570
                                        /* INSERT FIELD IN ARRAY.   */     21580
             VALUE1 = MIDVAL;                                              21590
             IF ARDEC_GR04(I) = 1 THEN VALUE1 = VALUE1 / 10;               21600
             IF ARDEC_GR04(I) = 2 THEN VALUE1 = VALUE1 / 100;              21610
             IF ARDEC_GR04(I) = 3 THEN VALUE1 = VALUE1 / 1000;             21620
             IF ARDEC_GR04(I) = 4 THEN VALUE1 = VALUE1 / 10000;            21630
             IF ARDEC_GR04(I) = 5 THEN VALUE1 = VALUE1 / 100000;           21640
             IF ARDEC_GR04(I) = 6 THEN VALUE1 = VALUE1 / 1000000;          21650
             VALUES(J,1) = VALUE1;                                         21660
                                        /* REPEAT FOR NEXT FIELD.   */     21670
 H208:    END;                                                             21680
                                                                           21690
     /* *********************************************************** */     21700
     /*                                                             */     21710
     /* NOW THE ARITHMETIC REQUIRED IS PERFORMED ON THESE FIELDS.   */     21720
     /*                                                             */     21730
     /* *********************************************************** */     21740
                                                                           21750
          IF NOARI = 0 THEN GO TO H9;                                      21760
                                                                           21770
                                        /* FOR EACH ARITH STATEMENT */     21780
          DO I = 1 TO NOARI;                                               21790
                                        /* RECEIVING FIELD ZEROED.  */     21800
 $H2:        IF ARITT(I) THEN GO TO H23;                                   21810
          IF ARIFD(I) = -1                                                 21820
          THEN DO;                                                         21830
                  J1A = ARINO(I,1);                                        21840
                  J2A = ARINO(I,3);                                        21850
                  IF ARINO(I,2) = 1 THEN GO TO $H21;                       21860
                  IF ARINO(I,2) = 2 THEN GO TO $H22;                       21870
                  IF ARINO(I,2) = 3 THEN GO TO $H23;                       21880
                  IF ARINO(I,2) = 4 THEN GO TO $H24;                       21890
                  GO TO $H4;                                               21900
 $H21:            IF VALUES(J1A,1)  = VALUES(J2A,1)                        21910
                  THEN GO TO $H3;                                          21920
                  GO TO $H4;                                               21930
 $H22:            IF VALUES(J1A,1) ^= VALUES(J2A,1)                        21940
                  THEN GO TO $H3;                                          21950
                  GO TO $H4;                                               21960
 $H23:            IF VALUES(J1A,1)  > VALUES(J2A,1)                        21970
                  THEN GO TO $H3;                                          21980
                  GO TO $H4;                                               21990
 $H24:            IF VALUES(J1A,1)  < VALUES(J2A,1)                        22000
                  THEN GO TO $H3;                                          22010
                  GO TO $H4;                                               22020
 $H3:             J1A = ARINO(I,5);                                        22030
                  VALUES(J1A,1) = VALUES(J1A,1) + 1;                       22040
 IF ARINO(I,4) < 0 & BYTE_LINE ^= CBYT THEN LTOTSW = '1'B;                 22050
             IF ARINO(I,4) = -1                                            22060
             THEN DO;                                                      22070
                  SKIPPRINT = '1'B;                                        22080
                  GO TO H9;                                                22090
                END;                                                       22100
          IF ARINO(I,4) = -2                                               22110
          THEN GO TO NEXTREC;                                              22120
                  I = ARINO(I,4);                                          22130
                  GO TO $H2;                                               22140
 $H4:             GO TO H23;                                               22150
               END;                                                        22160
             VALUED = 0;                                                   22170
                                        /* FOR EACH OPERATOR ....   */     22180
             DO J = 1 TO ARILN(I);                                         22190
                                        /* SUBSCRIPT OF OPERAND     */     22200
                K1 = ARINO(I,J);                                           22210
                IF ARICN(I,J)                                              22220
                THEN VALUEP = VALIT(K1);     /* CONSTANT OR VARIABLE? */   22230
          ELSE DO;                                                         22240
                  IF K1 < 0                                                22241
                  THEN VALUEP = SCALARS(-100-K1);                          22242
                  ELSE VALUEP = VALUES(K1,1);                              22243
               END;                                                        22244
                IF ARISN(I,J) = '-'          /* IF NEGATIVE PREFIX.   */   22250
                THEN VALUEP = -VALUEP;                                     22260
                IF ARIOP(I,J) = '+' THEN VALUED = VALUED + VALUEP;         22270
                IF ARIOP(I,J) = '-' THEN VALUED = VALUED - VALUEP;         22280
                IF ARIOP(I,J) = '*'                                        22290
                THEN DO;                     /* PERFORM ARITHMETIC.   */   22300
                        VALUE1 = VALUED;                                   22310
                        VALUE2 = VALUEP;                                   22320
                        VALUE = VALUE1 * VALUE2;                           22330
                        VALUED = ROUND(VALUE,4);                           22340
                     END;                                                  22350
            IF ARIOP(I,J) = '/'                                            22360
            THEN DO;                                                       22370
                IF VALUEP ^= 0 THEN GO TO H21;                             22380
                VALUED = 0;                                                22390
                ZERO_DIVIDE_COUNT = ZERO_DIVIDE_COUNT + 1;                 22400
                ERRORSW = '1'B;                                            22410
          ERR0DIV = '1'B;                                                  22420
                GOTO H22;                                                  22430
 H21:           VALUE1 = VALUED;                                           22440
                VALUE2 = VALUEP;                                           22450
                VALUE = VALUE1 / VALUE2;                                   22460
                VALUED = ROUND(VALUE,4);                                   22470
 H22:                                                                      22480
            END;                                                           22490
                                                                           22500
                                        /* GET NEXT OPERAND.        */     22510
             END;                                                          22520
             K = ARIFD(I);                                                 22530
          IF K < 0                                                         22531
          THEN SCALARS(-100-K) = VALUED;                                   22532
          ELSE                                                             22533
             VALUES(K,1) = VALUED;                                         22540
 H23:                                                                      22550
                                        /* TO NEXT ARITH STATEMENT. */     22560
          END;                                                             22570
                                                                           22580
     /* *********************************************************** */     22590
     /*                                                             */     22600
     /* HAVING FINALLY ARRIVED AT THE RESULT VALUES,                */     22610
     /* WE NEXT AUGMENT THE LOWEST LEVEL                            */     22620
     /* RECORD COUNT. THIS FINISHES THE CURRENT PROCESSING OF       */     22630
     /* INREC, AND WE STORE IT IN LASTREC IN CASE KEY TOTAL         */     22640
     /* BREAKS NEED TO TAKE NAMES FROM IT.                          */     22650
     /*                                                             */     22660
     /*     THEN IF A RANGE ANALYSIS WAS REQUIRED, WE ADD THE       */     22670
     /* VALUE INTO THE CORRECT SLOT (BY RANGE) IN THE TW-ARRAY,     */     22680
     /* AND AUGMENT THE CORRESPONDING RECORD COUNT.                 */     22690
     /*                                                             */     22700
     /*     WE THEN TEST NAMESW TO TEST IF THE DETAIL LINE HAS TP   */     22710
     /* BE PRINTED, AND SET THE LINE UP FOR PRINTING IN S1.         */     22720
     /*                                                             */     22730
     /*     FINALLY, ADD THE DETAIL LEVEL ACCUMULATORS UP TO        */     22740
     /* THE NEXT (KEY4) LEVEL, AND RETURN FOR THE NEXT RECORD.      */     22750
     /*                                                             */     22760
     /* *********************************************************** */     22770
                                                                           22780
 H9:                                                                       22790
                                        /* AUGMENT RECORD COUNT.    */     22800
          ARCNT(1) = ARCNT(1) + 1;                                         22810
                                        /* STORE CURRENT RECORD.    */     22820
          LASTREC = INREC;                                                 22830
                                                                           22840
                                                                           22940
                                        /* SIGNAL DETAIL LINE.      */     22950
          I = 1;                                                           22960
                                        /* IS DETAIL PRINT REQUIRED */     22970
          IF ^NAMESW THEN GO TO I2;                                        22980
          IF SKIPPRINT                                                     22990
          THEN DO;                                                         23000
                  SKIPPRINT = '0'B;                                        23010
                  GO TO I2;                                                23020
               END;                                                        23030
                                        /* IS NEW PAGE NEEDED?      */     23040
          IF LINECT > LINECX                                               23050
          THEN DO;                                                         23060
          PEXIT = I1;                                                      23070
                  GO TO P1;                                                23080
               END;                                                        23090
                                        /* SET UP KEYS IN LINE.     */     23100
 I1:                                                                       23110
                                        /* TOTAL JUST PRINTED, SKIP */     23160
          IF LTOTSW THEN BYTE_LINE = '-';                                  23170
                    ELSE BYTE_LINE = CBYT;                                 23180
                                        /* RESET TOTAL SWITCH.      */     23190
          LTOTSW = '0'B;                                                   23200
                                        /* NAME ASSCTD WITH DETAIL? */     23210
                                        /* GO TO PRINT LINE.        */     23250
          LEXIT = I2;                                                      23260
          GO TO S1;                                                        23270
                                        /* SET EXIT FOR NEXT RECORD */     23280
 I2:      LEXIT = NEXTREC;                                                 23290
          J = 2;                                                           23300
                                        /* ADD UP ACCUMULATORS.     */     23310
          GO TO AUG1;                                                      23320
                                                                           23330
                                                                           23340
                                                                           23350
                                                                           23360
     /* *********************************************************** */     23370
     /*                                                             */     23380
     /* THE FOLLOWING SUBROUTINE, T1, UNPACKS THE I'TH KEY FROM     */     23390
     /* THE RECORD, WHERE 'I' IS THE RECEIVED PARAMETER.            */     23400
     /*                                                             */     23410
     /* *********************************************************** */     23420
                                                                           23430
 T1:                                                                       23440
                                        /* LENGTH & POSITION OF KEY */     23450
          L = ARLEN_GR03(I);                                               23460
          M = ARPOS_GR03(I);                                               23470
                                                                           23480
          IF ARPAK_GR03(I) = 'P'                                           23490
                                        /* PACKED - TO PREC, NREC   */     23500
                                        /* & FINALLY TO KEY4.       */     23510
          THEN DO;                                                         23520
                  PREC = 0;                                                23530
                  L1 = 7 - L;                                              23540
                  SUBSTR(ZREC,L1,L) = SUBSTR(INREC,M,L);                   23550
                  NREC = PREC;                                             23560
                  L1 = (2 * L) - 1;                                        23570
                  L2 = 12 - L1;                                            23580
                  KEY8 = SUBSTR(XREC,L2,L1);                               23590
               END;                                                        23600
                                        /* HEX - STRAIGHT TO KEY4.  */     23610
          ELSE DO;                                                         23620
                  KEY8 = SUBSTR(INREC,M,L);                                23630
               END;                                                        23640
                                        /* END OF SUBROUTINE T1.    */     23650
          GO TO REXIT;                                                     23660
                                                                           23670
                                                                           23680
     /* *********************************************************** */     23690
     /*                                                             */     23700
     /* THE FOLLOWING SUBROUTINE, LABELS 'TOTS' THRU 'TOTEX1',      */     23710
     /* IS CALLED WHENEVER ONE OF THE FOUR KEYS CHANGES VALUE.      */     23720
     /* IT COMPRISES SOME OF THE MOST COMPLEX LOGIC IN THE ENTIRE   */     23730
     /* PROGRAM, AND THE PRECISE FLOW THROUGH THE ROUTINE DEPENDS   */     23740
     /* ON SEVERAL TESTS:                                           */     23750
     /*                                                             */     23760
     /* 1) IS THIS THE LOWEST KEY LEVEL?      NOKEY = 6-I           */     23770
     /* 2) HAVE DETAIL LINES BEEN PRINTED?    NAMESW                */     23780
     /* 3) IS A NEW PAGE NEEDED?              LINECT > 55           */     23790
     /* 4) IS A TOTAL REQUESTED FOR THIS KEY? ARTOT_GR03(6-I) = 'T' */     23800
     /* 5) IS THERE A NAME FOR THIS KEY?      ARNAM_GR03(6-I)^= 0   */     23810
     /* 6) IS A PAGE BREAK WANTED FOR IT?     ARPAG_GR03(6-I)^= ' ' */     23820
     /*                                                             */     23830
     /* DEPENDING ON THESE TESTS, IT WILL PRINT THE KEY VALUES IN   */     23840
     /* ONE OF THE FOLLOWING FORMATS (IF AT ALL):                   */     23850
     /*    (A):                                                     */     23860
     /*   -------KEY-------   --------KEY-NAME--------  ---VALUES-> */     23870
     /* OR (B):                                                     */     23880
     /*   -------KEY-------           (SPACES)          ---VALUES-> */     23890
     /* OR (C):                                                     */     23900
     /*   -------KEY-------   TOTAL **    COUNT=NNNNN   ---VALUES-> */     23910
     /* OR (D):                                                     */     23920
     /*   -------KEY-------   --------KEY-NAME--------  ---VALUES-> */     23930
     /*                       TOTAL **    COUNT=NNNNN               */     23940
     /*                                                             */     23950
     /*   JUST TO ADD TO THE DIFFICULTY, THE NUMBER OF ASTERISKS    */     23960
     /* AFTER 'TOTAL' VARIES WITH THE KEY LEVEL.                    */     23970
     /*                                                             */     23980
     /* STARTING SIMPLY, BRANCH OUT IF THE KEY DOESN'T EXIST,       */     23990
     /* AND GO TO ADD UP THE VALUE ACCUMULATORS.                    */     24000
     /*   THEN WE TEST IF A NEW PAGE IS NEEDED. WE WILL ONLY PRINT  */     24010
     /* A NEW PAGE BEFORE A LOWEST-LEVEL BREAK, SO THAT ALL TOTALS  */     24020
     /* GO ON THE SAME PAGE AS THEIR DETAIL LINES. THEREFORE, FOR A */     24030
     /* NEW PAGE, WE REQUIRE THAT THIS IS THE LOWEST LEVEL KEY, AND */     24040
     /* THAT NO DETAIL LINES ARE BEING PRINTED.                     */     24050
     /*                                                             */     24060
     /* *********************************************************** */     24070
                                                                           24080
 TOTS:    IF NOKEYS < 10-I THEN GO TO TOTEX;                               24090
                                        /* NEW PAGE NEEDED?         */     24100
                                        /* NO TOTAL PRINT- GO OUT.  */     24110
          IF ARTOT_GR03(10-I) ^= 'T' THEN GO TO TOTEX;                     24120
                                        /* SET UP KEY FLDS ON LINE. */     24130
                                        /* IS THIS LOWEST LEVEL?    */     24190
          IF NOKEYS = 10-I & ^NAMESW                                       24200
                                        /* SET LINE SPACING-DETAIL. */     24210
          THEN DO;                                                         24220
                  IF LTOTSW THEN BYTE_LINE = '-';                          24230
                            ELSE BYTE_LINE = CBYT;                         24240
                  LTOTSW = '0'B;                                           24250
               END;                                                        24260
                                        /* SET LINE SPACING - TOTAL */     24270
          ELSE DO;                                                         24280
                  IF CBYT = ' ' THEN BYTE_LINE = '0';                      24290
                                ELSE BYTE_LINE = '-';                      24300
                  LTOTSW = '1'B;                                           24310
               END;                                                        24320
                                                                           24330
     /* *********************************************************** */     24340
     /*                                                             */     24350
     /* NOW WE TEST IF A NAME EXISTS. IF SO, WE CAN PRINT A LINE    */     24360
     /* OF TYPE 'A', WHICH MAY TURN OUT TO BE THE FIRST LINE OF 'D' */     24370
     /*                                                             */     24380
     /* *********************************************************** */     24390
                                                                           24400
          IF ARNAM_GR03(10-I) ^= 0                                         24410
                                                                           24420
          THEN DO;                                                         24430
                                        /* PUT NAME INTO LINE.      */     24440
                                        /* PRINT LINE.              */     24470
                  LEXIT = TOTS1;                                           24480
                  GO TO S1;                                                24490
               END;                                                        24500
                                                                           24510
     /* *********************************************************** */     24520
     /*                                                             */     24530
     /* IF THIS IS NOT THE LOWEST LEVEL, WE NOW SET THE 'TOTAL **'  */     24540
     /* UP IN THE NAME POSITION OF THE LINE. IF IT IS, HOWEVER,     */     24550
     /* WE EITHER HAVE ALREADY PRINTED THE TYPE 'A' LINE, AND WE    */     24560
     /* EXIT, OR WE SET THE NAME POSITION BLANK FOR A TYPE 'B'.     */     24570
     /*                                                             */     24580
     /* *********************************************************** */     24590
                                                                           24600
 TOTS1:   IF NOKEYS ^= 10-I | NAMESW                                       24610
                                        /* NOT LOWEST LEVEL.        */     24620
          THEN DO;                                                         24630
               END;                                                        24670
                                        /* IS LOWEST LEVEL PRINT.   */     24680
          ELSE DO;                                                         24690
                  IF ARNAM_GR03(10-I) = 0                                  24700
                                        /* BLANK NAME (TYPE 'B').   */     24710
                  THEN NAME_LINE = ' ';                                    24720
                                        /* TYPE 'A' - ALREADY DONE. */     24730
                  ELSE GO TO TOTEX;                                        24740
               END;                                                        24750
                                                                           24760
     /* *********************************************************** */     24770
     /*                                                             */     24780
     /* IF THERE WAS NO NAME, WE HAVE EITHER A TYPE 'B' OR 'C'      */     24790
     /* SET UP, SO WE PRINT IT AND GO OUT TO TOTEX.                 */     24800
     /*                                                             */     24810
     /* *********************************************************** */     24820
                                                                           24830
          IF ARNAM_GR03(10-I) = 0                                          24840
          THEN DO;                                                         24850
                  LEXIT = TOTEX;                                           24860
                  GO TO S1;                                                24870
               END;                                                        24880
                                                                           24890
     /* *********************************************************** */     24900
     /*                                                             */     24910
     /* HAVING GOT THIS FAR, WE ARE CERTAIN THAT IT IS A TYPA 'D',  */     24920
     /* AND WE HAVE MERELY TO PRINT THE SECOND LINE, FIRST BLANKING */     24930
     /* OUT EVERYTHING BAR THE NAME.                                */     24940
     /*                                                             */     24950
     /* *********************************************************** */     24960
                                                                           24970
                                                                           25040
     /* *********************************************************** */     25050
     /*                                                             */     25060
     /* HAVING PRINTED THE TOTAL LINE, WE TEST IF A NEW PAGE        */     25070
     /* IS WANTED AFTER THIS KEY BREAK, AND IF SO SIGNAL SUCH TO    */     25080
     /* THE NEXT LOWEST-LEVEL PRINT.                                */     25090
     /*                                                             */     25100
     /*    THEN WE HAVE TO TEST IF THIS IS A MAJOR KEY, AND A       */     25110
     /* RANGE SUBANALYSIS IS REQUIRED FROM IT.                      */     25120
     /*                                                             */     25130
     /*    WE THEN ADD THE PRINT VALUES FOR THIS KEY INTO THOSE     */     25140
     /* OF THE NEXT HIGHEST, AND EXIT.                              */     25150
     /*                                                             */     25160
     /* *********************************************************** */     25170
                                                                           25180
 TOTEX:   IF ARPAG_GR03(10-I) ^= ' ' & SKIPPRINX ^= '1'B                   25190
          THEN LINECT = 80;                                                25200
          SKIPPRINX = '0'B;                                                25210
          IF I ^= 9 THEN GO TO TOTEXA;                                     25220
                                                                           25240
          J = 2;                                                           25250
 TOTEXA:                                                                   25290
                                        /* SIGNAL NEXT TOTAL LEVEL. */     25300
          J = I + 1;                                                       25310
          LEXIT = TOTEX1;                                                  25320
                                        /* ADD UP PRINT VALUES.     */     25330
          GO TO AUG1;                                                      25340
                                        /* END OF SUBROUTINE TOTS.  */     25350
 TOTEX1:  GO TO REXIT;                                                     25360
                                                                           25370
                                                                           25380
     /* *********************************************************** */     25390
     /*                                                             */     25400
     /* THIS NEXT SUBROUTINE, P1, PRINTS THE PAGE HEADING, CLEARS   */     25410
     /* THE SWITCH THAT SIGNALS A TOTAL HAS JUST BEEN PRINTED,      */     25420
     /* RESETS THE LINE COUNT, AND EXITS.                           */     25430
     /*                                                             */     25440
     /* *********************************************************** */     25450
                                                                           25460
 P1:      PAGENO = PAGENO + 1;                                             25470
          PAGE_HEADA = PAGENO;                                             25480
          WRITE FILE(PRINT) FROM(HEADA);                                   25490
          IF I = 10 THEN GO TO $P9;                                        25500
          IF NO_GR10 = 0 THEN GO TO $P9;                                   25510
          HEADX = '0';                                                     25520
          DO J1A = 1 TO NO_GR10;                                           25530
          IF ARFLD_GR10(J1A) = 1009                                        25540
          THEN DO;                                                         25550
                  WRITE FILE(PRINT) FROM(HEADX);                           25560
                  IF ARFMT_GR10(J1A) = '1' THEN HEADX = ' ';               25570
                  IF ARFMT_GR10(J1A) = '2' THEN HEADX = '0';               25580
                  IF ARFMT_GR10(J1A) = '3' THEN HEADX = '-';               25590
                  GO TO $P20;                                              25600
                  END;                                                     25610
             J1B = ARSPOS_GR10(J1A) + 1;                                   25620
             J1C = AREPOS_GR10(J1A) - J1B + 2;                             25630
             J1D = ARFLD_GR10(J1A);                                        25640
             J1E = ARDEC_GR10(J1A);                                        25650
             J1F = ARLIT_GR10(J1A);                                        25660
             HX_BYTE = ARFMT_GR10(J1A);                                    25670
             $EXIT = $P15;                                                 25680
             GO TO $X1;                                                    25690
 $P15:       SUBSTR(HEADX,J1B,J1C) = SUBSTR(FMAT_X,J1D,J1C);               25700
 $P20:     END;                                                            25710
          WRITE FILE(PRINT) FROM(HEADX);                                   25720
 $P9:                                                                      25730
          WRITE FILE(PRINT) FROM(HEADBX);                                  25740
          WRITE FILE(PRINT) FROM(HEADCX);                                  25750
          WRITE FILE(PRINT) FROM(BLANKLINE);                               25760
                                                                           25770
          STORELINE = ' ';                                                 25780
          LTOTSW = '0'B;                                                   25790
          LINECT = 10;                                                     25800
          GO TO PEXIT;                                                     25810
                                                                           25820
                                                                           25830
     /* *********************************************************** */     25840
     /*                                                             */     25850
     /* FOR ALL LEVELS OF DETAIL AND TOTAL PRINT (STIPULATED BY     */     25860
     /* THE RECEIVED PARAMETER 'I'), THE NEXT ROUTINE (S1 & S2)     */     25870
     /* SETS UP THE VALUES IN THE PRINT LINE, WRITES THE LINE OUT,  */     25880
     /* AND AUGMENTS THE LINE COUNT.                                */     25890
     /*                                                             */     25900
     /* *********************************************************** */     25910
                                                                           25920
 S1:         IF I = 1 THEN GO TO S19;        /* NOT TOTAL - NO ARITH  */   25930
          SKIPPRINX = '0'B;                                                25940
             IF NOARI = 0 THEN GO TO S19;                                  25950
             DO N1 = 1 TO NOARI;                                           25960
 $S2:           IF ARITT(N1) ^= '1'B                                       25970
                THEN GO TO S18;                 /* STMT NOT AT TOTALS */   25980
        IF ARIFD(N1) = -1                                                  25990
          THEN DO;                                                         26000
                  J1A = ARINO(N1,1);                                       26010
                  J2A = ARINO(N1,3);                                       26020
                  IF ARINO(N1,2) = 1 THEN GO TO $S21;                      26030
                  IF ARINO(N1,2) = 2 THEN GO TO $S22;                      26040
                  IF ARINO(N1,2) = 3 THEN GO TO $S23;                      26050
                  IF ARINO(N1,2) = 4 THEN GO TO $S24;                      26060
                  GO TO $S4;                                               26070
 $S21:            IF VALUES(J1A,I)  = VALUES(J2A,I)                        26080
                  THEN GO TO $S3;                                          26090
                  GO TO $S4;                                               26100
 $S22:            IF VALUES(J1A,I) ^= VALUES(J2A,I)                        26110
                  THEN GO TO $S3;                                          26120
                  GO TO $S4;                                               26130
 $S23:            IF VALUES(J1A,I)  > VALUES(J2A,I)                        26140
                  THEN GO TO $S3;                                          26150
                  GO TO $S4;                                               26160
 $S24:            IF VALUES(J1A,I)  < VALUES(J2A,I)                        26170
                  THEN GO TO $S3;                                          26180
                  GO TO $S4;                                               26190
 $S3:             J1A = ARINO(N1,5);                                       26200
                  VALUES(J1A,I) = VALUES(J1A,I) + 1;                       26210
 IF ARINO(N1,4) < 0 & BYTE_LINE ^= CBYT THEN LTOTSW = '1'B;                26220
          IF ARINO(N1,4) = -1                                              26230
          THEN DO;                                                         26240
                  SKIPPRINX = '1'B;                                        26250
                  GO TO LEXIT;                                             26260
               END;                                                        26270
          IF ARINO(N1,4) = -2                                              26280
          THEN DO;                                                         26290
                  DO N3 = 1 TO IPMF_VALS - 1;                              26291
                     VALUES(N3,I) = 0;                                     26292
                  END;                                                     26293
                  GO TO REXIT;                                             26294
                END;                                                       26295
                  N1 = ARINO(N1,4);                                        26300
                  GO TO $S2;                                               26310
 $S4:             GO TO S18;                                               26320
               END;                                                        26330
                VALUED = 0;                  /* INIT WORK FIELD       */   26340
                DO N2 = 1 TO ARILN(N1);      /* FOR EACH OPERATOR     */   26350
                   K1 = ARINO(N1,N2);        /* SUBSCRIPT OF OPERAND  */   26360
                   IF ARICN(N1,N2)                                         26370
                   THEN VALUEP = VALIT(K1);  /* CONSTANT OR VARIABLE? */   26380
          ELSE DO;                                                         26390
                  IF K1 < 0                                                26391
                  THEN VALUEP = SCALARS(-100-K1);                          26392
                  ELSE VALUEP = VALUES(K1,I);                              26393
               END;                                                        26394
                   IF ARISN(N1,N2) = '-'                                   26400
                   THEN VALUEP = -VALUEP;    /* NEGATIVE PREFIX.      */   26410
                   IF ARIOP(N1,N2) = '+' THEN VALUED = VALUED + VALUEP;    26420
                   IF ARIOP(N1,N2) = '-' THEN VALUED = VALUED - VALUEP;    26430
                   IF ARIOP(N1,N2) = '*'                                   26440
                   THEN DO;                                                26450
                           VALUE1 = VALUED;                                26460
                           VALUE2 = VALUEP;                                26470
                           VALUE = VALUE1 * VALUE2;                        26480
                           VALUED = ROUND(VALUE,4);                        26490
                        END;                                               26500
                   IF ARIOP(N1,N2) = '/'     /* CHECK FOR ZERODIVIDE  */   26510
                   THEN DO;                                                26520
                           IF VALUEP ^= 0 THEN GO TO S11;                  26530
                           VALUED = 0;                                     26540
                           ZERO_DIVIDE_COUNT = ZERO_DIVIDE_COUNT + 1;      26550
                           ERRORSW = '1'B;                                 26560
          ERR0DIV = '1'B;                                                  26570
                           GO TO S12;                                      26580
 S11:                      VALUE1 = VALUED;                                26590
                           VALUE2 = VALUEP;                                26600
                           VALUE = VALUE1 / VALUE2;                        26610
                           VALUED = ROUND(VALUE,4);                        26620
 S12:                   END;                                               26630
                END;                    /* GET NEXT OPERAND */             26640
                N2 = ARIFD(N1);                                            26650
          IF N2 < 0                                                        26651
          THEN SCALARS(-100-N2) = VALUED;                                  26652
          ELSE                                                             26653
                VALUES(N2,I) = VALUED;                                     26660
 S18:        END;                       /* GET NEXT ARITH STATEMENT */     26670
 S19:                                                                      26680
          IF NOKEYXX = 10-I & NAMESW ^= '1'B & LINECT > LINECX             26820
          THEN DO;                                                         26830
                  PEXIT = TOTS0;                                           26840
                  GO TO P1;                                                26850
 TOTS0:        END;                                                        26860
                                                                           26870
          IF NO_GR11 = 0 THEN GO TO $S9;                                   26880
          SUBSTR(LINEA,2,132) = ' ';                                       26890
          UBYT = BYTE_LINE;                                                26900
          J1A = 10-I;                                                      26910
          IF NO_GR12(J1A) > 0 THEN GO TO $S7;                              26920
          SW11 = '1'B;                                                     26930
          SW12 = '0'B;                                                     26940
 $S50:    DO J1A = 1 TO NO_GR11;                                           26950
          IF ARFLD_GR11(J1A) = 1009                                        26960
          THEN DO;                                                         26970
          SW11 = '0'B;                                                     26980
                  WRITE FILE(PRINT) FROM(LINEA);                           26990
                  IF ARFMT_GR11(J1A) = '1'                                 27000
                  THEN DO;                                                 27010
                          LINECT = LINECT + 1;                             27020
                          LINEA = ' ';                                     27030
                       END;                                                27040
                  IF ARFMT_GR11(J1A) = '2'                                 27050
                  THEN DO;                                                 27060
                          LINECT = LINECT + 2;                             27070
                          LINEA = '0';                                     27080
                       END;                                                27090
                  IF ARFMT_GR11(J1A) = '3'                                 27100
                  THEN DO;                                                 27110
                          LINECT = LINECT + 3;                             27120
                          LINEA = '-';                                     27130
                       END;                                                27140
                  GO TO $S59;                                              27150
               END;                                                        27160
             J1B = ARSPOS_GR11(J1A) + 1;                                   27170
             J1C = AREPOS_GR11(J1A) - J1B + 2;                             27180
             J1D = ARFLD_GR11(J1A);                                        27190
          IF J1D > 979 & SW11 & SW12                                       27200
          THEN GO TO $S59;                                                 27210
             J1E = ARDEC_GR11(J1A);                                        27220
          J1F = ARLIT_GR11(J1A);                                           27230
             HX_BYTE = ARFMT_GR11(J1A);                                    27240
          ZSW = ZSW_GR11(J1A);                                             27250
             $EXIT = $S51;                                                 27260
             GO TO $X1;                                                    27270
 $S51:       SUBSTR(LINEA,J1B,J1C) = SUBSTR(FMAT_X,J1D,J1C);               27280
          IF BSW_GR11(J1A)                                                 27290
          THEN DO;                                                         27300
                  IF SUBSTR(LINEA,J1B,J1C) = SUBSTR(STORELINE,J1B,J1C)     27310
                  THEN SUBSTR(LINEA,J1B,J1C) = ' ';                        27320
               ELSE SUBSTR(STORELINE,J1B,J1C) = SUBSTR(LINEA,J1B,J1C);     27330
               END;                                                        27340
 $S59:    END;                                                             27350
          GO TO $S9;                                                       27360
 $S7:     STORELINE = ' ';                                                 27370
          DO J2A = 1 TO NO_GR12(J1A);                                      27380
          IF ARFLD_GR12(J2A,J1A) = 1500                                    27390
          THEN DO;                                                         27400
                  SW12 = '1'B;                                             27410
                  SW11 = '1'B;                                             27420
                  GO TO $S50;                                              27430
               END;                                                        27440
          IF ARFLD_GR12(J2A,J1A) = 1009                                    27450
          THEN DO;                                                         27460
                  WRITE FILE(PRINT) FROM(LINEA);                           27470
                  IF ARFMT_GR12(J2A,J1A) = '1'                             27480
                  THEN DO;                                                 27490
                          LINECT = LINECT + 1;                             27500
                          LINEA = ' ';                                     27510
                       END;                                                27520
                  IF ARFMT_GR12(J2A,J1A) = '2'                             27530
                  THEN DO;                                                 27540
                          LINECT = LINECT + 2;                             27550
                          LINEA = '0';                                     27560
                       END;                                                27570
                  IF ARFMT_GR12(J2A,J1A) = '3'                             27580
                  THEN DO;                                                 27590
                          LINECT = LINECT + 3;                             27600
                          LINEA = '-';                                     27610
                       END;                                                27620
                  GO TO $S79;                                              27630
               END;                                                        27640
             J1B = ARSPOS_GR12(J2A,J1A) + 1;                               27650
             J1C = AREPOS_GR12(J2A,J1A) - J1B + 2;                         27660
             J1D = ARFLD_GR12(J2A,J1A);                                    27670
             J1E = ARDEC_GR12(J2A,J1A);                                    27680
             J1F = ARLIT_GR12(J2A,J1A);                                    27690
          HX_BYTE = ARFMT_GR12(J2A,J1A);                                   27700
             $EXIT = $S71;                                                 27710
             GO TO $X1;                                                    27720
 $S71:       SUBSTR(LINEA,J1B,J1C) = SUBSTR(FMAT_X,J1D,J1C);               27730
 $S79:    END;                                                             27740
 $S9:                                                                      27750
          WRITE FILE(PRINT) FROM(LINEA);                                   27760
                                                                           27770
          IF NO_GR11 ^= 0 THEN BYTE_LINE = UBYT;                           27780
          LINECT = LINECT + 1;                                             27790
          IF BYTE_LINE  = '0' THEN LINECT = LINECT + 1;                    27800
          IF BYTE_LINE  = '-' THEN LINECT = LINECT + 2;                    27810
          GO TO LEXIT;                                                     27820
                                                                           28860
                                                                           28870
 $X1:     FMAT_X = ' ';                                                    28880
          IF J1D < 990 THEN GO TO $X5;                                     28890
          IF J1D = 991 THEN FMAT_X = LASTKEY1;                             28900
          IF J1D = 992 THEN FMAT_X = LASTKEY2;                             28910
          IF J1D = 993 THEN FMAT_X = LASTKEY3;                             28920
          IF J1D = 994 THEN FMAT_X = LASTKEY4;                             28930
          IF J1D = 1005 THEN FMAT_X = LASTKEY5;                            28940
          IF J1D = 1006 THEN FMAT_X = LASTKEY6;                            28950
          IF J1D = 1007 THEN FMAT_X = LASTKEY7;                            28960
          IF J1D = 1008 THEN FMAT_X = LASTKEY8;                            28970
          IF J1D = 995                                                     28980
          THEN FMAT_X = SUBSTR(LASTREC,ARNAM_GR03(1),ARNML_GR03(1));       28990
          IF J1D = 996                                                     29000
          THEN FMAT_X = SUBSTR(LASTREC,ARNAM_GR03(2),ARNML_GR03(2));       29010
          IF J1D = 997                                                     29020
          THEN FMAT_X = SUBSTR(LASTREC,ARNAM_GR03(3),ARNML_GR03(3));       29030
          IF J1D = 998                                                     29040
          THEN FMAT_X = SUBSTR(LASTREC,ARNAM_GR03(4),ARNML_GR03(4));       29050
          IF J1D = 1001                                                    29060
          THEN FMAT_X = SUBSTR(LASTREC,ARNAM_GR03(5),ARNML_GR03(5));       29070
          IF J1D = 1002                                                    29080
          THEN FMAT_X = SUBSTR(LASTREC,ARNAM_GR03(6),ARNML_GR03(6));       29090
          IF J1D = 1003                                                    29100
          THEN FMAT_X = SUBSTR(LASTREC,ARNAM_GR03(7),ARNML_GR03(7));       29110
          IF J1D = 1004                                                    29120
          THEN FMAT_X = SUBSTR(LASTREC,ARNAM_GR03(8),ARNML_GR03(8));       29130
          IF J1D = 999 THEN FMAT_X = LITERAL_POOL(J1F);                    29140
          IF J1D = 1000 THEN FMAT_X = SUBSTR(LASTREC,NAMEPOS,NAMELEN);     29150
          J1D = 1;                                                         29160
          GO TO $EXIT;                                                     29170
 $X5:     IF J1D = 980 THEN VALUED = ARCNT(9);                             29180
          IF J1D = 981 THEN VALUED = ARCNT(8);                             29190
          IF J1D = 982 THEN VALUED = ARCNT(7);                             29200
          IF J1D = 983 THEN VALUED = ARCNT(6);                             29210
          IF J1D = 984 THEN VALUED = ARCNT(5);                             29220
          IF J1D = 976 THEN VALUED = ARCNT(4);                             29230
          IF J1D = 977 THEN VALUED = ARCNT(3);                             29240
          IF J1D = 978 THEN VALUED = ARCNT(2);                             29250
          IF J1D = 979 THEN VALUED = ARCNT(1);                             29260
          IF J1D < 970 THEN VALUED = VALUES(J1D,I);                        29270
          IF VALUED = 0 & ZSW                                              29280
          THEN DO;                                                         29290
                  J1D = 1;                                                 29300
                  GO TO $EXIT;                                             29310
               END;                                                        29320
          IF HX_BYTE = 'Z' THEN GO TO $X6;                                 29330
          ZSW = '1'B;                                                      29340
          IF HX_BYTE = ',' THEN GO TO $X7;                                 29350
          IF J1E = 0                                                       29360
          THEN DO;                                                         29370
 VAL_DEC1 = VALUED;                                                        29380
 FMAT_90 = ROUND(VAL_DEC1,0);                                              29390
                  J1D = 16;                                                29400
                  GO TO $X9;                                               29410
               END;                                                        29420
          IF J1E = 1                                                       29430
          THEN DO;                                                         29440
 VAL_DEC2 = VALUED;                                                        29450
 FMAT_91 = ROUND(VAL_DEC2,1);                                              29460
                  J1D = 17;                                                29470
                  GO TO $X9;                                               29480
               END;                                                        29490
          IF J1E = 2                                                       29500
          THEN DO;                                                         29510
 VAL_DEC3 = VALUED;                                                        29520
 FMAT_92 = ROUND(VAL_DEC3,2);                                              29530
                  J1D = 17;                                                29540
                  GO TO $X9;                                               29550
               END;                                                        29560
          IF J1E = 3                                                       29570
          THEN DO;                                                         29580
 VAL_DEC4 = VALUED;                                                        29590
 FMAT_93 = ROUND(VAL_DEC4,3);                                              29600
                  J1D = 17;                                                29610
                  GO TO $X9;                                               29620
               END;                                                        29630
          IF J1E = 4                                                       29640
          THEN DO;                                                         29650
 VAL_DEC5 = VALUED;                                                        29660
 FMAT_94 = ROUND(VAL_DEC5,4);                                              29670
                  J1D = 17;                                                29680
                  GO TO $X9;                                               29690
               END;                                                        29700
 $X6:     IF J1E = 0                                                       29710
          THEN DO;                                                         29720
 VAL_DEC1 = VALUED;                                                        29730
 FMAT_Z0 = ROUND(VAL_DEC1,0);                                              29740
                  J1D = 16;                                                29750
                  GO TO $X9;                                               29760
               END;                                                        29770
          IF J1E = 1                                                       29780
          THEN DO;                                                         29790
 VAL_DEC2 = VALUED;                                                        29800
 FMAT_Z1 = ROUND(VAL_DEC2,1);                                              29810
                  J1D = 17;                                                29820
                  GO TO $X9;                                               29830
               END;                                                        29840
          IF J1E = 2                                                       29850
          THEN DO;                                                         29860
 VAL_DEC3 = VALUED;                                                        29870
 FMAT_Z2 = ROUND(VAL_DEC3,2);                                              29880
                  J1D = 17;                                                29890
                  GO TO $X9;                                               29900
               END;                                                        29910
          IF J1E = 3                                                       29920
          THEN DO;                                                         29930
 VAL_DEC4 = VALUED;                                                        29940
 FMAT_Z3 = ROUND(VAL_DEC4,3);                                              29950
                  J1D = 17;                                                29960
                  GO TO $X9;                                               29970
               END;                                                        29980
          IF J1E = 4                                                       29990
          THEN DO;                                                         30000
 VAL_DEC5 = VALUED;                                                        30010
 FMAT_Z4 = ROUND(VAL_DEC5,4);                                              30020
                  J1D = 17;                                                30030
                  GO TO $X9;                                               30040
               END;                                                        30050
 $X7:     IF J1E = 0                                                       30060
          THEN DO;                                                         30070
 VAL_DEC1 = VALUED;                                                        30080
 FMAT_C0 = ROUND(VAL_DEC1,0);                                              30090
                  J1D = 20;                                                30100
                  GO TO $X9;                                               30110
               END;                                                        30120
          IF J1E = 1                                                       30130
          THEN DO;                                                         30140
 VAL_DEC2 = VALUED;                                                        30150
 FMAT_C1 = ROUND(VAL_DEC2,1);                                              30160
                  J1D = 21;                                                30170
                  GO TO $X9;                                               30180
               END;                                                        30190
          IF J1E = 2                                                       30200
          THEN DO;                                                         30210
 VAL_DEC3 = VALUED;                                                        30220
 FMAT_C2 = ROUND(VAL_DEC3,2);                                              30230
                  J1D = 21;                                                30240
                  GO TO $X9;                                               30250
               END;                                                        30260
          IF J1E = 3                                                       30270
          THEN DO;                                                         30280
 VAL_DEC4 = VALUED;                                                        30290
 FMAT_C3 = ROUND(VAL_DEC4,3);                                              30300
                  J1D = 20;                                                30310
                  GO TO $X9;                                               30320
               END;                                                        30330
          IF J1E = 4                                                       30340
          THEN DO;                                                         30350
 VAL_DEC5 = VALUED;                                                        30360
 FMAT_C4 = ROUND(VAL_DEC5,4);                                              30370
                  J1D = 20;                                                30380
                  GO TO $X9;                                               30390
               END;                                                        30400
 $X9:     J1D = J1D - J1C + 1;                                             30410
          GO TO $EXIT;                                                     30420
                                                                           30430
     /* *********************************************************** */     30440
     /*                                                             */     30450
     /* THIS FINAL SUBROUTINE ADDS THE PRINT VALUES AT LEVEL I      */     30460
     /* INTO THOSE OF LEVEL J, AND, FOR I NOT = 1, ADDS THE RECORD  */     30470
     /* COUNT OF LEVEL I-1 INTO THAT OF LEVEL J-1,RESETTING THE     */     30480
     /* SOURCE TO ZERO IN EACH CASE.                                */     30490
     /*                                                             */     30500
     /* *********************************************************** */     30510
                                                                           30520
 AUG1:    DO K = 1 TO IPMF_VALS - 1;                                       30530
          II2 = VAL_IDS(K);                                                30540
          IF II2 = 0 THEN GO TO AUG2;                                      30550
          IF ARKEY_GR04(II2) >  9-I  THEN GO TO AUG2;                      30560
          VALUES(K,J) = VALUES(K,I);                                       30570
          GO TO AUG3;                                                      30580
 AUG2:    VALUES(K,J) = VALUES(K,J) + VALUES(K,I);                         30590
 AUG3:                                                                     30600
             VALUES(K,I) = 0;                                              30610
          END;                                                             30620
          IF  I = 1 THEN GO TO LEXIT;                                      30630
          ARCNT(J-1) = ARCNT(J-1) + ARCNT(I-1);                            30640
          ARCNT(I-1) = 0;                                                  30650
          GO TO LEXIT;                                                     30660
                                                                           30670
                                                                           30680
     /* *********************************************************** */     30690
     /*                                                             */     30700
     /* WE FINALLY ARRIVE AT THE END OF THE PROCEDURE SRTOUT.       */     30710
     /* IF THIS PROCEDURE IS BEING USED BY THE SORT, WE TEST THE    */     30720
     /* COUNTS OF RECORDS INTO AND OUT OF THE SORT, AND SIGNAL      */     30730
     /* WHETHER OR NOT TO PASS ANY MORE RECORDS.                    */     30740
     /*                                                             */     30750
     /* *********************************************************** */     30760
                                                                           30770
 NEXTREC: IF SORTSW                                                        30780
          THEN DO;                                                         30790
                  IF SRTCNTIN = SRTCNTOUT                                  30800
                  THEN CALL IHESARC(8);                                    30810
                  ELSE CALL IHESARC(4);                                    30820
               END;                                                        30830
                                                                           30840
          RETURN;                                                          30850
                                        /* END OF PROCEDURE SRTOUT. */     30860
          END SRTOUT;                                                      30870
                                                                           30880
                                                                           30890
          END;      /* GROPE */                                            30900
                                                                           30910
