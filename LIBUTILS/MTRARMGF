                   /* ARMACT - SUMMARISE ARM MOVEMENT */
 ARMACT:PROC OPTIONS(MAIN);
          DCL       /* STANDARD HOOVER MONITOR RECORD FORMATS         */
                    /*                                                */
                    /*                                                */
              1 TYPE0 CTL(P),                   /*                    */
                2 TYPE CHAR(1),                 /*                    */
                2 OPTIONS BIT(8),               /*                    */
                  3 EXCP BIT(1) UNAL,           /*                    */
                  3 LINK BIT(1) UNAL,           /*                    */
                  3 XCTL BIT(1) UNAL,           /*                    */
                  3 LOAD BIT(1) UNAL,           /*                    */
                  3 ATTACH BIT(1) UNAL,         /*                    */
                  3 BLDL BIT(1) UNAL,           /*                    */
                  3 CPULOG BIT(1) UNAL,         /*                    */
                  3 TIMER BIT(1) UNAL,          /*                    */
                2 SPARE CHAR(1),                /*                    */
                2 INTERVAL CHAR(4),             /*                    */
                  3 SECONDS CHAR(2),            /*                    */
                  3 TENTHS CHAR(1),             /*                    */
                  3 HUNDREDTHS CHAR(1),         /*                    */
                2 CORESIZE FIXED BIN(31,0) UNAL,/*                    */
                2 TIME FIXED BIN(31,0) UNAL,    /*                    */
                2 DATE FIXED BIN(31,0) UNAL;    /*                    */
          DCL 1 TYPE1 CTL(P),                   /*LINK,LOAD,XCTL RECD */
              2 TYPE CHAR(1),                   /*                    */
              2 TCBID BIT(8),                   /*                    */
                3 BLDLFLAG BIT(1) UNAL,         /*                    */
                3 NOT_DEFINED BIT(7) UNAL,      /*                    */
              2 SVCNUMB CHAR(4),                /*                    */
              2 SPACE CHAR(1),                  /*                    */
              2 MODULE CHAR(8),                 /*                    */
              2 FREQUENCY CHAR(4),              /*ALWAYS ONE          */
              2 SPACES CHAR(4);                 /*                    */
          DCL 1 TYPE2 CTL(P),                   /*                    */
              2 TYPE CHAR(1),                   /*                    */
              2 SPARE CHAR(1),                  /*                    */
              2 BINARY_SVC_NUMBER BIT(8),       /*                    */
              2 NOT_DEFINED CHAR(1),            /*                    */
              2 SVCNUMBER CHAR(8),              /*                    */
                3 SVCCHARS CHAR(5),             /*                    */
                3 SVCTYPE PIC '999',            /*                    */
              2 FREQUENCY FIXED BIN(31) UNAL,   /*                    */
              2 PADDING CHAR(4);                /*                    */
          DCL 1 TYPE3 CTL(P),                   /*                    */
              2 TYPE CHAR(1),                   /*                    */
              2 SPARE CHAR(1),                  /*                    */
              2 BINARY_SVC_NUMBER CHAR(4),      /*                    */
              2 SPARE2 CHAR(1),                 /*                    */
              2 DEVICE_ADDRESS CHAR(3),         /*                    */
                3 CONTROLLER CHAR(1),           /*                    */
                3 UNIT CHAR(2),                 /*                    */
              2 SPARE3 CHAR(1),                 /*                    */
              2 FREQUENCY CHAR(4),              /*                    */
              2 PADDING CHAR(4);                /*                    */
          DCL 1 TYPE4 CTL(P),                   /*CHANNEL & CPU STATES*/
              2 TYPE CHAR(1),                   /*                    */
              2 SPARE CHAR(1),                  /*                    */
              2 FLAGS(18) BIT(8),               /*                    */
                3 CHANNEL_ZERO BIT(1) UNAL,     /*                    */
                3 CHANNEL_ONE BIT(1) UNAL,      /*                    */
                3 CHANNEL_TWO BIT(1) UNAL,      /*                    */
                3 CHANNEL_THREE BIT(1) UNAL,    /*                    */
                3 CHANNEL_FOUR BIT(1) UNAL,     /*                    */
                3 PROTECT_KEY_ZERO BIT(1) UNAL, /*                    */
                3 CPU_WAIT BIT(1) UNAL,         /*                    */
                3 PROBLEM_STATE BIT(1) UNAL;    /*                    */
          DCL 1 TYPE5 CTL(P),                   /*DISK ARM MOVEMENT   */
              2 TYPE CHAR(1),                   /*                    */
              2 DEVICE_ADDRESS CHAR(3),         /*                    */
                3 CONTROLLER CHAR(1),           /*                    */
                3 UNIT1 CHAR(1),                /*                    */
                3 UNIT2 CHAR(1),                /*                    */
              2 SEEK_ADDRESS(8) FIXED BIN UNAL; /*                    */
          DCL 1 TYPE9 CTL(P),                   /*                    */
              2 TYPE CHAR(1),                   /*                    */
              2 SPARE CHAR(1),                  /*                    */
              2 FREQUENCY FIXED BIN(31,0) UNAL, /*                    */
              2 SPARE2 CHAR(4),                 /*                    */
              2 RUN_TIME FIXED BIN(31,0) UNAL,  /*                    */
              2 PADDING CHAR(4);                /*                    */
          DCL P POINTER;                        /*                    */
         DCL FILEIN FILE INPUT BUFFERED;
         DCL MOVEMENTS(0:7,0:81) FIXED BIN(31,0) STATIC INIT((656)0),
             BANK CHAR(2) STATIC,
             GRAPH(82,50) CHAR(1) STATIC,
               MOVES FIXED BIN(31,0) STATIC INIT(0),
               MOVE_PERCENT FIXED BIN(15,0) STATIC INIT(0),
               J,K,KOUNT,LINING FIXED BINARY(15,0) STATIC INIT(0),
               I FIXED DEC(1,0) STATIC INIT(0),
             SCALE CHAR(120) INIT('                  0         100
  200       300       400       500       600       700       800')
             STATIC;
         ON ERROR CALL IHEDUMP;
               OPEN FILE(FILEIN);
               ON ENDFILE(FILEIN) GO TO ENDATA;
         DOIT: READ FILE(FILEIN) SET(P);
               IF TYPE5.TYPE='5' THEN GOTO SEEK;
               ELSE GO TO DOIT;
         SEEK: I=UNIT2;
               DO J=1 TO 8;
               K=SEEK_ADDRESS(J)/10;
               MOVEMENTS(I,K)=MOVEMENTS(I,K)+1;
               END;
               BANK=TYPE5.CONTROLLER||UNIT1;
               GOTO DOIT;
          ENDATA:CLOSE FILE(FILEIN);
               PAGE:DO I=0 TO 7;
               GRAPH=' '; MOVES=0; J=50;
               DO K=0 TO 81;
               MOVES=MOVES+MOVEMENTS(I,K); END;
               IF MOVES=0 THEN GO TO FINISH;
               PICTURES:DO K=0 TO 81;
               IF MOVEMENTS(I,K)=0 THEN GOTO PICDONE;
               ELSE GRAPH(K+1,1)='.';
               MOVE_PERCENT=((100*MOVEMENTS(I,K))/MOVES)/2;
               IF MOVE_PERCENT=0 THEN GOTO PICDONE;
                    DO LINING=1 TO MOVE_PERCENT;
                    GRAPH(K+1,LINING)='*'; END;
                    PICDONE:END PICTURES;
               PUT EDIT((40)' ','ARM ACTIVITY ON DEVICE   ',
                    BANK,I)(PAGE,LINE(2),(40)A,A,A,F(1));
               PUT EDIT((15)' ','100%+')(SKIP(2),(15)A,A);
                    CALL LINE;
                    CALL BOX;
               PUT EDIT((17)' ','80+')(SKIP,(17)A,A);
                    CALL LINE; CALL BOX;
               PUT EDIT((17)' ','60+')(SKIP,(17)A,A);
                    CALL LINE; CALL BOX;
               PUT EDIT((17)' ','40+')(SKIP,(17)A,A);
                    CALL LINE; CALL BOX;
               PUT EDIT((17)' ','20+')(SKIP,(17)A,A);
                    CALL LINE; CALL BOX;
               PUT EDIT((19)' ','+',(8)'---------+','--')
                   (SKIP,(19)A,A,(8)A,A);
               PUT EDIT(SCALE)(SKIP,A);
               PUT EDIT((80)' ','CYLINDER')(SKIP,(80)A,A);
               PUT EDIT((50)' ','TOTAL SEEKS=',MOVES)(SKIP,
               (50)A,A,F(5));
        FINISH:END PAGE;
         LINE:PROC;
                    DO K=1 TO 82;
                    PUT EDIT(GRAPH(K,J))(A); END;
               J=J-1;
               RETURN;
               END LINE;
         BOX:PROC;
               DO KOUNT=1 TO 9;
               PUT EDIT((19)' ','|')(SKIP,(19)A,A);
               CALL LINE;
               END;
               RETURN;
               END BOX;
         END ARMACT;
