//DYNAMV00 JOB (1580,5),'0052 FOR J.NOLS',CLASS=A
// EXEC ASMFCL
//ASM.SYSIN DD *
         TITLE '''DYNAMV00'' SUB-ROUTINE FOR DYNAMING'
DYNAMV00 CSECT
         SPACE 1
         PRINT ON,GEN
         SPACE 3
***********************************************************************
*                                                                     *
*              PROGRAM NAME        :    DYNAMV00                      *
*                                                                     *
*                                                                     *
*              VERSION 01  -  AUTHOR        :    J. NOLS              *
*                             DATE WRITTEN  :    JANUARY, 1977.       *
*                                                                     *
*                                                                     *
*              LOCATION            :    EUROPEAN COMPUTER CENTER      *
*                                                                     *
***********************************************************************
         SPACE 3
***********************************************************************
*                                                                     *
*        PURPOSE                                                      *
*        =======                                                      *
*                                                                     *
*              SUBROUTINE DYNAMICALLY LOADED BY 'DYNAMING'            *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*        REGISTER EQUATES AND USAGE                                   *
***********************************************************************
         SPACE 1
R0       EQU   0    SVC COMMUNICATION AND WORK REGISTER
R1       EQU   1    SVC COMMUNICATION AND WORK REGISTER
R2       EQU   2    BASE REGISTER
R3       EQU   3    WORK REGISTER
R4       EQU   4    WORK REGISTER
R5       EQU   5    WORK REGISTER
R6       EQU   6    POINTER TO CURRENT TABLE ELEMENT
R7       EQU   7    WORK REGISTER
R8       EQU   8    WORK REGISTER
R9       EQU   9    WORK REGISTER
R10      EQU   10   WORK REGISTER
R11      EQU   11   WORK REGISTER
R12      EQU   12   WORK REGISTER
R13      EQU   13   SAVE AREA POINTER
R14      EQU   14   BALR RETURN ADDRESS
R15      EQU   15   BALR ROUTINE ADDRESS
         EJECT
         USING *,R15               ESTABLISH ADDRESSABILITY
         SPACE 3
         BAL   R2,BEGIN            SET-UP BASE REGISTER
         SPACE 3
         DROP R15                  DROP R15 ADDRESSABILITY
         USING *,R2                RE-ESTABLISH ADDRESSABILITY (REG2)
         SPACE 3
***********************************************************************
*        DYNAMV00 INFORMATION FOR USERS                               *
***********************************************************************
         SPACE 1
DNM      DC    C'DNM'         INDICATE IS DYNAMV00
DNMVERS  DC    X'01'          DYNAMV00 VERSION NUMBER
         SPACE 1
*****     ATTENTION : IF YOU HAVE CHANGED THE VERSION     *****
*****                  NUMBER IN THE PRECEDING DC, DON'T  *****
*****                  FORGET TO CHANGE VERSION NUMBER    *****
*****                  IN THE 'MSGWTO' DC.                *****
         SPACE 1
DYNIFEL  DC    AL1(0)         NUMBER OF TABLE ELEMENTS IN USE
DYNIFAIT DC    AL3(INTABLE)   ADDRESS OF FIRST BLOCK OF INTERNAL TABLE
DYNIFREX DC    CL8' '         NAME OF PROGRAM RECENTLY EXECUTED
DYNIFPEX DC    CL8' '         NAME OF PROGRAM PREVIOUSLY EXECUTED
         EJECT
***********************************************************************
*                                                                     *
*        INTERNAL TABLE DESCRIPTION                                   *
*                                                                     *
*              FIRST BLOCK RESERVED AT COMPILATION TIME.              *
*              NEXT BLOCKS ACQUIRED DYNAMICALLY DURING EXECUTION.     *
*                BLOCK LENGTH IS (BLENGTH) BYTES.                     *
*                  FIRST FOUR BYTES CONTAINS POINTER TO NEXT BLOCK,   *
*                   OR BINARY ZEROS IF THIS IS THE LAST BLOCK USED.   *
*                  NEXT (BLENGTH-8) BYTES MAY CONTAINED 20 ELEMENTS   *
*                   OF (ELENGTH) BYTES.                               *
*                  NEXT BYTE IS USED AS OVERFLOW-INDICATOR.           *
*                    IF OVERFLOW-INDICATOR = X'00' AND ELEMENT NUMBER *
*                     TWENTY IS USED :                                *
*                      ANOTHER BLOCK OF INTERNAL TABLE EXISTS.        *
*                    IF OVERFLOW-INDICATOR = X'00' AND ELEMENT NUMBER *
*                     TWENTY IS NOT USED,                             *
*                     OR IF OVERFLOW-INDICATOR = X'FF' :              *
*                      THIS IS THE LAST BLOCK USED.                   *
*                  LAST THREE BYTES ARE NOT USED.                     *
*                                                                     *
*                      ELEMENT LENGTH IS (ELENGTH) BYTES.             *
*                        SEE DESCRIPTION OF A TABLE ELEMENT IN THE    *
*                         FOLLOWING DSECT.                            *
*                                                                     *
***********************************************************************
         SPACE 3
***********************************************************************
*        DSECT OF A TABLE ELEMENT                                     *
***********************************************************************
         SPACE 1
*****    ATTENTION :  LENGTH OF A TABLE ELEMENT MUST BE   *****
*****                  A MULTIPLE OF FOUR.                *****
         SPACE 1
ELEMENT  DSECT
ENDIND   DS    C                   IF THIS BYTE CONTAINS :
*                                        X'FF' THIS TABLE ELEMENT
*                                            IS AVAILABLE
         ORG   *-1
ELEPA    DS    F                   PROGRAM ENTRY POINT ADDRESS
*                                  IF 'E' IN THE FIRST BYTE OF THE
*                                   PRECEDING FULL-WORD ; CONTROL HAS
*                                   BEEN PASSED TO THIS PROGRAM, BUT
*                                   NEVER RECEIVED BACK.
ELUSEC   DS    H                   USE COUNT
ELNOEXED DS    H                   NO OF EXECUTIONS AFTER LAST DYNAMD -
ELNOEXEC DS    H                   NUMBER OF EXECUTIONS         / MINGD
ELSPARE  DS    H                   SPARE HALF-WORD
ELPGMNAM DS    CL8                 PROGRAM NAME
ELR14    DS    F                   RETURN ADDRESS OF CALLER
ELPARM   DS    F                   POINTER TO LAST PARAMETER(S) LIST
ELENGTH  EQU   *-ELEMENT
         SPACE 1
BLENGTH  EQU   ELENGTH*20+8 BLOCK LENGTH = LENGTH OF A ELEMENT X 20 + 8
         EJECT
DYNAMV00 CSECT
***********************************************************************
*        SCAN INTERNAL TABLE                                          *
***********************************************************************
BEGIN    XR    R15,R15             ZEROISE
         MVC   FLAGS,0(R1)         SAVE FLAGS FROM DYNAMING IN THIS CST
         L     R3,4(R1)            LOAD PARAMETER LIST POINTER
         L     R4,0(R3)            POINT TO PROGRAM NAME
         LA    R5,INTABLE          POINT TO FIRST BLOCK OF INT. TABLE
         B     *+8                 SKIP NEXT INSTRUCTION
LONEXTBL L     R5,0(R5)            POINT TO NEXT BLOCK OF 20 ELEMENTS
         LA    R6,4(R5)            POINT TO FIRST ELEMENT OF THIS BLOCK
         USING ELEMENT,R6          ESTABLISH ELEMENT DSECT ADDRESSABIL.
         LA    R7,20               ESTABLISH LOOP
LONEXTEL CLI   ENDIND,ENDTABLE     TEST IF END OF TABLE
         BE    NOTFOUND            YES - PROGRAM NAME NOT IN TABLE
         CLC   ELPGMNAM,0(R4)      TEST IF PROGRAM NAME IS IN TABLE
         BE    CONTINUE            YES - CONTINUE
         LA    R6,ELENGTH(R6)      NO  - POINT TO NEXT TABLE ELEMENT
         BCT   R7,LONEXTEL         GO PROCESS NEXT TABLE ELEMENT
         CLI   ENDIND,ENDTABLE     TEST IF END OF TABLE. IF NO GO -
         BNE   LONEXTBL             PROCESS FIRST ELEMENT OF NEXT BLOCK
         CLI   FUNCTION,DELETE     TEST IF FUNCTION REQ. IS DELETE
         BE    RETURN              YES - RETURN TO CALLER
         MVI   ENDIND,X'00'        NO  - SUPPRESS ENDTABLE INDICATOR
*                                  NO - ACQUIRE CORE FOR A NEW BLOCK
         LA    R0,BLENGTH           LOAD LENGTH
         BAL   R1,*+4               INDICATE GETMAIN CALL
         SVC   10                   GETMAIN
         ST    R1,0(R5)            SAVE ADDRESS OF GETMAINED AREA
         LA    R6,4(R1)            POINT REG6 TO 1ST ELEMENT OF NEW BLK
         MVI   0(R1),X'00'         **
         LA    R8,BLENGTH-1         *>  ZEROISE
NEXTPART CH    R8,MVCL              *    GETMAINED
         BH    MVC256               *     AREA
         BCTR  R8,0                 *
         EX    R8,*+8               *
         B     NOTFOUND             *
         MVC   1(0,R1),0(R1)        *
MVC256   MVC   1(256,R1),0(R1)      *
         LA    R1,256(R1)           *
         SH    R8,MVCL              *
         B     NEXTPART            **
NOTFOUND CLI   FUNCTION,DELETE     RETURN TO CALLER IF
         BE    RETURN                   FUNCTION IS DELETE
         SR    R1,R1               ZEROISE REG1
         IC    R1,DYNIFEL          LOAD NO OF ELEMENTS ALREADY IN TABLE
         LA    R1,1(R1)            INCREMENT IT OF ONE
         STC   R1,DYNIFEL          SAVE NEW NUMBER
         MVI   ENDIND,X'00'        SUPPRESS ENDTABLE INDICATOR
         MVI   ELEMENT+ELENGTH,ENDTABLE SET ENDTABLE IND TO X'FF' OF NE
         MVC   ELPGMNAM,0(R4)      MOVE PROGRAM NAME IN TABLE
         EJECT
***********************************************************************
*        LOAD, EXECUTE AND/OR DELETE LOAD MODULE.                     *
***********************************************************************
         SPACE 1
CONTINUE EQU   *
DYNAML   L     R5,ELEPA            LOAD PGM ENTRY POINT ADDRESS
         LTR   R5,R5               TEST IS PROGRAM IN CORE
         BNZ   ALRELOAD            BRANCH IF YES
         CLI   FUNCTION,DELETE     TEST IF FUNCTION IS DELETE
         BE    RETURN              YES - RETURN TO CALLER
         LR    R0,R4               POINT TO PROGRAM NAME
         SR    R1,R1               DCB NOT SPECIFIED
         SVC   8                   LOAD PROGRAM IN CORE
         ST    R0,ELEPA            SAVE ENTRY POINT ADDRESS
         CLI   FUNCTION,EXECUTE    TEST IF FUNCTION IS EXECUTE
         BE    DYNAME              YES - SKIP FOUR INSTRUCTIONS
         MVC   ELUSEC,ONE          SET USE COUNT TO ONE
ALRELOAD CLI   FUNCTION,LOAD       TEST FUNCTION REQUESTED
         BL    DYNAMD              FUNCTION IS 'D'
         BE    RETURN              FUNCTION IS 'L', RETURN TO CALLER
DYNAME   LH    R1,ELUSEC           INCREMENT
         LA    R1,1(R1)             USE
         STH   R1,ELUSEC             COUNT
         LH    R1,ELNOEXED         INCREMENT
         LA    R1,1(R1)             NUMBER OF
         STH   R1,ELNOEXED           EXECUTIONS AFTER LAST DYNAMD/MINGD
         LH    R1,ELNOEXEC         INCREMENT
         LA    R1,1(R1)             NUMBER OF
         STH   R1,ELNOEXEC           EXECUTIONS COUNT
         MVC   DYNIFPEX,DYNIFREX   MOVE PGM NAME RECENT TO PREVIOUS
         MVC   DYNIFREX,0(R4)      MOVE THIS PROGRAM NAME
         ST    R14,ELR14           SAVE RETURN ADDRESS OF CALLER
         L     R15,ELEPA           LOAD ENTRY POINT ADDRESS
         LA    R1,4(R3)            POINT TO PARAMETER LIST
         ST    R1,ELPARM           SAVE POINTER TO TABLE ELEMENT
         MVI   ELEPA,C'E'          INDICATE THIS PGM IS IN EXECUTION
         SPACE 1
         BALR  R14,R15             GO TO EXECUTE CALLED PROGRAM
         SPACE 1
         MVI   ELEPA,X'00'         REMOVE 'E' FROM TOP BYTE
         EJECT
******   CONT'D
         SPACE 1
DYNAMD   CLC   ELUSEC,ONE          TEST IF USE COUNT IS = TO ONE
         BNE   DECRMENT            NO - GO DECREMENT IT
         CLI   FUNCTION,DELETE     TEST IF FUNCTION IS DELETE
         BE    PROGDEL             YES - GO DELETE PROGRAM
         CLC   ELNOEXED,SIX        TEST IF NO OF EXECS AFTER 'D' = SIX
         BNE   PROGDEL             NO - GO DELETE PROGRAM
         CLI   SYSTEM,MVS          TEST IF CALLER RUNNING UNDER MVS
         BNE   PROGDEL             NO  - GO DELETE PROGRAM
         MVC   MSGPGMN(8),ELPGMNAM MOVE PROGRAM NAME TO MESSAGE OF WTO
         BAL   R1,WTO              BRANCH AROUND DC'S AND LOAD REG1
         DC    AL2(L'MSGWTO+4) TEXT LENGTH
         DC    AL2(0)          MCS FLAGS
MSGWTO   DC    C'DYNAMV01 - EXCESSIVE USE HAS CAUSED ''        '' TO BEX
                LOADED AUTOMATICALLY'
MSGPGMN  EQU   *-36                POINTER FOR PGM NAME IN WTO MESSAGE
         CNOP  0,4                 ASSUME A GOOD ALIGNMENT FOR NEXT INS
WTO      SVC   35                  WRITE MESSAGE TO CONSOLE
         B     RETURN              YES - RETURN TO CALLER
DECRMENT LH    R1,ELUSEC           DECREMENT
         BCTR  R1,0                 USE COUNT
         STH   R1,ELUSEC             OF ONE
         B     RETURN              RETURN TO CALLER
PROGDEL  XC    ELEPA,ELEPA         ZEROISE ENTRY POINT ADDRESS
         XC    ELUSEC,ELUSEC       ZEROISE USE COUNT
         CLI   FUNCTION,DELETE     TEST IF DYNAMD/MINGD CALL
         BNE   *+10                NO - SKIP NEXT INSTRUCTION
         XC    ELNOEXED,ELNOEXED   ZEROISE NO OF EXECUTIONS AFTER 'D'
         LR    R0,R4               POINT TO PROGRAM NAME
         SVC   9                   DELETE PROGRAM
         EJECT
***********************************************************************
*        RETURN TO CALLER.                                            *
***********************************************************************
         SPACE 1
RETURN   L     R13,4(R13)          POINT TO HSA
         ST    R15,16(R13)         SAVE RETURN CODE FROM CALLED PROGRAM
         LM    R14,R12,12(R13)     RESTORE CALLER REGISTERS
         SPACE 1
         BR    R14                 RETURN TO CALLER
         SPACE 1
******   THE CALLER IS NORMALLY 'DYNAMING', BUT DYNAMV00 PASSES ******
******    THE CONTROL DIRECTLY TO THE CALLER OF 'DYNAMING', DUE ******
******    TO 'RIGAM' THAT NEEDS TO HAVE ACCESS TO THE SAVE AREA ******
******    OF THIS CALLER. DYNAMV00 USES THE SAVE AREA OF        ******
******    'DYNAMING' (I.E. DYNAMV00 DOES NOT ALTER REGISTER 13).******
         EJECT
***********************************************************************
*        WORK AREAS, CONSTANTS, FLAGS, EQUATES AND LITERALS.          *
***********************************************************************
         SPACE 1
FLAGS    DS    F
         ORG   *-4
SYSTEM   DS    C                   SYSTEM : F = MFT, V = MVS.
LANGUAGE DS    C                   LANGUAGE (OF CALLER) :
*                                     C = COBOL (DYNAMI).
*                                     R = RPG (MINGS).
FUNCTION DS    C                   FUNCTION (REQUESTED) :
*                                     L = LOAD LOAD MODULE.
*                                     O = EXECUTE LOAD MODULE.
*                                     D = DELETE LOAD MODULE.
RESERVED DS    C
         SPACE 1
ONE      DC    H'1'
SIX      DC    H'6'
MVCL     DC    H'256'
         SPACE 1
MFT      EQU   C'F'
MVS      EQU   C'V'
COBOL    EQU   C'C'
RPG      EQU   C'R'
LOAD     EQU   C'L'
EXECUTE  EQU   C'O'
DELETE   EQU   C'D'
ENDTABLE EQU   X'FF'
         SPACE 3
INTABLE  DC    F'0'
         DC    X'FF'
         DC    XL(BLENGTH/4-5)'00'
         DC    XL(BLENGTH/4)'00'
         DC    XL(BLENGTH/4)'00'
         DC    XL(BLENGTH/4)'00'
         SPACE 3
         END
/*
//LKED.SYSLMOD DD DSN=SYS2.DYNAMING(DYNAMV00),DISP=SHR
