         TITLE 'T580P130 - ADD COST CENTRE TO TIME SHEET RECORDS'
         MACRO
&NAME    TEST  &X,&Y               TEST FIELD FOR NUMERIC
         LCLC  &L
&NAME    LA    R2,&X &L       SETC  'L'''
         LA    R3,&L&X          BAL   R4,NUMERIC&Y          MEND
         SPACE 5
T580P130 CSECT
         PRINT ON,GEN,NODATA
         SPACE 1
*        REGISTER EQUATES AND USAGE
         SPACE 1
R0       EQU   0
R1       EQU   1
R2       EQU   2         WORK REGISTER
R3       EQU   3         WORK REGISTER
R4       EQU   4         BAL RETURN ADDRESS
R5       EQU   5         ADDRESS OF SYSPRINT BUFFER
R6       EQU   6         ADDRESS OF SYSUT1 BUFFER
R7       EQU   7         ADDRESS OF SYSUT2 BUFFER
R8       EQU   8         ADDRESS OF SYSOUT BUFFER
R9       EQU   9         ADDRESS OF SYSIN BUFFER / PARM POINTER
R10      EQU   10        WORK REGISTER
R11      EQU   11        BASE REGISTER 3
R12      EQU   12        BASE REGISTER 2
R13      EQU   13        SAVE AREA POINTER / BASE REGISTER 1
R14      EQU   14        BALR RETURN ADDRESS
R15      EQU   15        BALR ROUTINEADDRESS
         EJECT
***********************************************************************
*                                                                     *
*        FORMAT OF TIME SHEET RECORDS                                 *
*                                                                     *
***********************************************************************
         SPACE 1
TIMECARD DSECT
TIMECLAS DS    CL4                 CARD ID
TIMETEAM DS    CL3                 MISD TEAM
TIMEINIT DS    CL3                 PROGRAMMERS INITIALS
TIMEDATE DS    CL6                 YYMMDD OF END OF WEEK
TIMEPROJ DS    CL4                 CHARGE CODE
TIMEPROG DS    CL8                 PROGRAM NAME
TIMECODE DS    CL2                 WORK CODE
TIMEPERC DS    CL2                 PERCENTAGE OF WORK REMAINING
TIMETIME DS    CL2                 HOURS WORKED
TIMESPR1 DS    CL5                 UNUSED
TIMECOMM DS    CL15                COMMENTS
TIMECC   DS    CL5                 COST CENTRE
TIMEENT  DS    CL2                 ENTITY
TIMELOCN DS    CL4                 LOCATION
TIMEXCLS DS    CL3                 EXPENSE CLASS
TIMESPR2 DS    CL11                EXPENSE CLASS
TIMEFLAG DS    CL1                 CORRECTION FLAG
TIMELGTH EQU   *-TIMECARD          LENGTH OF DSECT
T580P130 CSECT
         SPACE 5
***********************************************************************
*                                                                     *
*        FORMAT OF PROJECT LOG RECORDS.                               *
*                                                                     *
***********************************************************************
         SPACE 1
PROJCARD DSECT
PROJPROJ DS    CL4                 PROJECT NUMBER
PROJCHRG DS    CL4                 CHARGE CODE
PROJCC   DS    CL5                 COST CENTRE
PROJPERC DS    CL3                 PERCENTAGE TO BE CHARGED
PROJACRO DS    CL8                 SYSTEM ACRONYM
PROJDESC DS    CL29                DESCRIPTION OF CHARGE CODE
PROJISUE DS    CL15                PERSON TO WHOM ISSUED
PROJDATO DS    CL6                 DATE PROJECT OPENED
PROJDATC DS    CL6                 DATE PROJECT CLOSED
PROJLGTH EQU   *-PROJCARD          LENGTH OF DSECR
T580P130 CSECT
         EJECT
***********************************************************************
*        FORMAT OF TABLE02 ENTRIES.                                   *
***********************************************************************
         SPACE 1
TABLE2   DSECT
TAB2ID   DS    CL7                 CARC IDENTIFIER
         DS    CL8                 UNUSED
TAB2CODE DS    CL2                 WORK CODE
         DS    CL13                UNUSED
TAB2DESC DS    CL20                DESCRIPTION
         DS    CL30                UNUSED
TAB2LGTH EQU   *-TABLE2            LENGTH OF DSECT
         SPACE 5
***********************************************************************
*        FORMAT OF TEMPORARY CHAIN OF ELEMENTS
***********************************************************************
         SPACE 1
TAB2CHN  DSECT
TAB2NEXT DS    CL4                 ADDRESS OF NEXT ENTRY
TAB2NTRY DS    CL2                 WORK CODE
TAB2CHNL EQU   *-TAB2CHN           LENGTH OF CHAIN ELEMENT
         EJECT
***********************************************************************
*        FORMAT OF TABLE03 ENTRIES.                                   *
***********************************************************************
         SPACE 1
TABLE3   DSECT
TAB3ID   DS    CL7                 CARD IDENTIFIER
         DS    CL8                 UNUSED
TAB3DESC DS    CL12                SORT FIELD DESCRIPTION
         DS    CL1                 UNUSED
TAB3NAME DS    CL8                 SORT FIELD NAME
         DS    CL44                UNUSED
TAB3LGTH EQU   *-TABLE3            LENGTH OF DSECT
         SPACE 5
***********************************************************************
*        FORMAT OF TEMPORARY CHAIN OF ELEMENTS                        *
***********************************************************************
         SPACE 1
TAB3CHN  DSECT
TAB3NEXT DS    CL4                 ADDRESS OF NEXT ELEMENT
TAB3DES  DS    CL12                SORT FIELD DESCRIPTION
TAB3NME  DS    CL8                 SORT FIELD NAME
TAB3CHNL EQU   *-TAB3CHN           LENGTH OF CHAIN ELEMENT
         EJECT
***********************************************************************
*        FORMAT OF SYSPRINT ( T580R130 ) PRINT LINE                   *
***********************************************************************
         SPACE 1
PRINTLNE DSECT
LINECTRL DS    CL1                 CARRIAGE CONTROL CHARACTER
         DS    CL1                 SPACE
LINEID   DS    CL4                 CARDTYPE
         DS    CL3                 SPACES
LINETEAM DS    CL3                 MISD TEAM
         DS    CL3                 SPACES
LINEINIT DS    CL3                 PROGRAMMER'S INITIALS
         DS    CL2                 SPACES
LINEYY   DS    CL2                 YY OF W/E
LINES1   DS    CL1                 '/'
LINEMM   DS    CL2                 MM OF W/E
LINES2   DS    CL1                 '/'
LINEDD   DS    CL2                 DD OF W/E
         DS    CL3                 SPACES
LINEPROJ DS    CL4                 CHARGE CODE
         DS    CL4                 SPACES
LINEPROG DS    CL8                 PROGRAM NAME
         DS    CL3                 SPACES
LINECODE DS    CL2                 WORK CODE
         DS    CL4                 SPACES
LINEPERC DS    CL2                 PER CENTAGE OF WORK REMAINING
         DS    CL5                 SPACES
LINEHOUR DS    CL2                 TIME SPENT ON PROJECT
         DS    CL3                 SPACES
LINECOMM DS    CL15                COMMENTS
         DS    CL4                 SPACES
LINEFLAG DS    CL1                 CORRECTION FLAG
         DS    CL3                 SPACES
LINEACTN DS    0CL38               ACTION / ERROR MESSAGE
         DS    CL32                TEXT OF MESSAGE
LINEACT1 DS    CL3                 MAJOR COST CENTRE
LINEACT2 DS    CL1                 '.'
LINEACT3 DS    CL2                 MINOR COST CENTRE
         DS    CL2                 SPACES
LINEACT4 DS    CL1                 REJECTED FLAG
         DS    CL1                 SPACE
LINELGTH EQU   *-PRINTLNE          LENGTH OF DSECT
T580P130 CSECT
         EJECT
***********************************************************************
*                                                                     *
*        FORMAT OF A CHAIN ELEMENT CONSTRICTED FROM A PROJECT         *
*         LOG ENTRY.  EACH PROJECT LOG ENTRY WITH A % OF 100          *
*         AND HAS NOT BEEN CLOSED CREATES A TRUE ENTRY, WHILE         *
*         PROJECTS DISTRIBUTED ACROSS A NUMBER OF COST CENTRES        *
*         CREATE PSEUDO ENTRIES.  THESE ENTRIES INITIALLY COMPRISE    *
*         A CHAIN, BUT ARE LATER MOVED TO CONTIGUOUS AND SORTED       *
*         INTO CHARGE CODE SEQUENCE.  EACH ENTRY ON THIS FINAL        *
*         TABLE COMPRISES A FOUR BYTE CHARGE CODE AND A FIVE          *
*         BYTE COST CENTRE OR PSEUDO CODE.                            *
*                                                                     *
***********************************************************************
         SPACE 5
*********************************************
* CHNNEXT  *          *          *          *
*        ADDRESS OF NEXT CHAIN ELEMENT      *
*          *          *          *          *
*********************************************
* CHNCHRG  *          *          *          *
*              CHARGE CODE                  *
*          *          *          *          *
*********************************************
* CHNCOST  *          *          *          *
*              COST CENTRE                  *
*          *          *          *          *
*********************************************
*   COST   * CHNLAST  *          *          *
*  CENTRE  * ADDRESS OF LAST CHAIN ELEMENT  *
*  CONT'D  *           *         *          *
*********************************************
* CHNFLAG  *
*          *
*  FLAGS   *
************
         SPACE 5
CHNNEXT  EQU   0                   ADDRESS OF NEXT CHAIN ELEMENT
CHNCHRG  EQU   4                   CHARGE CODE
CHNCOST  EQU   8                   COST CENTRE
CHNLAST  EQU   12                  ADDRESS OF LAST CHAIN ELEMENT
CHNFLAG  EQU   16                  MISCELLANEOUS FLAGS
         SPACE 1
PROJCLOS EQU   1                   FLAG - PROJECT CLOESD
         EJECT
NTRYCHRG EQU   0                   CHARGE CODE
NTRYCOST EQU   4                   COST CENTRE
NTRYFLAG EQU   9                   MISCELLANEOUS FLAGS
         SPACE 5
*        NOTE :
*              THE PREVIOUS EQUATES ALSO APPLY TO THE
*               FINAL TABLE ENTRIES CONTRUCTED IN A SINGLE TABLE.
         EJECT
***********************************************************************
*        HOUSEKEEPING                                                 *
***********************************************************************
         SPACE 1
         PGMIN EQUATES=NO,USING=(R13,R12,R11) ESTABLISH ADDRESSABILITY
         PRINT NOGEN               SUPPRESS MACRO EXPANSION
         ST    R1,PARMPNTR         PRESERVE PARM POINTER
         ST    R13,E15R13S1        PRESERVE REG 13 FOR E15
         ST    R13,E35R13S1        PRESERVE REG 13 FOR E35
         L     R15,DATEADDR        GET ADDRESS OF DATERTN
         LA    R1,ADATEFLD         POINT R1 AT ADDRESS OF DATE FIELD
         BALR  R14,R15             PASS CONTROL TO DTERTN
         SPACE 5
***********************************************************************
*        OPEN DATA SETS                                               *
***********************************************************************
         SPACE 1
         LA    R10,MAXDS           ESTABLISH LOOP
         LA    R2,DCBTABLE         POINT AT AD-CON TABLE
LOOP1    BAL   R4,DDFIND           VERIFY DD STATEMENT EXISTS
         BAL   R4,OPEN             OPEN DATA SET IF PRESENT
         LA    R2,NTRYSIZE(,R2)    POINT AT NEXT TABLE ENTRY
         BCT   R10,LOOP1           PROCESS NEXT DATA SET
         LA    R5,SAFETY           POINT BUFFER POINTERS AT
         LA    R7,UT2REC            PSEUDO-BUFFER, LEST NO
         LA    R8,SAFETY            DD STATEMENT IS PRESENT
         EJECT
***********************************************************************
*        THIS ROUTINE PUTS OUT INITIAL INFORMATORY MESSAGES           *
*         TO SYSOUT ( T580R131 ).                                     *
***********************************************************************
         SPACE 1
         MVI   0(R8),PAGESKIP      ESTABLISH PAGE SKIP FOR SYSOUT
         MVI   0(R5),PAGESKIP       AND FOR SYSPRINT
         BAL   R4,PRINTOUT         SKIP TO NEW PAGE
         MVI   0(R5),SPCE3AFT      ESTABLISH TRIPLE SPACE
         MVI   0(R8),SPCE3AFT      ESTABLISH TRIPLE SPACE FOR SYSOUT
         MVC   5(L'LINE01,R8),LINE01 ADD HEADING LINE TO SYSOUT
         BAL   R4,PRINTOUT         WRITE HEADING LINE
         MVC   5(L'LINE02,R8),LINE02 ADD SUB-HEADING TO SYSOUT
         BAL   R4,PRINTOUT         WTITE SUB-HEADING
         LA    R10,MAXDS           ESTABLISH DETAIL LOOP
         LA    R2,DCBTABLE         POINT AT AD-CON TABLE
LOOP2    TM    0(R2),DDSTAT        TEST IF DD STATEMENT PRESENT
         BZ    *+14                BYPASS PRINT IF NOT
         MVC   10(8,R8),4(R2)      ADD DD NAME TO SYSOUT
         BAL   R4,PRINTOUT         PRINT DETAIL LINE
         LA    R2,NTRYSIZE(,R2)    POINT TO NEXT TABLE ENTRY
         BCT   R10,LOOP2           PROCESS NEXT ENTRY
         MVI   0(R8),SPCE2AFT       IN SYSPRINT AND SYSOUT
         BAL   R4,PRINTOUT          AND WRITE IT
         SPACE 5
***********************************************************************
*        VERIFY THAT SYSUT1 DD STATEMENT EXISTS                       *
***********************************************************************
         SPACE 1
TESTUT1  TM    SYSUT1SW,DDSTAT     TEST FOR SYSUT1 STATEMENT
         BO    TESTUT1X            BRANCH IF ONE EXISTS
         MVC   COMPCODE,COND16     SET CONDITION CODE TO 16
         WTO   'T580P130     ***** NO SYSUT1 STATEMENT *****'
         WTO   'T580P130     ***** PROCESSING BYPASSED *****'
         MVC   5(L'LINE08,R8),LINE08 ADD ERROR MESSAGE TO SYSOUT
         BAL   R4,PRINTOUT         WRITE ERROR MESSAGE
         MVC   5(L'LINE09,R8),LINE09 TELL OF INACTION
         BAL   R4,PRINTOUT         WRITE MESSAGE
         B     PRINTCDE            PRINT CONDITION CODE
TESTUT1X EQU   *                   EXIT FROM RTN
         EJECT
***********************************************************************
*        BUILD UP TABLE OF WORK CODES                                 *
***********************************************************************
         SPACE 1
         USING TABLE2,R6           ESTABLISH RECORD AND
         USING TAB2CHN,R2           EMELENT ADDRESSABILTTY
         SPACE 1
         TM    TABLE2SW,DDOPEN     TEST FRO DD STATEMENT PRESENT
         BZ    BLDTAB2X            BRANCH IF NOT
         SR    R3,R3               ZEROISE COUNTING REGISTER
         LA    R2,CHAIN2           POINT R2 AT FIRST CHAIN FIELD
GETTAB02 GET   TABLE02             GET TABLE RECORD
         LR    R6,R1               ESTABLISH ADDRESSABILITY OF RECORD
         CLC   TAB2ID,=C'TABLE02'  TEST FOR DETAIL IDENTIFIER
         BNE   GETTAB02            GET ANOTHER IF NOT
         AP    CNTTAB2,ONE         INCREMENT COUNTER
       GETMAIN R,LV=6              GET CORE TO BUILG ELEMENT
         ST    R1,TAB2NEXT         POINT PREVIOUS ELEMENT AT THIS ONE
         LR    R2,R1               POINT R2 AT THIS ELEMENT
         XC    TAB2NEXT,TAB2NEXT   ZEROISE FORWARD POINTER
         MVC   TAB2NTRY,TAB2CODE   ADD WORK CODE TO ELE,ENT
         LA    R3,1(,R3)           INCREMENT BINARY COUNTER
         B     GETTAB02            GET NEXT RECORD
         SPACE 1
         DROP  R2                  DROP ELEMENT ADDRESSABILITY
         USING TAB2CHN,R1           AND RE-ESTABLISH IT
         SPACE 1
ENDTAB02 ST    R3,NUMCODET         PRESERVE NUMBER OF ENTRIES
         ZAP   DECIMAL,CNTTAB2     ELEMENT COUNT TO WORK AREA
         CP    DECIMAL,ZERO        TEST IF NO ELEMENTS
         BE    BLDTAB2X            EXIT IF NOT
         MP    DECIMAL,TWO         CALCULATE TABLE SIZE
         CVB   R0,DECIMAL          CONVERT SIZE TO BINARY
       GETMAIN R,LV=(R0)           ACQUIRE CORE FOR TABLE
         ST    R1,ADRCODET         PRESERVE ADDRESS OF TABLE
         LR    R2,R1               INITIALISE TABLE POINTER
         L     R3,CHAIN2           GET ADDRESS OF 1ST CHAIN ELEMENT
TAB2LOOP LTR   R1,R3               TEST FOR END OF CHAIN
         BZ    BLDTAB2X            EXIT IF YES
         MVC   0(2,R2),TAB2NTRY    ADD ELEMENT CONTENTS TO TABLE
         LA    R2,2(,R2)           INCREMENT TO NEXT AABLE ENTRY
         L     R3,TAB2NEXT         GET ADDRESS OF NEXT ELEMENT
      FREEMAIN R,LV=6,A=(R1)       FREE ELEMENT'S CORE
         B     TAB2LOOP            LOOP BACK TO PROCESS NEXT
BLDTAB2X LA    R2,TABLE2SW         POINT AT DCB POINTER
         BAL   R4,CLOSE            COOSE DATA SET IF OPEN
         DROP  R1                  DROP
         DROP  R6                   ADDRESSABILITY
         EJECT
***********************************************************************
*        BUILD UP TABLE OF SORT DESCRIPTIONS                          *
***********************************************************************
         SPACE 1
         USING TABLE3,R6           ESTABLISH RECORD AND
         USING TAB3CHN,R2           EMELENT ADDRESSABILTTY
         SPACE 1
         TM    TABLE3SW,DDOPEN     TEST FRO DD STATEMENT PRESENT
         BZ    BLDTAB3X            BRANCH IF NOT
         SR    R3,R3               ZEROISE COUNTING REGISTER
         LA    R2,CHAIN3           POINT R2 AT FIRST CHAIN FIELD
GETTAB03 GET   TABLE03             GET TABLE RECORD
         LR    R6,R1               ESTABLISH ADDRESSABILITY OF RECORD
         CLC   TAB3ID,=C'TABLE03'  TEST FOR DETAIL IDENTIFIER
         BNE   GETTAB03            GET ANOTHER IF NOT
         AP    CNTTAB3,ONE         INCREMENT COUNTER
       GETMAIN R,LV=24             GET CORE TO BUILG ELEMENT
         ST    R1,TAB3NEXT         POINT PREVIOUS ELEMENT AT THIS ONE
         LR    R2,R1               POINT R2 AT THIS ELEMENT
         XC    TAB3NEXT,TAB3NEXT   ZEROISE FORWARD POINTER
         MVC   TAB3DES,TAB3DESC    ADD DESCRIPTION TO ELEMENT
         MVC   TAB3NME,TAB3NAME    ADD FIELD NAME TO ELEMENET
         LA    R3,1(,R3)           INCREMENT BINARY COUNTER
         B     GETTAB03            GET NEXT RECORD
         SPACE 1
         DROP  R2                  DROP ELEMENT ADDRESSABILITY
         USING TAB3CHN,R1           AND RE-ESTABLISH IT
         SPACE 1
ENDTAB03 ST    R3,NUMSRTAB         PRESERVE NUMBER OF ENTRIES
         ZAP   DECIMAL,CNTTAB3     ELEMENT COUNT TO WORK AREA
         CP    DECIMAL,ZERO        TEST IF NO ELEMENTS
         BE    BLDTAB3X            EXIT IF NOT
         MP    DECIMAL,TWENTY      CALCULATE TABLE SIZE
         CVB   R0,DECIMAL          CONVERT SIZE TO BINARY
       GETMAIN R,LV=(R0)           ACQUIRE CORE FOR TABLE
         ST    R1,ADRSRTAB         PRESERVE ADDRESS OF TABLE
         LR    R2,R1               INITIALISE TABLE POINTER
         L     R3,CHAIN3           GET ADDRESS OF 1ST CHAIN ELEMENT
TAB3LOOP LTR   R1,R3               TEST FOR END OF CHAIN
         BZ    BLDTAB3X            EXIT
         MVC   0(20,R2),TAB3DES    ADD ELEMENT CONTENTS TO TABLE
         LA    R2,20(,R2)          INCREMENT TO NEXT TABLE ENTRY
         L     R3,TAB3NEXT         GET ADDRESS OF NEXT ELEMENT
      FREEMAIN R,LV=24,A=(R1)      FREE ELEMENT'S CORE
         B     TAB3LOOP            LOOP BACK TO PROCESS NEXT
BLDTAB3X LA    R2,TABLE3SW         POINT AT DCB POINTER
         BAL   R4,CLOSE            COOSE DATA SET IF OPEN
         DROP  R1                  DROP
         DROP  R6                   ADDRESSABILITY
         EJECT
***********************************************************************
*        DETERMINE WHETHER THE DATA ARE TO BE SORTED                  *
***********************************************************************
         SPACE 1
TESTSORT LA    R10,SORTDS          ESTABLISH LOOP
         SR    R3,R3               ZEROISE COUNTER
         LA    R2,SORTABLE         POINT AT SORT DD TABLE
         BAL   R4,DDFIND           VERIFY DD STATEMENT EXISTS
         LA    R3,1(,R3)           INCREMENT 'FOUND' COUNT
         LA    R2,NTRYSIZ2(,R2)    POINT AT NEXT TABLE ENTRY
         BCT   R10,*-12            VERIFY NEXT DD STATEMENT
         LA    R10,SORTDS          SET UP VALUE FOR COMPARE
         CR    R10,R3              TEST IF ALL STATEMENTS SUPPLIED
         BE    TSTSRTND            BRANCH IF YES TO ROUTINE END
         LTR   R3,R3               TEST IF NO SORT STATEMENTS SUPPLIED
         BZ    NOSORT              BRANCH IF NOT
         MVC   5(L'LINE18,R8),LINE18  STATEMENTS IN SYSPRINT & SYSOUT
         BAL   R4,PRINTOUT         WRITE THE MESSAGE
         MVC   5(L'LINE19,R8),LINE19  SYSPRINT AND SYSOUT
         BAL   R4,PRINTOUT         WRITE THE MESSAGE
         LA    R10,SORTDS          ESTABLISH LOOP
         LA    R2,SORTABLE         POINT AT START OF TABLE
LOOP3    TM    0(R2),DDSTAT        TEST IF DD STATEMENT PRESENT
         BO    *+14                BRANCH IF YES
         MVC   10(8,R8),4(R2)       AND SYSOUT
         BAL   R4,PRINTOUT         PRINT THE NAME
         LA    R2,NTRYSIZ2(,R2)    POINT TO NEXT TABLE ENTRY
         BCT   R10,LOOP3           PROCESS NEXT ENTRY
         B     TELNOSRT            TELL OF NO SORT FUNCTION
         SPACE 1
NOSORT   MVC   5(L'LINE21,R8),LINE21 TELL OF NO SORT DD STATEMENTS
         BAL   R4,PRINTOUT          AND WRITE THE MESSAGE
         SPACE 1
TELNOSRT MVI   0(R8),SPCE3AFT      ESTABLISH FOLLOWING SPACES
         MVC   5(L'LINE20,R8),LINE20 MOVE IN 'NO SORT ' MESSAGE
         BAL   R4,PRINTOUT          AND PRINT IT
         OI    SORTSW+1,X'F0'      ENSSURE SORT IS BYPASSED
         B     PARMEND             BYPASS PARM PROCESSING
         SPACE 1
TSTSRTND EQU   *                   END OF 'TEST FOR SORT' ROUTINE
         EJECT
***********************************************************************
*        PROCESS PARM FIELDS ( DETERMINE SORT SEQUENCE )              *
***********************************************************************
         SPACE 1
PARM     EQU   *                   PROCESS PARM SUB-FIELDS
         LA    R2,E15EXIT          GET ADDRESS OF E15 TERMINATION RTN
         L     R3,SYSUT1SW         GET ADDRESS OF SYSUT1 DCB
         ST    R2,DCBEODAD-IHADCB(,R3) ALTER SYSUT1 EODAD ADDR FOR SORT
         MVC   5(L'LINE25,R8),LINE25  WILL BE SORTED
         BAL   R4,PRINTOUT         WRITE THE MESSAGE
PARMGET  BAL   R4,GETPARM          GET SUB-FIELD FROM PARM
         B     PARMDONE            END OF PARM SO DESCRIBE
         L     R4,ADRSRTAB         POINT AT SORT FIELD TABLE
         L     R10,NUMSRTAB        ESTABLISH LOOP
         B     *+8                 BYPASS FIRST TIME
LOOP4    LA    R4,NTRYSIZ3(,R4)    POINT AT NEXT ENTRY
         EX    R3,PARMCLC          TEST FOR MATCH
         BE    PARMGOOD            BRANCH IF YES
         BCT   R10,LOOP4           TEST AGAINST NEXT TABLE ENTRY
         MVC   5(L'LINE29,R8),LINE29 IN SYSPRINT AND SYSOUT
         BAL   R4,PRINTOUT         WRITE THE MESSAGE
         EX    R3,PARMMVC          ADD PARM SUB-FIELD
         BAL   R4,PRINTOUT         WRITE THE MESSAGE
DEFAULT3 MVC   5(L'LINE30,R8),LINE30 TELL IT WILL BE IGNORED
         BAL   R4,PRINTOUT          AND PRINT THE MESSAGE
         B     DEFAULT2            TELL OF DEFAULT SEQUENCE
         SPACE 1
PARMCLC  CLC   12(0,R4),0(R2)      EXECUTED COMPARE INSTRUCTION
PARMMVC  MVC   10(0,R8),0(R2)      EXECUTED MOVE INSTRUCTION
         SPACE 1
PARMGOOD CP    CNTPARM,PARMLIMT    TEST IF LIMIT EXCEEDED
         BNH   PARMPROC            BRANCH IF NOT
         MVC   5(L'LINE31,R8),LINE31  IN SYSPRINT AND SYSOUT
         BAL   R4,PRINTOUT         WRITE THE MESSAGE
         BAL   R4,PARMPUT          PRINT THE PARM
         B     DEFAULT3            TELL PARM IGNORED
         SPACE 1
PARMPROC LR    R2,R4               POINT R2 AT TABLE ENTRY
         BAL   R4,FLDADD           MODIFY SORT FIELD AREA
         B     PARMGET             GET NEXT SUB-FIELD
         EJECT
***********************************************************************
*        TERMINATE PARM PROCESSING                                    *
***********************************************************************
         SPACE 1
PARMDONE CP    CNTPARM,ZERO        TEST IF PARM SUPPLIED
         BE    DEFAULT             BRANCH IF NOT
         LA    R2,SORTDUP          POINT R2 AT ADDITIONAL SORT FIELD
         BAL   R4,FLDADD           MODIFY FIELD TO GROUP DUPLICATES
         MVC   FLDADDR(8),REQADDR  ESTABLISH MODIFIED FIELD IN SORT
         MVC   5(L'LINE32,R8),LINE32  IN SYSPRINT AND SYSOUT
         BAL   R4,PRINTOUT         WRITE THE LINE
         BAL   R4,PARMPUT          PRINT THE PARM
         B     PARMEND             TERMINATE PARM PROCESSING
         SPACE 1
DEFAULT  MVC   5(L'LINE26,R8),LINE26 TELL OF DEFAULT SORT
         BAL   R4,PRINTOUT          AND PRINT THE LINE
DEFAULT2 MVI   0(R8),SPCE3AFT      ESTABLISH TRIPLE SPACE
         MVC   10(L'LINE27,R8),LINE27 INDICATE SEQUENCE
         BAL   R4,PRINTOUT         PRINT THE LINE
PARMEND  EQU   *                   END OF PARM PROCESSING
         EJECT
***********************************************************************
*        BUILD COST CENTRE / CHARGE CODE TABLE IN CORE                *
***********************************************************************
         SPACE 1
***********************************************************************
*    1.  SYSTABLE IS READ AND EVERY NON-BLANK TABLE ENTRY             *
*         FOUND BECOMES AN ELEMENT IN A CHAIN OF ENTRIES.             *
***********************************************************************
         SPACE 1
         USING PROJCARD,R3         ESTABLISH PROJECT LOG ADDRESSABILITY
         MVI   0(R8),SPCE2AFT       DOUBLE SPACE
         BAL   R4,PRINTOUT         PRINT THE LINE
         TM    TABLESW,DDSTAT      TEST FOR SYSTABLE STATEMENT
         BZ    GETTABLX            BYPASS PROCESSING IF NONE
         LA    R2,CHAIN            POINT R2 AT FIRST CHAIN FIELD
GETTABLE GET   SYSTABLE            GET TABLE RECORD
         AP    CNTTAB,ONE          INCREMENT RECORD COUNT
         LR    R3,R1               POINR R3 AT START OF RECORD
         CLC   PROJPERC,=C'000'    TEST IF OCCASIONAL USER
         BE    GETTABLE            IGNORE ENTRY ENTIRELY IF SO
         CLC   PROJPERC,=C'100'    VERIFY THAT ALL CHARGES TO 1 COST CN
         BE    TABBLD              BRANCH IF YES TO BUILD CHAIN
         CLC   PROJCHRG,CHNCHRG(R2) TST IF CHANGE OF CHARGE CODE
         BE    GETTABLE            GET NEXT IF NOT
         OI    SWITCH,NON100       INDICATE THAT NON-100 ENTRY BUILT
         B     TABBLD+L'TABBLD     BUILD CHAIN ELEMENT
TABBLD   NI    SWITCH,255-NON100   SET NON-100 SWITCH OFF
         AP    CNTNTRYS,ONE        INCREMENT ENTRY COUNT
       GETMAIN R,LV=17             GET CORE TO BUILD ELEMENT
         ST    R1,CHNNEXT(R2)      POINT PREVIOUS ELEMENT AT THIS ONE
         ST    R2,CHNLAST(R1)      POINT THIS ELEMENT AT LAST
         LR    R2,R1               POINT R2 AT THIS ELEMENT
         MVC   CHNCHRG(4,R2),PROJCHRG  CHARGE CODE TO ELEMENT
         MVI   CHNCOST(R2),C'P'    ASSUME PSEUDO CODE NEEDED ..
         MVC   CHNCOST+1(4,R2),PROJCHRG ... AND SET IT UP
         TM    SWITCH,NON100       TEST IF PSEUDO CODE NEEDED
         BO    *+10                BRANCH IF YES
         MVC   CHNCOST(5,R2),PROJCC SET UP TRUE ENTRY
         XC    CHNNEXT(4,R2),CHNNEXT(R2)  AND ZEROISE FORWARD POINTER
         XC    CHNFLAG(1,R2),CHNFLAG(R2) ZEROISE FLAGS
         CLC   PROJDATC,SPACES     TEST IF PROJECT CLOSED
         BE    *+8                 BRANCH IF NOT
         OI    CHNFLAG(R2),PROJCLOS INDICATE PROJECT CLOSED
         B     GETTABLE            GET NEXT RECORD
         EJECT
***********************************************************************
*        BUILD COST CENTRE / CHARGE CODE TABLE ( CONTINUED )          *
***********************************************************************
         SPACE 1
***********************************************************************
*    2.  AN AREA OF CORE LARGE ENOUGH TO CONTAIN ALL THE              *
*         COST CENTRE / CHARGE CODE ENTRIES CONTIGUOUSLY IS           *
*         ACQUIRED, THE CHAIN ELEMENTS ARE MOVED TO THIS AREA,        *
*         AND THE CHAIN ELEMENTS ARE RELEASED.                        *
***********************************************************************
         SPACE 1
ENDTABLE ZAP   DECIMAL,CNTNTRYS    MOVE ELEMENT COUNT TO WORK AREA
         CP    DECIMAL,ZERO        TEST FOR ANY ELEMENTS
         BE    GETTABLX            BRANCH IF NOT TO BYPASS PROCESSING
         AP    DECIMAL,ONE         ALLOW ROOM FOR DELIMITER
         MP    DECIMAL,TEN         MULTIPLY BY ELEMENT SIZE
         CVB   R0,DECIMAL          CONVEERT REQUIRED SIZE TO BINARY
       GETMAIN R,LV=(R0)           GET NECESSARY AREA OF CORE
         ST    R1,ADRTABLE         PRESERVE TABLE ADDRESS
         LR    R2,R1               INITIALISE TABLE POINTER
         L     R3,CHAIN            GET ADDRESS OF 1ST CHAIN ELEMENT
TABLOOP2 LTR   R1,R3               TEST FOR END OF CHAIN
         BZ    GETTABLX            BRANCH IF YES TO EXIT
         MVC   0(9,R2),CHNCHRG(R1) MOVE ELEMENT CONTENTS TO TABLE
         MVC   NTRYFLAG(1,R2),CHNFLAG(R3) MOVE FLAGS TO TABLE
         LA    R2,10(,R2)          ADJUST TABLE POINTER TO NEXT ENTRY
         L     R3,CHNNEXT(R1)      GET ADDRESS OF NEXT CHAIN ELEMENT
         LA    R0,17               INDICATE ELEMENT SIZE IN R0
      FREEMAIN R,LV=(R0),A=(R1)    FREE THE CHAIN ELEMENT
         NI    CCSW,X'0F'          ENABLE 'COST CENTRE' RTN
         B     TABLOOP2            PROCESS THE NEXT ELEMENT
GETTABLX EQU   *                   END OF COST/CHRG TABLE BUILD RTN
         LA    R2,TABLESW          POINT AT D/S CONTROL ELEMENT
         BAL   R4,CLOSE            CLOSE SYSTABLE D/S IF OPEN
         EJECT
***********************************************************************
*        INVOKE THE SORT AND PROCESS THE ACCOUNTIND CARDS             *
***********************************************************************
         SPACE 1
SORTSW   BC    0,PPROCESS          OPTIONALLY BYPASS THE SORT
         BAL   R4,HEADING          WRITE INITIAL REPORT HEADINGS
         STM   R5,R12,40(R13)      PRESERVE T580P130'S REGISTERS
         LA    R1,SORTPARM         ESTABLISH PARAMETER LINKAGE
         LINK  EP=SORT             PERFORM THE SORT
         CH    R15,COMPCODE        TEST IF SORT'S COMP CODE > PGM'S
         BNH   *+8                 BRANCH IF NOT
         STH   R15,COMPCODE        SAVE THE SORT'S COMPLETION CODE
         B     ENDUT1              PRINT TERMINATION MESSAGES
         EJECT
***********************************************************************
*        SORT EXIT E15 - REFORMAT THE ACCOUNTING RECORDS              *
***********************************************************************
         SPACE 1
         USING *,R15               ESTABLISH TEMPORARY ADDRESSABILITY
E15      SUBIN ,                   ENTER SORT EXIT E15
         STM   R14,R12,12(R13)     SAVE SORT'S REGISTERS
         ST    R13,E15R13S2        SAVE SORT'D SAVE AREA ADDRESS
         L     R13,E15R13S1        RETRIEVE PGM'S SAVE AREA ADDRESS
         MVC   E15REGSV(64),12(R13)    SAVE REGS FOR RET. FROM SORT
         LM    R5,R12,40(R13)      RETRIEVE T580P130'S REGISTERS
         B     E15CONT             BRANCH AROUND SAVE AREAS
E15R13S1 DS    F                   SAVE AREA FOR T580P130'S REG 13
E15R13S2 DS    F                   SAVE AREA FOR SORT'S REG 13
E15REGSV DS    16F                 REGS SAVE AREA FOR RET. FROM SORT
E15CONT  EQU   *                   CONTINUE
         DROP  R15                 DROP TEMPORARY ADDRESSABILITY
         SPACE 5
E15LOOP  BAL   R4,READ             GET HASP ACCOUNTING RECORD
         BAL   R4,RECANAL          VALIDATE RECORD & GET COST CENTRE
         LA    R15,INSERT          TELL SORT TO ACCEPT RECORD
         B     *+8                 BYPASS SETTING NO-RETURN CODE
         SPACE 5
E15EXIT  LA    R15,NORETURN        TELL SORT NOT TO RETURN
         LA    R1,INTERIM          POINT R1 AT RECORD
         MVC   12(64,R13),E15REGSV     RESTORE REGS FOR RET. FROM SORT
         STM   R5,R12,40(R13)      PRESERVE T580P130'S REGISTERS
         L     R13,E15R13S2        RESTORE SORT'S SAVE AREA POINTER
         L     R14,12(R13)         RESTORE THE SORT'S
         L     R0,20(R13)           GENERAL PURPOSE
         LM    R2,R12,28(R13)       REGISTERS
         BR    R14                 RETURN TO THE SORT
         EJECT
***********************************************************************
*        SORT EXIT E35 - PROCESS THE SORTED ACCOUNTING RECORDS        *
***********************************************************************
         SPACE 1
         USING *,R15               ESTABLISH TEMPORARY ADDRESSABILITY
E35      SUBIN ,                   ENTER SORT EXIT E35
         STM   R14,R12,12(R13)     SAVE SORT'S REGISTERS
         ST    R13,E35R13S2        SAVE SORT'D SAVE AREA SDDRESS
         L     R13,E35R13S1        RETRIEVE PGM'S SAVE AREA ADDRESS
         MVC   E35REGSV(64),12(R13)    SAVE REGS FOR RET. FROM SORT
         LM    R5,R12,40(R13)      RETRIEVE T580P130'S REGISTERS
         B     E35CONT             BRANCH AROUND SAVE AREAS
E35R13S1 DS    F                   SAVE AREA FOR T580P130'S REG13
E35R13S2 DS    F                   SAVE AREA FOR SORT'D REG 13
E35REGSV DS    16F                 REGS SAVE AREA FOR RET. FROM SORT
E35CONT  EQU   *                   CONTINUE
         DROP  R15                 DROP TEMPORARY ADDRESSABILITY
         SPACE 1
         L     R6,0(,R1)           GET ADDRESS OF RECORD FROM SORT
         LA    R6,0(,R6)           PURIFY HIGH ORDER BYTE
         LTR   R6,R6               TEST FOR END OF DATA
         BNZ   E35CONT2             BRANCH IF NOT
         LA    R15,NORETURN        TELL THE SORT NOT TO RERURN
         B     *+8                 BYPASS REG 15 LOAD
         SPACE 1
E35EXIT  LA    R15,DELETE          TELL THE SORT TO DELETE THE RECORD
         MVC   12(64,R13),E35REGSV     RESTORE REGS FOR RET. FROM SORT
         STM   R5,R12,40(R13)      PRESERVE T580P130'S REGISTERS
         L     R13,E35R13S2        RESTORE THE SORT'S REG 13
         L     R14,12(R13)         RESTORE THE SORT'S
         LM    R0,R12,20(R13)       REGISTERS
         BR    R14                 RETURN TO THE SORT
         SPACE 1
E35CONT2 LA    R4,E35EXIT          ESTABLISH SUB-ROUTINE RETURN
         B     *+24                BYPASS DUPLICATE CHECK
         CLC   RECSTORE,0(R6)      TEST FOR DUPLICATE RECORD
         BNE   *+14                BRANCH IF NOT
         AP    CNTDUP,ONE          INCREMENT DUPLICATE COUNT
         B     E35EXIT             RETURN TO THE SORT
         MVC   RECSTORE,0(R6)      STORE RECORD TO TEST NEXT TIME
         MVC   INTIND,80(R6)       MAKE INDICATOR ADDRESSABLE
         BAL   R4,RECPRNT          CREATE PRINT LINE & UPDATED RECORD
         B     E35EXIT             RETURN TO THE SORT
         SPACE 1
         EJECT
***********************************************************************
*        PROCESS HASP ACCOUNTING CARDS WITHOUT SORTING                *
***********************************************************************
         SPACE 1
PPROCESS BAL   R4,HEADING          WRITE INITIAL REPORT HEADINGS
PROCESS  BAL   R4,READ             GET NEXT ACCT'G RECORD
         CLC   RECSTORE,0(R6)      TEST FOR DUPLICATE RECORD
         BNE   *+14                BRANCH IF NOT
         AP    CNTDUP,ONE          INCREMENT DUPLICATE COUNT
         B     PROCESS             GET NEXT RECORD
         MVC   RECSTORE,0(R6)      SAVE RECORD FOR NEXT TIME
         BAL   R4,RECANAL          VALIDATE RECORD & GET COST CENTRE
         BAL   R4,RECPRNT          CREATE PRINT LINE & UPDATED RECORD
         B     PROCESS             GET NEXT RECORD
         EJECT
***********************************************************************
*        PUT OUT TERMINATION MESSAGES TO SYSPRINT AND SYSOUT.         *
***********************************************************************
         SPACE 1
ENDUT1   MVC   CNTLINE,ZERO        ZEROISE LINE COUNTER LEST GET OVERFL
         BAL   R4,PRINT            SPACE 1 LINE
         MVC   5(L'LINE23,R5),LINE23 TELL OF REPORT END
         BAL   R4,PRINT            PRINT END MESSAGE
         MVI   0(R8),PAGESKIP       TO NEW PAGES
         BAL   R4,PRINTOUT         WRITE LINE
         MVI   0(R8),SPCE3AFT      ESTABLISH TRIPLE SPACE
         MVC   5(L'LINE17,R8),LINE17 TERMINATION HEADING
         BAL   R4,PRINTOUT         PRINT HEADING
         EJECT
***********************************************************************
*        TERMINATION MESSAGES (CONTINUED)                             *
***********************************************************************
         SPACE 1
         MVC   5(L'LINE03,R8),LINE03         **
         MVC   L'LINE03+5(7,R8),EDITMASK      *
         ED    L'LINE03+5(7,R8),CNTPARM       ** SUB-PARM COUNT
         BAL   R4,PRINTOUT                   **
         SPACE 1
         MVC   5(L'LINE37,R8),LINE37         **
         MVC   L'LINE37+5(7,R8),EDITMASK      *
         ED    L'LINE37+5(7,R8),CNTTAB        ** SYSTABLE RECORDS READ
         BAL   R4,PRINTOUT                   **
         SPACE 1
         MVC   5(L'LINE34,R8),LINE34         **
         MVC   L'LINE34+5(7,R8),EDITMASK      *
         ED    L'LINE34+5(7,R8),CNTNTRYS      ** COST/CHRG TABLE ENTRYS
         BAL   R4,PRINTOUT                   **
         SPACE 1
         MVC   5(L'LINE35,R8),LINE35         *
         MVC   L'LINE35+5(7,R8),EDITMASK     *
         ED    L'LINE35+5(7,R8),CNTTAB2      ** TABLE 2 COUNR
         BAL   R4,PRINTOUT                   *
         SPACE 1
         MVC   5(L'LINE36,R8),LINE36         *
         MVC   L'LINE36+5(7,R8),EDITMASK     *
         ED    L'LINE36+5(7,R8),CNTTAB3      ** TABLE 3 COUNT
         BAL   R4,PRINTOUT                   *
         SPACE 1
         MVC   5(L'LINE04,R8),LINE04         **
         MVC   L'LINE04+5(7,R8),EDITMASK      *
         ED    L'LINE04+5(7,R8),CNTUT1        ** SYSTT1 RECORDS READ
         BAL   R4,PRINTOUT                   **
         SPACE 1
         MVC   5(L'LINE28,R8),LINE28         **
         MVC   L'LINE28+5(7,R8),EDITMASK      *
         ED    L'LINE28+5(7,R8),CNTDUP        ** REJECTED DUPLIBATES
         BAL   R4,PRINTOUT                   **
         EJECT
***********************************************************************
*        TERMINATION MESSAGES ( CONTINUED )                           *
***********************************************************************
         SPACE 1
         MVC   5(L'LINE13,R8),LINE13         **
         MVC   L'LINE13+5(7,R8),EDITMASK      *
         ED    L'LINE13+5(7,R8),CNTREJ        ** RECORDS NOT SELECTED
         BAL   R4,PRINTOUT                   **
         SPACE 1
         MVC   5(L'LINE06,R8),LINE06         **
         MVC   L'LINE06+5(7,R8),EDITMASK      *
         ED    L'LINE06+5(7,R8),CNTUT2        ** SYSUT2 RECORDS WRITTEN
         BAL   R4,PRINTOUT                   **
         SPACE 1
         MVI   0(R8),SPCE2AFT      ESTABLISH DOUBLE SPACE
         BAL   R4,PRINTOUT          AND ISSUE IT
         EJECT
***********************************************************************
*        PRINT CONDITION CODE                                         *
***********************************************************************
         SPACE 1
PRINTCDE MVC   5(L'LINE07,R8),LINE07 ADD COND CODE MESSAGE
         MVI   0(R8),SPCE2AFT      ESTABLISH DOUBLE SPACE
         LH    R2,COMPCODE         GET CONDITION CODE
         CVD   R2,WORKAREA         CONVERT IT TO DECIMAL
         ED    CONDMASK,WORKAREA+6 CONVERT IT TO PRINTABLE EBCDIC
         MVC   L'LINE07+6(2,R8),CONDMASK+2 ADD IT TO PRINT LINE
         BAL   R4,PRINTOUT         PRINT COND CODE MESSGAE
         MVC   5(L'LINE10,R8),LINE10 MOVE IN FINAL MESSAGE
         SPACE 5
***********************************************************************
*        JOB TERMINATION ROUTINE - CLOSE ANY OPEN DATA SETS,          *
*         SET A COMPLETION CODE IN REGISTER 15, AND RETURN .          *
***********************************************************************
         SPACE 1
JOBEND   LA    R10,MAXDS           ESTABLISH LOOP
         TM    SYSOUTSW,DDSTAT     TEST FOR SYSOUT
         BZ    *+8                 BRANCH IF NOT
         OI    SYSOUTSW,DDOPEN     'RE-CONNECT' FOR CLOSE
         TM    PRINTSW,DDSTAT      TEST FOR SYSPRINT
         BZ    *+8                 BRANCH IF NOT
         OI    PRINTSW,DDOPEN      'RE-CONNECT' FOR CLOSE
         LA    R2,DCBTABLE         POINT AT AD-CON TABLE
         BAL   R4,CLOSE            CLOSE DATA SET
         LA    R2,NTRYSIZE(,R2)    POINT AT NEXT TABLE ENTRY
         BCT   R10,*-8             CLOSE NEXT DATA SET
        PGMOUT RC=COMPCODE         SET COND CODE AND RETURN
         EJECT
***********************************************************************
*        VALIDATE INPUT TIME SHEET RECORDS, APPEND ERROR OR           *
*         MESSAGE CODES AS NECESSARY, AND INSERT THE COST OR          *
*         PSEUDO CENTRE AS APPROPRIATE.                               *
***********************************************************************
         SPACE 1
         USING TIMECARD,R6         ESTABLISH DSECT ADDRESSABILITY
RECANAL  SUBIN PREFIX=A,SAVE=R4    VALID ATE RECORD
         B     RECANALC            BYPASS ALL TESTS - REPLACES BY BDGY
         MVI   INTIND,IND6         ASSUME BAD ERCORD ID
         CLC   TIMECLAS,=C'PC20'   TEST RECORD ID
         BNE   RECANALX            EXIT FROM RTN IF BAD ID
         MVI   INTIND,IND15        ASSUME NO TEAM SPECIFIED
         CLC   TIMETEAM,SPACES     TEST FOR TEAM PROVIDED
         BE    RECANALX            EXIT FROM RTN IF NO TAEM
         MVI   INTIND,IND16        ASSUME NO INITIALS
         CLC   TIMEINIT,SPACES     TEST FRO INITIALS
         BE    RECANALX            EXIT FROM RTN IF NO NAME
         MVI   INTIND,IND7         ASSUNE N/N-NUMERIC DATE
         TEST  TIMEDATE,A          TEST IF DATE ALL NUMERIC
         BNE   RECANALX            EXIT FROM RTN IF DATE NOT NUMERIC
         CLI   TIMEPROJ,C'T'       ASSUME PROJECT IN FORM 'TNNN'
         BNE   *+14                BYPASS CORRECTION IF NOT
         MVC   TIMEPROJ(3),TIMEPROJ+1 CONVERT TO 'NNNX'
         MVI   TIMEPROJ+3,C'0'     CONVERT TO 'NNN0'
         MVI   INTIND,IND8         ASSUME NON-NUMERIC PROJECT
         TEST  TIMEPROJ,B          TEST PROJECT NUMBER
         BNE   RECANALX            EXIT FROM ROUTINE IF NOT NUMREIC
         MVI   INTIND,IND9         ASSUME NON-NUMERIC WORK CODE
         TEST  TIMECODE,A          ETST CODE FOR ALL NUMERIC
         BNE   RECANALX            EXIT FROM RTN IF NOT ALL NUMERIC
         MVI   INTIND,IND10        ASSUME NON-NUMERIC PER CENT
         TEST  TIMEPERC,B          TEST FRO NUMERIC OR ALL BLANK
         BNE   RECANALX            EXIT IF FIELD BAD
         MVI   INTIND,IND11        ASSUME NON-NUMERIC TIME
         TEST  TIMETIME            TEST FOR NUMERIC WITH LEADING SPACES
         BNE   RECANALX            EXIT IF NON-NUMERIC TIME
RECANALC MVI   INTIND,IND17        ASSUME NO COST CENTRE TABLE
         BAL   R4,COSTCNTR         RETRIEVE COST CENTRE IF ANY
RECANALX MVC   INTERIM,TIMECARD    MOVE RECORD TO SORT AREA
        SUBOUT PREFIX=A,RESTORE=R4 RETURN TO CALLER
         SPACE 1
         DROP  R6                  DROP ADDRESSABILITY TO SYSUT1
         EJECT
***********************************************************************
*        CREATE DETAIL PRINT LINE, AND OUTPUT AN UPDATED TIME         *
*         RECORD AS APPROPRIATE.                                      *
***********************************************************************
         SPACE 1
         USING TIMECARD,R6         ESTABLISH ADDRESSABILIRY FOR WORK AR
         USING PRINTLNE,R5         ESTABLISH ADDRESSABILITY FOR LINE
RECPRNT  SUBIN PREFIX=W,SAVE=R4    CREATE LINE & NEW RECORD
         LA    R7,INTERIM          POINT R7 AT WORK AREA
         MVI   LINES1,C'/'         MOBE IN
         MVI   LINES2,C'/'          PUNCTUATING '/''S
         MVC   LINEID,TIMECLAS     MOVE IN CARD ID
         MVC   LINETEAM,TIMETEAM   MOVE IN TEAM
         MVC   LINEINIT,TIMEINIT   MOVE IN INIT
         MVC   LINEPROJ,TIMEPROJ   MOVE IN PROJECT NUMBER
         MVC   LINEPROG,TIMEPROG   MOVE IN PROGRAM NAME
         MVC   LINECODE,TIMECODE   MOVE IN WORKC  CODE
         MVC   LINEPERC,TIMEPERC   MOVE IN PER CENT
         MVC   LINEHOUR,TIMETIME   MOVE IN TOTAL HOURS
         MVC   LINECOMM,TIMECOMM   MOVE IN COMMENTS
         MVC   LINEFLAG,TIMEFLAG   MOVE IN OVER-RIDING ACCEPTANCE FLAG
         MVC   LINEYY,TIMEDATE     MOVE IN YY
         MVC   LINEMM,TIMEDATE+2   MOVE IN MM
         MVC   LINEDD,TIMEDATE+4   MOVE IN DD
RECBLDA  SR    R2,R2               SEROISE REGISTER
         IC    R2,INTIND           PICK IP MESSAGE INDEX
         BCTR  R2,0                DECREMENT FOR MATHS
         MH    R2,=H'38'           MULTIPLY BY MESSAGE LENGHT
         LA    R3,ACTION01         POINT R 3 AT THE 1ST MESSAGE
         AR    R3,R2               ADD COMPUTED DISPLACEMENT
         MVC   LINEACTN,0(R3)      MOVE IN DESIRED MESSAGE
         CLI   INTIND,IND6         TEST IF REJECTED
         BL    *+8                 BRANCH IF NOT
         MVI   LINEACT4,C'*'       FLAG REJECTED RECORD
         CLI   INTIND,IND2         TEST IF CENTRE ASSIGNRD
         BH    RECRITE             BRANCJ IF NOT
         MVC   LINEACT1,TIMECC     MOVE IN MAJOR CENTRE
         MVI   LINEACT2,C'.'       ADD PUNCTUATION
         MVC   LINEACT3,TIMECC+3   MOVE IN MINOR CENTRE
RECRITE  BAL   R4,PRINT            PRINT DETAIL LINE
         CLI   INTIND,IND3         TEST IF ACCEPTED FLAGGED PROJECT
         BNE   RECPRNTX            BRANCH IF NOT TO END RTN
         MVI   INTIND,IND1         ASSUME REAL COST CENTRE
         CLI   TIMECC,C'P'         TEST IF REAL
         BNE   RECBLDA             BRANCH IF YES TO ADD NEXT LINE
         MVI   INTIND,IND2         INDICATE PSEUDO CODE
         B     RECBLDA              AND GO TO PRINT NEXT LINE
RECPRNTX BAL   R4,WRITE            WRITE UPDATED RECORD IF NECESSARY
         BAL   R4,PUNCH            PUNCH ERROR RECORD AS NECESSARY
        SUBOUT PREFIX=W,RESTORE=R4 RETURN TO CAKLER
         SPACE 1
         DROP  R5                  DROP PRINT LINE ADDRESSABILITY
         EJECT
***********************************************************************
*        THIS ROUTINE USES THE BINARY CHOP SEARCH TECHNIUUE TO        *
*         SC+N THE TABLE OF COST CENTRE / CHARGE CODE ENTRIES TO      *
*         GAT A DEFAULT COST CENTRE FOR A SPECIFIC CHARGE CODE.       *
*         ON ENTRY, CCCHARGE CONTAINS THE CHARGE CODE TO BE           *
*         MATCHED, AND THE CORRESPONDING CODT CEBTRE IS PLACED        *
*         IN CC.  IF NO MATCH IS FOUND, CC IS SET TO SPACES.          *
*         CC IS ALSO INITIALISED TO SPACES, AND THE ROUTINE IS        *
*         BYPASSED IF NO TABLE WAS CREATED.                           *
***********************************************************************
         SPACE 1
COSTCNTR SUBIN ,                   GET DEFAULT COST CENTRE
CCSW     EQU   *+1                 BRANCH SET OFF IF TABLE EXISTS
         B     CCEND               BYPASS SEARCH IF NO TABLE
         CLC   TIMEPROJ,SPACES     TEST FOR BLANK PROJECT CODE
         BNE   CC1                 BRANCH IF NOT
         MVI   INTIND,IND5         ASSUMED FLAGGED FOR ACCEPTANCE
         CLI   TIMEFLAG,C'*'       TEST IF FLAGGED
         BE    CCEND2              BRANCH IF YES TO EXIT
         MVI   INTIND,IND4         ASSUME VALIDLY BLANK
         L     R2,ADRCODET         POINT AT TABLE OF WORK CODES
         L     R3,NUMCODET         SET TO NUMBER OF ENRRIES
CCLOOP0  CLC   TIMECODE,0(R2)      COMPARE FOR MATCH
         BE    CCEND2              BRANCH IF YES
         LA    R2,2(,R2)           INCREMENT TO NEXT ENTRY
         BCT   R3,CCLOOP0          LOOP BACK IF ENTRIES LEFT
         MVI   INTIND,IND14        INDICATE REJECTED COS BLANK
         B     CCEND2              EXIT FROM ROUTINE
         MVC   CC,SPACES           SET TO DEFAULT DEFAULT OF SPACES
CC1      ZAP   CNTLO,ZERO          ZEROIZE LO COUNTER
         ZAP   CNTHI,CNTNTRYS      INITIALISE
         AP    CNTHI,ONE            HI COUNTER
         L     R2,ADRTABLE         POINT R2 AT THE TABLE
         SPACE 1
CCLOOP   ZAP   DECIMAL,CNTHI       MOVE HI TO WORK AREA
         SP    DECIMAL,CNTLO       SUBTRACT LO FROM HI
         CP    DECIMAL,ONE         TEST IF DIFFERENCE IS 1
         BE    CCEND               BRANCH IF YES ( NO MATCH )
         SPACE 1
         ZAP   DECIMAL,CNTHI       MOVE HI COUNT TO WORK AREA
         AP    DECIMAL,CNTLO       ADD LO TO HI
         DP    DECIMAL,TWO         DIVIDE BY TWO
         SP    DECIMAL(6),ONE      DECREMENT FOR CORRECT DISPLACEMENT
*                                   - ENTRY X HAS DISPLACEMENT 9*(X01)
         ZAP   CNTMID,DECIMAL(6)   PRESERVE THE RESULT ( NEW INDEX )
         EJECT
***********************************************************************
*        BINARY CHOP SEARCH ( CONTINUED )                             *
***********************************************************************
         SPACE 1
         ZAP   DECIMAL,CNTMID      MOVE SEARCH INDEX TO WORK AREA
         AP    CNTMID,ONE          INCREMENT FROM DISPLACEMENT TO INDEX
         MP    DECIMAL,TEN         MULTIPLY BY ELEMENT LENGHT
         CVB   R3,DECIMAL          CONVERT INDEX TO BINARY
         AR    R3,R2               POINT R3 AT ENTRY TO BE TESTED
         CLC   TIMEPROJ,NTRYCHRG(R3) TEST FOR MATCH
         BE    CCFOUND             BRANCH IF EQUAL ( MATCH )
         SPACE 1
         BL    *+14                BRANCH IF LOW
         ZAP   CNTLO,CNTMID        ADJUST LO TO NEW SEARCH VALUE
         B     CCLOOP              RE-ITERATE
         ZAP   CNTHI,CNTMID        ADJUST HI TO NEW SEARCH VALUE
         B     CCLOOP              RE-ITERATE
         SPACE 1
CCFOUND  MVC   TIMECC,NTRYCOST(R3) SET UP COST CENTRE
         MVI   INTIND,IND2         ASSUME PSEUDO CODE
         CLI   NTRYCOST(R3),C'P'   TEST FOR PSEUDO CODE
         BE    *+8                 BRANCH IF YES
         MVI   INTIND,IND1         INDICATE COST CENTRE
         TM    NTRYFLAG(R3),PROJCLOS TEST IF PROJECT CLOSED
         BZ    CCEND2              BRANCH IF NOT TO EXIT
         MVI   INTIND,IND3         ASSUME RECORD FLAGGED
         CLI   TIMEFLAG,C'*'       TEST IF FLAGGED
         BE    *+8                 BRANCH IF YES
         MVI   INTIND,IND13        INDICATE REJECTED COS CLOSED
         B     CCEND2              BRANCH TO EXIT
CCEND    MVI   INTIND,IND12        INDICATE REJECTED COS UNKNOWN
CCEND2  SUBOUT ,                   RETURN TO CALLER
         EJECT
***********************************************************************
*        THIS ROUTINE DETERMINES WHETHER OR NOT A FIELD IS NUMERIC.   *
*         ON ENTRY, R2 POINTS AT THE FIELD TO BE TESTED AND R3        *
*         CONTAINS THE LENGTH.  ENTRY IS TO 'NUMERICA' IF THE         *
*         FIELD MUST BE ENTIRELY NUMERIC, TO 'NUMERIC' IF IT MAY      *
*         CONTAIN LEADING BLANKS, AND TO 'NUMREICB' IF IT MAY BE      *
*         ENTIRELY BLANK.  ON RETURN, THE CONDITION CODE IS SET       *
*         TO 'EQUAL' IF THE FIELD IS VALID, AND TO 'UNEQUAL' IF       *
*         TJE FIELD IS NOT VALID.                                     *
***********************************************************************
         SPACE 1
NUMERICB MVI   NUMTEST2+1,X'00'    ALLOW ALL BLANKS
NUMERIC  MVI   NUMTEST1+1,X'70'    ALLOW LEADING BLANKS
NUMERICA SUBIN ,                   ETST FOR NUMERIC
         MVI   NUMTESTT,C'X'       ASSUME FIELD IS VALID
NUMTESTL CLI   0(R2),C'9'          TEST IF GREATER THAN 9
         BH    NUMBAD              INVALID FIELD IF YES
         CLI   0(R2),C'0'          TEST IF FIELD LESS THAN ZERO
         BNL   NUMLOOP             BRANCH IF NOT TO  LOOP
         CLI   0(R2),C' '          TEST IF EQUAL TO SPACE
NUMTEST1 B     NUMBAD              REJECT OR NOT AS APPROPRIATE
         CH    R3,=H'1'            TEST IF LAST BYTE
NUMTEST2 BE    NUMBAD              REJECT OR NOT AS APPROPRAITE
         B     *+8                 BYPASS NEXT INSTRUCTION
NUMLOOP  OI    NUMTEST1+1,X'F0'    DO NOT ALLOW ENCLOSED SPACES
         LA    R2,1(,R2)           INCREMENT FIELD POINTER
         BCT   R3,NUMTESTL         LOOP BACK IF FIELD NOT EXHAUSTED
         B     *+8                 BYPASS STE TO INVALID
NUMBAD   MVI   NUMTESTT,C'Y'       INDICATE FIELD INAVLID
         OI    NUMTEST1+1,X'F0'    SET UP FOR NUMERICA NEXT TIME
         OI    NUMTEST2+1,X'80'    SET UP FOR NUMERIC NEXT TIME
         CLI   NUMTESTT,C'X'       SET CONDITION CODE
        SUBOUT ,                   RETURN TO CALLER
         SPACE 1
NUMTESTT DC    C'X'                USED TO SET CONDITION CODE
         EJECT
***********************************************************************
*        WRITE TO SYSUT2                                              *
***********************************************************************
         SPACE 1
WRITE    SUBIN ,                   WRITE TO SYSUT2
         TM    SYSUT2SW,DDOPEN     TEST IF DATA SET OPEN
         BZ    0(R4)               RETURN IF NOT
         AP    CNTREJ,ONE          INCREMENT REJECTED COUNT
         CLI   INTIND,IND5         CHECK IF RECORD ACCEPTED
         BH    WRITEX              BYPASS WRITE IF NOT
         PUT   SYSUT2,0(R6)        WRITE UPDATED RECORD
         SP    CNTREJ,ONE          DECREMENT REJECTED COUNT
         AP    CNTUT2,ONE          INCREMENT RECORD COUNT
WRITEX  SUBOUT ,                   RETURN TO CALLER
         SPACE 4
***********************************************************************
*        PRINT ROUTINE FOR SYSPRINT ( T580R130 )                      *
***********************************************************************
         SPACE 1
PRINT    SUBIN ,                   WRITE TO SYSPRINT AND SYSOUT
         AP    CNTLINE,ONE         INCREMENT LINE COUNT
         TM    PRINTSW,DDOPEN      TEST IF SYSPRINT OPEN
         BZ    PRINT2              BRANCH IF NOT
         PUT SYSPRINT              WRITE SYSPRINT LINE
         LR    R5,R1               SAVE NEW BUFER ADDRESS
         MVI   1(R5),SPACE         MOVE SPACE TO START OF LINE
         MVC   2(131,R5),1(R5)      AND PROPAGATE THROUGH
         MVI   0(R5),SPCE1AFT      INSERT DEFAULT SINGLE SPACE
         CP    CNTLINE,ENDOPAGE    TEST FOR END OF PAGE
         BH    HEADING             BRANCH IF YES
PRINT2  SUBOUT ,                   RETURN TO CALLER
         SPACE 5
***********************************************************************
*        PRINT ROUTINE FOR SYSOUT ( T580R131 )                        *
***********************************************************************
         SPACE 1
PRINTOUT SUBIN ,                   PRINT TO SYSOUT
         TM    SYSOUTSW,DDOPEN     TEST IF DD STAT OPEN
         BZ    PRINTX              EXIT IF NOT
         PUT   SYSOUT              WRITE THE LINE
         LR    R8,R1               PRESERVE BUFFER ADDRESS
         MVI   1(R8),SPACE         MOVE SPACE TO START OF LINE
         MVC   2(131,R8),1(R8)      AND PROPAGATE THROUGH
         MVI   0(R8),SPCE1AFT      ESTABLISH SINGLE SPACE
PRINTX  SUBOUT ,                   RETURN TO CALLER
         EJECT
***********************************************************************
*        HEADING ROUTINE FOR SYSPRINT ( T580R130 )                    *
***********************************************************************
         SPACE 1
HEADING  SUBIN PREFIX=H,SAVE=R4    ENTER HEADING ROUTINE
         ZAP   CNTLINE,ZERO        ZEROISE LINE COUNT
         AP    CNTPAGE,ONE         INCREMENT PAGE COUNT
         MVI   0(R5),PAGESKIP      ESTABLISH
         BAL   R4,PRINT             AND ISSUE THEM
         MVC   14(9,R5),DATEFLD    SET UP DATE IN LINE
         MVC   122(4,R5),PAGE      SET UP
         MVC   126(4,R5),EDITPAGE  SET UP EDIT MASK
         ED    126(4,R5),CNTPAGE    AND EDIT PAGE NUMBER
         MVC   1(L'HEADINGX,R5),HEADINGX MOVE REPORT NAME TO LINE
         MVC   40(L'HEADING0,R5),HEADING0 MOVE IN MAIN HEADING
         MVI   0(R5),SPCE3AFT      ESTABLISH
         BAL   R4,PRINT            WRITE HEADING LINES
         MVC   0(133,R5),HEADING1  SET UP 2ND HEADING
         BAL   R4,PRINT            WRITE 2ND HEADINGS
         MVC   0(133,R5),HEADING2  SET UP 3RD HAADING
         BAL   R4,PRINT            WRITE 3RD HEADING LINES
         ZAP   CNTLINE,SIX         SET LINE COUNT TO SIX
        SUBOUT PREFIX=H,RESTORE=R4 RETURN TO MAIN-LINE
         EJECT
***********************************************************************
*                                                                     *
*        THIS ROUTINE SCANS THE TIOT TO DETERMINE  WHETHER            *
*         A SPECIFIC DD STATEMENT IS PRESENT IN THE JCL.  ON          *
*         ENTRY TO THE ROUTINE, R2 POINTS AT THE ENTRY IN             *
*         THE DCB AD-CON TABLE OF THE REQUIRED DATA SET NAME.         *
*         IF THE SPECIFIED DD STATEMENT IS FOUND, CONTROL IS          *
*         RETURNED TO THE ADDRESS IN REGISTER 4, OTHERWISE            *
*         CONTROL IS RETURNED TO R4+4.                                *
*                                                                     *
***********************************************************************
         SPACE 5
DDFIND   SUBIN PREFIX=D,SAVE=(R3,R10) ENTRY TO DD SEARCH ROUTINE
         SR    R10,R10             ZEROISE WORK REGISTER
         L     R3,16               GET CVT ADDRESS
         L     R3,0(,R3)           GET ADDRESS OF TCB DISPATCH FIELDS
         L     R3,4(,R3)           GET ADDRESS OF THIS TCB
         L     R3,12(,R3)          GET ADDRESS OF TIOT
         LA    R3,24(,R3)          POINT AT FIRST DD ENTRY
DDLOOP   CLC   0(4,R3),ZEROWORD    TEST FOR END OF TIOT
         BE    DDNOTFND            BRANCH IF YES
         CLC   4(8,R3),4(R2)       TEST FOR DD NAME MATCH
         BE    DDFOUND             BRANCH IF YES
         IC    R10,0(R3)           INSERT ENTRY LENGTH
         AR    R3,R10              INCREMENT TO NEXT ENTRY
         B     DDLOOP              PROCESS NEXT ENTRY
         SPACE 1
DDFOUND  OI    0(R2),DDSTAT        INDICATE DD STATEMENT FOUND
        SUBOUT PREFIX=D,RESTORE=(R3,R10) RETURN TO MAIN-LINE
         SPACE 1
DDNOTFND EQU   *                   RETURN TO R4+4
        SUBOUT PREFIX=D,RESTORE=(R3,R10),RETURN=4(R4)
         EJECT
***********************************************************************
*        OPEN / CLOSE ROUTINES                                        *
***********************************************************************
         SPACE 5
OPEN     SUBIN ,                   ENTRY TO OPEN ROUTINE
         L     R3,0(,R2)           GET DCB ADDRESS
         CLC   12(L'INPUT,R2),INPUT TEST FOR INPUT DATA SET
         BE    OPEN2               BRANCH IF YES
         OPEN  ((R3),(OUTPUT))     OPEN OUTPUT DATA SET
         B     OPEN3               SET SWITCH
OPEN2    OPEN  ((R3),(INPUT))      OPEN INPUT DATA SET
OPEN3    OI    0(R2),DDOPEN        INDICATE DATA SET OPEN
        SUBOUT ,                   RETURN TO MAIN-LINE
         SPACE 5
CLOSE    SUBIN ,                   ENTRY TO CLOSE SUB-ROUTINE
         TM    0(R2),DDOPEN        TEST IF DATA SET OPEN
         BZ    0(R4)               RETURN IF NOT
         L     R3,0(,R2)           GET DCB ADDRESS
         CLOSE ((R3))              CLOSE DATA SET
         NI    0(R2),255-DDOPEN    SET OFF 'OPEN' SWITCH
        SUBOUT ,                   RETURN TO MAIN-LINE
         SPACE 5
BLKSZRTN SUBIN ,                   SUPPLY DEFAULT IF NO BLKSIZE
         USING IHADCB,R1           ESTABLISH DCB ADDRESSABILITY
         CLC   DCBBLKSI,ZEROWORD   HAS BLOCK-SIZE BEEN SUPPLIED
         BNE   0(R14)              RETURN TO OPEN IF YES
         MVC   DCBBLKSI,DCBLRECL   MOVE LRECL TO BLKSIZE
        SUBOUT RETURN=(R14)        RETURN TO OPEN ROUTINES
         DROP  R1                  DROP DCB ADDRESSABILITY
         EJECT
***********************************************************************
*        READ SUB-ROUTINES                                            *
***********************************************************************
         SPACE 1
READ     SUBIN ,                   READ FROM SYSUT1
         GET   SYSUT1              GET NEXT RECORD
         LR    R6,R1               SAVE BUFFER ADDRESS
         AP    CNTUT1,ONE          INCREMENT COUNTER
        SUBOUT ,                   RETURN TO MAIN-LINE
         SPACE 5
***********************************************************************
*        WRITE ERROR CARDS TO SYSPUNCH                                *
***********************************************************************
         SPACE 1
PUNCH    SUBIN ,                   PUNCH OUT ERROR CARDS
         TM    PUNCHSW,DDOPEN      TEST IF DATA SET OPEN
         BZ    PUNCHX              BRANCH IF NOT
         CLI   INTIND,IND6         TEST IF RECORD REJECTED
         BL    PUNCHX              BRANCH IF NOT
         PUT   SYSPUNCH,0(R6)      WRITE ERROR CRAD
PUNCHX  SUBOUT ,                   RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*        THIS SUB-ROUTINE RETRIEVES SUB-FIELDS FROM THE               *
*         PARM FIELD IN THE EXEC STATEMENT.  CONTROL RETURNS TO       *
*         R4+0 IF NO PARAMETER IS PRESENT, OR IF THE PARAMETER        *
*         HAS BEEN EXHAUSTED.  CONTROL RETURNS TO R4+4 IF A           *
*         SUB-FIELD HS BEEN LOCATED, WITH R2 CONTAINING THE           *
*         SUB-FIELD ADDRESS AND R3 CONTAINING THE LENGTH.             *
*                                                                     *
***********************************************************************
         SPACE 1
GETPARM  SUBIN PREFIX=G,SAVE=(R7,R8) RETRIEVE PARAMTTER SUB-FIELD
         LM    R7,R8,PARMR7R8      RETRIEVE R7 AND R8 VALUES
         BC    0,GETPARM2          FIRST TIME SWITCH
         OI    *-3,X'F0'           SET UP FIRST TIME BRANCH
         L     R9,PARMPNTR         RETRIEVE PARM POINTER
         L     R9,0(,R9)           POINT R8  AT PARAMETER AREA
         LH    R8,0(R9)            RETRIEVE COUNT FIELD
         LTR   R8,R8               TEST IF PARM SUPPLIED
         BNZ   GETPARM3            BRANCH IF YES
        SUBOUT PREFIX=G,RESTORE=(R7,R8),RETURN=(R4) NO - RETURN
GETPARM3 LA    R9,2(,R9)           POINT TT START OF DATA
         LR    R7,R9               POINT R7 AT PARAMETER AREA
         AR    R9,R8               POINT R9 AT END OF PARM
         LA    R9,0(,R9)           PURIFY HIGH ORDER BYTE
         BCTR  R9,0                RE-ADJUST R9 FOR USE AS BXLE COMPAR
GETPARM2 LA    R8,1                ESTABLISH BXLE INCREMENT
         CR    R7,R9               TEST IF PARM EXHAUSTED
         BNH   GETPARM4            BRANCH IF NO
        SUBOUT PREFIX=G,RESTORE=(R7,R8),RETURN=(R4) NO - RETURN
GETPARM4 LR    R2,R7               POINT R2 AT START OF SUB-FIELD
PARMLOOP CLI   0(R7),COMMA         TEST FOR COMMA
         BE    PARMLGTH            BRANCH IF NOT
PARMADD  BXLE  R7,R8,PARMLOOP      TEST NEXT CHARACTER
PARMLGTH LR    R3,R7               POINT AT END OF SUBFIELD
         SR    R3,R2               DETERMINE SUBFIELD LENGTH
         LA    R7,1(,R7)           POINT AT START OF NEXT SUBFIELD
         BCTR  R3,0                DECREMENT FOR EXECUTE
         LTR   R3,R3               TEST IF R3 NEGATIVE
         BM    GETPARM2            GET NEXT SUB-FIELD IF YES
         AP    CNTPARM,ONE         INCREMENT COUNTER
         STM   R7,R8,PARMR7R8      PRESERVE R7 AND R8 FOR FUTURE
        SUBOUT PREFIX=G,RESTORE=(R7,R8),RETURN=4(R4) RETURN TO R4+4
         EJECT
***********************************************************************
*        MODIFY DYNAMIC SORT FIELDS PARAMETER                         *
***********************************************************************
         SPACE 1
FLDADD   SUBIN ,                   ADD FIELD TO SOTR FIELD AREA
         L     R10,REQADDR+4       RETRIEVE ADDRESS OF BLANK AFTER FLD
         BCTR  R10,0               STEP BACK TO CLOSING PARENTHESIS
         MVC   0(12,R10),0(R2)     ADD NEW FIELD TO PARAMETER AREA
         LA    R10,12(,R10)        ADJUST R10 TO NEW FIELD END
         ST    R10,REQADDR+4        AND PRESERVE THE ADDRESS
         MVI   REQSTART+13,OPENBRAK ENSURE OPENING PARENTHESIS
        SUBOUT ,                   RETURN TO CALLER
         SPACE 5
***********************************************************************
*        PRINT THE PARM FIELD                                         *
***********************************************************************
         SPACE 1
PARMPUT  SUBIN PREFIX=P,SAVE=R4    PRINT THE PARM FIELD
         L     R3,PARMPNTR         RETRIEVE THE PARM POINTER
         L     R3,0(R3)            POINT R3 AT PARAMETER AREA
         LH    R10,0(R3)           RETRIEVE THE COUNT FIELD
         LTR   R10,R10             TEST IF PARM SUPPLIED
         BNZ   PARMPUT2            BRANCH IF PARM SUPPLIED
         MVC   10(L'LINE33,R8),LINE33  IN SYSPRINT AND SYSOUT
         B     PARMPUT3            PRINT THE MESSAGE
         SPACE 1
PARMPUT2 LA    R3,2(,R3)           POINT R3 AT STERT OF DATA
         BCTR  R10,0               DECREMENT LENGTH FOR EXECUTE
         EX    R10,PARMPTMV        ADD PARM TO SYSPRINT
PARMPUT3 BAL   R4,PRINTOUT         PRINT THE PARM
        SUBOUT PREFIX=P,RESTORE=R4 RETURN TO THE CALLER
         SPACE 1
PARMPTMV MVC   10(0,R8),0(R3)      EXECUTED MOVE INSTERUCTION
         EJECT
***********************************************************************
*        SYNAD ROUTINES FOR ALL I/O                                   *
***********************************************************************
         SPACE 1
IOERROR  SUBIN ,                   PROCESS I/O ERROR
         BAL   R4,IOERROR3         ANALYSE I/O ERROR & TELL OPERATOR
         TM    PRINTSW,DDOPEN      TEST FOR SYSPRINT DATA SET
         BZ    JOBEND              TERMINATE JOB IF NOT
         NI    SYSOUTSW,255-DDOPEN 'DIS-CONNECT' SYSOUT
         BAL   R4,PRINT            PRINT BLAKK LINE
         MVC   5(L'LINE15,R5),LINE15 MOVE IN ERROR MESSAGE
         BAL   R4,PRINT            WRITE ERROR MESSAGE
         MVI   0(R5),SPCE2AFT      ESTABLISH DOUBLE SPACE
         MVC   5(L'LINE16,R5),LINE16 TELL OF TERMINATION
         BAL   R4,PRINT             AND WRITE LINE
        SUBOUT RETURN=PRINTCDE     PRINT CONDITION CODE
         SPACE 5
IOERROR2 SUBIN ,                   PROCESS SYSPRINT I/O ERROR
         BAL   R4,IOERROR3         ANALYSE I/O ERROR & TELL OPERATOR
         TM    SYSOUTSW,DDOPEN     TEST FOR SYSOUT DATA SET
         BZ    JOBEND              TERMINATE JOB IF NOT
         BAL   R4,PRINTOUT         BLANK LINE
         MVC   5(L'LINE15,R8),LINE15 MOVE IN ERROR MESSAGE
         BAL   R4,PRINTOUT         PRINT ERROR MESSAGE
         MVI   0(R8),SPCE2AFT      ESTABLISH DOUBLE SPACE
         MVC   5(L'LINE16,R8),LINE16 MOVE IN TERMINATION MESSAGE
         BAL   R4,PRINTOUT          AND PRINT IT
        SUBOUT RETURN=PRINTCDE     TERMINATE JOB
         SPACE 5
IOERROR3 SUBIN ,                   ANALYSE ERROR & TELL OPERATOR
         MVC   COMPCODE,COND12     SET CONDITION CODE
         SYNADAF ACSMETH=QSAM      CALL O.S. ROUTINE
         MVC   LINE15+12(86),50(R1) SAVE RESULT OF ANALYSIS
         SYNADRLS ,                RELEASE O.S. BUFFER
         WTO   MF=(E,LINE14)       TELL OPERATOR OF ERROR
        SUBOUT ,                   RETURN TO CALLER
         EJECT
*        MISCELLANAOUS EQUATES
         SPACE 1
MAXDS    EQU   8                   ***** ALTER IF DD NAMES ADDED *****
*                                   NUMBER OF DATA SETS UT433 CAN OPEN
SORTDS   EQU   5                   ***** ALTER IF SORT IS CHANGED*****
*                                   NUMBER OF SORT DD STATEMENTS THAT
*                                   MUST BE PRESENT BEFORE THE SORT
*                                   IS INVOKED.
SORTFLDS EQU   7                   ***** ALTER IF SORT IS CHANGED *****
*                                   NUMBER OF FIELDS ON WHICH DATA MAY
*                                   BE SORTED.  NOTE THAT IF THIS VALUE
*                                   IS ALTERED THEN PARMLIMT MUST ALSO
*                                   BE CHANGED.
DELETE   EQU   4                   TELL SORT TO DELETE
NORETURN EQU   8                   TELL THE SORT NOT TO RETURN
INSERT   EQU   12                  TELL SORT TO INSERT RECORD
DDSTAT   EQU   1                   DD STATEMENT FOUND
DDOPEN   EQU   2                   DATA SET OPEN
SPCE1AFT EQU   X'09'               ADVANCE 1 AFTER PRINTING
SPCE2AFT EQU   X'11'               ADVANCE 2 AFTER PRINTING
SPCE3AFT EQU   X'19'               ADVANCE 3 AFTER PRINTING
PAGESKIP EQU   X'8B'               SKIP TO NEW PAGE
COMMA    EQU   C','                COMMA FOR PARM SCAN
PERIOD   EQU   C'.'                PERIOD
OPENBRAK EQU   C'('                OPENING PARENTHESIS
SPACE    EQU   X'40'               BLANK
QUOTE    EQU   X'7D'               QUOTE MARK
FF       EQU   X'FF'               HASP ACCOUNTING CARD ID X'FF'
FE       EQU   X'FE'               HASP ACCOUNTING CARD ID X'FE'
IND1     EQU   1                   INDICATE ACTION01
IND2     EQU   2                   INDICATE ACTION02
IND3     EQU   3                   INDICATE ACTION03
IND4     EQU   4                   INDICATE ACTION04
IND5     EQU   5                   INDICATE ACTION05
IND6     EQU   6                   INDICATE ACTION06
IND7     EQU   7                   INDICATE ACTION07
IND8     EQU   8                   INDICATE ACTION08
IND9     EQU   9                   INDICATE ACTION09
IND10    EQU   10                  INDICATE ACTION10
IND11    EQU   11                  INDICATE ACTION11
IND12    EQU   12                  INDICATE ACTION12
IND13    EQU   13                  INDICATE ACTION13
IND14    EQU   14                  INDICATE ACTION14
IND15    EQU   15                  INDICATE ACTION15
IND16    EQU   16                  INDICATE ACTION16
IND17    EQU   17                  INDICATE ACTION17
IND18    EQU   18                  INDICATE ACTION18
IND19    EQU   19                  INDICATE ACTION19
IND20    EQU   20                  INDICATE ACTION20
         SPACE 5
BINSTORE DS    0F
         DC    X'00'
STORCOL3 DS    0CL3
         DC    X'00'
STORCOL2 DS    0CL2
         DC    X'00'
STORCOL1 DC    X'00'
         SPACE 1
PARMSW   DC    X'00'
         SPACE 1
SWITCH   DC    X'00'               GENERAL BIT SWITCH
NON100   EQU   1                   INDICATE A NON-100 % LOG ENCOUNTERED
         EJECT
LINE01   DC    C'T580P130 - INITIATION MESSAGES'
LINE02   DC    C'THE FOLLOWING DD STATEMENTS WERE ENCOUNTERED -'
LINE03   DC    C'NUMBER OF SUB-FIELDS FOUND IN THE PARM ='
LINE04   DC    C'NUMBER OF RECORDS READ FROM T580F140   ='
LINE05   DC    C'NUMBER OF RECORDS READ FROM T580C130   ='
LINE06   DC    C'NUMBER OF RECORDS WRITTEN TO T580F141  ='
LINE07   DC    C'CONDITION CODE ='
LINE08   DC    C'***** NO T580F140 STATEMENT *****'
LINE09   DC    C'***** PROCESSING BYPASSED *****'
LINE10   DC    C'END OF T580P130'
LINE13   DC    C'NUMBER OF RECORDS REJECTED             ='
LINE14   DS    0F
         DC    AL2(WTOEND-*),H'0',C'T580P130 - '
LINE15   DS    0CL98
         DC    C'I/O ERROR - '
         DC    CL86' '
WTOEND   EQU   *
LINE16   DC    C'***** PROCESSING TERMINATED *****'
LINE17   DC    C'T580P130 - TERMINATION MESSAGES'
LINE18   DC    C'INSUFFICIENT SORT DD STATEMENTS FOUND'
LINE19   DC    C'THE FOLLOWING DD STATEMENTS WERE MISSING -'
LINE20   DC    C'***** THE DATA WILL NOT BE SORTED *****'
LINE21   DC    C'NO SORT DD STATEMENTS WERE FOUND'
LINE22   DC    C'THE DATA WILL BE SORTED'
LINE23   DC    C'END OF REPORT'
LINE24   DC    C'NUMBER OF INVALID RECORDS              ='
LINE25   DC    C'***** THE DATA WILL BE SORTED *****'
LINE26   DC    C'IN THE ABSENCE OF A PARM, IT WILL BE SORTED -'
LINE27   DS    0CL62
         DC    C'( MAJOR - MINOR ) CHARGE CODE, WORK CODE, TEAM, INIT,'
         DC    C' W/E DATE'
LINE28   DC    C'NUMBER OF DUPLICATE RECORDS REJECTED   ='
LINE29   DC    C'THE FOLLOWING PARM SUB-FIELD IS UNRECOGNISABLE -'
LINE30   DC    C'THE PARM WILL BE IGNORED, AND THE DATA WILL BE SORTED'
LINE31   DC    C'TOO MANY SUB-FIELDS IN THE PARM -'
LINE32   DC    C'THE SORT FIELDS ( MAJOR TO MINOR ) ARE -'
LINE33   DC    C'THERE IS NO PARM'
LINE34   DC    C'NUMBER OF COST / PSEUDO CODES          ='
LINE35   DC    C'NUMBER OF ENTRIES ON TABLE02           ='
LINE36   DC    C'NUMBER OF ENTRIES ON TABLE03           ='
LINE37   DC    C'NUMBER OF RECORDS READ FROM T580F050   ='
         EJECT
HEADINGX DC    C'T580R130/A'       REPORT NAME
HEADING0 DC    C'TIME  SHEET  EDIT  AND  VALIDATION'
HEADING1 DS    0CL133
         DC    X'09'               WRITE AND SPACE 1 AFTER
         DC    C' CARD  MISD  INIT     W/E    PROJECT  '
         DC    C'PROGRAM   WORK  PER   HOURS  '
         DC    C'*-- COMMENTS -*  FLAG  '
         DC    C'*-------------- ACTION --------------*    '
HEADING2 DS    0CL133
         DC    X'11'               WRITE AND SPACE 2 AFERR
         DC    C'  ID   TEAM          DATE    NUMBER    '
         DC    C'NAME     CODE  CENT'
         DC    CL74' '
         SPACE 5
ACTION01 DC    CL38'ACCEPTED - ASSIGNED COST CENTRE XXX.XX'
ACTION02 DC    CL38'ACCEPTED - ASSIGNED PSEUDO CDOE XXX.XX'
ACTION03 DC    CL38'ACCEPTED - FLAGGED CLOSED PROJECT NO.'
ACTION04 DC    CL38'ACCEPTED - VALID BLANK PROJECT NO.'
ACTION05 DC    CL38'ACCEPTED - FLAGGED BLANK PROJECT NO.'
ACTION06 DC    CL38'REJECTED - UNKNOWN CARD CLASS'
ACTION07 DC    CL38'REJECTED - NON-NUMERIC DATE'
ACTION08 DC    CL38'REJECTED - NON-NUMERIC PROJECT NO.'
ACTION09 DC    CL38'REJECTED - NON-NUMERIC WORK CODE'
ACTION10 DC    CL38'REJECTED - NON-NUMERIC PER CENT'
ACTION11 DC    CL38'REJECTED - NON-NUMERIC TOTAL HOURS'
ACTION12 DC    CL38'REJECTED - UNKNOWN PROJECT NUMBER'
ACTION13 DC    CL38'REJECTED - CLOSED PROJECT NUMBER'
ACTION14 DC    CL38'REJECTED - BLANK PROJECT NUMBER'
ACTION15 DC    CL38'REJECTED - NO TEAM SUPPLIED'
ACTION16 DC    CL38'REJECTED - NO INITIALS SUPPLIED'
ACTION17 DC    CL38'REJECTED - NO COST CENTRE TABLE'
         EJECT
SORTPARM DS    0F                  ADDRESS OF SORT PARAMETERS
         DC    X'80',AL3(SORTLIST) ADDRESS OF SORT PARAMETERS
         DC    X'0000'             FILLER
SORTLIST DC    X'0028'             LENGTH OF PARAMETER AREA
FLDADDR  DC    A(DEFSTART)         ADDRESS OF DEFAULT FIELD
         DC    A(DEFEND)           END OF DEFAULT SORT FIELD
         DC    A(RECSTART)         START OF RECORD STATEMENT
         DC    A(RECEND)           END OF RECORD STATEMENT
         DC    A(E15)              ADDRESS OF E15 SORT EXIT
         DC    A(E35)              ADDRESS OF E35 SORT EXIT
         DC    X'00',C'MAX'        REQUEST CORE OPTIMISATION
         DC    X'01',AL3(1028)     RESERVE 1K FOR SAFETY
         DC    X'03',AL3(LISTSW+4) SPECIFY MESSAGE DD-NAME
         DC    X'FF',X'00',C'AP'   REQUEST ALL MESSAGES TO THE PRINTER
         SPACE 1
DEFSTART DC    C' SORT FIELDS=(17,4,CH,A,' CHARGE CODE
         DC    C'29,2,CH,A,'       WORK CODE
         DC    C'4,12,CH,A'        TEAM, INIT, W/E DATE
SORTDUP  DC    C',01,80,CH,A)'     ENSURE DUPLICATE RECORDS ARE TOGETHE
DEFEND   DC    C' '
RECSTART DC    C'RECORD LENGTH=(80,81,80),TYPE=F'
RECEND   DC    C' '
         SPACE 1
REQSTART DC    C' SORT FIELDS=(',CL80' '
         SPACE 1
REQADDR  DC    A(REQSTART),A(REQSTART+14)
         SPACE 1
INTERIM  DS    CL80
INTIND   DS    CL1                 ERROR INDICATOR
         EJECT
SORTABLE DS    0F
LISTSW   DC    X'00',AL3(0),CL8'SYSLIST'
         DC    X'00',AL3(0),CL8'SORTLIB'
         DC    X'00',AL3(0),CL8'SORTWK01'
         DC    X'00',AL3(0),CL8'SORTWK02'
         DC    X'00',AL3(0),CL8'SORTWK03'
TABEND   EQU   *                   END OF SORT'S DD TABLE
TABSIZE  EQU   *-SORTABLE          LENGTH OF TABLE
NTRYSIZ2 EQU   TABSIZE/SORTDS      SIZE OF TABLE ENTRY
         SPACE 1
SORTTAB2 EQU   *                   TABLE OF SORT FIELDS
         DC    C',005,3,CH,A)',CL8'TEAM'
         DC    C',008,3,CH,A)',CL8'INIT'
         DC    C',011,6,CH,A)',CL8'DATE'
         DC    C',017,4,CH,A)',CL8'PROJECT'
         DC    C',021,8,CH,A)',CL8'PROGRAM'
         DC    C',029,2,CH,A)',CL8'WORKCODE'
         DC    C',055,5,CH,A)',CL8'COSTCNTR'
TAB2ENDL EQU   *                   END OF TABLE
TAB2SIZE EQU   *-SORTTAB2          LENGTH OF TABLE
NTRYSIZ3 EQU   TAB2SIZE/SORTFLDS   SIZE OF TABLE ENTRY
         EJECT
WORKAREA DS    D
DECIMAL  DS    D                   WORK AREA FOR PACKED OPERATIONS
CHAIN    DC    A(0)                ADDRESS OF 1ST CHAIN ELEMENT
ADRTABLE DS    F                   ADDRESS OF COST/CHARGE TANLE
ADRSORT1 DS    F                   ADDRESS OF SORT WORK AREA 1
ADRSORT2 DS    F                   ADDRESS OF SORT WORK AREA 2
ADRSRTAB DC    A(SORTTAB2)         ADDRESS OF SORT FIELD NAME TABLE
NUMSRTAB DC    F'7'                NUMBER OF ENTRIES ON DEFAULT TABLE
ADRCODET DC    A(CODETABL)         ADDRESS OF WORK OCDE TABLE
NUMCODET DC    F'9'                NUMBER OF DEFAULT ENTRIES
CHAIN2   DC    A(0)                ADDRESS OF FIRST TABLE 2 ELEMENT
CHAIN3   DC    A(0)                ADRESS OF FIRST TABLE 3 ELEMENT
ZEROWORD DC    F'0'
PARMPNTR DS    F                   POINTER TO PARM
PARMR7R8 DS    2F                  SAVE AREA FOR R7 & R8 USED IN GETPA
COMPCODE DC    H'0'
COND4    DC    H'4'                ERROR IN PARM FIELD
COND12   DC    H'12'               I/O ERROR CONDITION CODE
COND16   DC    H'16'
         SPACE 1
CNTPARM  DC    PL3'0'              COUNT OF SUB-PRRMS
CNTNTRYS DC    PL3'0'              COUNT OF VALID SYSTABLE ENTRIES
CNTUT1   DC    PL3'0'              COUNT OF SYSUT1 RECORDS READ
CNTUT2   DC    PL3'0'              COUNT OF SYSUT2 RECORDS WRITTEN
CNTIN    DC    PL3'0'              COUNT OF SYSIN RECORDS READ
CNTTAB   DC    PL3'0'              COUNT OF SYSTABLE RECPRDS READ
CNTFF    DC    PL3'0'              COUNT OF X'FF' RECORDS
CNTFE    DC    PL3'0'              COUNT OF X'FE' RECORDS
CNTINV   DC    PL3'0'              COUNT OF INVALID RECORDS
CNTDUP   DC    PL3'0'              COUNT OF DUPLICATE RECORDS REJECTED
CNTREJ   DC    PL3'0'              COUNT OF REJECTED RECORDS
CNTTAB2  DC    PL3'0'              COUNT OF TABLE 2 ENTRIES
CNTTAB3  DC    PL3'0'              COUNT OF TABLE 3 ENTRIES
CNTLINE  DC    PL2'0'              LINE COUNT FOR SYSOUT
CNTPAGE  DC    PL2'0'              PAGE COUNT FOR SYSOUT
CNTHI    DC    PL3'0'              COUNTER FOR BINARY CHOP TABLE SEARCH
CNTLO    DC    PL3'0'              COUNTER FOR BINARY CHOP TABLE SEARCH
CNTMID   DC    PL3'0'              COUNTER FOR BINARY CHOP TABLE SEARCH
ZERO     DC    PL2'0'              ZERO
ONE      DC    PL2'1'              ONE
TWO      DC    PL2'2'              TWO
FIVE     DC    PL2'5'              FIVE
SIX      DC    PL2'6'              SIX
NINE     DC    PL2'9'              NINE
TEN      DC    PL2'10'             TEN
TWENTY   DC    PL2'20'             TWENTY
FIFTY    DC    PL2'50'             FIFTY
SIXTY    DC    PL2'60'             SIXTY
HUNDRED  DC    PL2'100'            ONE HUNDRED
PARMLIMT DC    PL2'6'              NO. OF POSSIBLE FIELDS
ENDOPAGE DC    PL2'55'             END OF PAGE
OVERFLOW DC    PL2'54'             END OF PAGE COUNT USED PRE REPOETS
         EJECT
EDITMASK DC    X'4020206B202120'   EDIT WORD FOR PL3
CONDMASK DC    X'40202120'
EDITCVD  DC    X'40202020202020202020202020202120'
EDITPAGE DC    X'40202120'
EDITJUL  DC    X'4021204B202020'
EDMMMSS  DC    X'40202021212020'
EDHHMMSS DC    X'40212020212020212020'
         SPACE 1
DISPLAY  DS    CL16                EBCDIC WORK AREA
EDITWORK DS    CL10                EDIT WORK AREA
SAFETY   DS    CL133               PSEUDO-BUFFER
RECSTORE DC    CL80' '             STORE FOR DUPLICATE RECORD TEST
UT2REC   DS    CL110               SYSUT2 RECORD FOR SUBSTITUTE BUFF
         SPACE 1
TESTCAT  DS    CL2                 WORK RREA FOR SELECT ON CAT
TESTCHRG DS    CL4                 WORK AREA FOR SELECT ON CHARGE-CODE
TESTDATE DS    CL5                 WORK AREA FOR SELECT ON RECORD DATE
TESTCC   DS    CL5                 WORK AREA FOR SELECT ON COST-CENTRE
         SPACE 1
CC       DS    0CL5                DEFAULT COST CENTRE FROM 'COSTCNTR'
CCMAJ    DC    CL3' '              DEFAULT MAJOR COST CENTRE
CCMIN    DC    CL2' '              DEFAULT MINOR COST CENTRE
CCCHARGE DS    CL4                 CHARGE CODE TO BE MATCHED
ORCC     DC    X'F0F0F0F0F0'       'OR' FIELD FOR COST CENTRE
         SPACE 1
CODETABL DC    C'414243444546909899$$$$$$$$$$$$$$$$$$$$'
CODETABE EQU   *-CODETABL          LENGTH OF CODE TABLE
CODETABN EQU   CODETABE/2          NUMBER OF ENTRIES IN TABLE
         EJECT
DATEADDR DC    V(DTERTN)           ADDRESS OF DATE ROUTINE
ADATEFLD DC    A(DATEFLD)          ADDRESS OF RECEIVING AREA
         SPACE 1
DATEFLD  DC    C'COBOLDATE'        FOR DTERTN
PAGE     DC    C'PAGE'             PAGE
LOWVALUE DC    8X'00'
HIVALUE  DC    10X'FF'             HIGH-VALUES
ASTERISK DC    8C'*'
SPACES   DC    CL10' '             SPACES (10)
ZEROES   DC    8C'0'               EBCDIC CONCSTANT OF ZERO
         SPACE 1
TIMEHMS  DS    CL8                 EDITED HH.MM.SS
TIMEHMS2 DS    CL6                 UNEDITED HHMMSS
DATEJUL  DS    CL6                 EDITED YY.DDD
DATEJUL2 DS    CL5                 UNEDITED YYDDD
TIMEMS   DS    CL6                 EDITED MMM.SS
         SPACE 1
INPUT    DC    CL8'INPUT'          INPUT CONSTANT FOR OPEN ROUTINE
         SPACE 1
         LTORG
         EJECT
DCBTABLE DS    0F
TABLE2SW DC    X'00',AL3(TABLE02),CL8'TABLE02',CL8'INPUT'
TABLE3SW DC    X'00',AL3(TABLE03),CL8'TABLE03',CL8'INPUT'
TABLESW  DC    X'00',AL3(SYSTABLE),CL8'T580F050',CL8'INPUT'
PUNCHSW  DC    X'00',AL3(SYSPUNCH),CL8'T580C130',CL8'OUTPUT'
PRINTSW  DC    X'00',AL3(SYSPRINT),CL8'T580R130',CL8'OUTPUT'
SYSOUTSW DC    X'00',AL3(SYSOUT),CL8'T580R131',CL8'OUTPUT'
SYSUT1SW DC    X'00',AL3(SYSUT1),CL8'T580F140',CL8'INPUT'
SYSUT2SW DC    X'00',AL3(SYSUT2),CL8'T580F141',CL8'OUTPUT'
TABLEEND EQU   *                   END OF AD-CON TABLE
TABLESIZ EQU   *-DCBTABLE          LENGTH OF TABLE
NTRYSIZE EQU   TABLESIZ/MAXDS      SIZE OF TABLE ENTRY
         SPACE 1
EXITLIST DC    X'85',AL3(BLKSZRTN) ENTRY FOR DCB MODIFICATION
         SPACE 4
SYSPRINT DCB   DDNAME=T580R130,                                        *
               DSORG=PS,                                               *
               MACRF=PL,                                               *
               RECFM=FBM,                                              *
               LRECL=133,                                              *
               SYNAD=IOERROR2,                                         *
               EXLST=EXITLIST
         SPACE 4
SYSOUT   DCB   DDNAME=T580R131,                                        *
               DSORG=PS,                                               *
               MACRF=PL,                                               *
               RECFM=FBM,                                              *
               LRECL=133,                                              *
               SYNAD=IOERROR,                                          *
               EXLST=EXITLIST
         SPACE 4
SYSUT1   DCB   DDNAME=T580F140,                                        *
               DSORG=PS,                                               *
               MACRF=GL,                                               *
               RECFM=FB,                                               *
               LRECL=80,                                               *
               EODAD=ENDUT1,                                           *
               SYNAD=IOERROR,                                          *
               EXLST=EXITLIST
         EJECT
SYSUT2   DCB   DDNAME=T580F141,                                        *
               DSORG=PS,                                               *
               MACRF=PM,                                               *
               RECFM=FB,                                               *
               LRECL=80,                                               *
               SYNAD=IOERROR,                                          *
               EXLST=EXITLIST
         SPACE 4
SYSPUNCH DCB   DDNAME=T580C130,                                        *
               DSORG=PS,                                               *
               MACRF=PM,                                               *
               RECFM=FB,                                               *
               LRECL=80,                                               *
               SYNAD=IOERROR,                                          *
               EXLST=EXITLIST
         SPACE 5
SYSTABLE DCB   DDNAME=T580F050,                                        *
               DSORG=PS,                                               *
               MACRF=GL,                                               *
               RECFM=FB,                                               *
               LRECL=80,                                               *
               EODAD=ENDTABLE,                                         *
               SYNAD=IOERROR,                                          *
               EXLST=EXITLIST
         EJECT
TABLE02  DCB   DDNAME=TABLE02,                                         *
               DSORG=PS,                                               *
               MACRF=GL,                                               *
               RECFM=FB,                                               *
               LRECL=80,                                               *
               EODAD=ENDTAB02,                                         *
               SYNAD=IOERROR,                                          *
               EXLST=EXITLIST
         SPACE 5
TABLE03  DCB   DDNAME=TABLE03,                                         *
               DSORG=PS,                                               *
               MACRF=GL,                                               *
               RECFM=FB,                                               *
               LRECL=80,                                               *
               EODAD=ENDTAB03,                                         *
               SYNAD=IOERROR,                                          *
               EXLST=EXITLIST
         EJECT
         PRINT GEN                 ALLOW DCB DSECT EXPANSION
         DCBD  DSORG=PS            GENERATE DCB DSECT
T580P130 CSECT
         PRINT NOGEN               SUPPRESS MACRO EXPANSION
         SPACE 1
         LTORG
         SPACE 1
$L       EQU   *-T580P130
$L1      EQU   $L/100000*100000
$L2      EQU   ($L-$L1)/10000*10000
$L3      EQU   ($L-$L1-$L2)/1000*1000
$L4      EQU   ($L-$L1-$L2-$L3)/100*100
$L5      EQU   ($L-$L1-$L2-$L3-$L4)/10*10
$L6      EQU   ($L-$L1-$L2-$L3-$L4-$L5)
         SPACE 1
$LENGTH  EQU   $L1/100000*1048576+$L2/10000*65536+$L3/1000*4096+$L4/100*
               256+$L5/10*16+$L6
         SPACE 1
         END
