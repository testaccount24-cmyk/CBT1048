UT420    CSECT
         WXTRN VERTBL
         PRINT ON,NODATA,NOGEN
         SAVE  (2,12)
         BALR  12,0
         USING *,12
         SPACE
SWITCH1  NOP   COBOLOAD       IF COBOL BYPASS RPG LOAD ROUTINE
         L     5,AVERTBL      RPG PARAMETER ADDRESS INTO REG 5
SWITCH2  NOP   PROCESS        BYPASS RPG TEST AFTER FIRST TIME
         CLC   1(2,5),=C'RP'  Q - IS CALLING LANGUAGE RPG
         MVI   SWITCH2+1,X'F0' SET ON BYPASS SWITCH
         BE    PROCESS        IT IS RPG - BYPASS COBOL LOAD
         MVI   SWITCH1+1,X'F0' SET ON COBOL LOAD SWITCH
COBOLOAD L     5,0(1)         COBOL PARAMETER ADDRESS INTO REG 5
         SPACE 5
PROCESS  CLI   0(5),C'V'      Q - IS OPERATION VERIFY
         BE    VERIFY         YES - GO TO VERIFY ROUTINE
         CLI   0(5),C'S'      Q - IS OPERATION SET TABLE
         BE    SET            YES - GO TO SET ROUTINE
         CLI   0(5),C'O'      Q - IS OPERATION SET BIT OFF
         BE    SETOFF         YES - GO TO SET OFF ROUTINE
         CLI   0(5),C'L'      Q - IS OPERATION SET LIMIT
         BE    SETLIMIT       YES - GO TO LIMIT ROUTINE
         CLI   0(5),C'C'      Q - IS OPERATION CLEAR TABLE
         BE    CLEAR          YES - GO TO CLEAR ROUTINE
         MVI   2(5),X'F2'     INDICATE INVALID OPERATION
EXIT    RETURN (2,12)         RETURN TO CALLING PROGRAM
         EJECT
VERIFY   BAL   4,NUMERIC      VERIFY CODE IS NUMERIC
         CLC   3(5,5),LIMIT   Q - DOES CODE EXCEED LIMIT
         BH    ERROR4         YES - GO SET ERROR SWITCH
         BAL   4,WHICHBIT     DETERMINE BIT TO BE CHECKED
         LA    6,8(5)         LOAD ADDRESS OF TABLE INTO REG 6
         AR    6,3            POINT TO BYTE UNDER TEST
         MVC   TM+1(1),BITS+3 POINT TO BIT TO BE TESTED
TM       TM    0(6),X'00'     TEST BIT
         BZ    OFF            BRANCH IF BIT OFF
         MVI   1(5),X'F1'     INDICATE BIT ON IN RESULT
         MVI   2(5),X'F0'     INDICATE GOOD END IN ERROR SWITCH
         B     EXIT           RETURN TO CALLING PROGRAM
OFF      MVI   1(5),X'F0'     INDICATE BIT OFF IN RESULT
         MVI   2(5),X'F0'     INDICATE GOOD END IN ERROR SWITCH
         B     EXIT           RETURN TO CALLING PROGRAM
ERROR4   MVI   1(5),X'F0'     INDICATE BIT OFF IN RESULT
         MVI   2(5),X'F4'     INDICATE CODE GREATER THAN LIMIT
         B     EXIT           RETURN TO CALLING PROGRAM
         SPACE 5
SET      BAL   4,NUMERIC      VERIFY CODE IS NUMERIC
         CLC   3(5,5),LIMIT   Q - DOES CODE EXCEED LIMIT
         BH    ERROR4         YES - GO SET ERROR SWITCH
         BAL   4,WHICHBIT     DETERMINE WHICH BIT IS TO BE SET
         LA    6,8(5)         LOAD ADDRESS OF TABLE INTO REG 6
         AR    6,3            POINT TO BYTE TO BE SET
         MVC   OR+1(1),BITS+3 POINT TO BIT IN OR INSTRUCTION
OR       OI    0(6),X'00'     SET BIT TO ONE
         MVI   1(5),X'F1'     INDICATE BIT ON IN RESULT
         MVI   2(5),X'F0'     INDICATE GOOD END IN ERROR SWITCH
         B     EXIT           RETURN TO CALLING PROGRAM
         SPACE 5
SETOFF   BAL   4,NUMERIC      VERIFY CODE IS NUMERIC
         CLC   3(5,5),LIMIT   Q - DOES CODE EXCEED LIMIT
         BH    ERROR4         YES - GO SET ERROR SWITCH
         BAL   4,WHICHBIT     DETERMINE WHICH BIT IS TO BE SET OFF
         LA    6,8(5)         LOAD ADDRESS OF TABLE INTO REG 6
         AR    6,3            POINT TO BYTE TO BE SET
         MVI   TEST,X'FF'     SET TEST BYTE TO HEX FF
         XC    TEST,BITS+3    EXCLUSIVE OR TO SET OFF BIT
         NC    0(1,6),TEST    SET BIT TO ZERO
         MVI   1(5),X'F0'     INDICATE BIT OFF IN RESULT
         MVI   2(5),X'F0'     INDICATE GOOD END IN ERROR SWITCH
         B     EXIT           RETURN TO CALLING PROGRAM
         EJECT
SETLIMIT BAL   4,NUMERIC      VERIFY CODE IS NUMERIC
         MVC   LIMIT,3(5)     MOVE CODE TO STORE
         MVI   2(5),X'F0'     INDICATE GOOD END
         B     EXIT           RETURN TO CALLING PROGRAM
         SPACE 5
CLEAR    BAL   4,NUMERIC      VERIFY CODE IS NUMERIC
         CLC   3(5,5),=C'12500' IS SPECIFIED TABLE TOO LARGE
         BNH   *+12           NO - GO AND CLEAR IT
         MVI   2(5),X'F3'     INDICATE TABLE TOO LARGE
         B     EXIT           RETURN TO CALLING PROGRAM
*
*    AFTER VERIFICATION ROUTINE REG 6 POINS AT START OF TABLE
*
         PACK  PACKCODE,3(5,5) PACK CODE INTO DOUBLE-WORD
         CVB   3,PACKCODE     CONVERT PACKED CODE INTO BINARY
         LA    2,256(0)       PUT VALUE OF 256 INTO REG 2
LOOP2    MVI   0(6),X'00'     MOVE HEX ZEROES TO FIRST BYTE OF TBL
         S     3,VALUE1       DECREMENT TABLE LENGTH BY ONE
         CR    2,3            COMPARE TABLE LENGTH WITH 256
         BNL   SMALLMVE       BRANCH IF NOT GREATER THAN 256
         MVC   1(256,6),0(6)  PROPAGATE LOW-VALUES FOR 256 BYTES
         SR    3,2            DECREMENT TABLE LENGTH BY 256
         A     6,VALUE257     INCREMENT TABLE POINTER BY 257
         B     LOOP2
SMALLMVE S     3,VALUE1       DECREMENT MOVE LENGTH BY 1
         EX    3,MOVE         FILL TABLE WITH LOW-VALUES
         MVI   1(5),X'F0'     INDICATE BITS OFF IN RESULT
         MVI   2(5),X'F0'     INDICATE GOOD END IN ERROR SWITCH
         B     EXIT           RETURN TO CALLING PROGRAM
*
MOVE      MVC   1(0,6),0(6)    EXECUTED MOVE INSTRUCTION       -
*
         EJECT
NUMERIC  LA    6,3(5)         POINT REGISTER 6 TO START OF CODE
         LA    2,5(0)         SET BCT COUNT TO FIVE
LOOP1    CLI   0(6),X'40'     Q - IS BYTE BLANK
         BNE   *+12           NO - GO TO NEXT TEST
         MVI   0(6),X'F0'     YES - SET BYTE TO ZERO
         B     INCR1          GO AND INCREMENT POINTER
         CLI   0(6),X'F0'     Q - IS BYTE LESS THAN ZERO
         BL    ERROR1         YES - GO AND INDICATE ERROR
         CLI   0(6),X'F9'     Q - IS BYTE GREATER THAN NINE
         BH    ERROR1         YES - GO AND INDICATE ERROR
INCR1    LA    6,1(6)         INCREMENT POINTER
         BCT   2,LOOP1        REPEAT PROCESS FIVE TIMES
         BR    4
ERROR1   MVI   2(5),X'F1'     INDICATE NON-NUMERIC CODE
         B     EXIT           RETURN TO CALLING PROGRAM
         SPACE 5
WHICHBIT PACK  PACKCODE,3(5,5) PACK CODE INTO DOUBLE-WORD
         SR    2,2            CLEAR REGISTER 2
         CVB   3,PACKCODE     CONVERT PACKED CODE INTO BINARY
         LA    6,8(0)         PUT VALUE OF 8 IN REGISTER 6
         LA    7,1(0)         PUT VALUE OF 1 IN REGISTER 7
         SR    3,7            SUBTRACT 1 FROM REGISTER 3
         DR    2,6            DIVIDE BINARY CODE BY EIGHT
         AR    2,7            ADD 1 TO REGISTER 2
         STM   2,3,BITS       STORE REMAINDER AND QUOTIENT
         LA    8,TABLE-1      ADDRESS OF BYTE BEFORE TABLE IN REG8
         AR    8,2            ADD REMAINDER TO TABLE ADDRESS
         MVC   BITS+3(1),0(8) STORE BIT MASK                   -
         BR    4
         EJECT                                                 -
PACKCODE DS    D
BITS     DS    F
BYTES    DS    F
VALUE1   DC    BL4'1'
VALUE257 DC    BL4'100000001'
LIMIT    DC    CL5'99999'
AVERTBL  DC    A(VERTBL)
TEST     DC    X'FF'
         SPACE
TABLE    DC    B'10000000'    **
         DC    B'1000000'      *
         DC    B'100000'       *
         DC    B'10000'        *
         DC    B'1000'         **  REMAINDER TO BIT CONVERSION TBL
         DC    B'100'          *
         DC    B'10'           *
         DC    B'1'           **
         SPACE
         LTORG
         SPACE
         END
