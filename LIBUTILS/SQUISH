         TITLE 'PROGRAM TO SQUISH A DISK VOLUME'
         SPACE 1
***********************************************************************
*                                                                     *
*              PROGRAM NAME :      SQUISH                             *
*                                                                     *
*              AUTHOR :            KARL BARNHARDT                     *
*                   OF - BELL TELEPHONE LABORATORIES INC.             *
*                        6200, E. BROAD STREET                        *
*                        COLUMBUS - OHIO 43213                        *
*                        U.S.A.                                       *
*              VERSION : MARK I (PRE-LUCAS MODS)                      *
*                  DISTRIBUTED IN EUROPE BY THE 'SHARE ORGANISATION'  *
*                                                                     *
*        IMPLEMENTED AND MODIFIED IN MONSANTO, BY D.H. CARTWRIGHT     *
*              DATE :              SEPTEMBER, 1975.                   *
*                                                                     *
*        MODIFIED TO RUN UNDER MVS, BY J. NOLS                        *
*              DATE :              MAY, 1977.                         *
*                                                                     *
*              LOCATION :          EUROPEAN COMPUTER CENTER           *
*                                                                     *
***********************************************************************
         SPACE 1
***********************************************************************
*                                                                     *
*         PURPOSE :                                                   *
*         =======                                                     *
*                                                                     *
*        THIS PROGRAM WILL COPY ONE DIRECT ACCESS VOLUME ONTO         *
*        ANOTHER VOLUME OF THE SAME TYPE, AT THE SAME TIME            *
*        SHUFFLING ALL MOVEABLE DATASETS UP TOGETHER.IN THIS          *
*        WAY THE FREE SPACE ON THE VOLUME IS CONCENTRATED INTO        *
*        A FEW LARGE AREAS INSTEAD OF THE FRAGMENTED MESS WHICH       *
*        O/S DADSM LEAVES LYING AROUND.                               *
*                                                                     *
***********************************************************************
         SPACE 1
***********************************************************************
*                                                                     *
*        ATTENTION : UNDER MVS THIS PROGRAM MUST BE LINK-EDITED       *
*                    WITH OPTION 'AC=1' (AUTHORIZED), IN AN           *
*                    AUTHORIZED LIBRARY (OF COURSE).                  *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*        MAINTENANCE : -                                              *
*                                                                     *
*        AUGUST 1977               FREE EXTENT LIST EXTENDED TO 36    *
*                                  ENTRIES FOR INTERMEDIATE WORK.     *
*                                  D.H.CARTWRIGHT MISD/TSG BRUSSELS   *
*                                                                     *
*        SEPTEMBER 1978            THE ABOVE CHANGE WAS ONLY PARTLY   *
*                                  SUCCESSFUL. IT HAD TO HAPPEN....   *
*                                  ONE PARTICULAR PACK LOADED HEAVILY *
*                                  WITH ISAM FILES HAD 37 ENTRIES IN  *
*                                  THE TABLE. THE TABLE OVERFLOWED... *
*                                  INTO THE VTOC WORK AREA AND CAUSED *
*                                  42 F1 DSCB'S TO BE LOST WITHOUT    *
*                                  TRACE...?????                      *
*                                  THIS CHANGE WILL EXTEND THE TABLE  *
*                                  AND PUT IN AN OVERFLOW TEST.       *
*                                  J ABBEY. TSG. SEPTEMBER 25 1978.   *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*        DD STATEMENTS (ALL MANDATORIES) :                            *
*        ===============================                              *
*                                                                     *
*              SYSPRINT - MESSAGE DATA SET.                           *
*              SYSUT1   - DEFINES INPUT DISK VOLUME.                  *
*              SYSUT2   - DEFINES OUTPUT DISK VOLUME.                 *
*                                                                     *
***********************************************************************
         SPACE 1
***********************************************************************
*                                                                     *
*        IF AN EXECUTION OF 'SQUISH' TERMINATED WITH ABEND '0C3'      *
*         (NORMALLY FORCED), REGISTER 14 POINTS TO THE AREA           *
*         WHERE ABNORMAL END HAS BEEN DECIDED.                        *
*                                                                     *
***********************************************************************
         SPACE 1
***********************************************************************
*                                                                     *
*        THIS PROGRAM IS ONLY VALID FOR THE FOLLOWING DEVICES         *
*        (ON OS/VS2 - MVS) :                                          *
*              2314                                                   *
*              3330                                                   *
*              3330-11                                                *
*        FOR OTHER DEVICES CHECK THE CYLINDER TABLE AND THE TRACK MAP.*
*                                                                     *
***********************************************************************
         SPACE 1
         EJECT
***********************************************************************
*        MACROS USED BY SQUISH                                        *
***********************************************************************
         SPACE 1
         MACRO
&LABEL   CRASH
&LABEL   BAL 14,CRASH              GO TO CRASH ROUTINE
         MEND
         SPACE 3
         MACRO
&LABEL   WRTVTOC &LOC,&ADR,&IND
&LABEL   MVI OUTER,0               CLEAR ERROR BYTE
         WRITE VTCOUTDB,DI,,&LOC+44,,&LOC,MF=E
         CHECK VTCOUTDB            WAIT TILL FINISHED
         AIF (T'&IND NE 'O').OUT
         CLI   OUTER,0             SEE IF GOOD WRITE
         BE    *+8                  GOODIE
         BAL   14,CRASH             GO CRASH
.OUT     ANOP
         AIF   (T'&ADR EQ 'O').OUT2
         L     14,VTCOUTDB+16      GET IOB ADDRESS
         IHBINNRA &ADR             GET PARM IN REG 1
         MVC   0(5,1),CCHHR(14)     MOVE CCHHR OF ADDRESS
.OUT2    ANOP
         L     14,BLOCKAD          GET BLOCK #
         LA    14,1(14)            INCR
         ST    14,BLOCKAD          SAVE
         MEND
         SPACE 3
         MACRO
&LABEL   TTRABS &DCB,&ABSAD        CONVERT FROM TTR TO ABSOLUTE ADDRESS
&LABEL   L     1,&DCB+44           GET DEB ADDRESS
         LA    2,&ABSAD            GET ADDRESS OF ABSOULTE ADDRESS
         L     14,16               GET CVT ADDRESS
         L     15,X'1C'(14)        GET CONVERT ROUTINE ADDRESS
         LA    3,RGSAV             POINT TO SAVE AREA
         STM   9,13,0(3)           SAVE THEM
         BALR  14,15               GO TO IT
         LM    9,13,0(3)           RESTORE REGS.
         MEND
         EJECT
***********************************************************************
*        MACROS USED BY SQUISH   (CONT'D)                             *
***********************************************************************
         SPACE 1
         MACRO
&LABEL   ABSTTR &DCB,&ABSAD        CONVERT FROM ABSOLUTE ADDRESS TO TTR
&LABEL   L     1,&DCB+44           GET DEB ADDRESS
         LA    2,&ABSAD            GET ADDRESS OF ABSOLUTE ADDRESS
         L     14,16               GET CVT ADDRESS
         L     15,X'20'(14)        GET CONVERT ROUTINE ADDRESS
         LA    3,RGSAV             GET ADDRESS OF SAVEA AREA
         STM   9,13,0(3)           SAVE REGS
         BALR  14,15               GO TO ROUTINE
         LM    9,13,0(3)           RESTORE REGS.
         MEND
         SPACE 3
         MACRO
&LABEL   READVTOC &LOC
&LABEL   POINT DISKIN,FULL         POINT AT RECORD
         MVI   OUTER,0             CLEAR ERROR
         READ  VTOCINDB,SF,,&LOC,MF=E
         CHECK VTOCINDB            WAIT TO STOP
         CLI   OUTER,0             MAKE SURE NO ERROR
         BE    *+8                 IF NOT, GOODIE
         BAL   14,CRASH            OTHERWISE, GO CRASH
         MEND
         EJECT
SQUISH   CSECT
         SPACE 1
***********************************************************************
*        REGISTER EQUATES  /  HOUSEKEEPING                            *
***********************************************************************
         SPACE 1
R1       EQU   1                   REGISTER EQUATES
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R11      EQU   11
R12      EQU   12                  SECONDARY BASE REGISTER
R13      EQU   13                  SAVE AREA / PRIMARY BASE REGISTER
R14      EQU   14
         SPACE 3
         USING *,15
         B     START               GO AROUND MESSAGE
         DC    AL1(L'STRTMES)
STRTMES  DC    C'SQUISH  -  CONTACT TSG IF ANY PROBLEM'
SAVE     DC    18F'0'              REGISTER SAVE AREA             MVS
START    EQU   *
         SAVE  (14,12)
         LA    11,SAVE
         ST    11,8(13)            SET FORWARD CHAIN
         ST    13,SAVE+4           SAVE 13
         LR    13,11               ESTABLISH SAVE AREA ADDRESSABILITY
         LA    R12,2048(,R11)      EXTEND ..                      MVS
         LA    R12,2048(,R12)                ADDRESSABILITY       MVS
         DROP  15
         USING SAVE,R13,R12        REGISTERS 13 AND 12 ARE BASES  MVS
         EJECT
***********************************************************************
*                                                                     *
*        OPEN 'SYSPRINT' DATA SET.                                    *
*        READ JFCB OF INPUT DISK, MOVE '04' X 44 CHARACTERS IN        *
*         JFCB DSNAME FIELD (VTOC DSCB4 ) AND OPEN IT (TYPE=J).       *
*        SAME THING FOR OUTPUT DISK.                                  *
*                                                                     *
***********************************************************************
         SPACE 1
         OPEN  (SYSPRINT,OUTPUT)
         RDJFCB DISKIN
         MVI   INJFCB,4            SET VTOC AS DSNAME
         MVC   INJFCB+1(43),INJFCB
         OPEN  DISKIN,TYPE=J       OPEN VTOC
         RDJFCB DISKOUT            SET UP OUTPUT VTOC
         MVI   OUTJFCB,4           SET UP VTOC AS DSNAME
         MVC   OUTJFCB+1(43),OUTJFCB
         OI    OUTJFCB+52,X'08' DON'T WRITE BACK JFCB
         OPEN  (DISKOUT,UPDAT),TYPE=J  OPEN OUTPUT VTOC
         EJECT
***********************************************************************
*                                                                     *
*        SAVE VOLUME SERIAL NUMBERS OF INPUT AND OUTPUT DISKS         *
*        INTO MESSAGE FOR OPERATOR.                                   *
*        TEST IF DEVICE TYPE OF INPUT AND OUTPUT DISKS                *
*        ARE IDENTICALS, AND ON DIRECT ACCESS DEVICES.                *
*             IF YES; CONTINUE NORMAL PROCESSING.                     *
*             IF NO; ABEND (U0001).                                   *
*                                                                     *
***********************************************************************
         SPACE 1
         L     4,DISKOUT+44        GET DEB ADDRESSES
         L     5,DISKIN+44
         L     4,32(4)             GET UCB ADDRESSES
         L     5,32(5)
         MVC   WTOR+X'20'(6),28(5) MOVE VOL SER #
         MVC   WTOR+X'2C'(6),28(4) MOVE VOL SER #
         CLC   16(4,4),16(5)       SEE IF UCBS THE SAME
         BE    UCBSMTCH            IF SO, GOODIE
DUMP     EQU   *
         ABEND 1,DUMP              OTHERWISE BLAST OUT
UCBSMTCH EQU   *
         CLI   18(4),X'20'         MAKE SURE DIRECT ACCESS
         BNE   DUMP                IF NOT, THEN FORGET IT
         EJECT
***********************************************************************
*                                                                     *
*        ASK OPERATOR, IF IT IS 'OK TO SQUISH VOLUME X ONTO Y?'       *
*         HE MUST REPLY 'Y' FOR YES, 'N' FOR NO.                      *
*           IF YES; CONTINUE NORMAL PROCESSING.                       *
*           IF NO; TERMINATE PROCESSING WITH CONDITION CODE 8.      *
*                                                                     *
***********************************************************************
         SPACE 1
ASKOP    EQU   *
         MVI   INECB,0             CLEAR ECB
         WTOR  MF=(E,WTOR)         SAK HIM
         WAIT  ECB=INECB           WAIT FOR ANSWER
         OI    FULL,X'40'          UP CASE REPLY
         CLI   FULL,C'Y'           DID HE SAY YES
         BE    OPSDYES             GOODIE
         CLI   FULL,C'N'           DID HE SAY NO
         BNE   ASKOP               IF NOT, THEN ASK HIM AGAIN
         SPACE
         LA    1,BDOPMES           GET ADDRESS OF MESSAGE
         BAL   11,WRTLINE          GO TELL USER
         L     13,SAVE+4           RESTORE REG 13
         RETURN (14,12),RC=8       RETURN WITH BAD RETURN CODE
OPSDYES  EQU   *
         SPACE 1
***********************************************************************
*                                                                     *
*        ENQ INPUT AND OUTPUT VTOCS.                                  *
*                                                                     *
***********************************************************************
         SPACE 1
         ENQ   MF=(E,ENQL)         ENQ ON THE TWO VTOCS
         EJECT
         SPACE 1
***********************************************************************
*                                                                     *
*        READ AND PROCESS DSCB FORMAT 4 FROM INPUT DISK.              *
*                                                                     *
***********************************************************************
         SPACE 1
         READ  VTOCINDB,SF,,VTOCIN,MF=E
         CHECK VTOCINDB
         MVC   VSAMINFO,VTOCIN+76  SAVE VSAM INFORMATION FROM      MVS
*                                   FROM INPUT DSCB FORMAT 4       MVS
         SR    5,5                 CLEAR 5
         IC    5,19(4)             GET LAST PART OD DEVICE TYPE
         SLL   5,1                 MULT BY 2
         LH    5,DACYLS(5)         GET # OF CYLS
         STH   5,INCYLS
         STH   5,OUTCYLS
         MH    5,TRKPCYL           GET TOTAL # OF TRACKS
         STH   5,#TRKS             SAVE # OF TRACKS
         MVC   ABSAD,VTOCIN+45     GET TTR
         SR    0,0                 OF LAST FMT 1
         ABSTTR DISKIN,ABSHD
         ST    0,LSTFM1            SAVE FOR FUTURE
         EJECT
***********************************************************************
*                                                                     *
*        ACQUIRE WITH 'GETMAIN' A NUMBER OF FULL-WORDS EQUIVALENT     *
*        TO THE MAXIMUN NUMBER OF DSCB'S PRESENT IN THE INPUT VTOC.   *
*                                                                     *
***********************************************************************
         SPACE 1
         MVC   INDKAD,VTOCIN+45 MOVE LAST DS ADDRESS
         LH    5,INDKAD            GET CYL #
         MH    5,TRKPCYL           GET TRACK #
         AH    5,INDKAD+2          NOW HAVE REL TRK #
         MVC   OTDKAD,VTOCIN+107 MOVE EXTENT START
         LH    6,OTDKAD            GET CYL # OF START
         MH    6,TRKPCYL           GET TRACK #
         AH    6,OTDKAD+2          NOW HAVE REL TRK # OF START
         LA    5,1(5)              UP 1 FOR SUBTRACT
         SR    5,6                 5 HAS # OF TRACKS
         SR    6,6                 CLEAR 6
         IC    6,VTOCIN+74         GET DSCBS PER TACK
         MR    4,6                 GET # OF DSCBS IN 5
         SLL   5,2                 MULT 5 BY 4
         GETMAIN R,LV=(5)          GET CORE FOR DSCB LIST
         LA    1,0(1)              CLEAR HIGH BYTE
         S     1,=F'4'             REDUCE BY 4
         ST    1,DSLSTAD           SAVE ADDRESS-4
         EJECT
***********************************************************************
*                                                                     *
*        READ EACH DSCB FORMAT 1 FROM INPUT DISK VTOC                 *
*        AND SAVE IN THE PRECEDING GETMAINED FULL-WORDS THE           *
*        FOLLOWING INFORMATION FOR EACH DSCB1 :                       *
*                                                                     *
*           IN THE THREE FIRST BYTES : TTR OF DSCB1 IN VTOC.          *
*           IN THE LAST BYTE : FLAGS                                  *
*             X'80' - DSCB1 DESCRIBES AN ISAM DATA SET.               *
*             X'40' - DSCB1 DESCRIBES AN UNMOVEABLE DATA SET.         *
*             X'20' - DSCB1 DESCRIBES A 'SYSCTLG' DATA SET.           *
*             X'10' - DSCB1 DESCRIBES A DATA SET WITH CYLINDER        *
*                      BOUNDARY ALLOCATION.                           *
*             X'08' - ?                                               *
*                                                                     *
***********************************************************************
         SPACE 1
         POINT DISKIN,THIRD        POINT TO THIRD RECORD
         L     10,THIRD            GET FIRST TTR IN 10
         L     2,DSLSTAD           POINT TO DSLST
VTOCRD2  EQU   *
         LA    2,4(2)              UP TO BEGINNING
VTOCRD   EQU   *
         C     10,LSTFM1           SEE IF ON LAST DATA SET
         BNL   LFM1                IF SO, THEN START WORK
         READ  VTOCINDB,SF,,FMT1,MF=E
         CHECK VTOCINDB            WAIT FOR COMPLETION
         NOTE  DISKIN              GET TTR OF ONE JUST REASD
         LR    10,1                SAVE CURRENT TTR POINTER
         ST    1,0(2)              SAVE FOR FUTURE
         CLI   FMT1+44,X'F1'       SEE IF TYPE 1
         BNE   VTOCRD              IF NOT, READ AGAIN
         EJECT
************** CONT'D
         SPACE 2
         MVI   3(2),0              CLEAR ENDING BYTE
         CLC   FMT1+82(2),=X'0008' IS THIS VSAM DATA SET            MVS
         BNE   NTVS01              BRANCH IF NO                     MVS
         OI    3(2),X'40'          INDICATE IS UNMOVEABLE           MVS
NTVS01   EQU   *                                                    MVS
         TM    FMT1+82,X'80'       IS THIS ISAM DATA SET
         BZ    NTIS01              IF NOT, SKIP SETTING BIT
         OI    3(2),X'80'          TURN ON IS BIT
NTIS01   EQU   *
         TM    FMT1+82,X'01'       IS IT UNMOVEABLE
         BZ    NTABS01             IF NOT, DON'T FLIP BIT
         OI    3(2),X'40'          TURN ON BIT
NTABS01  EQU   *
         CLC   SYS1,FMT1           IS IT A 'SYS1.' DS ?            11/3
         BNE   NTSYS01             NO THE SKIP IT                  11/3
         OI    3(2),X'40'          FAKE IT AS UNMOVEABLE           11/3
NTSYS01  EQU   *                                                   11/3
         CLC   CTLG,FMT1           IS IT THE SYSCTLG DATA SET
         BNE   NOTCT01             IF NOT, DON'T FLIP BIT
         OI    3(2),X'20'          TURN ON CTLG BIT
NOTCT01  EQU   *
         TM    FMT1+94,X'C0'       SEE IF CYLINDER ALLOCATION
         BNO   NOTCYL01            IF NOT, DON'T FLIP BIT
         OI    3(2),X'10'          TURN ON CYLINDER BIT
         B     VTOCRD2             GO INCR AND READ
NOTCYL01 EQU   *
         OI    3(2),X'08'          TURN ON TRACK BIT
         B     VTOCRD2
         EJECT
***********************************************************************
*                                                                     *
*        READ DSCB FORMAT 4 FROM OUTPUT DISK VTOC.                    *
*                                                                     *
***********************************************************************
         SPACE 1
LFM1     EQU   *
         MVC   0(4,2),ZEROES       MOVE ZEROES TO END OF LIST
         READ  VTCOUTDB,DI,,VTOCOUT+44,,VTOCOUT,MF=E
         CHECK VTCOUTDB            WAIT FOR COMPLETION
         EJECT
***********************************************************************
*                                                                     *
*        MARK TRACK ZERO AS ALLOCATED AND ALL THE TRACKS CONTAINING   *
*        THE VTOC.                                                    *
*                                                                     *
***********************************************************************
         SPACE 1
         MVI   FREESPAC,X'FF'
         MVC   STAD,VTOCOUT+107    GET VTOC START
         MVC   ENDAD,VTOCOUT+111   VTOC END
         LA    1,STAD              1 POINTS TO EXTENT
         BAL   14,ABSALC           GO ALLOCATE THE VTOC
         LH    14,ENDAD            GET VTOC ENDING CYLINDER
         MH    14,TRKPCYL          GET TRACK NUMBER
         AH    14,ENDAD+2          ADD IN TRACK
         STH   14,OTVTCEND         SAVE LAST TRACK NUMBER IN OUTPUT VTC
         SPACE 2
         OI    FMT4+58,X'84'       TURN ON BAD VTOC BITS
         XC    BLOCKAD,BLOCKAD     CLEAR RECORD #
         MVC   FMT4+76(19),VSAMINFO MOVE VSAM INFORMATION FROM      MVS
*                                    INPUT DSCB 4 TO OUTPUT DSCB 4  MVS
         WRTVTOC FMT4              REWRITE FMT4
         NI    FMT4+58,X'FF'-X'84' WIPE OUT BAD BITS
         LA    14,2                SET UP FIR FIRSFT DSCB BLOCK
         STH   14,REC#             SAVE IT
         EJECT
***********************************************************************
*                                                                     *
*        ^                                                            *
*                                                                     *
***********************************************************************
         SPACE 1
         OPEN  (OUTDISK,OUTPUT,INDISK),TYPE=J OPEN DISK PACKS
         GETMAIN R,LV=400*8        GET SPACE FOR READ COUNTS AND DATA
         LA    1,0(1)              WIPE OUT HIGH BYTE
         ST    1,RDCNTAD           SAVE ADDRESS
         MVI   RDCNTAD,X'08'       REPLACE TIC CCW
         LA    2,1600(1)           POINT 2 AT COUNT AREA
         LA    3,199               SET UP 199 READ COUNT CCWS
         LA    4,8                 DATA LENGTH OF 8
INITCCW  ST    2,0(1)              STORE DATA ADDRESS IN CCW
         ST    4,4(1)              STORE LENGTH
         MVI   0(1),X'12'          MOVE IN READ COUNT CCW
         MVI   4(1),X'40'          PUT IN COMMAND CHAINING
         LA    1,8(1)              INCREMENT TO NEXT CCW
         LA    2,8(2)              INCREMENT TO NEXT DATA AREA
         BCT   3,INITCCW           KEEP DOING IT
         ST    3,0(1)              PUT IN ADDRESS
         MVI   0(1),X'03'          PUT IN NO-OP CCW
         ST    4,4(1)              PUT IN ANY LENGTH
         MVI   4(1),X'20'          TURN ON SILI BIT
         GETMAIN R,LV=22600        GET CORE FOR DATA AND CCWS
         ST    1,DACCWADI          SAVE ADDRESS
         MVI   DACCWADI,X'08'      PUT BACK TIC
         LA    1,1600(1)           POINT TO DATA AREA
         ST    1,DATADI            SAVE IT
         GETMAIN R,LV=22600        GET CORE FOR OUTPUT DATA & CCWS
         ST    1,DACCWADO          SAVE CCW ADDRESS
         MVI   DACCWADO,X'08'      PUT TIC OP CODE BACK
         LA    1,1600(1)           GET 1 UP TO DATA AREA
         ST    1,DATADO            SAVE ADDRESS OF DATA AREA
         EJECT
***********************************************************************
*                                                                     *
*        PROCESS THE UNMOVEABLE DATA SETS.                            *
*                                                                     *
***********************************************************************
         SPACE 1
         L     4,DSLSTAD           POINT TO DSLST
INC1     LA    4,4(4)              UPDATE 4
         CLC   0(4,4),ZEROES       ARE WE THROUGH
         BE    GETCTLG             IF SO, GO FIND AND COPY SYSCTLG
         TM    3(4),X'C0'          IS IT UNMOVABLE
         BZ    INC1                IF NOT, THEN LOOK AGAIN
         BAL   11,GETVTOCS         GO R5AD THE VTOCS OF DS
         SR    0,0                 CLEAR 0
         LA    1,INEXTS            GET EXTENT ADDRESS
         LA    2,16                16 MAX EXTENTS
ABSTST1  EQU   *
         CLC   0(8,1),ZEROES       ARE WE FINISHED
         BE    ABSOUT1             IF SO, DON'T DO IT AGAIN
         BAL   14,ABSALC           GO ALLOC ABS
         AH    0,TRKALC            ACCUM TRACKS ALLOCATED
         LA    1,8(1)              INCR. 1
         BCT   2,ABSTST1           KEEP IT UP
         SPACE
ABSOUT1  MVC   OUTEXTS(16*8),INEXTS MOVE ALL EXTENTS
         STH   0,TRKUSD            SAVE FOR PUTDS
         BAL   11,PUTDS            GO WRITE DSCBS
         MVI   3(4),0              CLEAR LIST
         B     INC1                GO LOOK FOR NEXT
         EJECT
***********************************************************************
*                                                                     *
*        PROCESS THE NON-UNMOVEABLE DATE SETS.                        *
*                                                                     *
***********************************************************************
         SPACE 1
GETCTLG  EQU   *
         SR    7,7
         LA    2,PFMT5             GET FMT 5 ADDRESS
         LH    15,#TRKS            GET # OF TRKS
         LA    14,1
         LA    3,FREESPAC(15)      POINT PAST LAST TRACK
         MVI   0(3),X'FF'          SET AS ALLOCATED
         BCTR  15,0                REDUCE TO LAST TRACK
         SR    3,3
LKFREE1  LA    5,FREESPAC(3)       GET ADDRESS OF NEXT TRACK
         CLI   0(5),X'FF'          SEE IF ALLOCATED
         BNE   FFREE               IF SO, GOODIE
LKUP1    BXLE  3,14,LKFREE1        KEEP LOOKING
         B     PFMT5OUT            GET OUT IF ALL TRACKS
FFREE    EQU   *
         STH   3,4(2)              SAVE EXTENT START
LKFREE2  LA    3,1(3)              UPDATE 3
         LA    5,FREESPAC(3)       GET ADDRESS OF NEXT TRACK
         CLI   0(5),X'FF'          IS THIS FREE
         BNE   LKFREE2             IF SO, KEEP GOING
         LR    6,3
         LH    9,4(2)              GET STARTING TRACK IN 9
         LH    10,TRKPCYL          GET TRACK PER CYL
         AR    9,10                ADD TO 9
         BCTR  9,0                 REDUCE BY 1
         SR    8,8                 CLEAR 8 FOR DIVIDE
         DR    8,10
         MR    8,10                NOW REG 9 HAS NEXT HIGHEST CYL ADDR
         SH    6,4(2)              GET TOTAL TRACKS
         SH    9,4(2)              GET # TRKS BEFORE CYL
         CR    9,6                 SEE WHICH IS BIGGER
         BNH   FIGR1               IF MORE THAN 1 CYL BRANCH
         STH   6,6(2)              STORE THE #
         B     LKINC1
FIGR1    EQU   *
         STH   9,6(2)              SAVE TRKS BEFORE CYL
         LCR   9,9                 SET 9 NEGATIVE
         AR    9,6                 NOW HAVE TRACKS LEFT
         DR    8,10                GET CY S AGAIN
         STH   8,10(2)             SAVE TRKS AFTER LAST CYL
         MR    8,10                GET BACK TO TRACKS ON CYL
         STH   9,8(2)              SAVE TRKS ON CYL BOUND
LKINC1   LA    2,12(2)             INCR. 2
         LA    7,1(7)              INCR. EXT #
         CLI   0(2),X'FF'          END OF AVAILABLE SPACE ?    JEA
         BNE   LKUP1               NO. GO LOOK FOR NEXT FREE EXTENT
         SPACE 2
***********************************************************************
*        THE WORK TABLE OF FREE EXTENTS HAS OVERFLOWED. TERMINATE
***********************************************************************
         SPACE 2
         WTO   '**SQUISH** INTERNAL TABLE HAS OVERFLOWED. EXECUTION TERX
               MINATED'                                          JEA
         ABEND 100,DUMP,STEP       TERMINATE THE PROGRAM         JEA
         SPACE 2
PFMT5OUT EQU   *
         STH   7,#FREXTS           SAVE # OF FREE EXTENTS
         L     9,PFMT5AD           GET EXTENT POINTER
         LA    8,12(9)             8POINTS TO NEXT ONE
         LA    6,41                ONE LESS THAN FMT5 CAN HAVE    MVS
FRSETUP  ST    8,0(9)
         LA    9,12(9)             INCR 9
         LA    8,12(8)             INCR 8
         BCT   6,FRSETUP           DO IT FOR ALL
         ST    2,FPFMT5AD          SAVE FIRST FREE POINTER
         SH    2,=H'12'            GET TO LAST USED ELEMENT
         XC    0(4,2),0(2)         WIPE OUT CHAIN POINTER
         SR    6,6                 CLEAR REG 6
         LA    5,3                 GO THROUGH 3 TIMES
GETDS    EQU   *
         STM   5,6,R5R6            SAVE REGS 5 & 6
         L     4,DSLSTAD           POINT TO DSLST
INC2     LA    4,4(4)              INCR LIST POINTER
         CLC   0(4,4),ZEROES       ARE WE AT END OF LIST
         BE    THISDONE
         L     6,R5R6+4            RESTORE REG 6
         EX    0,TEST(6)           MAKE THE TEST
         BZ    INC2                BRANCH TO LOOK AT NEXT DS
         BAL   11,GETVTOCS         GO READ THE VTOC
         XC    OUTEXT(16*8),OUTEXT CLEAR EXTENT AREA
         LH    11,FMT1+98          GET TTR OF LAST WRITTEN BLOCK
         LA    0,1(11)             NOW HAVE # OF TRACKS USED
         CLC   CTLG,FMT1           IT THIS THE CATALOG DATA SET
         BNE   GOON99              IF NOT, THEN PLAY DUMB
         LH    0,BIGGIE            GET A BIG NUMBER FOR TRACKS USER
GOON99   EQU   *
         STH   0,TRKUSD            SAVE FOR LATER
         SR    15,15               CLEAR 15
         SR    1,1                 CLEAR 1
         LA    2,16                MAX @ OF EXTENTS
CYLEXT1  SR    3,3                 CLEAR 3
         C     3,INEXT(1)          IS THIS EXTENT GOOD
         BE    CYLOUT              IF NOT, THEN WE'RE FINISHED
         BAL   14,ALCDS            GO ALLOCATE THE EXTENT
         LA    15,1(15)            INCR EXTENT REG
         SH    0,TRKALC            SUBTRACT TRACKS ALLOC.
         BZ    CYLOUT              IF ZERO, DATA FITS ON THIS EXTENT
         BM    ADD1TRK             IF MINUS - ADD 1 FOR GOOD MEASURE
         LA    1,8(1)              INCR EXTENT POINTER
         BCT   2,CYLEXT1           KEEP IT UP
ADD1TRK  EQU   *
         LH    1,TRKUSD            GET USED TRKS
         LA    1,1(1)              ADD 1
         STH   1,TRKUSD            AND SAVE FOR COPIER
CYLOUT   EQU   *
         STC   15,FMT1+59          SAVE # OF EXTENTS
         CLC   CTLG,FMT1           IF THIS THE CATALOG DATA SET
         BNE   GOON100             IF NOT, THEN NORMAL
         LCR   0,0                 MAKE NUM NEGATIVE
         AH    0,BIGGIE            NOW REG 0 HAS TRACKS ALLOCATED
         STH   0,TRKUSD            MOVE DS WILL USE THIS NUMBER
GOON100  EQU   *
         BAL   11,PUTDS            WRITE THE DATA SET
         MVI   3(4),0              CLEAR FLAG BYTE
         B     INC2                LOOK FOR NEXT DATA SET
THISDONE EQU   *
         LM    5,6,R5R6            REATORE REGS 5 & 6
         LA    6,4(6)              INCR REG 6
         BCT   5,GETDS             KEEP GOING
         B     PDONE               WE'RE FINISHED COPYING DATA SETS
         SPACE
TEST     TM    3(4),X'20'          IS THIS THE SYSCTLG DATA SET
         TM    3(4),X'10'          IS THIS CYLINDER ALLOCATION
         CLI   3(4),0              HAS THIS BEEN COPIED
         EJECT
***********************************************************************
*                                                                     *
*        ^                                                            *
*                                                                     *
***********************************************************************
         SPACE 1
PDONE    EQU   *
         CLOSE (INDISK,,OUTDISK)   CLOSE BIGGIES
         XC    FMT5(140),FMT5      WIPE OUT FORMAT 5 DSCB
         LH    7,TRKPCYL           GET TRAKS PER CYL
         LA    8,FMT5+5            FIRST EXTENT LOC
         L     9,PFMT5AD           GET FIRST FORMAT 5 POINTER
         LA    14,26               MAX # OF FREE EXTENTS IN FORMAT 5
EXTST10  LTR   9,9                 SEE IF GOOD EXTENT
         BZ    FMT5DONE            IF FINISHED GET OUT
         MVC   0(2,8),4(9)         MOVE EXTENT START
         SR    10,10               CLEAR 10
         LH    11,8(9)             GET TRKS ON CYL
         DR    10,7                GET CYLS
         STH   11,TCYL             STORE
         MVC   2(2,8),TCYL         MOVE TO EXTENT
         LH    11,6(9)             GET TRAKS BEFORE CYL
         AH    11,10(9)            ADD TRACKS AFTER LAST CYL
         STC   11,4(8)             SAVE IN EXTENT
         LA    8,5(8)              POINT TO NEXT EXTENT
         L     9,0(9)              POINT TO NEXT EXTENT
         BCT   14,EXTST10          KEEP MOVING
         CRASH ,                   MORE THAN 26 FREE EXTENTS - DIE
FMT5DONE EQU   *
         L     14,VTCOUTDB+16      GET IOB ADDRESS
         MVC   FMT4+45(5),CCHHR(14) MOVE CCHHR
         SR    8,8                 CLEAR 8
         XC    FMT2(140),FMT2      WIPE OUT BIG AREA
WRT0     WRTVTOC FMT2,,A           WRITE A FMT0
         CLI   OUTER,0             SEE IF GOOD
         BNE   NOMORE              IF NOT, THEN WE RAN OUT OF ROOM
         LA    8,1(8)              ONE MORE GOOD FMT 0
         B     WRT0                GO TRY AGAIN
NOMORE   STH   8,FMT4+50           SAVE # OF AVAIL DSCB'S
         MVC   FMT5+4(40),FMT5+5 SET UP FMT5
         MVI   FMT5+44,X'F5'       PUT IN ID
         MVI   FMT5,5
         MVC   FMT5+1(3),FMT5      NOW HAVE GOOD FORMAT 5
         LA    9,1                 GET REL REC # OF FMT5
         ST    9,BLOCKAD           SAVE
         WRTVTOC FMT5              WRITE OUT FMR 5
         XC    BLOCKAD,BLOCKAD     CLEAR BLOCK ADDRESS
         WRTVTOC FMT4              WRITE IT OUT
         CLOSE (DISKIN,,DISKOUT) CLOSE THE VTOCS
         CLOSE (INDISK,,OUTDISK) CLOSE VOLS
         LA    1,ENDMES            GET ADDRESS OF ENDING MESSAGE
         BAL   11,WRTLINE          GO WRITE IT
         CLOSE SYSPRINT
         DEQ   MF=(E,ENQL)         DEQ THE TWO VTOCS
         L     13,SAVE+4           RESTORE REG 13
         RETURN (14,12),RC=0       RETURN WITH GOOD RETURN CODE
         SPACE
CRASH    EQU   *
EX       EX    0,EX                BLOW WIHT 0C3
         EJECT
***********************************************************************
*                                                                     *
*        ^                                                            *
*                                                                     *
***********************************************************************
         SPACE 1
ABSALC   LH    11,0(1)             GET STARTING CYL
         MH    11,TRKPCYL
         AH    11,2(1)             GET STARTING TRL
         LH    10,4(1)             GET ENDING CYL
         MH    10,TRKPCYL
         AH    10,6(1)             ADD ENDING TRK
         LA    10,1(10)            INCR.
         SR    10,11               GET LENGTH
         STH   10,TRKALC           SAVE # OF TRACKS IN EXTENT
         LA    11,FREESPAC(11)     GET FREE SPACE
ABSLOOP  EQU   *
         CLI   0(11),X'FF'         IS THIS TRACK ALREADY ALLOCATED
         BE    BADNEWS             IF SO, VTOC PROBABLY HERE
         MVI   0(11),X'FF'         SET IT ALLOCATED
         LA    11,1(11)            INCR. 11
         BCT   10,ABSLOOP          KEEP IT UP
         BR    14                  RETURN
         SPACE
BADNEWS  EQU   *
         ABEND 3,DUMP              KILL WITH A DUMP
         EJECT
***********************************************************************
*                                                                     *
*        ^                                                            *
*                                                                     *
***********************************************************************
         SPACE 1
*        THIS IS THE GETVTOCS      SUBROUTINE
GETVTOCS MVC   FULL(3),0(4)        MOVE DSCB TTR
         MVI   FULL+3,0            CLEAR LAST BYTE
         READVTOC FMT1             READ THE DSCB
         XC    INEXTS(16*8),INEXTS CLEAR EXTENTS
         LA    9,FMT1+105          POINT TO FIRST EXTENT
         LA    10,INEXTS           POINT TO IN CORE LIST
         LA    8,3                 MAX OF THREE EXTENTS IN FMT 1
MVEXT11  MVC   0(8,10),2(9)        MOVE THE EXTENT
         LA    10,8(10)            INCR. 10
         LA    9,10(9)             INCR 9
         BCT   8,MVEXT11           KEEP IT UP
         LA    3,FMT1+135          ADDRESS FOR FMT 3 DSCB
         TM    3(4),X'80'          SEE IF IS
         BZ    NOTIS1              IF NOT, THEN FORGET IT
         MVC   ABSAD,0(3)          MOVE FMT2 ADDRESS
         SR    0,0                 CLEAR 0
         ABSTTR DISKIN,ABSHD       GET TTR
         ST    0,FULL              SAE IT
         READVTOC FMT2             READ THE FORMAT2 DSCB
         LA    3,FMT2+135          POINT TO FMT 3 DSCB
NOTIS1   CLC   0(5,3),ZEROES       IS THERE A FMT 3
         BER   11                  IF NONE, GO BACK
         MVC   ABSAD,0(3)          MOVE FMT3 POINTER
         SR    0,0                 CLEAR 0
         ABSTTR DISKIN,ABSHD       CONVERT TO TTR
         ST    0,FULL              SAVE TTR
         READVTOC FMT3             READ THE DSCB
         LA    8,4                 4 EXTENTS
         LA    9,FMT3+4            START OF 4TH EXTENT
MVEXT21  MVC   0(8,10),2(9)        MOVE AN EXTENT
         LA    10,8(10)            INCR 10
         LA    9,10(9)             INCR 9
         BCT   8,MVEXT21           KEEP IT UP
         LA    8,9                 9 EXTENTS
         LA    9,FMT3+45           START OF 8TH EXTENT
MVEXT22  MVC   0(8,10),2(9)        MOVE THE EXTENT
         LA    10,8(10)            UPDATE 10
         LA    9,10(9)             UPDATE 9
         BCT   8,MVEXT22           KEEP IT UP
         BR    11                  AND RETURN
         EJECT
***********************************************************************
*                                                                     *
*        ^                                                            *
*                                                                     *
***********************************************************************
         SPACE 1
PUTDS    EQU   *
PUTVTOCS LA    2,FMT1
         TM    3(4),X'80'          IS IT IS
         BZ    PTNOIS1             IF NOT, THEN FORGET IT
         LA    2,FMT2              GET FMT2 ADDRESS I N 2
PTNOIS1  EQU   *
         XC    135(5,2),135(2)     WIPE OUT FMT 3 POINTER
         CLI   FMT1+59,3           ARE THERE MORE THAN 3 EXTENTS
         BNH   PTNOFMT3            IF <= 3 - NO FORMAT 3
         LA    5,FMT3+4            POINT TO FIRST
         LA    6,OUTEXTS+3*8       POINT TO THIRD EXTENT
         LA    7,4                 FOUR EXTENTS
PT3MV1   MVC   2(8,5),0(6)         MOVE AN EXTENT
         CLC   0(8,6),ZEROES       SEE IF EXTENT IS ZERO
         BNE   GOON1               IF NOT, THEN GOOD
         XC    0(2,5),0(5)         WIPE OUT FIRST TWO BYTES
GOON1    EQU   *
         BAL   R14,CYLCHECK        GO CHECK EXTENT
         LA    5,10(5)             INCR 10
         LA    6,8(6)              INCR 6
         BCT   7,PT3MV1            KEEP IT UP
         LA    5,FMT3+45
         LA    7,9                 9 EXTENTS DOWN HERE
PT3MV2   MVC   2(8,5),0(6)         MOVE AN EXTENT
         CLC   0(8,6),ZEROES       SEE IF EXTENT IS ZERO
         BNE   GOON2               IF NOT, THEN GOOD
         XC    0(2,5),0(5)         WIPR OUT FIRST TWO BYTES
GOON2    EQU   *
         BAL   R14,CYLCHECK        GO CHECK EXTENT
         LA    5,10(5)             INCR 5
         LA    6,8(6)              INCR 6
         BCT   7,PT3MV2
         WRTVTOC FMT3,135(2)       WRITE FORMAT3 AND MOVE ADDRESS
PTNOFMT3 TM    3(4),X'80'          SEE IF IS
         BZ    PTNOIS2             IF NOT, THEN FORGET IT
         WRTVTOC FMT2,FMT1+135     MOVE AND WRITE FORMAT 2
PTNOIS2  EQU   *
         LA    6,OUTEXT            POINT TO OUT EXTENT
         LA    5,FMT1+105          IN DSCB TOO
         LA    7,3                 ONLY THREE EXTENTS IN FMT1
PT3MV3   MVC   2(8,5),0(6)         MOVE THE EXTENT
         CLC   0(8,6),ZEROES       SEE IF EXTENT IS ZERO
         BNE   GOON3               IF NOT, THEN GOOD
         XC    0(2,5),0(5)         WIPE OUT FIRST TWO BYTES
GOON3    EQU   *
         BAL   R14,CYLCHECK        GO CHECK EXTENT
         LA    6,8(6)              INCR 6
         LA    5,10(5)             INCR 5
         BCT   7,PT3MV3            KEEP MOVEIN G
         WRTVTOC FMT1              WRITE OUT THE FORMAT 1
         CLI   FMT1+59,0           ARE THERE NO EXTENTS
         BE    TELLDS              IF SO, JUST SAY WE COPIED IT
         EJECT
***********************************************************************
*                                                                     *
*        ^                                                            *
*                                                                     *
***********************************************************************
         SPACE 1
*        THIS CODE WILL COPY THE DATASET TRACK BY TRACK
         ST    11,SAVR11           SAVE REG 11
         MVI   FKEOF,0             CLEAR FAKE END OF FILE SWITCH
         LA    5,INEXT             GET INPUT EXTENT ADDRESSS IN 5
         LA    6,OUTEXT            GET OUT EXTENT ADDRESS IN 6
         MVC   INDKAD,INEXT        MOVE FIRST EXTENT
         MVC   OTDKAD,OUTEXT       MOVE OUTPUT EXTENT
         MVC   FRSTSW,ZEROES       CLEAR SWITCHES
MVTRK    EQU   *
         STM   5,6,SVR5R6          SAVE REGS 5 & 6
         LA    7,RDCNTCCW          GET ADDRESS OF READ COUNT CCWS
         ST    7,INCCWAD           STORE IN IOB
         MVC   INCCHH,INDKAD       MOVE FIRST TRACK ADDRESS TO IOB
         CLC   INCCHH,ZEROES       SEE IF TRACK ZERO
         BNE   FRSTREAD            IF NOT, LET THE READ GO
         CLI   FKEOF,255           ONE FAKE EOF ALREADY?
         BE    IOABEND             IF SO, KILL US
         MVI   FKEOF,255           TURN ON FAKE EOF
         L     2,DACCWADI          GET ADDRESS OF READ R0
         MVI   16(2),3             PUT IN NO-OP AT 3RD CCW
         MVI   20(2),X'20'         TURN ON SLI BIT IN NO-OP CCW
         MVC   14(2,2),=H'8'       MOVE IN LENGTH FOR EOF RECORD
         MVI   23(2),1             MAKE LENGTH AT LEAST 1 IN NO-OP CCW
         L     3,DATADI            ADDRESS OF DATA
         XC    0(24,3),0(3)        WIPE OUT DATA AREA
         MVI   12(3),1             PUT IN RECORD 1
         B     NOALT               GO LOOK AT LAST WRITE
FRSTREAD EQU   *
         MVI   INECB,0             CLEAR ECB
         MVI   INIOB,X'42'         SET CC & UNREL BITS
         EXCP  INIOB               READ COUNTS ON THIS TRACK
         WAIT  ECB=INECB           WAIT FOR I/O TO COMPLETE
         CLI   INECB,X'41'         SEE IF ERROR DETECTED
         BNE   IOABEND             IF NOT, THEN SOMETHING WRONG
         CLI   INIOB+3,X'08'       SEE IF NO RECORD FOUND
         BNE   IOABEND             IF NOT, THEN KILL
         L     7,INCSW             GET LAST CCWADDRESS+8
         LA    7,0(7)              CLEAR HIGH BYTE
         L     8,RDCNTAD           GET COUNT AREA ADDRESS
         LA    8,0(8)              CLEAR I/O OP CODE
         SR    7,8                 SUBTRACT STARTING ADDRESS
         BNP   IOABEND             IF NOT POSITIVE KILL
         SRL   7,3                 DIVIDE BY 8
         LR    11,7                SAVE REG 7
         L     3,DATADI            GET INPUT DATA ADDRESS IN O
         L     2,DACCWADI          GET ADDRESS OF INPUT CCWS
         L     8,RDCNTAD           GET ADDRESS OF FIRST CCWS
         LA    8,1600(8)           POINT TO COUNT AREAS
         LA    9,8                 DATA LENGTH OF RECORD 0
         ST    3,0(2)              STORE ADDRESS
         MVI   0(2),X'06'          PUT IN READ DATA
         B     ADDLNGTH            GO TO MAIN ROUTINE
INSETUP  EQU   *
         ST    3,0(2)              STORE DATA ADDRESS INTO CCW
         MVI   0(2),X'1E'          PUT IN READ CKD
         LA    9,8                 START COUNT WITH 8 BYTES CCHHRKDD
         SR    1,1                 CLEAR 1 FOR IC
         IC    1,5(8)              GET KEYLENGTH IN 1
         LH    10,6(8)             GET DATA LENGTH
         LA    8,8(8)              POINT 8 AT NEXT COUNT AREA
         AR    1,10                GET KEY+DATA IN
         LTR   10,10               SEE IF DATA LENGTH NON-ZERO
         BNZ   LNGTHOK             IF NOT EOF GOODIE
         SR    1,1                 CLEAR 1
         MVI   0(2),X'12'          CHANGE TO READ COUNT
LNGTHOK  AR    9,1                 GET TOTAL LENGTH IN 9
ADDLNGTH EQU   *
         ST    9,4(2)              STORE LENGTH IN CCW
         MVI   4(2),X'40'          TURN ON CC BIT
         AR    3,9                 GET 3 UP TO NEXT DATA AREA
         LA    2,8(2)              POINT 2 AT NEXT CCW
         BCT   7,INSETUP           KEEP GENERATING
         XC    0(8,2),0(2)         CLEAR NEXT CCW
         MVI   0(2),X'03'          SET UP NO-OP
         ST    9,4(2)              MAKE LENGTH NON-ZERO
         MVI   4(2),X'20'          TURN ON SLI BIT
TRYRAGN  EQU   *
         L     2,DATADI            GET ADDRESS OF INPUT
         MVI   INECB,0             CLEAR ECB
         MVI   INIOB,X'42'         TURN ON CC&UNRELATED BIT
         LA    15,RDDACCW          GET DATA READ CCW ADDRESS
         ST    15,INCCWAD          STORE INTO INPUT IOB
         EXCP  INIOB               READ THE WHOLE TRACK
         WAIT  ECB=INECB           WAIT FOR IT
         CLI   INECB,X'7F'         LOOK GOOD?
         BE    NOALT               IF GOOD, THEN ALL IS WELL
         CLI   INECB,X'41'         COMPLETE WITH ERRORS
         BNE   IOABEND             IF NOT, THEN KILL
         CLC   INCSW+4(2),=X'0C40' SEE IF INCOR. LNGTH WITHOUT UC
         BNE   IOABEND             IF NOT, THEN BLOW OFF
         MVI   OVSW,255            TURN ON OVERFLOW SWITCH
NOALT    EQU   *
         CLI   FRSTSW,0            SEE IF WE'VE WRITTEN YET
         BE    ARND1               IF NOT, THEN DON'T WAIT ON LAST
OWAIT    EQU   *
         TM    OUTECB,X'40'        HAS LAST WRITE FINISHED
         BO    NOWAIT              IF SO, THEN GO AROUND WAIT
         WAIT  ECB=OUTECB          WAIT FOR WRITE TO FINISH
NOWAIT   EQU   *
         CLI   OUTECB,X'7F'        WAS LAST WRITE GOOD
         BNE   IOABEND             IF NOT, THEN KILL THYSELF
         L     7,DATADO            GET STARTING ADDRESS OF OUTPUT R0
         L     6,DACCWADO          GET ADDRESS OF WRITE CCWS
         CLC   INR0DATA,0(7)       SEE IF EQUAL TO INPUT
         BE    OTR0GOOD            IF SO, WE'RE HAPPY
         MVC   4(4,7),INR0DATA+4   MOVE TRACK BALANCE PART
         CLC   INR0DATA(4),ZEROES DISK ADDRESS IN INPUT?
         BE    ZR0                 IF NOT, THEN MAKE IT ZERO
         SPACE 3
*******************************************************************
*        THE NEXT FEW INSTRUCTIONS ALLOW A NON-STANDARD RECORD    *
*        ZERO ON THE FIRST TRACK ON EACH CYLINDER OF AN ISAM      *
*        DATASET BECAUSE ISAM USES THIS AS A POINTER TO THE LAST  *
*        TRACK OVERFLOW RECORD WRITTEN.AS ISAM DATASETS ARE       *
*        COPIED INPLACE THE INPUT R0 IS COPIED DIRECTLY.          *
*******************************************************************
         SPACE 1
         TM    FMT1+82,X'80'       IS THIS AN ISAM DATASET?
         BNO   SETR0               NO,TAKE STANDARD ACTION
         CLC   OUTCCHH+2(2),ZEROES FIRST TRACK OF CYLINDER?
         BNE   SETR0               NO,STANDARD FORMAT
         MVC   0(4,7),INR0DATA     YES,COPY INPUT FORMAT
         B     STWRTR0             GO WRITE R0 DATA
         SPACE 2
SETR0    DS    0H                  STANDARD RECORD ZERO
         MVC   0(4,7),OUTCCHH      MOVE IN OUTPUT TRACK ADDRESS
         B     STWRTR0             GO WRITE R0 DATA
ZR0      EQU   *
         MVC   0(4,7),ZEROES ZERO IT
STWRTR0  EQU   *
         MVI   0(6),X'05'          CHANGE TO WRITE DATA
         MVI   4(6),X'00'          TURN OFF COMMAND CHAIN
         MVI   OUTIOB,X'42'        SET CC & UNRELATED
         MVI   OUTECB,0            CLEAR ECB
         EXCP  OUTIOB              WRITE R0 DATA
         WAIT  ECB=OUTECB          WAIT FOR IT TO STOP
         CLI   OUTECB,X'7F'        SEE IF GOOD
         BNE   IOABEND             IF NOT, WIPE OUT
OTR0GOOD EQU   *
         CLI   LSTSW,0             SEE IF THAY WAS
         BNE   DSCOMPLT            IF SO, WE'RE FINISHED
         CLC   OTDKAD,ZEROES       IS OUTPUT ADDRESS ZERO
         BE    DSCOMPLT            IF SO, NO MORE OF THIS DATA SET
ARND1    EQU   *
         L     7,DATADO            GET ADDRESS OF TRACK OUTPUT DATA
         L     6,DACCWADO          GET ADDRESS OF WRITE CCWS
         L     2,DACCWADI          GET ADDRESS OF READ CCWS
         B     GSOCCW              GO PAST SOME CODE THE FIRST TIME
GENOCCW  EQU   *
         L     3,0(2)              GET CCHH AREA OF COUNT IN INPUT DATA
         MVC   0(4,3),OTDKAD       PUT IN NEW DASD ADDRESS
GSOCCW   EQU   *
         ST    7,0(6)              SAVE DATA ADDRESS IN OUPUT CCW
         MVI   0(6),X'1D'          PUT IN WRTIE CKD CCW
         LH    9,6(2)              GET LENGTH FROM READ CCW
         ST    9,4(6)              STORE IN WRTIE CCW
         MVI   4(6),X'40'          TURN ON CC BIT
         AR    7,9                 7 NOW POINTS AT NEXT DATA AREA
         LA    6,8(6)              POINT 6 AT NEXT OUTPUT CCW
         LA    2,8(2)              POINT 2 AT NEXT INPUT CCW
         CLI   0(2),X'03'          IS THIS A NO-OP CCW
         BNE   GENOCCW             IF NOT, KEEP GENERATING
         CLI   OVSW,255            SEE IF WE HAVE AN OVERFLOW SEGMENT
         BNE   NOOV                IF NOT, THEN FORGET IT
         L     1,=F'-8'            SET UP 1
         AR    1,6                 POINT 1 TO LAST WRITE CCW
         MVI   0(1),X'01'          CHANGE TO SPECIAL WRITE CKD
         MVI   OVSW,0              CLEAR THE SWITCH
NOOV     EQU   *
         MVC   0(8,6),0(2)         MOVE THE NO-OP CCW
         L     3,DACCWADO          GET ADDRESS OF FIRST OUTPUT CCW
         MVI   0(3),X'06'          CHANGE TO READ OUTPUT TRACK R0
         L     6,DATADO            GET START OF OUTPUT DATA
         L     2,DATADI            GET START OF INPUT ADDRESS IN 2
         SR    7,6                 GET LENGTH OF TRACK DATA IN R7
         LR    3,7                 GET LENGTH IN 3 ALSO
         MVCL  6,2                 MOVE A TRACKS WORTH OF DATA
         MVC   OUTCCHH,OTDKAD      MOVE NEXT TRACK ADDRESS TO IOB
         MVI   OUTECB,0            CLEAR ECB
         MVI   OUTIOB,X'42'        SET CC & UNRELATED
         EXCP  OUTIOB              WRITE THE WHOLE TRACK
         L     15,DATADI           GET ADDRESS OF INPUT DATA
         MVC   INR0DATA,0(15)      MOVE INPUT R0 DATA
         MVI   FRSTSW,X'FF'        RESET FIRST WRITE SWITCH
         LH    9,TRKUSD            GET TRACKS USED
         BCT   9,NXTRK             REDUCE BY 1
         MVI   LSTSW,X'FF'         SET LAST WRITE SWITCH
         B     OWAIT               GO WAIT FOR LAST WRITE TO STOP
NXTRK    EQU   *
         STH   9,TRKUSD            SAVE REMAINING TRACKS
         LM    5,6,SVR5R6          RESTORE REGS 5 & 6
         LH    9,INDKAD+2          GET INPUT TRACK ADDR
         LA    9,1(9)              INCR BY 1
         CH    9,TRKPCYL           CHECK WITH HIGHEST TRACK
         BL    INTRKGD             IF LOW, GOOS
         LH    9,INDKAD            GET CYL #
         LA    9,1(9)              INCR
         STH   9,INDKAD            STORE BACK
         SR    9,9                 CLEAR TRK #
INTRKGD  STH   9,INDKAD+2          SAVE TRACK #
         CLC   INDKAD,4(5)         CHECK EXTENT
         BNH   INEXTOK             IF NOT HIGH THIS EXTENT STILL GOOD
         LA    5,8(5)              POINT AT NEXT EXTENT
         MVC   INDKAD,0(5)         MOVE FIRST TRACK ADDR OF THIS EXTENT
INEXTOK  EQU   *
         LH    9,OTDKAD+2          GET OUTPUT TRACK #
         LA    9,1(9)              INCR
         CH    9,TRKPCYL           CHECK WITH HIGHEST TRACK
         BL    OTTRKGD             IF LOW, GOOD
         LH    9,OTDKAD            GET CYLINDER #
         LA    9,1(9)              INCR
         STH   9,OTDKAD            STORE CYL# BACK
         SR    9,9                 CLEAR 9
OTTRKGD  EQU   *
         STH   9,OTDKAD+2          SAVE TRK
         CLC   OTDKAD,4(6)         CHECK WITH EXTENT END
         BNH   OTEXTOK             IF NOT HIGH, ALL IS WELL
         LA    6,8(6)              POINT TO NEXT EXTENT
         MVC   OTDKAD,0(6)         MOVE NEW EXTENT START
OTEXTOK  EQU   *
         B     MVTRK               GO MOVE NEXT TRK
DSCOMPLT EQU   *                   FINISHED COPYING DATA SET
         L     11,SAVR11           RESTORE R11
TELLDS   EQU   *
         MVC   DSNAME,FMT1         MOVE DATA SET NAME
         LA    1,DSNAME-1          GET ADDRESS
         EJECT
***********************************************************************
*                                                                     *
*        'SYSPRINT' SUB-ROUTINE                                       *
*                                                                     *
***********************************************************************
         SPACE 1
WRTLINE  EQU   *
         LR    6,1                 SAVE PARM REG
         IC    7,0(6)              GET ORIG CC
         CP    LINE#,=P'55'        SEE IF PAST END OF PAGE
         BNH   LINEOK
         AP    PAGE#,=P'1'         ADD 1 TO PAGE NUMBER
         OI    PAGE#+L'PAGE#-1,X'0F' MAKE LAST DIGIT READABLE
         UNPK  PAGE#UP,PAGE#
         PUT   SYSPRINT,HEADER WRITE HEADER PAGE
         MVI   0(6),C'-'           MOVE IN PROPER CC
         ZAP   LINE#,=P'1'         START LINE # AT 1
         B     PUTIT               GO WRITE IT
LINEOK   EQU   *
         AP    LINE#,=P'1'
         CLI   0(6),C' '           SEE IF ONE LINE
         BE    PUTIT               IF SO, THEN GO DO IT
         AP    LINE#,=P'1'         ADD ANOTHER
PUTIT    PUT   SYSPRINT,(6)        WRITE THE LINE
         STC   7,0(6)              RESTORE ORIGINAL CC
         BR    11                  AND RETURN
         SPACE 1
***********************************************************************
*                                                                     *
*        I/O ERROR ABEND SUB-ROUTINE (U0002)                          *
*                                                                     *
***********************************************************************
         SPACE 1
IOABEND  ABEND 2,DUMP              I/O ERROR - BLOW
         EJECT
*******************************************************************
*        THIS SUB-ROUTINE CHECKS THE VALIDITY OF AN EXTENT.       *
*        THE EXTENT IS CHECKED FOR CYLINDER BOUNDARY ALIGNMENT    *
*        AND FLAGGED ACCORDINGLY.                                 *
*******************************************************************
         SPACE 3
CYLCHECK SUBIN ,                   CHECK CYLINDER ALIGNMENT
         TM    FMT1+82,X'80'       IS IT AN I.S. DATASET?
         BO    ENDCHECK            YES,DON'T CHANGE FLAGS
         CLI   0(R5),X'81'         TEST FLAGS FOR NORMAL VALUES
         BE    *+3*4               OK
         CLI   0(R5),X'01'         TEST FOR ALTERNATE
         BNE   ENDCHECK            NOT STANDARD,LEAVE ALONE
         MVI   0(R5),X'00'         RESET FLAGS
         LH    R1,TRKPCYL          GET TRACKS PER CYLINDER
         BCTR  R1,0                REDUCE FOR TRACK ZERO
         CLM   R1,12,4(R5)         STARTS ON TRACK ZERO?
         BNE   TRKCHECK            NO,NOT CYLINDER ALIGNED
         CLM   R1,3,8(R5)          ENDS ON CYLINDER BOUNDARY?
         BNE   TRKCHECK            NO
         OI    0(R5),X'80'         FLAG EXTENT AS CYLINDER ALIGNED
         SPACE 2
TRKCHECK DS    0H
         OI    0(R5),X'01'         SET DATA FLAG
ENDCHECK SUBOUT RETURN=(R14)       RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*        ^                                                            *
*                                                                     *
***********************************************************************
         SPACE 1
ALCDS    EQU   *                   THIS ROUTINE ALLOCATES EXTENTS
         STM   15,2,RGSAV          SAVE 15-2
         LH    10,TRKPCYL          GET TRACKS PER CYLINDER IN 10
         L     11,=F'-1'
         AR    11,10               11 HAS LAST TRACK ADDR. ON CYL
         LH    3,INEXT+4(1)        GET ENDING CYL
         MR    2,10                GET REL CYL START
         TM    3(4),X'28'          NOT CYLINDER?
         BNZ   JUSTAD              IF NOT, ADD IN TRACKS
         AR    3,11                GET UP TO LAST TRK
         B     ALCOMM
JUSTAD   AH    3,INEXT+6(1)        ADD IN LAST TRACK
ALCOMM   LA    3,1(3)              NOW HAVE # OF LAST TRACK
         LH    7,INEXT(1)          GET STARTING CYL
         MR    6,10                GET REL CYL START
         TM    3(4),X'28'          CYLINDER?
         BZ    ALNOAD1             IF SO, BRANCH
         AH    7,INEXT+2(1)        ADD IN FIRST TRK
ALNOAD1  SR    3,7                 3 HAS # OF TRKS TO ALLOCATE
         STH   3,TRKALC            SAVE TRACKS ALLOCATED
         L     6,PFMT5AD           GET START OF FREE EXTENT LIST
         LA    15,PFMT5AD          GET ADDRESS OF FORMAT 5 ADDRESS
SPCLOK1  EQU   *
         TM    3(4),X'20'          SYSCTLG DATA SET?
         BZ    NTCTLG02            IF NOT, NORMAL ALLOC
         CLC   OTVTCEND,4(6)       SEE IF EXTENT PAST VTOC
         BNL   LKNXTFRE            IF NOT, LOOK AT NEXT FREE EXTENT
NTCTLG02 EQU   *
         LH    5,8(6)              GET TRKS ON CYL
         AH    5,10(6)             ADD LEFT OVER TRKS O END
         TM    3(4),X'10'          IS THIS FOR CYLINDER
         BO    ALNOAD2
         AH    5,6(6)              ADD IN TRKS BEFORE CYL
ALNOAD2  CR    3,5                 SEE IF ENOUGH SPACE
         BNH   SPCFND1             IF SO, WE'RE IN
LKNXTFRE EQU   *
         LR    15,6               SAVE REG. 6
         L     6,0(15)             POINT TO NEXT FREE EXTENT
         LTR   6,6                 MAKE SURE SOME LEFT
         BNZ   SPCLOK1             OH GOODIE
         CRASH , IF NOT, THEN KILL THYSELF
SPCFND1  LH    9,4(6)              GET EXTENT START
         TM    3(4),X'10'          IS IT CYLINDER
         BNO   ALNOAD3
         AH    9,6(6)              ADD TRKS BEFORE CYL
ALNOAD3  LR    0,9                 SAVE #
         SR    8,8                 CLEAR 8 FOR DIVIDE
         DR    8,10                GET STARTING EXTENT ADDRESS
         STH   9,OUTEXT(1)         SAVE CYL START
         STH   8,OUTEXT+2(1)       & TRK START
         LR    9,0                 GET START BACK
         AR    9,3                 ADD IN # OF TRKS
         BCTR  9,0                 REDUCE TO LAST TRACK ADDRESS
         SR    8,8                 CLEAR 8 AGAIN
         DR    8,10                GET ENDING TRACK ADDRESS
         STH   9,OUTEXT+4(1)       SAVE ENDING CYL
         STH   8,OUTEXT+6(1)       SAVE ENDING TRACK
         L     7,FPFMT5AD          GET START OF FERE AREA
         TM    3(4),X'10'          SEE IF CYLINDER ALLOCATION
         BNO   NOHDTRKS            IF NOT,AT BEGINNING
         SR    8,8                 CLEAR 8 FOR COMPARE
         CH    8,6(6)              SEE IF TRKS BEFORE CYL IS ZERO
         BE    NOHDTRKS            IF NOT, THEN GET OUT
         LH    2,4(6)              GET EXTENT START
         AH    2,6(6)              ADD TRKS BEFORE CYL
         AR    2,3                 ADD TRACKS ALLOCATED
         STH   2,4(7)              SAVE START OF NEW EXTENT
         LH    2,8(6)              GET # OF CYLS BEFORE ALLOC
         SR    2,3                 SUBTRACT THOSE ALLOC
         STH   2,8(7)              SAVE THEM IN NEW EXTENT
         AH    2,10(6)             ADD IN EXTRA TRACKS
         BZ    FXTHSEXT            IF ZERO, NO NEW EXTENT
         MVC   10(2,7),10(6)       MOVE EXTRA TRACKS OVER
         MVC   FPFMT5AD,0(7)       MOVE FREE POINTER
         MVC   0(4,7),0(6)         MOVE EXT POINTER
         ST    7,0(6)              KEEP LINKING
         XC    6(2,7),6(7)         WIPE OUT TRKS BEFORE CYL
FXTHSEXT XC    8(4,6),8(6)         WIPE OUT CYLS & EXT TRKS
         B     BLASTOUT            GO BACK
NOHDTRKS EQU   *
         LH    2,4(6)              GE T EXTENT START
         AR    2,3                 UP TO WHERE EXTENT WOULD END
         STH   2,4(6)              SAVE NEW EXTENT START
         LH    2,8(6)              GET # OF ORIG TRKS
         AH    2,6(6)              ADD IN TRKS BEFORE CYL
         SR    2,3                 SUBTRACT THOSE ALLOCATEDC
         BP    HITIT1              IF A GOOD NUMBER, USE IT
         AH    2,10(6)             ADD IN TRKS AFTER CYL
         MVC   8(4,6),ZEROES       CLEAR IT AND ONE BEFORE
         BP    HITIT2              GO STORE TRLS
         BZ    GIVEBACK            GIVE BACK EXTENT IF ZERO
         CRASH ,                   IF HERE - A REAL GOOF
HITIT1   EQU   *
         LR    3,2                 LOAD 3 WITH LEFT OVER TRACKS
         SR    2,2                 CLEAR 2 FOR DIVIDE
         DR    2,10                GET CYLS AND LEFT OVER TRACKS
         MH    3,TRKPCYL           GET BACK TRACKS ON CYL BOUNDARY
         STH   3,8(6)              STORE TRACKS ON CYL BOUNDARY
HITIT2   EQU   *
         STH   2,6(6)              STORE TRACKS BEFORE CYL
         B     BLASTOUT            GET OUT
GIVEBACK EQU   *
*        IF ZERO WE JUST USED UP AN EXTENT & HAVE TO GIVE IT BACK
         XC    4(8,6),4(6)         WIPE OUT EXTENT INFO
         L     2,0(6)              GET NEXT ENTRY POINTER
         ST    2,0(15)             STORE IT IN LAST ENTRY
         ST    7,0(6)              SAVE IN MINE
         ST    6,FPFMT5AD          MAKE NEW START
BLASTOUT EQU   *
         LM    15,2,RGSAV          RESTORE 15-2
         BR    14                  &RETURN
         SPACE
         DROP  13,12               DROP OLD BASE REGS
IOER     EQU   *                   I/O ERROR ROUTINE
         USING *,15                15 IS BASE FOR A WHILE
         MVI   OUTER,255           INDICATE ERROR
         BR    14                  AND RETURN
         EJECT
***********************************************************************
*                                                                     *
*        WORK AREAS, CONSTANTS AND EQUATES                            *
*                                                                     *
***********************************************************************
         SPACE 1
VTOC     DC    CL8'SYSVTOC'        MAJOR QUEUE NAME
SYS1     DC    C'SYS1.'            DSN HEADER FOR FAKE UNMOVEABLE 11/3
HEADER   DC    CL121'1DISK SQUISHER'
         ORG   *-8
         DC    C'PAGE '
PAGE#UP  DS    CL3
         ORG
         DC    CL121' '
         ORG   *-120
DSNAME   DS    CL44
         DC    C' COPIED SUCCESSFULLY'
         ORG
PAGE#    DC    PL3'0'
LINE#    DC    P'60'
ENDMES   DC    CL121'0DISK SQUISHER COMPLETE'
BDOPMES  DC    CL121' OPERATOR DENIED YOUR REQUEST TO SQUISH VOLUME.'
R5R6     DS    2F
CTLG     DC    CL44'SYSCTLG' NAME OF CATALOG DATA SET
BIGGIE   DC    H'10000'
OTVTCEND DS    H LAST TRACK NUMBER IN OUTPUT VTOC
OUTER    DS    X IOERROR BYTE
         DS    0D
ABSHD    DC    AL3(0)
ABSAD    DS    XL5
LSTFM1   DS    F
THIRD    DC    AL3(3),AL1(0)
ZEROES   DC    XL8'0'
OVSW     DC    X'0' OVERFLOW SWITCH
FKEOF    DS    X
#TRKS    DS    H
FULL     DS    F
STAD     DS    F
ENDAD    DS    F
SAVR11   DS    F
INDKAD   DS    F
OTDKAD   DS    F
DSLSTAD  DS    A
RGSAVE   DS    18F
         EJECT
**********     CONT'D
         SPACE 3
***********************************************************************
*        FREE EXTENT WORK AREAS.                                      *
*        NOTE THAT ALTHOUGH SQUISH CAN ONLY HANDLE UP TO 26 FREE      *
*        EXTENTS IN THE FINAL FORMAT 5 DSCB, FOR WORKING PURPOSES     *
*        UP TO 42 FREE EXTENTS ARE ALLOWED.SHOULD THE VOLUME BE       *
*        SO FRAGMENTED BY ISAM/UNMOVEABLE DATASETS THAT THIS FIGURE   *
*        IS EXCEEDED THE RESULTS WILL BE ABEND 'USER 100'.            *
***********************************************************************
         SPACE 2
PFMT5AD  DC    A(PFMT5)
FPFMT5AD DS    A
PFMT5    DC    (26*3)F'0'
         DC    (16*3)F'0'          SPARE FREE SLOTS                 MVS
PFMT5CHK DC    XL2'FFFF'           MUST BE AT END OF TABLE          MVS
         EJECT
**********     CONT'D
         SPACE 2
BLOCKAD  DC    F'0'
REC#     EQU   BLOCKAD+2
CCHHR    EQU   X'23'               OFFSET OF CCHHR IN IOB
FMT1     DS    140C
FMT2     DS    140C
FMT3     DS    140C
FMT5     DS    140C
VTOCOUT  DS    140C
FMT4     EQU   VTOCOUT
VTOCIN   DS    140C
DACYLS   DC    H'0,200,25,80,246,980,48,96,200,404' CYLINDR TABLE
         DC    H'0,0,0,808'               CYLINDR TABLE    CONT'D   MVS
#EXTS    DS    H
TCYL     DS    H
TRKALC   DS    H
TRKUSD   DS    H
INEXTS   DC    16D'0'
OUTEXTS  DC    16D'0'
OUTEXT   EQU   OUTEXTS
INEXT    EQU   INEXTS
VSAMINFO DS    CL19                SAVE AREA FOR VSAM INFORMATION   MVS
NOREC    EQU   X'20'
DATADI   DS    F                   ADDRESS OF INPUT DATA
DATADO   DS    F                   ADDRESS OF OUTPUT DATA
FRSTSW   DS    CL2
LSTSW    EQU   FRSTSW+1
SVR5R6   DS    2F                  OTHER SAVE AREA FOR REGS 5 & 6
INR0DATA DS    CL8
RGSAV    EQU   RGSAVE
#FREXTS  EQU   #EXTS
TRKPCYL  EQU   VTOCIN+64
#CYL     EQU   VTOCIN+62
         EJECT
***********************************************************************
*                                                                     *
*        DATA CONTROL BLOCKS                                          *
*                                                                     *
***********************************************************************
         SPACE 1
         PRINT NOGEN
         SPACE 3
SYSPRINT DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPRINT,RECFM=FBA,LRECL=121,  +
               BLKSIZE=968
         SPACE 3
INDISK   DCB   MACRF=E,DDNAME=SYSUT1,EXLST=INJFCBAD,EOEA=WA,           +
               IOBAD=INIOB
         SPACE 3
OUTDISK  DCB   MACRF=E,DDNAME=SYSUT2,EXLST=OTJFCBAD,EOEA=WA,           +
               IOBAD=OUTIOB
         SPACE 3
DISKIN   DCB   DSORG=PS,MACRF=RP,DDNAME=SYSUT1,RECFM=F,KEYLEN=44,      +
               LRECL=96,BLKSIZE=96,EXLST=INJFCBAD
         SPACE 3
DISKOUT  DCB   DSORG=DA,MACRF=(RIC,WIC),DDNAME=SYSUT2,OPTCD=R,         +
               RECFM=F,KEYLEN=44,BLKSIZE=96,EXLST=OTJFCBAD,SYNAD=IOER
         SPACE 3
         PRINT GEN
         EJECT
***********************************************************************
*                                                                     *
*        EXIT LISTS / INPUT/OUTPUT CONTROL BLOCKS                     *
*                                                                     *
***********************************************************************
         SPACE 1
INJFCBAD DS    0F                  'SYSUT1' EXITLIST
         DC    X'87'
         DC    AL3(INJFCB)
INJFCB   DS    44F                 SAVE AREA FOR JFCB 'SYSUT1'
         SPACE 1
OTJFCBAD DS    0F                  'SYSUT2' EXITLIST
         DC    X'87'
         DC    AL3(OUTJFCB)
OUTJFCB  DS    44F                 SAVE AREA FOR JFCB 'SYSUT2'
         SPACE 3
INIOB    DS    0D
         DC    X'42'               CC AND UNRELATED
         DS    XL3
         DC    A(INECB)
INCSW    DC    2A(0)
INCCWAD  DS    A
         DC    A(INDISK)
         DC    2A(0)
         DC    XL3'0'
INCCHH   DC    XL4'0'
         DC    X'0'
         DC    C'SQUV'
         DC    A(VTOCIN)
INCYLS   DS    H
INECB    DC    F'0'
         SPACE 2
OUTIOB   DS    0D
         DC    X'42'
         DS    XL3
         DC    A(OUTECB)
OUTCSW   DC    2A(0)
         DC    A(OUTCCW)           ADDRESS OF OUTPUT CCW
         DC    A(OUTDISK)
         DC    2A(0)
         DC    XL3'0'
OUTCCHH  DC    XL4'0'
         DC    X'0'
         DC    C'SQUV'
         DC    A(FMT4)
OUTCYLS  DS    H
OUTECB   DC    F'0'
         EJECT
***********************************************************************
*                                                                     *
*        READ MACROS                                                  *
*                                                                     *
***********************************************************************
         SPACE 1
         READ  VTOCINCB,SF,DISKIN,MF=L
VTOCINDB EQU   VTOCINCB
         SPACE 3
         READ  VTCOUTDB,DI,DISKOUT,,'S',,BLOCKAD+1,MF=L
         EJECT
***********************************************************************
*                                                                     *
*        CHANNEL COMMAND WORDS                                        *
*                                                                     *
***********************************************************************
         SPACE 1
OUTCCW   CCW   X'31',OUTCCHH,X'40',5 SEARCH FOR RECORD 0
         CCW   X'08',OUTCCW,0,0 KEEP LOOKING
DACCWADO CCW   X'08',0,0,0         THIS TIC WILL BE MODIFIED BY PROG
RDDACCW  CCW   X'31',INCCHH,X'40',5 LOOK FOR RECORD 0
         CCW   X'08',RDDACCW,0,0 TIC *-8
DACCWADI CCW   X'08',0,0,0 TIC TO GOTMAIN CCW
RDCNTCCW CCW   X'31',INCCHH,X'40',5 SEARCH FOR RECORD 0
         CCW   X'08',RDCNTCCW,0,0
RDCNTAD  CCW   X'80',0,0,0 WILL BE FILLED IN BY INIT ROUTINE
         SPACE 1
***********************************************************************
*                                                                     *
*        ENQ THE TWO VTOC'S                                           *
*                                                                     *
***********************************************************************
         SPACE 1
ENQL     ENQ   (VTOC,WTOR+X'20',E,6,SYSTEM,VTOC,WTOR+X'2C',E,6,        +
               SYSTEM),MF=L
         SPACE 1
***********************************************************************
*                                                                     *
*        MESSAGE TO OPERATOR WITH REPLY                               *
*                                                                     *
***********************************************************************
         SPACE 1
WTOR     WTOR  'OK TO SQUISH VOLUME XXXXXX ONTO YYYYYY ?',FULL,3,      +
               INECB,MF=L
         EJECT
***********************************************************************
*                                                                     *
*        LITERAL POOL                                                 *
*                                                                     *
***********************************************************************
         SPACE 1
         LTORG
         SPACE 1
***********************************************************************
*                                                                     *
*        RESERVE 15352 BYTES PADDED WITH X'00'                        *
*        ONE BYTE = ONE 3330 TRACK.                                   *
*        A 3330 MODEL 11 CONTAINS 15485 TRACKS (INCLUDING 133         *
*        ALTERNATES).                                                 *
*                                                                     *
***********************************************************************
         SPACE 1
FREESPAC DC    15352X'0'           EVERYTHING UNALLOCATED AT FIRST
         DC    X'FF'               TO INSURE THE END
         TITLE 'SQUISH DATA AREA DSECTS'
***********************************************************************
*        DSECTS USED IN THIS MODULE.                                  *
*        NOTE: THE ORIGINAL VERSION OF SQUISH DOES NOT USE            *
*              DSECTS IN TYPICAL SLOPPY AMERICAN FASHION.             *
*              THESE DSECTS ARE CODED TO ASSIST FUTURE MODIFICATIONS. *
***********************************************************************
         SPACE 3
*********      FORMAT 1 DSCB    ********
         SPACE 2
DSCB1    DSECT                     FORMAT 1 DSCB
         IECSDSL1 (1)              DATASET LABEL (1)
         EJECT
*********      FORMAT 2 DSCB    ********
         SPACE 2
DSCB2    DSECT                     FORMAT 2 DSCB
         IECSDSL1 (2)              DATASET LABEL (2)
         EJECT
*********      FORMAT 3 DSCB    ********
         SPACE 2
DSCB3    DSECT                     FORMAT 3 DSCB
         IECSDSL1 (3)              DATASET LABEL (3)
         EJECT
*********      FORMAT 4 DSCB    ********
         SPACE 2
DSCB4    DSECT                     FORMAT 4 DSCB
         IECSDSL1 (4)              DATASET LABEL (4)
         EJECT
*********      FORMAT 5 DSCB    ********
         SPACE 2
DSCB5    DSECT                     FORMAT 5 DSCB
         IECSDSL1 (5)              DATASET LABEL (5)
         SPACE 3
         END
