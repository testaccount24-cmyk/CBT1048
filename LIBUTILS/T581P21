***********************************************************************
*        SYS1.LOGREC   OBR RECORD LAYOUT                              *
***********************************************************************
         SPACE 1
LOBR     DSECT
LRDW     DS    CL4                 RECORD DESCRIPTOR WORD
LCLASRC  DS    CL1                 RECORD  TYPE
LCOBR    EQU        X'30'  0BR(UNIT CHECK)
LCCONOBR EQU        X'32'  CONVERTED 0BR RECORD
LCTCMOBR EQU        X'34'  TCAM OBR RECORD
LCVTMOBR EQU        X'36'  VTAM OBR RECORD
LSYSREL  DS    CL1                 OPERATING SYSTEM / RELEASE
LSOS     EQU        X'00'   1ST-3-BITS  O.S.
LSDOS    EQU        X'20'   1ST 3-BITS  DOS
LSVS1    EQU        X'40'   1ST 3-BITS  OS/VS1
LSVM     EQU        X'60'   1ST 3-BITS  VM/370
LSVS2    EQU        X'80'   1ST 3-BITS  OS/VS2
*                           BITS 3 - 7  RELEASE LEVEL 0-31
LSWITCHS DS    CL4
*              BYTE 0:-
LSMORE   EQU        X'80'  BIT 0   MORE RECORDS FOLLOW
LSLAST   EQU        X'00'  BIT 0
LS370    EQU        X'40'  BIT 1   TOD CLOCK
LS360    EQU        X'00'  BIT 1
LSTRUNC  EQU        X'20'  BIT 2   TRUNCATED RECORD
*                          BIT 3   RESERVED
LSTIME   EQU        X'08'  BIT 4   TIME MACRO USED
*                          BITS 5-7  RESERVED
*              BYTE 1:-
LSSDR    EQU        X'80'  BIT 0   SDR COUNTERS DUMPED AT EOD
LSTEMPER EQU        X'40'  BIT 1   TEMPORARY ERROR
LSSHORT  EQU        X'20'  BIT 2   SHORT RECORD
LSMPCPUA EQU        X'10'  BITS3&4 MP SYSTEM CPU-A
LSMPCPUB EQU        X'18'  BITS3&4 MP SYSTEM CPU-B
LSDMOUNT EQU        X'04'  BIT 5   VOLUM DEMOUNT
*                          BIT 6   NOT USED
*                          BIT 7   RESERVED
*              BYTES 2&3           NOT USED FOR OBR RECORD
LRCDCNT  DS    CL1                 RECORD COUNT
*                          BITS0-3 SEQUENCE NO. OF THIS PHYSICAL RECD.
*                          BITS4-7 TOTAL NO. OF PHYSICAL RECS. IN
*                                  THIS LOGICAL RECORD
         DS    CL1                 RESERVED
LDATE    DS    CL4                 DATE OF RECORD  PACKED YYDDD
LTIME    DS    CL4                 TIME OF RECORD  HEX HHMMSSHH
LVERNO   DS    CL1
LCPUSER  DS    CL3                 CPU SERIAL NUMBER. HEX
LCPUID   DS    CL2                 CPU MODEL NO.      HEX
LMCELLNG DS    CL2                 LENGTH OF MC LOGOUT AREA (NOT OBR)
LJOBID   DS    CL8                 JOBNAME
LFAILCCW DS    CL8                 FAILING CCW
LCSW     DS    CL8                 CSW AFTER I/O ERR DETECTED
LDEVDEPC DS    CL1                 NO. OF DBLWDS IN DEV. DEPENDENT AREA
LSECUA   DS    CL3                 CUA OF FINAL RETRY OF I/O
LDEVTYPE DS    CL4                 DEVICE TYPE  3420 = X'34208003'
LSDRCNT  DS    CL1                 NO. OF BYTES OF STAT DATA
LPCUA    DS    CL3                 PRIMARY CUA OF FAILING DEVICE
LIORETRY DS    CL2                 NUMBER OF I/O RETRYS
LSENSCNT DS    CL2                 NUMBER OF BYTES IN SENSE FIELD
LDEVDEP  DS    0CL1                VARIABLE DEVICE-DEP INFO.
LSDRINF  DS    0CL1                SDR COUNTER AREA VARIABLE
LSENSE   DS    0CL1                VARIABLE SNESE INFO
         ORG   LDEVDEP
*        OFFSET  DEC 64+4  HEX 40+4
LTSVOL   DS    CL6         ALPHA   VOLUME SERIAL
LTSBLKS  DS    CL2         BIN     BLOCK-SIZE
LTSUKN1  DS    CL2                 UNKNOWN FIELD USAGE
LTSTEMPR DS    CL2         BIN     TEMP. READ ERRORS
LTSTEMPW DS    CL2         BIN     TEMP. WRITE ERRORS
LTSSIO   DS    CL2         BIN     START I/0 COUNT (BLOCKS READ/WRITTEN
LTSPERMR DS    CL1         BIN     PERMANENT READ ERRORS
LTSPERMW DS    CL1         BIN     PERMANENT WRITE ERRORS
LTSNOISE DS    CL1         BIN     NOISE BLOCKS
LTSMODE  DS    CL1         HEX     RECORDING DENS. O/P ONLY X'C3'=1600
*                                                           X'83'=800
LTSERASE DS    CL2         BIN     ERASE GAPS
LTSCLEAN DS    CL2         BIN     CLEANER ACTIONS
*              END OF TAPE STATS SECTION
LTSSDR   DS    CL20                SDR INFO FOR TAPES
LTSSENSE DS    CL24                SENSE INFO FOR TAPES
*              END OF TAPE STATS DEVICE DEPENDENT SECTION.
         EJECT
***********************************************************************
*        SYS1.LOGREC   IPL/EOD RECORD LAYOUT                          *
***********************************************************************
         SPACE 1
         ORG   LOBR
LIRDW    DS    CL4                 RECORD DESCRIPTOR WORD
LICLASRC DS    CL1
LCIPL    EQU   X'50'  IPL RECORD
LCEOD    EQU   X'80'  EOD RECORD
*SYSREL                            *
*SWITCHS                           *
*RCDCNT                            *
*DATE                              **
*TIME                              *** ALL THESE FIELDS
*VERNO                             *** SAME AS IN OBR RECORD.
*CPUSER                            **
*CPUID                             *
*MCELLNG                           *
         DS    CL23                *
LISUBSYS DS    CL1                 SUBSYSTEM CAUSING IPL  IPL REC ONLY
         DS    CL3                 NOT USED               IPL REC ONLY
LIREASON DS    CL2                 REASON FOR IPL         IPL REC ONLY
         DS    CL2                 NOT USED               IPL REC ONLY
LICHASSN DS    CL8                 CHANNEL ASSIGNMENTS    IPL REC ONLY
LIHIADDR DS    CL4                 HI-ADDRESS OF MAIN STORE IPLREC ONLY
         DS    CL4                 RESERVED
*              END OF  IPL / EOD  RECORDS
         EJECT
***********************************************************************
*        TAPE STATISTICS OUTPUT RECORD LAYOUT                         *
***********************************************************************
         SPACE 1
TAPESTAT DSECT
TSRECID  DS    CL3                 CONSTANT 'TS1'
TSDATE   DS    CL5                 DATE  YYDDD
TSTIME   DS    CL6                 TIME  HHMMSS
TSJOBNME DS    CL8                 JOBNAME USING TAPE
TSUNIT   DS    CL3                 UNIT NUMBER
TSVOLUME DS    CL6                 VOLUME NUMBER
TSFLAGS  DS    0CL8
TSFDMNT  DS    CL1                 1 = VOLUME DEMOUNT RECORD
TSFPERR  DS    CL1                 1 = PERMANENT ERROR RECORD
TSFTERR  DS    CL1                 1 = TEMPORARY ERROR RECORD
TSFOUTPT DS    CL1                 1 = OUTPUT TAPE
*                                  0 = INPUT TAPE
TSFDENS  DS    CL1                 1 = 1600 BPI
*                                  0 = 800  BPI
         DS    CL1                 NOT USED
         DS    CL1                 NOT USED
         DS    CL1                 NOT USED
TSBLKSZE DS    PL3                 BLOCKSIZE
TSSIO    DS    PL3                 BLOCK COUNT
TSTREADS DS    PL2                 TEMPORARY READ ERRORS
TSTWRITS DS    PL2                 TEMPORARY WRITE ERRORS
TSPREADS DS    PL2                 PERMANENT READ ERRORS
TSPWRITS DS    PL2                 PERMANENT WRITE ERRORS
TSERASE  DS    PL2                 ERASE GAPS
TSNOISE  DS    PL2                 NOISE BLOCKS
TSCLEANR DS    PL2                 CLEANER ACTIONS
TSRETRY  DS    CL2                 NUMBER OF I/O RETRIES
TSUKN1   DS    PL2                 UNKNOWN COUNTER
TSMODEST DS    XL1                 MODE SET  X'C3' = 1600 BPI
*                                            X'83' =  800 BPI
*                                            X'00' = N/A
*              RECORD LENGTH = 64 BYTES.
         EJECT
***********************************************************************
*        IPL / EOD  PRINT LINE LAYOUT                                 *
***********************************************************************
         SPACE 1
IPLREC   DSECT
IPPRTCTL DS    CL1                 PRINT CONTROL CHAR
IPRECID  DS    CL3                 CONSTANT  'IPL OR EOD'
         DS    CL4                 SPACES
IPDATE   DS    CL9                 DATE DD-MMM-YY
         DS    CL2                 SPACES
IPTIME   DS    CL8                 TIME HH.MM.SS
         DS    CL4                 SPACES
IPREASON DS    CL4                 IPL REASON AND SYBSYSTEM CODES
         DS    CL2                 SPACES
IPDESC   DS    CL36                IPL DESCRIPTION
         DS    CL61                SPACES.
         EJECT
T581P21  CSECT
         PRINT ON,GEN
         SPACE 2
*******************************************************************
*                                                                 *
*        PROGRAM ID. :   T581P21                                  *
*                                                                 *
*        DATE WRITTEN :  JULY 1976                                *
*                                                                 *
*        AUTHOR :        P.S. GRANT                               *
*                                                                 *
*        LOCATION:       MISD BRUSSELS - TECHNICAL SUPPORT GROUP  *
*                                                                 *
*******************************************************************
         SPACE 3
*******************************************************************
*                                                                 *
*        PURPOSE                                                  *
*       ---------                                                 *
*        THIS PROGRAM  EXTRACTS DATA FROM THE LOGREC HISTORY TAPE.*
*        DATA IS CONVERTED FROM VARIABLE LENGTH RECORDS WITH BINARY
*        COUNTER FIELDS TO FIXED LENGTH RECORDS WITH PACKED DECIMAL
*        NUMERIC FIELDS:-                                         *
*         RECORD TYPES HANDLED:-                                  *
*              1. OBR RECORDS FOR TAPE VOLUME DEMOUNTS.           *
*              2. IPL AND EOD RECORDS                             *
*                                                                 *
*******************************************************************
         EJECT
*******************************************************************
*        REGISTER EQUATES AND USAGES.                             *
*******************************************************************
         SPACE 1
R0       EQU   0    SVC COMMUNICATIONS AND WORK REGISTER
R1       EQU   1    SVC COMMUNICATIONS AND WORK REGISTER
R2       EQU   2    SUB-ROUTINE CONTROL INFORMATION AND WORK REG.
R3       EQU   3    WORK REGISTER
R4       EQU   4    BAL RETURN ADDRESS
R5       EQU   5    BASE REG FOR INPUT LOGREC RECORD
R6       EQU   6    BASE ADDRESS FOR OUTPUT RECORD
R7       EQU   7         BASE ADDRESS FOR PRINT LINE
R8       EQU   8    UNUSED
R9       EQU   9    UNUSED
R10      EQU   10   UNUSED
R11      EQU   11   UNUSED
R12      EQU   12   BASE REGISTER 2
R13      EQU   13   SAVE AREA POINTER / BASE REGISTER 1
R14      EQU   14   BALR RETURN ADDRESS
R15      EQU   15   BALR ROUTINE ADDRESS AND WORK REGISTER
         SPACE 3
*******************************************************************
*        HOUSEKEEPING                                             *
*******************************************************************
         SPACE 1
         PGMIN EQUATES=NO,USING=(R13,R12)  ESTABLISH ADDRESSABILITY
         PRINT NOGEN               SUPPRESS MACRO EXPANSION
         SPACE 3
*******************************************************************
*        SAVE ADDRESS AND LENGTH OF PARM OF EXEC CARD             *
*******************************************************************
         SPACE 1
         L     R1,0(R1)            LOAD ADDRESS OF PARM INTO R1
         MVC   PARMLGTH+2(2),0(R1) STORE LENGTH OF PARM INFO'S
         LA    R1,2(R1)            GET ADDRESS OF PARM INFO'S
         ST    R1,PARMADDR         STORE ADDRESS OF PARM INFO'S
         EJECT
*******************************************************************
*        TEST WHICH ARE THE DD'S SUPPLIED, AND OPEN DATA SETS     *
*         PRESENT.                                                *
*******************************************************************
         SPACE 1
         LA    R3,MAXDS            ESTABLISH LOOP
         LA    R2,DCBTABLE         POINT R2 AT DCB TABLE
         OI    0(R2),DDINT         INDICATE DD INTEREST
         BAL   R4,TESTIOT          GO TEST IF DD STATEMENT PRESENT
         BAL   R4,OPEN             GO OPEN DATA SET
         LA    R2,DCBNTRY(R2)      POINT AT NEXT TABLE ENTRY
         BCT   R3,*-16             PROCESS NEXT DATA SET
         SPACE 2
SETPRINT EQU   *         SET-UP PRINT D/S IF REQUIRED
         TM    PRINTSW,DDOPEN      PRINT D/S OPEN?
         BNO   SPXIT               NO. SKIP
         BAL   R4,PRINT            DUMMY FIRST WRITE FOR PUT LOCATE
         MVI   0(R7),X'8B'         SKIP TO TOP OF NEXT PAGE
         BAL   R4,PRINT            INVOKE
         MVI   0(R7),SPCE3AFT      PRTCTL FOR HEADING
         MVC   1(38,R7),=CL38'T581P21        LIST OF IPL/EOD RECORDS'
         BAL   R4,PRINT            PRINT HEADING
         MVI   0(R7),SPCE2AFT      DOUBLE SPACING FOR DETAIL LINES.
SPXIT    EQU   *
         EJECT
***********************************************************************
*        READ INPUT DATASET. DETERMINE RECORD TYPE & BRANCH TO RTN.   *
***********************************************************************
         SPACE 1
READNEXT EQU   *
         BAL   R4,RUT1             READ INPUT RECORD
         USING LOBR,R5             ESTABLISH ADDRESSABILITY
         CLI   LCLASRC,LCIPL       IPL RECORD?
         BE    PROCIPL             YES. BRANCH
         CLI   LCLASRC,LCEOD       EOD RECORD?
         BE    PROCEOD             YES. BRANCH
         CLC   LRDW(2),=H'38'      BELOW MINIMUM LENGTH
         BL    READNEXT            YES. READ NEXT RECORD
         TM    LCLASRC,LCOBR       OBR RECORD?
         BO    PROCOBR             YES. PROCESS IT
*        INSERT TESTS FOR FURTHER RECORD TYPES HERE.
         B     READNEXT            UNDEFINED RECORD TYPE. IGNORE.
         EJECT
***********************************************************************
*        PROCESS OBR RECORDS                                          *
***********************************************************************
         SPACE 1
PROCOBR  EQU   *
         TM    SYSUT2SW,DDOPEN     OUTPUT DATASET OPEN?
         BNO   POBREXIT            IF NOT FORGET FORMATTING
         CLC   LDEVTYPE,=X'34208003'  3420 TAPE RECORD?
         BNE   POBREXIT            NO. EXIT
         TM    LSWITCHS+1,LSSHORT+LSSDR   SHORT OR SDR RECORD?
         BNZ   POBREXIT            YES. FORGET IT
         BAL   R4,FMT3400          REFORMAT RECORD
         BAL   R4,WUT2             WRITE REFORMATTED RECORD
POBREXIT EQU   *
         B     READNEXT            READ NEXT INPUT RECORD
         SPACE 3
***********************************************************************
*        PROCESS IPL RECORDS.                                         *
***********************************************************************
         SPACE 1
PROCIPL  EQU   *
         TM    PRINTSW,DDINT+DDPRES+DDOPEN   IF SYSPRINT NOT OPEN
         BNO   PIPLEXIT                      FORGET FORMATTING
         USING IPLREC,R7           R7 ALREADY INITIALISED
         MVC   IPRECID,=CL3'IPL'   RECORD TYPE
         BAL   R4,FMTIPL           DO COMMON FORMATTING
         MVC   IPREASON(2),LIREASON     SET-UP
         MVC   FWORD,LISUBSYS      KEY
         BAL   R4,HEXPAND          TABLE
         MVC   IPREASON+2(2),FWORD SEARCH
         BAL   R4,SRCHIPL          SEARCH FOR DESCRIPTION
         BAL   R4,PRINT            PRINT A REPORT LINE.
PIPLEXIT EQU   *
         B     READNEXT            READ NEXT INPUT RECORD
         SPACE 3
***********************************************************************
*        PROCESS EOD RECORDS                                          *
***********************************************************************
         SPACE 1
PROCEOD  EQU   *
         TM    PRINTSW,DDOPEN      DON'T PROCESS
         BNO   PEODEXIT
         MVC   IPRECID,=CL3'EOD'   RECORD TYPE
         BAL   R4,FMTIPL           DO COMMON FORMATTING
         BAL   R4,PRINT            PRINT REPORT LINE
PEODEXIT EQU   *
         B     READNEXT
         EJECT
***********************************************************************
*        SUBROUTINE TO DO COMMON FORMATTING OF IPL AND EOD RECORDS    *
***********************************************************************
         SPACE 1
FMTIPL   SUBIN SAVE=R4
FMTFTIME BC    0,FMTCONT
         UT458 METHOD=LOAD,UTDS=NO LOAD DATE ROUTINE
         MVI   FMTFTIME+1,X'F0'    FORCE BRANCH ROUND THIS RTN.
FMTCONT  EQU   *
         UNPK  UTYYDDD,LDATE       GET DATE FROM RECORD
         OI    UTYYDDD+4,X'F0'     CORRECT LAST DIGIT
         UT458 METHOD=EXEC,UTDS=YES,OPCODE=6,DATE=UTYYDDD CONVERT DATE
         MVC   IPDATE,UTREPORT     MOVE TO OUTPUT
         MVC   FWORD,LTIME         GET TIME FRO I/P RECORD
         LA    R1,FWORD            POINT AT TIME
         BAL   R4,HEXPAND          CONVERT TO DISPLAY
         MVI   IPTIME+2,C'.'       EDIT TIME
         MVI   IPTIME+5,C'.'       EDIT TIME
         MVC   IPTIME(2),FWORD     MOVE HOURS
         MVC   IPTIME+3(2),FWORD+2 MOVE MINUTES
         MVC   IPTIME+6(2),FWORD+4 MOVE SECONDS
FMTIPLXT SUBOUT RESTORE=R4
         SPACE 3
***********************************************************************
*        SEARCH TABLE OF IPL REASON/SUBSYSTEM CODES FOR DESCRIPTION   *
***********************************************************************
         SPACE 1
SRCHIPL  SUBIN SAVE=R4
         CLC   IPREASON(2),=CL2'DF'  DEFAULT REPLY ENTERED?
         BNE   *+10                NO. SKIP NSI
         MVC   IPREASON,=CL4'U '    YES. MODIFY IPREASON
         LA    R2,IPLTABLE         POINT AT TABLE
SILOOP1  EQU   *
         CLI   0(R2),X'FF'         END OF TABLE
         BE    SIEXIT              YES. EXIT
         CLC   0(4,R2),IPREASON    MATCH FOUND
         BE    SIEXIT              YES. EXIT
         LA    R2,40(0,R2)         POINT AT NEXT ENTRY
         B     SILOOP1             GO ROUND AGAIN
         SPACE 1
SIEXIT   EQU   *
         MVC   IPDESC,4(R2)        MOVE DESCRIPTION TO O/P
         SUBOUT RESTORE=R4         RETURN TO CALLER
         EJECT
***********************************************************************
*        SUBROUTINE TO REFORMAT AN OBR RECORD FOR 3420S               *
***********************************************************************
         SPACE 1
FMT3400  SUBIN SAVE=R4
         LA    R6,WORKAREA         GET WORKAREA ADDRESS
         USING TAPESTAT,R6         ADDRESSABILITY.
         MVC   TSRECID,=CL3'TS1'   MOVE ID. TO O/P
         UNPK  TSDATE,LDATE        MOVE DATE
         OI    TSDATE+4,X'F0'      CORRECT LAST DIGIT
         MVC   FWORD,LTIME         MOVE TIME
         LA    R1,FWORD            POINT AT LTIME
         BAL   R4,HEXPAND          CONVERT TO DISPLAY
         MVC   TSTIME,FWORD        MOVE TO O/P RECORD
         MVC   TSJOBNME,LJOBID     JOBNAME
         MVC   FWORD,LPCUA         MOVE PRIMARY UNIT NO.
         BAL   R4,HEXPAND          COVERT TO DISPLAY
         MVC   TSUNIT,QWORD        MOVE TO O/P REC.
         MVC   TSVOLUME,LTSVOL     VOLUME NO.
         XC    FWORD,FWORD         CLEAR FOR USE OF HEXDEC ROUTINE
         MVC   HWORD,LTSBLKS       BLOCKSIZE TO WORK AREA
         BAL   R4,HEXDEC           CONVERT TO DECIMAL
         MVC   TSBLKSZE,DEC3       MOVE TO O/P
FFLAGSET EQU   *
         MVC   TSFLAGS,=CL8' '     CLEAR FLAGS
         TM    LSWITCHS+1,X'64'    TEST FOR TEMP OR VOL DEMOUNT
         BNZ   *+12                IF ANY FOUND BRANCH
         MVI   TSFPERR,C'1'        SET PERM ERR FLAG
         B     FMTDENS             BRANCH
         SPACE
         TM    LSWITCHS+1,LSTEMPER TEMPORARY ERROR?
         BNO   *+12                NO. BRANCH
         MVI   TSFTERR,C'1'        YES. SET FLAG
         B     FMTDENS             AND BRANCH
         SPACE
         TM    LSWITCHS+1,LSDMOUNT DEMOUNT RECORD
         BNO   FMTDENS             NO. BRANCH
         MVI   TSFDMNT,C'1'        YES. SET FLAG
         SPACE
FMTDENS  EQU   *         SET INPUT/OUTPUT AND DENSITY FLAGS
         MVI   TSFOUTPT,C'0'      INPUT TAPE BY DEFAULT
         CLI   LTSMODE,X'00'       INPUT IF NO MODE SET
         BE    FMTCOUNT            BRANCH IF SO
         MVI   TSFOUTPT,C'1'      MODE SET. SO INDICATE OUTPUT
         MVI   TSFDENS,C'1'        1600 BPI BY DEFAULT
         CLI   LTSMODE,X'C3'       IS IT SO?
         BE    FMTCOUNT            YES. BRANCH
         MVI   TSFDENS,C'0'        SET FOR 800 BPI
         CLI   LTSMODE,X'83'       800 BPI?
         BE    FMTCOUNT            YES BRANCH
         MVI   TSFDENS,C' '        UNKNOWN RECORDING DENSITY
FMTCOUNT EQU   *         CONVERT COUNTERS TO PACKED DECIMAL
         MVC   HWORD,LIORETRY
         BAL   R4,HEXDEC
         MVC   TSRETRY,DEC2
         SPACE 1
         MVC   HWORD,LTSTEMPR
         BAL   R4,HEXDEC
         MVC   TSTREADS,DEC2
         SPACE 1
         MVC   HWORD,LTSTEMPW
         BAL   R4,HEXDEC
         MVC   TSTWRITS,DEC2
         SPACE 1
         MVC   HWORD,LTSSIO
         BAL   R4,HEXDEC
         MVC   TSSIO,DEC3
         SPACE 1
         MVC   QWORD,LTSPERMR
         BAL   R4,HEXDEC
         MVC   TSPREADS,DEC2
         SPACE 1
         MVC   QWORD,LTSPERMW
         BAL   R4,HEXDEC
         MVC   TSPWRITS,DEC2
         SPACE 1
         MVC   QWORD,LTSNOISE
         BAL   R4,HEXDEC
         MVC   TSNOISE,DEC2
         SPACE 1
         MVC   HWORD,LTSERASE
         BAL   R4,HEXDEC
         MVC   TSERASE,DEC2
         SPACE 1
         MVC   HWORD,LTSCLEAN
         BAL   R4,HEXDEC
         MVC   TSCLEANR,DEC2
         SPACE 1
         MVC   HWORD,LTSUKN1
         BAL   R4,HEXDEC
         MVC   TSUKN1,DEC2
         SPACE 1
FMTMODE  EQU   *         MOVE MODE SET BYTE TO OUTPUT
         MVC   TSMODEST,LTSMODE
         SPACE 1
FMTEXIT  SUBOUT RESTORE=R4
         EJECT
***********************************************************************
*              SUBROUTINE TO TRANSLATE HEX NUMBERS (BINARY) TO PACKED *
*                                DECIMAL.                             *
*                   THE USER PLACES THE INPUT VALUE IN FWORD, HWORD   *
*                   OR QWORD AS REQUIRED. HE INVOKES THE ROUTINE WITH *
*                   BAL R4,HEXDEC AND THEN RETRIEVES THE RESULT WITH  *
*                   AS MANY POSITIONS AS REQUIRED. (DEC1 - DEC8)      *
***********************************************************************
         SPACE 1
HEXDEC   SUBIN
         L     R0,FWORD            USE REG0 FOR WORK
         CVD   R0,DWORD            CONVERT TO DECIMAL
         XC    FWORD,FWORD         CLEAR FULLWORD TO ZERO
         SUBOUT
         SPACE 5
         CNOP  4,8
FWORD    DC    F'0'
         ORG   FWORD
         DS    H
HWORD    DS    0H
         DS    X
QWORD    DS    X
DWORD    DS    D
         ORG   DWORD
DEC8     DS    0CL8,CL1
DEC7     DS    0CL7,CL1
DEC6     DS    0CL6,CL1
DEC5     DS    0CL5,CL1
DEC4     DS    0CL4,CL1
DEC3     DS    0CL3,CL1
DEC2     DS    0CL2,CL1
DEC1     DS    CL1
         EJECT
***********************************************************************
*        TRANSLATE ONE FULLWORD OF HEX DATA TO DISPLAY FORMAT.        *
*              ON ENTRY, R1 MUST POINT TO A 3-WORD AREA OF            *
*              MAIN MEMORY CONTAING THE WORD TO BE TRANSLATED.        *
*              ON EXIT, THE FIRST EIGHT BYTES CONTAIN THE DATA        *
*              IN DISPLAY FORMAT.                                     *
***********************************************************************
HEXPAND  SUBIN SAVE=(R2,R3)        SAVE REGISTERS
         LA    R2,8                SET-UP COUNTER
         LR    R3,R1               SET-UP MOVING POINTER
*  LOOP STARTS HERE
         MVO   0(5,R3),0(4,R3)     MOVE 4-BYTES ALONG ONE
*                                  FIRST FOUR BITS OF FIRST BYTE = ZERO
         LA    R3,1(0,R3)          JUMP ONE BYTE
         BCT   R2,*-10             LOOP BACK 8-TIMES.
         TR    0(8,R1),=XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'
*                        PREVIOUS INSTRUCTION FILLS IN ZONE IN 8-BYTES
         SUBOUT RESTORE=(R2,R3)
               EJECT
EODUT1   EQU   *
*******************************************************************
*        JOB TERMINATION ROUTINE -                                *
*         CLOSE ANY OPEN DATA SETS,                               *
*         SET A COMPLETION CODE IN REGISTER 15, AND RETURN.       *
*******************************************************************
         SPACE 1
JOBEND   EQU   *
         LA    R3,MAXDS            ESTABLISH LOOP
         LA    R2,DCBTABLE         POINT AT START OF DCB TABLE
         BAL   R4,CLOSE            CLOSE DATA SET IF OPEN
         LA    R2,DCBNTRY(R2)      POINT AT NEXT TABLE ENTRY
         BCT   R3,*-8              CLOSE NEXT DATA SET
         PGMOUT RC=COMPCODE        SET COND CODE AND RETURN
         TITLE 'I/O SUB-ROUTINES'
*******************************************************************
*        WRITE SUBROUTINE FOR SYSPRINT                            *
*******************************************************************
         SPACE 1
PRINT    SUBIN ,
         TM    PRINTSW,DDINT+DDPRES+DDOPEN   TEST IF NEED TO WRITE
         BNO   PRINTX              BRANCH IF NO
PRINTSVE MVC   PRINTRST+1(1),0(R7) SAVE CURRENT CONTROL CHAR
         PUT   SYSPRINT            WRITE RECORD TO SYSPRINT D/S
         LR    R7,R1               SAVE BUFFER ADDRESS
         MVI   1(R7),BLANK         MOVE BLANK TO START OF LINE
         MVC   2(131,R7),1(R7)      AND PROPAGANTE THROUGH
PRINTRST MVI   0(R7),X'09'         RESTORE PRINT CONTROL CHARACTER
*                                  TO NEXT BUFFER SEGMENT.
*                                  NOTE. THE DATA BYTE IN THIS INSTN.
*                                  IS MODIFIED BY MVC AT LABEL PRINTSVE
PRINTX   SUBOUT ,                  RETURN TO CALLER
         SPACE 2
*******************************************************************
*        READ SUBROUTINE FOR SYSUT1                               *
*******************************************************************
         SPACE 1
RUT1     SUBIN ,
         GET   SYSUT1              READ RECORD FROM SYSUT1 D/S
         LR    R5,R1               SAVE RECORD ADDRESS
         AP    CNTUT1,ONE          INCREMENT RECORD COUNTER
         SUBOUT ,                  RETURN TO CALLER
         SPACE 2
*******************************************************************
*        WRITE SUBROUTINE FOR SYSUT2                              *
*******************************************************************
         SPACE 1
WUT2     SUBIN ,
         TM    SYSUT2SW,DDINT+DDPRES+DDOPEN  TEST IF NEED TO WRITE
         BNO   WUT2X               BRANCH IF NO
         PUT   SYSUT2,0(R6)        WRITE RECORD TO SYSUT2 D/S
         AP    CNTUT2,ONE          INCREMENT RECORD COUNTER
WUT2X    SUBOUT ,                  RETURN TO CALLER
         SPACE 2
         EJECT
*******************************************************************
*        SUPPLY DEFAULT RECORD LENGTH AND/OR BLOCK SIZE           *
*         IF NOT CODED.                                           *
*******************************************************************
         SPACE 1
BLKSZRTN SUBIN ,                   SUPPLY DEFAULT LRECL AND/OR BLKS
         USING IHADCB,R1           ESTABLISH DCB ADDRESSABILITY
         CLC   DCBBLKSI,ZEROWORD   TEST IF BLKSIZE SUPPLIED
         BNE   0(R14)              RETURN TO OPEN IF YES
         MVC   DCBBLKSI,DCBLRECL   FORCE SINGLE BLOCKING
         DROP  R1                  DROP DCB ADDRESSABILITY
         SUBOUT RETURN=(R14)       RETURN TO OPEN ROUTINES
         SPACE 2
*******************************************************************
*        I/O ERROR ROUTINE                                        *
*******************************************************************
         SPACE 1
IOERROR  SUBIN ,                   ANALYSE I/O ERROR
         MVC   COMPCODE,COND16     SET COMPLETION CODE
         SYNADAF ACSMETH=QSAM      CALL ANALYSIS ROUTINE
         MVC   WTOIOE+27(86),50(R1) ADD RESULT OF ANALYSIS TO LINE
         SYNADRLS ,                RELEASE OS BUFFER
         WTO   MF=(E,WTOIOE)       TELL OPERATOR OF ERROR
         SUBOUT RETURN=JOBEND      TERMINATE JOB
         EJECT
*******************************************************************
*        TEST IF A DD STATEMENT IS PRESENT BEFORE OPEN            *
*******************************************************************
         SPACE 1
TESTIOT  SUBIN ,                   TEST TASK INPUT/OUTPUT TABLE
         TESTIOT DDNAME=4(R2)      TEST IF DDNAME FOUND IN TIOT
         B     *+4(R15)            TEST CONDITION CODE
         OI    0(R2),DDPRES        TELL THAT DD STATEMENT SUPPLIED
         SUBOUT ,                  RETURN TO CALLER
         SPACE 3
*******************************************************************
*        OPEN ROUTINE                                             *
*******************************************************************
         SPACE 1
OPEN     SUBIN SAVE=(R3)           OPEN DATA SET
         TM    0(R2),DDINT+DDPRES  TEST IF DD INTERESTING AND
         BNO   OPENX               BRANCH IF NO    / PRESENT.
         L     R3,0(R2)            GET DCB ADDRESS
         CLC   12(8,R2),=C'INPUT   ' TEST FOR INPUT D/S
         BE    OPENZ               BRANCH IF INPUT D/S
         OPEN  ((R3),(OUTPUT))     OPEN OUTPUT DATA SET
         B     OPENY               GO SET SWITCH
OPENZ    OPEN  ((R3),(INPUT))      OPEN INPUT DATA SET
OPENY    OI    0(R2),DDOPEN        INDICATE DATA SET OPEN
OPENX    SUBOUT RESTORE=(R3)       RETURN TO CALLER
         SPACE 3
*******************************************************************
*        CLOSE ROUTINE                                            *
*******************************************************************
         SPACE 1
CLOSE    SUBIN SAVE=(R3)           CLOSE DATA SET
         TM    0(R2),DDOPEN        TEST IF DATA SET OPEN
         BZ    CLOSEX              EXIT IF NOT
         L     R3,0(R2)            GET DCB ADDRESS
         CLOSE ((R3))              CLOSE DATA SET
         NI    0(R2),FF-DDOPEN     SET OFF 'OPEN' SWITCH
CLOSEX   SUBOUT RESTORE=(R3)       RETURN TO CALLER
         TITLE 'DCB''S AND I/O CONTROL TABLES'
*******************************************************************
*        DCB'S TABLE                                              *
*******************************************************************
         SPACE 1
DCBTABLE DS    0F
PRINTSW  DC    X'00',AL3(SYSPRINT),CL8'SYSPRINT',CL8'OUTPUT'
SYSUT1SW DC    X'00',AL3(SYSUT1),CL8'SYSUT1',CL8'INPUT'
SYSUT2SW DC    X'00',AL3(SYSUT2),CL8'SYSUT2',CL8'OUTPUT'
         SPACE 1
TABSIZE  EQU   *-DCBTABLE          DCB'S TABLE SIZE
DCBNTRY  EQU   20                  LENGTH OF ONE TABLE ELEMENT
MAXDS    EQU   TABSIZE/DCBNTRY     MAXIMUN NUMBER OF DCB'S
         SPACE 1
DDINT    EQU   16                  DD INTEREST
DDPRES   EQU   8                   DD PRESENT
DDOPEN   EQU   1                   DATA SET IS OPEN
         SPACE 2
EXITLIST DC    X'85',AL3(BLKSZRTN) ENTRY FOR DCB MODIFICATION
         SPACE 2
WTOIOE   DS    0F
         DC    AL2(WTOEND-*),H'0',CL109'******** - I/O ERROR -'
WTOEND   EQU   *
         EJECT
*******************************************************************
*        DATA CONTROL BLOCKS                                      *
*******************************************************************
         SPACE 1
SYSPRINT DCB   DDNAME=SYSPRINT,                                        C
               DSORG=PS,                                               C
               SYNAD=IOERROR,                                          C
               EXLST=EXITLIST,                                         C
               RECFM=FBM,                                              C
               MACRF=PL,                                               C
               LRECL=133
         SPACE 3
SYSUT1   DCB   DDNAME=SYSUT1,                                          C
               DSORG=PS,                                               C
               SYNAD=IOERROR,                                          C
               EXLST=EXITLIST,                                         C
               RECFM=VB,                                               C
               MACRF=GL,                                               C
               EODAD=EODUT1
         SPACE 3
SYSUT2   DCB   DDNAME=SYSUT2,                                          C
               DSORG=PS,                                               C
               SYNAD=IOERROR,                                          C
               EXLST=EXITLIST,                                         C
               RECFM=FB,                                               C
               LRECL=64,                                               "
               MACRF=PM
         SPACE 3
         TITLE 'MISCELLANIOUS EQUATES, CONSTANTS AND WORK AREAS'
*******************************************************************
*        EQUATES                                                  *
*******************************************************************
         SPACE 1
FF       EQU   255                 FOR 'NI' INSTRUCTION
BLANK    EQU   X'40'               BLANK
ON       EQU   X'FF'               ON
OFF      EQU   X'00'               OFF
HIGHVAL  EQU   X'FF'               HIGH VALUE
LOWVAL   EQU   X'00'               LOW VALUE
SIGN     EQU   X'F0'               FOR FORCE SIGN TO 'F'
         SPACE 1
SPCE1AFT EQU   X'09'               SPACE 1 AFTER PRINTING
SPCE2AFT EQU   X'11'               SPACE 2 AFTER PRINTING
SPCE3AFT EQU   X'19'               SPACE 3 AFTER PRINTING
PAGESKIP EQU   X'89'               SKIP TO NEW PAGE
         EJECT
*******************************************************************
*        CONSTANTS                                                *
*******************************************************************
         SPACE 1
ZEROWORD DC    F'0'                BINARY ZERO FULLWORD FOR TESTS
         SPACE 1
COND4    DC    H'4'                COMPLETION CODE OF 4
COND8    DC    H'8'                COMPLETION CODE OF 8
COND12   DC    H'12'               COMPLETION CODE OF 12
COND16   DC    H'16'               COMPLETION CODE OF 16
         SPACE 1
ZERO     DC    PL1'0'              PACKED CONSTANT OF ZERO
ONE      DC    PL2'1'              PACKED CONSTANT OF ONE
         EJECT
***********************************************************************
*        TABLE TO SUPPLY DESCRITIONS FOR IPL REASON/SUBSYSTEM CODES   *
***********************************************************************
         SPACE 1
IPLTABLE EQU   *
         DC    CL4'NM00',CL36'NORMAL IPL.'
         DC    CL4'IE00',CL36'HARDWARE OR SOFTWARE UNKNOWN CAUSE'
         DC    CL4'IE10',CL36'HARDWARE. NO ENG. - CPU'
         DC    CL4'IE20',CL36'HARDWARE. NO ENG. - DISK DRIVES'
         DC    CL4'IE40',CL36'HARDWARE. NO ENG. - TAPE UNITS'
         DC    CL4'IE50',CL36'HARDWARE. NO ENG. - UNIT RECORD'
         DC    CL4'IE60',CL36'HARDWARE. NO ENG. - ITEL MEMORY'
         DC    CL4'IE70',CL36'HARDWARE. NO ENG. - TELEPROCESSING'
         DC    CL4'IE90',CL36'SOFTWARE ERROR      - OS OR HASP'
         DC    CL4'IE91',CL36'SOFTWARE ERROR    - IBM PROGRAM PRD'
         DC    CL4'IM00',CL36'HARDWARE OR SOFTWARE ENG. CALLED'
         DC    CL4'IM10',CL36'CPU FAULT ENGINEER CALLED'
         DC    CL4'IM20',CL36'DISK DRIVE FAULT ENGINEER CALLED'
         DC    CL4'IM30',CL36'MEMOREX DISK D.FAULT ENGINEER CALLD'
         DC    CL4'IM40',CL36'TAPE UNIT FAULT ENGINEER CALLED'
         DC    CL4'IM50',CL36'UNIT RECORD FAULT ENGINEER CALLED'
         DC    CL4'IM60',CL36'ITEL MEMORY FAULT ENGINEER CALLED'
         DC    CL4'IM70',CL36'TELEPROCESSING ERR. ENGINEER CALLED'
         DC    CL4'IM90',CL36'OS OR HASP - TSG CALLED'
         DC    CL4'IM91',CL36'IBM PROGRAM PRODUCT - TSG CALLED'
         DC    CL4'ME00',CL36'GENERAL MEDIA ERROR'
         DC    CL4'ME10',CL36'CONSOLE PAPER JAMMED/RUN OUT'
         DC    CL4'ME20',CL36'BAD DISK PACK'
         DC    CL4'ME30',CL36'BAD MEMOREX DISK PACK'
         DC    CL4'ME40',CL36'BAD TAPE REEL'
         DC    CL4'ME50',CL36'MEDIA - CARDS OR STATIONERY'
         DC    CL4'ME60',CL36'OPERATORS A FOOL ME60'
         DC    CL4'ME70',CL36'OPERATORS AN IDIOT ME70'
         DC    CL4'UN00',CL36'IPL FOR UNKNOWN CAUSE'
         DC    CL4'OP00',CL36'OPERATOR ERROR OR PROCEDURAL PROBLEM'
         DC    CL4'UP00',CL36'APPLICATION PROGRAM CAUSED SYSTEM ER'
         DC    CL4'EN00',CL36'POWER OR AIR CONDITIONING FAILURE'
         DC    CL4'CE00',CL36'IPL AFTER SCHEDULED MAINTENANCE'
         DC    CL4'CE10',CL36'IPL FOR CE WORKING ON CPU'
         DC    CL4'CE20',CL36'IPL FOR CE WORKING ON DISK DRIVES'
         DC    CL4'CE30',CL36'IPL FOR CE WORKING ON MRX DISK DRVS'
         DC    CL4'CE40',CL36'IPL FOR CE WORKING ON TAPE UNITS'
         DC    CL4'CE50',CL36'IPL FOR CE WORKING ON UNIT RECORD'
         DC    CL4'CE60',CL36'IPL FOR CE WORKING ON ITEL MEMORY'
         DC    CL4'CE70',CL36'IPL FOR CE WORKING ON TELEPROCESSING'
         DC    CL4'CE90',CL36'IPL FOR TSG FIXING OS OR HASP'
         DC    CL4'CE91',CL36'IPL FOR TSG FIXING A IBM P/P BUG'
         DC    CL4'U   ',CL36'CARTWRIGHT''S ON THE M/C AGAIN'
         DC    XL4'FFFFFFFF',CL36'INVALID IPL REASON ***'
         EJECT
*******************************************************************
*        WORK AREAS                                               *
*******************************************************************
         SPACE 1
DECIMAL  DS    D                   WA FOR DECIMAL OPERATIONS
COMPCODE DC    H'0'                CONDITION CODE
         SPACE 1
PARMLGTH DC    F'0'                LENGTH OF PARM OF EXEC CARD
PARMADDR DS    F                   ADDRESS OF PARM INFO'S
         SPACE 1
PAGECOUN DC    PL2'0'              COUNT OF PAGES
LINECOUN DC    PL2'0'              COUNT OF LINES
MAXLINE  DC    PL2'55'             MAXIMUM NUMBER OF LINES PER PAGE
         SPACE 1
CNTUT1   DC    PL4'0'
CNTUT2   DC    PL4'0'
         SPACE 1
WORKAREA DC    CL64' '             FOR FORMATTED OUTPUT RECORD
         EJECT
*******************************************************************
*        LITERAL POOL                                             *
*******************************************************************
         SPACE 1
         LTORG
         TITLE 'DCB DSECT'
*******************************************************************
*        DCB DSECT                                                *
*******************************************************************
         SPACE 1
         PRINT ON,NOGEN
         DCBD  DSORG=PS            GENERATE DCB DSECT
         PRINT NOGEN
         END
