ODEB     TITLE  'O S D E B E - OS UTILITY PROGRAM'
OSDEBE   START 0
         EJECT
         SPACE 5
***********************************************************************
****
*    O S D E B E
****
***********************************************************************
*
*
*  THE PURPOSE OF OSDEBE IS TO PROVIDE THE USER OF 360 OPERATING
*  SYSTEM THE FLEXIBILITY OF THE ORIGINAL DEBE.  FLEXIBILITY CAN
*  ONLY BE OBTAINED BY THE ELIMINATION OF DD CARDS.  ONLY ONE DD
*  CARD IS NECESSARY FOR OSDEBE, A SYSPRINT DD CARD FOR THE UNIT
*  THAT WILL BE USED AS THE OUTPUT WRITER.  ALL FUNCTIONS WHICH
*  ARE AVAILABLE WITH DEBE ARE PROVIDED IN OSDEBE.
*
***********************************************************************
*
**  CORE REQUIREMENTS - ABOUT 37,000 BYTES, 32K OF WHICH IS USED
*  AS AN I/O AREA FOR TAPE OPERATIONS.
*
**  ERROR RECOVERY - THE OPERATING SYSTEM PERFORMS ALL STANDARD
*  ERROR RECOVERY.  IF IT CANNOT RECOVER FROM AN ERROR, OSDEBE
*  WILL NOT EVEN TRY.
*
**  CARD READER AND PUNCH ADDRESSES - OSDEBE ASSUMES THE STANDARD
*  ADDRESSES OF '00C' AND '00D' FOR THE READER AND PUNCH RESPECT-
*  IVELY.
*
*  ALL REPLIES TO OSDEBE ARE OF THE WTOR FORMAT,
*          REPLY 00,'TP'
*  WHENEVER ANY INFORMATION IS REQUESTED BY OSDEBE, A REPLY OF
*  'EOJ' WILL TERMINATE THE SUBROUTINE OF OSDEBE.  A REPLY OF 'EOJ'
*  IN RESPONSE TO THE REQUEST FOR THE PROGRAM ID WILL TERMINATE
*  OSDEBE AND CONTROL IS RETURNED TO THE OPERATING SYSTEM.
*
*  ONCE A ROUTINE IS RUNNING IN OSDEBE, IT CAN ONLY BE TERMINATED
*  BY CANCELLING THE JOB, AND THE JOB MUST BE RESCHEDULED AGAIN.
*  AN ALTERNATIVE TO CANCELLING THE JOB IS TO CAUSE AN I/O ERROR
*  ON ONE OF THE UNITS BEING USED.  AN I/O ERROR WILL CAUSE THE
*  SUBROUTINE OF OSDEBE TO TERMINATE, BUT OSDEBE WILL STILL BE
*  IN CONTROL.
*
***********************************************************************
*
*  SHOULD YOU NEED ANY INFORMATION ON OSDEBE OR FIND ERRORS IN
*  THE PROGRAM, PLEASE CONTACT JOHN W. JUHLMAN, IBM CORP.,
*  2830 VICTORY PARKWAY, CINCINNATI, OHIO,45206.   PHONE  751-6500.
*
***********************************************************************
         EJECT
*
*  INITIALIZATION
*
         USING  OSDEBE,15
         PRINT ON,NOGEN,NODATA
         B     AROUND
         DC    C'OSDEBE - CONTACT JOHN JUHLMAN, CINCINNATI B.O. '
         DC    C'IF ANY PROBLEMS.'
AROUND   DS    0H
         SAVE  (14,12)
BEGIN    BALR  12,0
         USING *,12
BEGIN1   EQU   *
         LA    14,SAVEAREA
         ST    13,SAVEAREA+4
         ST    14,8(0,13)
         LR    13,14
         SPACE 5
*  GET CVT POINTER
         L     3,16
*  GET POINTER TO THE TCB POINTERS
         L     2,0(0,3)
*  GET TCB POINTER
         L     3,4(0,2)
*  GET PROTECT KEY FROM TCB FOR THE DEB'S
         OC    INDEB+24(1),28(3)
         OC    OUTDEB+24(1),28(3)
*  GET TCB ADDRESS FOR THE DEB'S
         ST    3,INDEB
         ST    3,OUTDEB
         SPACE 5
         WTO   'OEH700I OSDEBE OPTIONS - BF, BS, CC, CP, CT, RW, SF, SR*
               , TC, TD, TP, TT, WT'
         WTO   'OEH701I REPLY EOJ TO END OSDEBE'
         WTO   'OEH702I CAUSE I/O ERROR TO END FUNCTION'
         EJECT
*
*  MAIN PROGRAM
*  ALL ROUTINES RETURN HERE WHEN THEY ARE FINISHED.
*
ASKAGN   EQU   *
         NI    INIOB,X'3F'         TURN OFF CHAIN FLAGS IN IOB'S
         NI    OUTIOB,X'3F'
         SPACE 2
         NI    TD3+1,X'0F'   RESET SWITCHES SET IN TP ROUTINE
         NI    TD6+1,X'0F'
         SPACE 3
         WTOR  'OEH703D REPLY PROG ID - XX',ID,3,REPLYECB
         BAL   11,WAITANS    GO WAIT FOR A REPLY
         OC    ID(3),=X'404040'    MAKE ANSWER ALL CAP'S
         CLC   ID(3),=C'EOJ' IS HE DONE WITH OSDEBE
         BE    EOJ           YES, RETURN TO THE OPERATING SYSTEM
         CLC   ID(2),=C'BF'
         BE    BF
         CLC   ID(2),=C'BS'
         BE    BS
         CLC   ID(2),=C'CC'
         BE    CC
         CLC   ID(2),=C'CP'
         BE    CP
         CLC   ID(2),=C'CT'
         BE    CT
         CLC   ID(2),=C'RW'
         BE    RW
         CLC   ID(2),=C'SF'
         BE    SF
         CLC   ID(2),=C'SR'
         BE    SR
         CLC   ID(2),=C'TC'
         BE    TC
         CLC   ID(2),=C'TD'
         BE    TD
         CLC   ID(2),=C'TP'
         BE    TP
         CLC   ID(2),=C'TT'
         BE    TT
         CLC   ID(2),=C'WT'
         BE    WT
         WTO   'OEH704I BAD ID - TRY AGAIN'
         B     ASKAGN
         SPACE 3
EOJ      L     13,4(0,13)
         RETURN (14,12),RC=0
         EJECT
*
*  SUBPROGRAMS CALLED BY ID
*
*  BACKSPACE A FILE ON TAPE
         SPACE 1
BF        EQU   *
         BAL   10,TPOUTSET   DETERMINE WHICH TAPE UNIT AND SET UP
         MVC   OUTCCW+8(8),BFCCW   MOVE IN THE BF CCW
         B    SFEXCP
         SPACE 1
*  FORWARD SPACE A FILE ON TAPE
         SPACE 1
SF       EQU   *
         BAL   10,TPOUTSET   DETERMINE WHICH TAPE UNIT AND SET UP
         MVC   OUTCCW+8(8),SFCCW   MOVE IN SF CCW
SFEXCP   EQU   *             IMMEDIATE COMMANDS MUST BE CHAINED TO
         MVC   OUTCCW+16(8),=X'0300000020000001'  A NOP COMMAND
         BAL   11,IOOUT      GO EXECUTE THE CCW
         CLI   OUTECB,X'7F'  WAS EVERYTHING OK
         BE    ASKAGN        YES, GO ASK FOR ANOTHER JOB
         B     TAPERR        NO, GO TO ERROR ROUTINE
         EJECT
*  BACKSPACE NNNN RECORDS ON TAPE
         SPACE 1
BS       EQU   *
         SPACE 1
*  SKIP NNNN RECORDS ON TAPE
         SPACE 1
SR       EQU   *
         BAL   10,TPOUTSET   DETERMINE WHICH TAPE UNIT AND SET UP
         WTOR  'OEH705D REPLY NUMBER RECS TO SKIP - XXXX',TDAREA,4,    *
               REPLYECB
         BAL   11,WAITANS    GO WAIT FOR A REPLY
         OC    TDAREA(3),=X'404040'    MAKE ALL CAP'S
         CLC   TDAREA(3),=C'EOJ'   END THIS ROUTINE
         BE    ASKAGN        YES, EXIT THIS ROUTINE
         OI    TDAREA+3,X'F0'      MAKE A GOOD SIGN FOR CVB
         PACK  TDWK,TDAREA(4)
         CVB   2,TDWK        PUT NUMBER OF REC'S IN REG 2
         CLC   ID(2),=C'SR'
         BE    SREX
BSEX     MVC   OUTCCW+8(8),BSCCW   SET UP BS CCW
BSEX2    MVC   OUTCCW+16(8),=X'0300000020000001'  CHAIN TO NOP
BSAGN    EQU   *
         BAL   11,IOOUT      EXECUTE THE CCW
         CLI   OUTECB,X'7F'  EVERYTHING OK
         BE    BCT6          YES, DO AGAIN TILL COUNT = 0
         B     TAPERR        NO, END THIS ROUTINE
BCT6     EQU   *
         BCT   2,BSAGN       DECREMENT THE COUNT AND DO AGAIN
         B     ASKAGN        ALL FINISHED WITH THIS ROUTINE
SREX     MVC   OUTCCW+8(8),SRCCW   SET UP SR CCW
         B     BSEX2
         EJECT
*  CARD TO CARD REPRODUCE
         SPACE 1
CC       EQU   *
         MVI   INMODSTK,X'41'      SET UP READER'S DCB
         MVI   INDEVT,X'43'
         MVC   D1(3),READER1       USE STANDARD ADDRESS
         BAL   14,UCBLOKUP
         ST    2,INDEBMOD    STORE UCB ADDRESS IN DEB
         MVI   OUTMDSTK,X'41'      SET UP PUNCH'S DCB
         MVI   OUTDEVT,X'43'
         MVC   D1(3),PUNCH1        USE STANDARD ADDRESS
         BAL   14,UCBLOKUP
         ST    2,OUTDEBMD    STORE UCB ADDRESS IN DEB
         MVC   INCCW(8),CP1CCW     SET UP READ CCW
         MVC   OUTCCW(8),CTCCW     SET UP WRITE CCW
CCLOOP   EQU   *
         BAL   11,IOIN       READ A CARD
         CLI   INECB,X'7F'         EVERYTHING OK
         BE    CC1                 YES, BRANCH
         TM    INSTAT+4,X'01'    EOF
         BC    1,ASKAGN    YES
         B     RDRERROR      READER ERROR, END THIS ROUTINE
CC1      EQU   *
         BAL   11,IOOUT      PUNCH A CARD
         CLI   OUTECB,X'7F'        EVERYTHING OK
         BE    CCLOOP        YES, LOOP
*
PCHERROR WTO   'OEH706I PUNCH ERROR - STOP'
         B     ASKAGN
         EJECT
*  CARD TO PRINTER - 80/80 LIST
         SPACE 1
CP       EQU   *
*  SET UP READER'S DCB AND DEB
         MVI   INMODSTK,X'41'
         MVI   INDEVT,X'43'
         MVC   D1(3),READER1       USE STANDARD ADDRESS
         BAL   14,UCBLOKUP
         ST    2,INDEBMOD          STORE UCB ADDRESS IN DEB
         BAL   11,OPENPRNT   OPEN SYSPRINT IF NOT OPEN
CP2      EQU   *
         BAL   11,SKIPTO1    SKIP TO CHANNEL 1
*  SET UP READER CCW
CPGO     MVC   INCCW(8),CP1CCW     SET UP READ CCW
CPLOOP   EQU   *
         BAL   11,IOIN       READ A CARD
         CLI   INECB,X'7F'   EVERYTHING OK
         BE    CP1           YES, BRANCH
         TM    INSTAT+4,X'01'      EOF?
         BC    1,ASKAGN      YES, END THIS ROUTINE
RDRERROR WTO   'OEH707I READER ERROR - STOP'
         B     ASKAGN
CP1      EQU   *
         MVC   TDOUTAR(80),TDAREA      CLEAR UPPER PRINT LINE AFTER
         MVC   TDOUTAR+80(52),=CL52' ' MOVING DATA TO PRINT LINE
         BAL   11,TDPRINT    PRINT A CARD
         B     CPLOOP        LOOP
         EJECT
*  CARD TO TAPE
         SPACE 1
CT       EQU   *
*  SET UP READER'S DCB AND DEB
         MVI   INMODSTK,X'41'
         MVI   INDEVT,X'43'
         MVC   D1(3),READER1       USE STANDARD ADDRESS
         BAL   14,UCBLOKUP
         ST    2,INDEBMOD    STORE UCB ADDRESS IN DEB
         MVC   INCCW(8),CP1CCW     SET UP READ CCW
*  SET UP TAPE'S DCB AND DEB
         BAL   10,TPOUTSET   DETERMINE WHICH TAPE UNIT AND SET UP
         MVC   OUTCCW+8(8),CTCCW   SET UP WRITE CCW
         SR    2,2           CLEAR A COUNTER
CTLOOP   EQU   *
         BAL   11,IOIN       READ A CARD
         CLI   INECB,X'7F'         EVERYTHING OK
         BE    CT1           YES, BRANCH
         TM    INSTAT+4,X'01'      EOF
         BC    1,CTEOJ1      YES, WRITE A TAPE MARK
         B     RDRERROR      READER ERROR, END THIS ROUTINE
CT1      EQU   *
         LA    2,1(2)        INCREMENT A COUNTER
         BAL   11,IOOUT      WRITE TO TAPE
         CLI   OUTECB,X'7F'        EVERYTHING OK
         BE    CTLOOP        YES, LOOP
         SPACE 1
*  IF OS CAN'T RECOVER FROM THE ERROR, I SURELY WON'T TRY
         B     TAPERR
CTEOJ1   EQU   *
         MVC   COUNT(6),=X'402020202020'     EDIT THE COUNTER
         CVD   2,TDWK
         ED    COUNT(6),TDWK+5
         LA    1,MESSAGE
         SVC   35      PRINT THE NUMBER OF CARDS THAT WENT TO TAPE
CTEOJ    EQU   *
         MVC   OUTCCW+8(8),WTCCW       SET UP WTM CCW
         OI    OUTCCW+12,X'60'     CHAIN IT TO A NOP
         MVC   OUTCCW+16(8),=X'0300000020000001'
         BAL   11,IOOUT      WRITE A TAPE MARK
         CLI   OUTECB,X'7F'        EVERYTHING OK
         BNE   TAPERR        NO, BRANCH
         B     ASKAGN
         EJECT
*  TAPE TO CARD,  JUST PUNCH THE FIRST 80 BYTES OF THE INPUT RECORD
         SPACE 1
TC       EQU   *
         BAL   10,TAPINSET         DETERMINE WHICH TAPE UNIT AND SET UP
         MVC   INCCW+8(8),TDINCCW  SET UP READ CCW
         MVI   OUTDEVT,X'43'       INITIALIZE PUNCH'S DCB
         MVI   OUTMDSTK,X'41'
         MVC   D1(3),PUNCH1        USE STANDARD ADDRESS
         BAL   14,UCBLOKUP
         ST    2,OUTDEBMD          STORE UCB ADDRESS IN DEB
         MVC   OUTCCW(8),CTCCW SET UP PUNCH CCW
TCLOOP   EQU   *
         BAL   11,IOIN       READ A RECORD
         CLI   INECB,X'7F'         EVERYTHING OK
         BE    TC1            YES, BRANCH
         TM    INSTAT+4,X'01'      EOF
         BC    1,ASKAGN            YES, END ROUTINE
         B     TAPERROR      TAPE ERROR, END ROUTINE
TC1      EQU   *
         BAL   11,IOOUT      PUNCH 80 BYTES OF RECORD
         CLI   OUTECB,X'7F'        EVERYTHING OK
         BE    TCLOOP        YES, LOOP
         B     PCHERROR      PUNCH ERROR, END ROUTINE
         EJECT
*  PRINT A TAPE
         SPACE 1
TP       EQU   *
*  TP USES THE TD ROUTINE WITHOUT THE HEX-TO-CHARACTER CONVERSION
         OI    TD3+1,X'F0'         SET SWITCHES IN TD
         OI    TD6+1,X'F0'
         SPACE 1
*  PRINT A TAPE IN HEX UNLESS SWITCHES SET BY TP
         SPACE 1
TD       EQU   *
         BAL   11,OPENPRNT   OPEN SYSPRINT IF NECESSARY
         BAL   11,SKIPTO1     SKIP TO CHANNEL 1
*  SET UP TAPE'S DCB AND DEB
         BAL   10,TAPINSET         DETERMINE WHICH TAPE UNIT AND SET UP
         MVC   INCCW+8(8),TDINCCW  SET UP READ CCW
         BAL   11,TDPRINT    PRINT THE HEADING LINE
         BAL   11,SPACE1      SPACE A LINE
         SP    RECCNT(3),RECCNT(3) CLEAR THE RECORD COUNTER
TDLOOP   EQU   *
         BAL   11,IOIN        READ A RECORD
         CLI   INECB,X'7F'         EVERYTHING OK
         BE    TD1           YES, BRANCH
         TM    INSTAT+4,X'01'      EOF
         BC    1,TDEOJ       YES, GO END ROUTINE
         SPACE 1
*  IF OS CAN'T RECOVER FROM THE ERROR, I SURELY WON'T TRY
         B     TAPERROR
TD1      LH    2,INSTAT+6          GET RESIDUAL COUNT
         LH    3,TDINCCW+6         GET BEGINING COUNT
         SR    3,2                 GET BYTES READ IN
         CVD   3,TDWK
         MVI   TDOUTAR,C' '        CLEAR PRINT LINE
         MVC   TDOUTAR+1(131),TDOUTAR
         MVC   TDOUTAR+102(23),RECHDG  SET UP LINE INFORMATION
         ED    TDOUTAR+119(6),TDWK+5
         AP    RECCNT(3),COND1(1)      INCREMENT RECORD COUNTER
         ED    TDOUTAR+105(6),RECCNT
         LA    2,TDAREA      GET READY FOR HEX CONVERSION
         LA    5,TDAREA
         LA    7,100
TD6      BC    0,TD7         SET TO BRANCH BY TP ROUTINE
*  R2 POINTS TO THE INPUT AREA
*  R5 POINTS TO THE OUTPUT AREA
         L     5,=A(TDAREA2)
         LA    7,50
         BAL   14,UNPK       GO CONVERT 50 BYTES TO 100 HEX
TD7      EQU   *
         CR    3,7           SHORT LINE TO BE PRINTED
         BL    TD3           YES, GO DO THE MOVE
         MVC   TDOUTAR(100),0(5)   ELSE DO 100 BYTE MOVE
TDPR     EQU   *
         BAL   11,TDPRINT     PRINT A LINE
         MVI   TDOUTAR,C' '        CLEAR OUTPUT AREA
         MVC   TDOUTAR+1(131),TDOUTAR
         SR    3,7           DECREMENT BLKSIZE
         BC    12,TD9         BRANCH IF BLOCK FINISHED
         AR    2,7            ELSE, INCREMENT COUNTERS
         AR    5,7
         B     TD6           AND LOOP
TD3      BC    0,TD4         SET TO BRANCH BY TP ROUTINE
         LR    11,3          GET REMAINDER OF DATA IN 11
         AR    11,3          DOUBLE IT BECAUSE IT'S UNPACKED
         BCTR  11,0          DECREMENT ONE FOR THE MOVE
         EX    11,MVCOML
         B     TDPR          GO PRINT SHORT LINE
TD4      EQU   *
         BCTR  3,0
         EX    3,MVCOML
         B     TDPR           GO PRINT SHORT LINE
MVCOML   MVC   TDOUTAR(0),0(5)        COMMON MOVE INSTRUCTION
UNPK     EQU   *             CONVERT 50 BYTES TO 100 BYTES HEX
         UNPK  0(15,5),0(8,2)
         UNPK  14(15,5),7(8,2)
         UNPK  28(15,5),14(8,2)
         UNPK  42(15,5),21(8,2)
         UNPK  56(15,5),28(8,2)
         UNPK  70(15,5),35(8,2)
         UNPK  84(15,5),42(8,2)
         UNPK  98(3,5),49(2,2)
         TR    0(100,5),TDPTABLE-240
         BR    14
TD9      EQU   *
         BAL   11,SPACE1     SPACE A LINE AFTER WHOLE BLOCKED
         B     TDLOOP
TDEOJ    EQU   *
         B     ASKAGN
         EJECT
*  TAPE TO TAPE COPY
         SPACE 1
TT       EQU   *
         BAL   10,TAPINSET    DETERMINE WHICH TAPE UNIT AND SET UP
         BAL   10,TPOUTSET    DETERMINE WHICH TAPE UNIT AND SET UP
         MVC   INCCW+8(8),TDINCCW  SET UP READ CCW
TTLOOP   EQU   *
         BAL   11,IOIN        READ A BLOCK
         CLI   INECB,X'7F'
         BE    TT1           EVERYTHING OK, BRANCH
         TM    INSTAT+4,X'01'
         BC    1,CTEOJ
         SPACE 1
*  IF OS CAN'T RECOVER FROM THE ERROR, I SURELY WON'T TRY
TAPERROR EQU   *
         WTO   'OEH708I INPUT TAPE ERROR - STOP'
         B     ASKAGN
TT1      LH    2,INSTAT+6          GET RESIDUAL COUNT
         LH    3,TDINCCW+6         GET BEGINNING COUNT
         SR    3,2           COMPUTE BYTES READ IN
         STH   3,TTCCWOUT+6        SET UP WRITE CCW
         MVC   OUTCCW+8(8),TTCCWOUT
         BAL   11,IOOUT      WRITE A BLOCK
         CLI   OUTECB,X'7F'        EVERYTHING OK
         BE    TTLOOP        YES, LOOP
         SPACE 1
*  IF OS CAN'T RECOVER FROM THE ERROR, I SURELY WON'T TRY
TAPERR   EQU   *
         WTO   'OEH709I OUTPUT TAPE ERROR - STOP'
         B     ASKAGN
         EJECT
RW       EQU   *
         BAL   10,TPOUTSET         DETERMINE WHICH TAPE UNIT AND SET UP
         MVC   OUTCCW+8(8),RWCCW   SET UP REWIND CCW
         OI    OUTCCW+12,X'60'     CHAIN IT TO A NOP
         MVC   OUTCCW+16(8),=X'0300000020000001'
         BAL   11,IOOUT            EXECUTE THE REWIND
         B     ASKAGN
         SPACE 3
WT       EQU   *
         BAL   10,TPOUTSET     DETERMINE WHICH TAPE UNIT AND SET UP
         B     CTEOJ         GO WRITE A TAPE MARK
         EJECT
*
*  SUBROUTINES USED BY THE SUBPROGRAMS CALLED BY ID
*
*  TEST TO SEE IF PRINTER HAS BEEN OPENED
         SPACE 1
OPENPRNT EQU   *
         TM    OPENSW,X'FF'
         BC    1,OPENOK
         OPEN (PRINT,(OUTPUT))
         OI    OPENSW,X'FF'
OPENOK   BR    11
         SPACE 3
*  COMMON PRINT ROUTINE
         SPACE 1
TDPRINT  EQU   *
         ST    11,SV11  SAVE REG 11
         MVI   TDA,C' '  SPACE 1 AND PRINT
         PUT   PRINT,TDA
         LH    1,C    INCREMENT LINE COUNTER
         LA    0,1(1)
         STH   0,C
         CH    0,CLIMIT  AT END OF PAGE
         LA    11,*+8
         BH    SKIPTO1
         L     11,SV11  RESTORE REG 11
         BR    11
         SPACE 1
*  SKIP PRINTER TO CHANNEL 1
         SPACE 1
SKIPTO1  EQU   *
         MVI   TDA,C'1'  SKIP TO 1 AND PRINT BLANKS
         MVI   TDOUTAR,C' '  BLANK PRINT LINE
         MVC   TDOUTAR+1(131),TDOUTAR
         PUT   PRINT,TDA
         SR    0,0
         STH   0,C  ZERO LINE COUNTER
         BR    11
         SPACE 1
*  SPACE PRINTER ONE LINE
         SPACE 1
SPACE1   EQU   *
         ST    11,SV11  SAVE REG 11
         MVI   TDA,C' '  SPACE 1 AND PRINT BLANKS
         MVI   TDOUTAR,C' '  BLANK PRINT LINE
         MVC   TDOUTAR+1(131),TDOUTAR
         PUT   PRINT,TDA
         LH    1,C      INCREMENT LINE COUNTER
         LA    0,1(1)
         STH   0,C
         CH    0,CLIMIT  END OF PAGE
         LA    11,*+8  LOAD RETURN ADDRESS IF BRANCHING
         BH    SKIPTO1  END OF PAGE, BRANCH
         L     11,SV11  RESTORE REG 11
         BR    11
         EJECT
*  ROUTINE TO CONVERT MM INTO A SET MODE COMMAND
         SPACE 1
CONVRTMM EQU   *
         STM   2,3,SAVEUM    SAVE WORK REGISTERS
         IC    2,MM+1        GET SECOND BYTE OF MM
         TM    MM+1,X'F0'    IS IT NUMERIC
         BC    1,MMMM1       YES, BRANCH
         AH    2,=H'9'       CONVERT ALPHA TO NUMERIC
MMMM1    SRDL  2,4           SAVE IT
         IC    2,MM          GET FIRST BYTE OF MM
         TM    MM,X'F0'      IS IT NUMERIC
         BC    1,MMMM2       YES, BRANCH
         AH    2,=H'9'       CONVERT ALPHA TO NUMERIC
MMMM2    SLDL  2,4
         STC   2,MM          PUT MM  BACK IN HEX
         LM    2,3,SAVEUM    RESTORE REGISTERS
         BR    14
SAVEUM   DS    2F
         SPACE 3
*  ROUTINE TO GET UCB ADDRESS WHEN GIVEN DEVICE ADDRESS
         SPACE 1
UCBLOKUP EQU   *
         IC    2,D1          GET CHANNEL
         TM    D1,C'0'      IS IT NUMERIC
         BC    1,*+8         YES, BRANCH
         AH    2,=H'9'       CONVERT ALPHA TO NUMERIC
         STC   2,D1          PUT IT BACK
         IC    2,D2          GET CNTL UNIT
         TM    D2,C'0'       IS IT NUMERIC
         BC    1,*+8         YES, BRANCH
         AH    2,=H'9'       CONVERT ALPHA TO NUMERIC
         STC   2,D2          PUT IT BACK
         IC    2,D3          GET UNIT
         TM    D3,C'0'    IS IT NUMERIC
         BC    1,*+8         YES, BRANCH
         AH    2,=H'9'       CONVERT ALPHA TO NUMERIC
         STC   2,D3          PUT IT BACK
         SPACE 2
*  UCB LOOK UP ALGORITHM
*
*    IECILK1 + CHNL ADDR = ADDRESS OF K
*    IECILK1 + CNTL UNIT + K = ADDRESS OF L
*    IECILK2 + 2 (DEV ADDR) + 2 L = ADDRESS OF UCB ADDRESS
*
         SPACE 2
         L     2,16          GET CVT POINTER
         L     3,36(0,2)           GET CVTILK1
         SR    4,4
         SR    5,5
         IC    4,D1                GET CHANNEL
         N    4,OF
         AR    4,3                 GET ADDR OF K IN 4
         IC    5,0(0,4)            GET K VALUE IN 5
         IC    4,D2                GET CONTROL UNIT
         N    4,OF
         AR    4,3
         AR    4,5                 GET ADDR OF L IN 4
         IC    5,0(0,4)            GET L VALUE IN 5
         L     3,40(0,2)           GET CVTILK2
         IC    4,D3                GET DEVICE
         N     4,OF
         AR    4,4                 DOUBLE DEVICE
         AR    4,3
         AR    4,5
         AR    4,5
         LH    2,0(0,4)            GET UCB ADDR IN 2
         CLI   2(2),X'FF'    IS IT A UCB
         BNE   BADEVICE      NO, TELL OPERATOR
         BR    14
         SPACE 3
*  ROUTINE TO ASK FOR THE INPUT TAPE
         SPACE 1
TAPINSET EQU   *
         WTOR  'OEH712D REPLY INPUT TAPE - MMXXX',MM,5,REPLYECB
         BAL   11,WAITAPE    WAIT FOR A REPLY AND SET UP MODE
         MVC   INTRTCH(1),MM       SET UP TAPE'S DCB
         MVI   INDEVT,X'81'
         CLI   18(2),X'80'       IS IT A TAPE (2 POINTS TO UCB)
         BNE   TPINBD
         TM    3(2),X'08'        IS IT ALLOCATED ELSEWHERE
         BC    1,TPINBD
         ST    2,INDEBMOD          STORE UCB ADDRESS IN DEB
         MVC   INDEBMOD(1),MM      PUT SET MODE CMD IN DEB
         OI    INIOB,X'40'         SET ON CHAINING
         MVC   INCCW(1),MM       PUT SET MODE IN CCW
         MVC   INCCW+1(7),=X'00000060000001'
         BR    10
TPINBD   EQU   *
         WTO   'OEH720I INVALID DEVICE OR IT IS ALLOCATED'
         B     TAPINSET
         SPACE 3
*  ROUTINE TO ASK FOR THE OUTPUT TAPE
         SPACE 1
TPOUTSET EQU   *
         WTOR  'OEH713D REPLY OUTPUT TAPE - MMXXX',MM,5,REPLYECB
         BAL   11,WAITAPE    WAIT FOR REPLY  AND SET UP MM
         MVC   OUTTRTCH(1),MM
         MVI   OUTDEVT,X'81'
         CLI   18(2),X'80'       IS IT A TAPE
         BNE   TPOUTBD
         TM    3(2),X'08'        IS IT ALLOCATED ELSEWHERE
         BC    1,TPOUTBD
         ST    2,OUTDEBMD          STORE UCB ADDRESS IN DEB
         MVC   OUTDEBMD(1),MM
         OI    OUTIOB,X'40'      SET ON CHAINING FLAG
         MVC   OUTCCW(1),MM      BUILD SET MODE COMMAND
         MVC   OUTCCW+1(7),=X'00000060000001'
         BR    10
TPOUTBD  EQU   *
         WTO   'OEH720I INVALID DEVICE OR IT IS ALLOCATED'
         B     TPOUTSET
         SPACE 3
*  COMMON I/O ROUTINE FOR OUTPUT
         SPACE 1
IOOUT    EQU   *
         XC    OUTECB(4),OUTECB
         EXCP  OUTIOB
         WAIT  ECB=OUTECB
         NI    OUTDCB+44,X'3F'
         BR    11
         SPACE 3
*  COMMON I/O ROUTINE FOR INPUT
         SPACE 1
IOIN     EQU   *
         XC    INECB(4),INECB
         EXCP  INIOB
         WAIT  ECB=INECB
         NI    INDCB+44,X'3F'
         BR    11
         SPACE 3
*  COMMON WAIT FOR ALL REPLIES
WAITANS  EQU   *
         WAIT  ECB=REPLYECB  CHANGED FROM WAITR
         XC    REPLYECB(4),REPLYECB
         BR    11
         SPACE 3
*  ROUTINE TO WAIT ON THE REPLY AND CONVERT THE MM INTO A SET MODE
WAITAPE  EQU   *
         WAIT  ECB=REPLYECB
         XC    REPLYECB(4),REPLYECB
         OC    MM(5),=C'     '     MAKE ALL CAPS
         CLC   MM(3),=C'EOJ'
         BE    ASKAGN
         MVC   TDOUTAR(5),MM  GET MMXXX FOR PRINTING ON LISTING
         MVI   TDOUTAR+5,C' '
         MVC   TDOUTAR+6(126),TDOUTAR+5
         MVC   TDOUTAR+5(24),=CL24' - MMXXX FOR INPUT TAPE.'
         MVC   TDOUTAR+50(47),=CL47'*** THIS IS NOT A DATA RECORD FROM X
               THE TAPE ***'
         BAL   14,CONVRTMM
         OI    MM,X'03'            SET MODE COMMAND NOW IN MM
         EJECT
         MVC   D1(3),XXX
         BAL   14,UCBLOKUP
         BR    11
         SPACE  3
BADEVICE EQU   *
         WTO   'OEH711I INVALID DEVICE'
         B     ASKAGN
         SPACE 1
APPEND   BR    14
         EJECT
*  SEE THE OS SYSTEM CONTROL BLOCKS MANUAL FOR THE FORMATS OF THE
*  FOLLOWING DCB'S, DEB'S, ECB'S, AND IOB'S.
*  DCB FOR INPUT DATA SET
         SPACE 1                       INDCB    DS    0F
         DC    4F'0'
INTRTCH  EQU   *
INMODSTK EQU   *
         DC    X'00'
INDEVT   DC    X'00'
INDENS   DC    X'00'
         DC    X'00'
         DC    5F'0'
         DC    H'0'
         DC    BL2'1101000000001000'
         DC    A(INDEB)
         DC    X'10000000'
         DC    5F'0'
         SPACE 1                       *  DEB FOR INPUT DATA SET
         SPACE 1                       INIOVEC  EQU   *
         DC    A(APPEND)
         DC    A(APPEND)
         DC    A(APPEND)
         DC    A(APPEND)
         DC    A(APPEND)
         DC    3F'0'
         DC    X'06000000'
INDEB    DS    0F
         DC    F'0'
         DC    X'04'
         DC    AL3(OUTDEB)
         DC    X'C0000000'
         DC    X'30000000'
         DC    2F'0'
         DC    X'0F'
         DC    AL3(INDCB)
         DC    X'02'
         DC    AL3(INIOVEC)
INDEBMOD DC    X'00'
INDEBUCB DC    X'000000'
         DC    F'0'
         SPACE 1                       9
*  ECB FOR INPUT DATA SET
         SPACE 1                       9
INECB    DC    F'0'
         SPACE 1
*  IOB FOR INPUT DATA SET
         SPACE 1
INIOB    DS    0F
         DC    X'0200'
INSENS   DC    H'0'
         DC    X'7F'
         DC    AL3(INECB)
INSTAT   DC    2F'0'
         DC    A(INCCW)
         DC    A(INDCB)
         DC    F'0'
         DC    H'1'
         DC    H'0'
INDASD   DC    X'00'
INSEEK   DC    XL7'00'
         SPACE 1
*  CCW'S FOR INPUT DATA SET
         SPACE 1
INCCW    DS    5D
         SPACE 3
*  DCB FOR OUTPUT DATA SET
         SPACE 1
OUTDCB   DS    0F
         DC    4F'0'
OUTTRTCH EQU   *
OUTMDSTK EQU   *
         DC    X'00'
OUTDEVT  DC    X'00'
OUTDENS  DC    X'00'
         DC    X'00'
         DC    5F'0'
         DC    H'0'
         DC    BL2'1101000000001000'
         DC    A(OUTDEB)
         DC    X'10000000'
         DC    5F'0'
         SPACE 1
*  DEB FOR OUTPUT DATA SET
         SPACE 1
OUTIOVEC EQU   *
         DC    A(APPEND)
         DC    A(APPEND)
         DC    A(APPEND)
         DC    A(APPEND)
         DC    A(APPEND)
         DC    3F'0'
         DC    X'06000000'
OUTDEB   DS    0F
         DC    F'0'
         DC    X'17000000'
         DC    X'C0000000'
         DC    X'30000000'
         DC    2F'0'
         DC    X'0F'
         DC    AL3(OUTDCB)
         DC    X'02'
         DC    AL3(OUTIOVEC)
OUTDEBMD DC    X'00'
OUTDBUCB DC    X'000000'
         DC    F'0'
         SPACE 1
*  ECB FOR OUTPUT DATA SET
         SPACE 1
OUTECB   DC    F'0'
         SPACE 1
*  IOB FOR OUTPUT DATA SET
         SPACE 1
OUTIOB   DS    0F
         DC    XL2'0200'
OUTSENS  DC    H'0'
         DC    X'7F'
         DC    AL3(OUTECB)
OUTSTAT  DC    2F'0'
         DC    A(OUTCCW)
         DC    A(OUTDCB)
         DC    F'0'
         DC    H'1'
         DC    H'0'
OUTDASD  DC    X'00'
OUTSEEK  DC    XL7'00'
         SPACE 1
*  CCW'S FOR OUTPUT DATA SET
         SPACE 1
OUTCCW   DS    5D
         SPACE 3
*  CONSTANTS AND CCW'S      * * * * * * * * * * * * * * * * * * * * *
         SPACE 3
READER1  DC    CL3'00C'      CHANGED FROM '00C'
PUNCH1   DC    CL3'00D'      CHANGED FROM '00D'
         SPACE 3
BFCCW    CCW   X'2F',SFCCW,X'60',1
BSCCW    CCW   X'27',BSCCW,X'60',1
CP1CCW   CCW   X'42',TDAREA,X'20',80
CP2CCW   CCW   9,TDAREA,X'20',80
CTCCW    CCW   X'41',TDAREA,X'20',80
TCCCW    CCW   X'C1',TDAREA,X'20',80    FOR 1442 - EJECT AND SS2
RWCCW    CCW   7,RWCCW,X'20',1
SFCCW    CCW   X'3F',SFCCW,X'60',1
SRCCW    CCW   X'37',BSCCW,X'60',1
TDINCCW  CCW   2,TDAREA,X'20',32767
TTCCWOUT CCW   1,TDAREA,X'20',32767
WTCCW    CCW   31,TDAREA,X'20',1
         SPACE 3
OPENSW   DC    X'00'
         SPACE 1
PRINT    DCB   DDNAME=SYSPRINT,MACRF=PM,DSORG=PS,RECFM=FA,LRECL=133,   X
               BLKSIZE=133
TDWK     DS    D
SAVEAREA DC    18F'0'
TDPTABLE DC    C'0123456789ABCDEF'
         DS    0F
MESSAGE  DC    AL2(THERE-*)     MESSAGE LENGTH
         DC    AL2(0)
         DC    C'OEH719I '
         DC    C' RECORDS PROCESSED - '
COUNT    DC    C'NUMBER '
THERE    EQU   *
D1       DC    C'0'
D2       DC    C'0'
D3       DC    C'0'
ID       DC    C'00'
MM       DC    C'00'
XXX      DC    C'000'
OF       DC    F'15'
REPLYECB DC    F'0'
TDA      DS    CL1
TDOUTAR  DS    CL132
RECCNT   DC    X'00000F'
COND1    DC    X'1F'
RECHDG   DC    C'REC '
         DC    X'2020202020'
         DC    C', LENGTH '
         DC    X'2020202020'
C        DC    H'0'
CLIMIT   DC    H'58'
SV11     DS    F
         SPACE 3
         LTORG
         SPACE 3
TDAREA   DS    80CL250
         DS    40CL250
         DS    28CL100    32800 BYTES
TDAREA2  DS    CL101
         END   OSDEBE
