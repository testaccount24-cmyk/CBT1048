UT492    START 0
         SPACE 1
***********************************************************************
*                                                                     *
*        PROGRAM ID. :             UT492                              *
*        DATE WRITTEN :            FEBRUARY, 1975                     *
*        LOCATION :                EUROPEAN COMPUTER CENTER           *
*        AUTHOR :                  J. NOLS                            *
*                                                                     *
*              ===================================                    *
*                                                                     *
*                                                                     *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*        REGISTERS EQUATES AND USAGE                                  *
***********************************************************************
         SPACE 1
R0       EQU   0    SVC COMMUNICATIONS AND WORK REGISTER
R1       EQU   1    SVC COMMUNICATIONS AND WORK REGISTER
R2       EQU   2    WORK REGISTER
R3       EQU   3    WORK REGISTER
R4       EQU   4    WORK REGISTER
R5       EQU   5    WORK REGISTER
R6       EQU   6    WORK REGISTER
R7       EQU   7   --------------- FREE
R8       EQU   8   --------------- FREE
R9       EQU   9    WORK REGISTER
R10      EQU   10   WORK REGISTER
R11      EQU   11   WORK REGISTER
R12      EQU   12   WORK REGISTER
R13      EQU   13   SAVE AREA POINTER / BASE REGISTER
R14      EQU   14   BALR RETURN ADDRESS
R15      EQU   15   BALR ROUTINE ADDRESS / RETURN CODE OF LOCATE MACRO
         SPACE 2
***********************************************************************
*        HOUSEKEEPING                                                 *
***********************************************************************
         SPACE 1
         PGMIN EQUATES=NO,USING=(R13)  ESTABLISH ADDRESSABILITY
         USING FROMUSER,R9
         SPACE 1
         PRINT NOGEN               SUPPRESS MACRO EXPANSION
         SPACE 1
         EJECT
***********************************************************************
*        TEST OPERATION CODE FROM CALLING PROGRAM                     *
***********************************************************************
         SPACE 1
         L     R9,0(R1)            STORE ADDRESS OF WA OF CALLING PGM
S        B     FITI                SWITCH
         LM    R2,R12,SAVAREG      RESTORE REGS
FITI     MVI   S+1,X'00'            FIRST TIME
         L     R1,EXCORAD          LOAD ADDRESS OF AREA GETMAINED
         LTR   R1,R1               TEST IF AREA HAS BEEN GETMAINED
         BZ    NGM                 BRANCH IF NO
         L     R0,LENNIX           YES - LOAD LENGTH OF AREA GETMAINED
         FREEMAIN R,LV=(0),A=(1)
         XC    EXCORAD,EXCORAD     ZEROISE EXTRA CORE ADDRESS
NGM      CLI   OPCODE,C'S'         TEST IF OPERATION CODE = 'S'
         BE    OPCDS               BRANCH IF YES
         CLI   OPCODE,C'R'         TEST IF OPERATION CODE = 'R'
         BE    OPCDR               BRANCH IF YES
         MVC   OPCODE+1(66),OPCODE
         MVI   NEXREAD,NO          SET NEXT READ INDICATOR TO NO
         B     RTCDE12
OPCDS    MVC   NDS,DSNINX          STORE DSN OR INDEX NAME
         MVC   NDS2,DSNINX         STORE DSN OR INDEX NAME
         MVC   NCVOL,CVOLNO         WITH CVOL.NO
         BAL   R4,CLEAR
         CLC   ALLCATLG,NDS        TEST IF INDEX NAME = 'ALLCATLG'
         BNE   TESTINX             BRANCH IF NO
         CLI   NCVOL,BLANK         TEST IF CVOL NO IS BLANK
         BE    GETCVOL             BRANCH IF YES
         MVC   TSYSCTLG+1(6),NCVOL NO - REPLACE THE SYSRES VOLUME
         B     GETCVOL              BY THE CVOL OF USER PGM
TESTINX  LOCATE INXSPEC1
         LTR   R15,R15             TEST IF RETURN CODE = 0
         BNZ   NCT                 BRANCH IF NO
         CLC   NDS2(9),=C'SYSCTLG.V' MUST BE CATALOGED ON CVOL
         BE    OKC                 BRANCH IF YES
         DC    X'0000',C'ERROR OF LOGIC IN UT492, SEE PGM'
OKC      MVC   NCVOL,BLOCKWA+6
         LOCATE INXSPEC2
         LTR   R15,R15             TEST IF D/S REQUEST
         BZ    DSREQUES            BRANCH IF YES
         C     R15,=F'12'
         BNE   NCT
         LA    R5,1
         LA    R6,43
         LA    R3,NDS+1            LOAD ADDRESS OF NAME Q1
LTL      CLI   0(R3),BLANK
         BE    LF
         LA    R3,1(R3)
         LA    R5,1(R5)
         BCT   R6,LTL
LF       ST    R5,LENIX
         B     TP15A
         EJECT
DSREQUES LH    R5,BLOCKWA          LOAD VOLUME COUNT INTO R5
         MVC   NCVOL,BLOCKWA+259   MOVE CVOL NO
         MVC   NUMBVOL,BLOCKWA     MOVE NUMBER OF VOLUMR
         CH    R5,=H'5'            TEST IF MORE THAN 5 VOLUMES
         BH    MIND                BRANCH IF YES
         MH    R5,TWELVE+2         MULTIPLY BY 12
         BCTR  R5,0                DECREMENT FOR EXECUTE INSTRUCTION
         EX    R5,MVCVOLS1         EXECUTE MOVE INSTRUCTION
         B     COMMON
MIND     MVC   VOLIST,BLOCKWA+2    MOVE FIVE FIRST VOLS-INFO'S
         SH    R5,=H'5'            SUB FIVE TO VOLUME COUNT
         MH    R5,TWELVE+2         MULTIPLY BY 12
         ST    R5,LENNIX           STORE LENGTH
         LR    R0,R5
         GETMAIN R,LV=(0)
         ST    R1,ADVOLIST         STORE ADDRESS OF AREA GETMAINED
         ST    R1,EXCORAD          STORE ADDRESS OF AREA GETMAINED
         CH    R5,=H'180'          TEST IF LENGTH IS GREATER THAN 180
         BH    STEX                BRANC  IF YES
         BCTR  R5,0                DECREMENT LENGTH FOR EXECUTE INSTRU.
         EX    R5,MVCVOLS2         EXECUTE MOVE INSTRUCTION
         B     COMMON
STEX     MVC   0(180,R1),BLOCKWA+62 MOVE REST OF VOLUME LIST FOR THIS B
         LA    R1,180(R1)          INCREMENT POINTER FOR NEXT MOVE
LVCBP2   CLC   BLOCKWA+252(3),TTR0 TEST IF LAST VCBP FOR THE CURRENT DS
         BE    COMMON              BRANCH IF YES
         MVC   TTR,BLOCKWA+252     NO - MOVE TTR OF NEXT VCBP
         LR    R5,R1               SAVE V-R1
         BAL   R4,READABLK         PERFORM READ A CATALOG BLOCK
         LR    R1,R5               RESTORE V-R1
         MVC   VCO,BLOCKWA         MOVE VOLUME COUNT
         CLC   VCO,TWENTY+2        TEST IF VOL.COUNT IS GREATER THAN 20
         BNL   MV20                BRANCH IF YES
         L     R5,TWELVE           LOAD LENGTH OF ONE VOL. INFO S
         MH    R5,VCO              MULTIPLY BY VOLUME COUNT
         BCTR  R5,0                DECREMENT ONE FOR EXECUTE INST.
         EX    R5,MVCVOLS3         EXECUTE MOVE INSTRUCTION
         B     COMMON
MV20     MVC   0(240,R1),BLOCKWA+2 MOVE TWENTY VOLS INFO'S
         LA    R1,240(R1)          INCREMENT POINTER FOR NEXT MOVE
         B     LVCBP2
COMMON   MVC   DSNINX,NDS          MOVE DSNAME OR INDEX NAME
         MVC   CVOLNO,BLOCKWA+259  MOVE CVOL
         LA    R5,DEVTAB           LOAD ADDRESS OF TABLE DEVICE CODE-NA
         ST    R5,ADRDVTAB         STORE TO WA OF CALLING PGM
         B     NBR
         SPACE 1
MVCVOLS1 MVC   VOLIST(0),BLOCKWA+2
MVCVOLS2 MVC   0(0,R1),BLOCKWA+62
MVCVOLS3 MVC   0(0,R1),BLOCKWA+2
         SPACE 2
RETURN   SUBIN SAVE=(R4)
         MVI   RTCODE,X'00'        TELL OF SUCCESSFUL
         MVI   NEXREAD,YES         SET NEXT READ INDICATOR TO 'Y'
         B     *+8
RETOCALL MVI   NEXREAD,NO          SET NEXT READ INDICATOR TO  N'
         STM   R2,R12,SAVAREG      STORE REGS
         PGMOUT ,                  RETURN TO CALLER
OPCDR    CLI   NEXREAD,NO          TEST IF NEXT READ INDICATOR = 'N
         BE    RTCDE12
         SUBOUT RESTORE=(R4)
         SPACE 1
NCT      MVI   RTCODE,X'04'        SET RETURN CODE TO '4'
         B     RETOCALL
NBR      MVI   RTCODE,X'08'        SET RETURN CODE TO '8'
         B     RETOCALL
RTCDE12  MVI   RTCODE,X'0C'        SET RETURN CODE TO '12'
         B     RETOCALL
         EJECT
***********************************************************************
*                                                                     *
***********************************************************************
         SPACE 1
GETCVOL  L     R5,ATSCTLG          ADDRESS FIRST VOL SER FOR SYSCTLG -7
         LA    R5,7(R5)            INCREMENT SEVEN
         ST    R5,ATSCTLG          SAVE ADDRESS
         CLC   0(2,R5),ENDTSYSC    TEST IF END OF TABLE VOL SER SYSCTLG
         BE    NBR
         MVC   NCVOL,1(R5)         STORE VOL.SER.
         MVC   CVOLNO,1(R5)        MOVE VOL SER
         MVC   TTR,FIRSTTR         MOVE TTR'000001' FOR FIRST READ
         BAL   R4,READABLK         PERFORM READ A CATALOG BLOCK
         SR    R5,R5               CLEAR
         IC    R5,13(R2)           LOAD NO OF HW LEFT FOR V.I.C.E.
         SLL   R5,1                MULT BY 2
         LA    R10,14(R5,R2)       ADDRESS OF THE FIRST ENTRY
         B     NEXTENT
         SPACE 1
TP15A    LA    R2,BLOCKWA          LOAD ADDRESS OF BLOCWA
         LA    R10,20(R2)
         MVC   TTR,14(R2)
         MVC   CVOLNO,259(R2)
         MVC   NCVOL,259(R2)       STORE VOL. SER.
         SPACE 1
NEXTENT  BAL   R4,ILE              PERFORM TEST INDEX LINK ENTRY
         CLI   NORY,NO             IS IT A INDEX LINK ENTRY
         BE    TENTRY              NO  - GO TO TEST ENTRY
         CLI   TTRSW,ON            IS IT END OF THIS CATALOG
         BNE   CAC                 NO
         CLC   ALLCATLG,NDS        TEST IF INDEX NAME = 'ALLCATLG'
         BE    GETCVOL
         B     NBR
CAC      EQU   *
         BAL   R4,READABLK         PERFORM READ A CATALOG BLOCK
         LA    R10,2(R2)           IGNORE TWO FIRST BYTES
         EJECT
***********************************************************************
*        TEST TYPE OF ENTRY FROM THE CATALOG BLOCK                    *
***********************************************************************
         SPACE 1
TENTRY   LA    R4,NEXTENT          GET ADDRESS FOR RETURN
         CLC   ALLCATLG,NDS        TEST IF INDEX NAME = 'ALLCATLG'
         BE    TP15D
         MVC   DSNINX,NDS
         L     R5,LENIX
         LA    R12,DSNINX(R5)
         MVI   0(R12),C'.'
         LA    R12,1(R12)
         B     TP15E
TP15D    LA    R12,DSNINX
TP15E    EQU   *
         CLI   11(R10),TIPE        IS IT AN INDEX POINTER ENTRY
         BE    IPE                 YES - GO TO IPE
         CLI   11(R10),TVCBPE      IS IT A VOLUME CTRL BLOCK P. ENTRY
         BE    VCBPE               YES - GO TO VCBPE
         CLI   11(R10),TGIPE       IS IT A GENERATION INDEX POINT.ENTRY
         BE    GIPE                YES - GO TO GIPE
         CLI   11(R10),TCVPE       IS IT A CONTROL VOLUME POINTER ENTRY
         BE    CVPE                YES - GO TO CUPE
         CLI   11(R10),TAE         IS IT AN ALIAS ENTRY
         BE    AE                  YES - GO TO AE
         CLI   11(R10),TNCVPE      IS IT A NEW CONTROL VOLUME P. ENTRY
         BE    NCVPE               YES - GO TO NCVPE
         CLI   11(R10),TDSPEMIN    TEST IF THE HW LEFT IS < 7
         BL    ERRENT1             YES - ERROR
         CLI   11(R10),TDSPEMAX    TEST IF THE HW LEFT IS > 61
         BH    ERRENT1             YES - ERROR
         B     DSPE                GOTO DATA SET POINTER ENTRY
         EJECT
***********************************************************************
*        READ CATALOG BLOCK ROUTINE                                   *
***********************************************************************
         SPACE 1
READABLK SUBIN PREFIX=A,SAVE=(R4)
         LOCATE INDEXBLK
         LTR   R15,R15             TEST IF CONDITION CODE IS ZERO
         BNZ   ERROR               NO  - BRANCH TO ERROR ROUTINE
         LA    R2,BLOCKWA
         SUBOUT PREFIX=A,RESTORE=(R4)   YES
         SPACE 3
***********************************************************************
*        INDEX LINK ENTRY ROUTINE                                     *
***********************************************************************
         SPACE 1
ILE      SUBIN PREFIX=B,SAVE=(R4)
         MVI   NORY,NO
         MVI   TTRSW,OFF
         CLC   0(8,R10),ILENAME    TEST IF INDEX LINK ENTRY
         BNE   ENDILER             NO  - GO TO ENDILER
         MVI   NORY,YES            YES
         MVC   TTR,8(R10)          MOVE TTR OF THIS ILE FOR NEXT READBL
         CLC   8(3,R10),TTR0       TEST IF TTR OF THIS ILE = 0
         BNE   ENDILER             NO  - GO TO ENDILER
         MVI   TTRSW,ON            YES
ENDILER  SUBOUT PREFIX=B,RESTORE=(R4)
         EJECT
***********************************************************************
*        INDEX POINTER ENTRY ROUTINE                                  *
***********************************************************************
         SPACE 1
IPE      SUBIN PREFIX=C,SAVE=(R4)
         LA    R3,TABINDEX         GET ADDRESS TABLE INDEX
         MVI   0(R3),X'AA'         FIRST ELEMENT
MULTIPE  MVC   1(3,R3),TTR         SAVE TTR
         ST    R10,4(R3)           SAVE R10
         ST    R12,8(R3)           SAVE R12
         LA    R3,12(R3)           INCREMENT 12
         MVC   0(8,R12),0(R10)     MOVE NAME TO RECOUT
         MVI   FLAG,FLAGINX        MOVE FLAG INDEX TO RECOUT
         LR    R11,R12
         BAL   R4,PUTPOINT         PERFORM PUTPOINT ROUTINE
         LR    R12,R11
         BAL   R4,WRITE            PERFORM PRINT ROUTINE
         MVC   TTR,8(R10)          MOVE TTR FROM THIS IPE
         BAL   R4,READABLK         PERFORM READ A CATALOG BLOCK
         LA    R10,20(R2)          GET ADDRESS FIRST ENTRY
         B     LOOPIPE2
LOOPIPE1 BAL   R4,READABLK         PERFORM READ A CATALOG BLOCK
LOOPIPE2 BAL   R4,ILE              PERFORM TEST INDEX LINK ENTRY
         CLI   NORY,NO             IS IT A INDEX LINK ENTRY
         BE    TIPENT              NO - GO TO TEST THIS ENTRY
         CLI   TTRSW,ON            IS IT END OF THIS INDEX
         BE    ENDIPE              YES
         BAL   R4,READABLK         PERFORM READ A CATALOG BLOCK
         LA    R10,2(R2)
         B     LOOPIPE2
TIPENT   LA    R4,LOOPIPE2         GET ADDRESS FOR RETURN
         CLI   11(R10),TIPE        IS IT AN INDEX POINTER ENTRY
         BE    MULTIPE             YES - GO TO MULTIPE
         CLI   11(R10),TVCBPE      IS IT A VOLUME CTRL BLOCK P. ENTRY
         BE    VCBPE               YES - GO TO VCBPE
         CLI   11(R10),TGIPE       IS IT A GENERATION INDEX POINT.ENTRY
         BE    GIPE                YES - GO TO GIPE
         CLI   11(R10),TDSPEMIN    TEST IF THE HW LEFT IS < 7
         BL    ERRENT2             YES - ERROR
         CLI   11(R10),TDSPEMAX    TEST IF THE HW LEFT IS > 61
         BH    ERRENT2             YES - ERROR
         B     DSPE                GOTO DATA SET POINTER ENTRY
ENDIPE   S     R3,TWELVE           SUBTRACT TWELVE
         MVC   TTR,1(R3)           RESTORE TTR
         L     R10,4(R3)           RESTORE R10
         L     R12,8(R3)           RESTORE R12
         MVI   0(R12),BLANK          ** CLEAR WA
         MVC   1(8,R12),0(R12)       ** RECOUT
         LA    R10,12(R10)         GET ADDRESS FOR NEXT ENTRY
         CLI   0(R3),X'AA'         IS IT END OF TABLE
         BNE   LOOPIPE1            NO
         BAL   R4,READABLK         PERFORM READ A CATALOG BLOCK
         SUBOUT PREFIX=C,RESTORE=(R4)
         EJECT
***********************************************************************
*        GENERATION INDEX POINTER ENTRY ROUTINE                       *
***********************************************************************
         SPACE 1
GIPE     SUBIN PREFIX=D,SAVE=(R4)
         MVC   0(8,R12),0(R10)     MOVE NAME TO RECOUT
         MVI   FLAG,FLAGGINX       MOVE FLAG GEN. INDEX TO RECOUT
         MVC   CURGENC(2),14(R10)  MOVE CURRENT GEN COUNT TO RECOUT
         MVC   GDGFLAG(2),12(R10)  MOVE GDG FLAG AND MAX.GEN.ALLOWED
         MVC   GISAVTTR,TTR        SAVE TTR
         ST    R10,GISAVR10        SAVE R10
         ST    R12,GISAVR12        SAVE R12
         LR    R11,R12
         BAL   R4,PUTPOINT         PERFORM PUTPOINT ROUTINE
         LR    R12,R11
         BAL   R4,WRITE            PERFORM PRINT ROUTINE
         MVC   TTR,8(R10)          MOVE TTR FROM THIS GIPE
         BAL   R4,READABLK         PERFORM READ A CATALOG BLOCK
         LA    R10,20(R2)          GET ADDRESS OF FIRST ENTRY
LOOPGIPE BAL   R4,ILE              PERFORM TEST INDEX LINK ENTRY
         CLI   NORY,NO             IS IT A INDEX LINK ENTRY
         BE    TGIPENT             NO - GO TO TEST THIS ENTRY
         CLI   TTRSW,ON            IS IT END OF THIS INDEX
         BE    ENDGIPE             YES
         BAL   R4,READABLK         PERFORM READ A CATALOG BLOCK
         LA    R10,2(R2)
         B     LOOPGIPE
TGIPENT  LA    R4,LOOPGIPE         GET ADDRESS FOR RETURN
         CLI   11(R10),TVCBPE      IS IT A VOLUME CTRL BLOCK P. ENTRY
         BE    VCBPE               YES - GO TO VCBPE
         CLI   11(R10),TDSPEMIN    TEST IF THE HW LEFT IS < 7
         BL    ERRENT3             YES - ERROR
         CLI   11(R10),TDSPEMAX    TEST IF THE HW LEFT IS > 61
         BH    ERRENT3             YES - ERROR
         B     DSPE                GO TO DATA SET POINTER ENTRY
ENDGIPE  BCTR  R12,R0
         MVC   TTR,GISAVTTR        RESTORE TTR
         L     R10,GISAVR10        RESTORE R10
         L     R12,GISAVR12        RESTORE R12
         MVI   0(R12),BLANK
         MVC   1(8,R12),0(R12)
         BAL   R4,READABLK         PERFORM READ A CATALOG BLOCK
         LA    R10,16(R10)         GET ADDRESS FOR NEXT ENTRY
         SUBOUT PREFIX=D,RESTORE=(R4)
         EJECT
***********************************************************************
*        CONTROL VOLUME POINTER ENTRY AND                             *
*                   NEW C.V.P.E. ROUTINE                              *
***********************************************************************
         SPACE 1
NCVPE    MVC   CVPDEVCD,12(R10)    MOVE DEVICE CODE
         MVC   12(6,R10),16(R10)   ADJ VOL SER
CVPE     SUBIN PREFIX=E,SAVE=(R4)
         MVC   DSNINX(8),0(R10)    MOVE NAME TO RECOUT
         MVI   FLAG,FLAGCVOL       MOVE FLAG CVOL TO RECOUT
         MVC   CVPVOLS,12(R10)     MOVE VOL SER
         BAL   R4,WRITE            PERFORM PRINT ROUTINE
         MVI   DSNINX,BLANK        CLEAR
         MVC   DSNINX+1(7),DSNINX   WA
         LA    R5,5                LOAD 5 (MAX. OF VOL FOR SYSCTLG)
         LA    R6,TSYSCTLG         GET ADDRESS TABLE OF VOL. FOR SYSCTG
LOOPCVPE CLC   1(6,R6),12(R10)     TEST IF THE VOL SER OF THIS ENTRY
         BE    ENDCVPE             YES              / IS IN TABLE
         CLC   0(2,R6),ENDTSYSC    TEST IF THE SPACE OF THIS ELEMENT IS
         BE    PINTAB              YES                        / FREE
         LA    R6,7(R6)            NO
         BCT   R5,LOOPCVPE
         B     ERRCVTAB            YES - ERROR
PINTAB   MVC   1(6,R6),12(R10)     MOVE NEW CVOL IN TABLE
ENDCVPE  SR    R5,R5               CLEAR
         IC    R5,11(R10)          LOAD NO OF HW LEFT
         SLL   R5,1                MULT BY 2
         LA    R10,12(R5,R10)      GIVE ADDRESS FOR NEXT ENTRY
         SUBOUT PREFIX=E,RESTORE=(R4)
         SPACE 2
***********************************************************************
*        ALIAS ENTRY ROUTINE                                          *
***********************************************************************
         SPACE 1
AE       SUBIN PREFIX=F,SAVE=(R4)
         MVC   DSNINX(8),0(R10)    MOVE ALIAS NAME TO RECOUT
         LA    R11,DSNINX
         BAL   R4,PUTPOINT         PERFORM PUTPOINT ROUTINE
         MVC   1(8,R11),=C'ALIAS OF'
         LA    R11,10(R11)         ADD 10
         MVC   0(8,R11),12(R10)    MOVE TRUE NAME TO RECOUT
         BAL   R4,PUTPOINT         PERFORM PUTPOINT ROUTINE
         MVI   FLAG,FLAGALS        MOVE FLAG ALIAS TO RECOUT
         BAL   R4,WRITE            PERFORM PRINT ROUTINE
         MVI   DSNINX,BLANK        CLEAR
         MVC   DSNINX+1(43),DSNINX  WA
         LA    R10,20(R10)         GIVE ADDRESS FOR NEXT ENTRY
         SUBOUT PREFIX=F,RESTORE=(R4)
         EJECT
***********************************************************************
*        VOLUME CONTROL BLOCK POINTER ENTRY ROUTINE                   *
***********************************************************************
         SPACE 1
VCBPE    SUBIN PREFIX=G,SAVE=(R4)
         MVC   0(8,R12),0(R10)     MOVE NAME TO RECOUT
         MVI   FLAG,FLAGDS         MOVE FLAG DATA SET TO RECOUT
         MVC   VCSAVTTR,TTR        SAVE TTR
         ST    R10,VCSAVR10        SAVE R10
         MVC   TTR,8(R10)          MOVE TTR FROM THIS VCBPE
         BAL   R4,READABLK         PERFORM READ A CATALOG BLOCK
         MVC   NUMBVOL(62),0(R2)   STORE VOL.COUNT AND FIVE FIRST VOLS
         LH    R0,NUMBVOL          LOAD VOL.COUNT INTO R0
         SH    R0,=H'5'            SUB FIVE
         MH    R0,TWELVE+2         MULT BY 12 = L' TO BE GETMAINED
         ST    R0,LENNIX           STORE LENGTH
         LR    R5,R0               SAVE VALUE INTO R5
         GETMAIN R,LV=(0)
         ST    R1,ADVOLIST         STORE ADDRESS OF AREA GETMAINED
         ST    R1,EXCORAD          STORE ADDRESS OF AREA GETMAINED
         CH    R5,=H'180'          TEST IF LENGTH IS GREATER THAN 180
         BH    STEXCO              BRANC  IF YES
         BCTR  R5,0                DECREMENT LENGTH FOR EXECUTE INSTRU.
         EX    R5,MVCVOLI1         EXECUTE MOVE INSTRUCTION
         B     ENDVCBPE
STEXCO   MVC   0(180,R1),62(R2)    MOVE REST OF VOLUME LIST FOR THIS B.
         LA    R1,180(R1)          INCREMENT POINTER FOR NEXT MOVE
LVCBP    CLC   252(3,R2),TTR0      TEST IF LAST VCBP FOR THE CURRENT DS
         BE    ENDVCBPE            BRANCH IF YES
         MVC   TTR,252(R2)         NO - MOVE TTR OF NEXT VCBP
         LR    R5,R1               SAVE V-R1
         BAL   R4,READABLK         PERFORM READ A CATALOG BLOCK
         LR    R1,R5               RESTORE V-R1
         MVC   VCO,0(R2)           MOVE VOLUME COUNT
         CLC   VCO,TWENTY+2        TEST IF VOL.COUNT IS GREATER THAN 20
         BNL   MOVE20              BRANCH IF YES
         L     R5,TWELVE           LOAD LENGTH OF ONE VOL. INFO S
         MH    R5,VCO              MULTIPLY BY VOLUME COUNT
         BCTR  R5,0                DECREMENT ONE FOR EXECUTE INST.
         EX    R5,MVCVOLI2         EXECUTE MOVE INSTRUCTION
         B     ENDVCBPE
MOVE20   MVC   0(240,R1),2(R2)     MOVE TWENTY VOLS INFO'S
         LA    R1,240(R1)          INCREMENT POINTER FOR NEXT MOVE
         B     LVCBP
ENDVCBPE BAL   R4,WRITE
         MVI   0(R12),BLANK        CLEAR
         MVC   1(7,R12),0(R12)      WA
         MVC   TTR,VCSAVTTR        RESTORE TTR
         L     R10,VCSAVR10        RESTORE R10
         BAL   R4,READABLK         PERFORM READ A CATALOG BLOCK
         LA    R10,14(R10)         GET ADDRESS FOR NEXT ENTRY
         SUBOUT PREFIX=G,RESTORE=(R4)
         SPACE 1
MVCVOLI1 MVC   0(0,R1),62(R2)
MVCVOLI2 MVC   0(0,R1),2(R2)
         EJECT
***********************************************************************
*        DATA SET POINTER ENTRY ROUTINE                               *
***********************************************************************
         SPACE 1
DSPE     SUBIN PREFIX=H,SAVE=(R4)
         MVC   0(8,R12),0(R10)     MOVE NAME TO RECOUT
         CLI   0(R10),C'G'         TEST IF THIS DS IS A GDG
         BNE   NOTGDG              NO
         CLC   5(3,R10),=C'V00'    YES - CONFIRME IF GDG DS
         BNE   NOTGDG              NO
         XC    1(4,R12),TRANSGDG   YES - TRANSLATE NUMBER IN DISPLAY F.
NOTGDG   MVI   FLAG,FLAGDS         MOVE FLAG DATA SET TO RECOUT
         MVC   NUMBVOL,12(R10)     STORE VOLUME COUNT
         L     R5,TWELVE           LOAD LENGTH OF ONE VOL. INFO S
         MH    R5,NUMBVOL          MULTIPLY BY NUMBER OF VOLUME
         BCTR  R5,0                DECREMENT ONE FOR EXECUTE INSTRUCTIO
         EX    R5,MVCVOLI3         EXECUTE MOVE INSTRUCTION
         BAL   R4,WRITE
         MVI   0(R12),BLANK        CLEAR
         MVC   1(7,R12),0(R12)      WA
         SR    R5,R5               CLEAR
         IC    R5,11(R10)          LOAD NO OF HW LEFT
         SLL   R5,1                MULT BY 2
         LA    R10,12(R5,R10)      GET ADDRESS FOR NEXT ENTRY
         SUBOUT PREFIX=H,RESTORE=(R4)
         SPACE 1
MVCVOLI3 MVC   VOLIST(0),14(R10)
         EJECT
***********************************************************************
*        PRINT ROUTINE                                                *
***********************************************************************
         SPACE 1
WRITE    SUBIN PREFIX=P,SAVE=(R4)
         LA    R5,DEVTAB           LOAD ADRESS OF DEVICE CODE-NAME TAB.
         ST    R5,ADRDVTAB         STORE TO WA OF CALLING PROGRAM
         BAL   R4,RETURN
         MVI   FLAG,BLANK          CLEAR PART OF WORK AREA
         MVC   FLAG+1(68),FLAG      OF THE CALLING PROGRAM
         XC    ADVOLIST,ADVOLIST   ZEROISE ADDRESS OF THE REST OF VOLIS
ENDW     SUBOUT PREFIX=P,RESTORE=(R4)
         SPACE 3
CLEAR    SUBIN PREFIX=Q,SAVE=(R4)
         MVI   FROMUSER,BLANK
         MVC   FROMUSER+1(119),FROMUSER
         XC    ADVOLIST,ADVOLIST   ZEROISE ADDRESS OF THE REST OF VOLIS
         SUBOUT PREFIX=Q,RESTORE=(R4)
         SPACE 3
         EJECT
***********************************************************************
*                                                                     *
***********************************************************************
         SPACE 1
PUTPOINT SUBIN PREFIX=S,SAVE=(R4)
         LA    R5,8
LOOPPP   LA    R11,1(R11)
         CLI   0(R11),BLANK
         BE    ENDTPP
         BCT   R5,LOOPPP
ENDTPP   MVI   0(R11),POINT
         LA    R11,1(R11)
         SUBOUT PREFIX=S,RESTORE=(R4)
         SPACE 3
***********************************************************************
*        CONVERT A FW OF HEX CHARACTERS TO DISPLAY FORMAT             *
***********************************************************************
         SPACE 1
HEXTRANS SUBIN PREFIX=T,SAVE=(R4,R6)
         LA    R5,8
         LA    R6,HEXSTOR
HEXLOOP  MVO   0(5,R6),0(4,R6)
         LA    R6,1(R6)
         BCT   R5,HEXLOOP
         TR    HEXSTOR(8),HEXTABLE
         SUBOUT PREFIX=T,RESTORE=(R4,R6)
         EJECT
***********************************************************************
*        ERRORS ROUTINE                                               *
***********************************************************************
         SPACE 1
ERROR    CVD   R15,DECIMAL         CONVERT BINARY
         MVC   OUTPRINT+1(71),MSGERR1
         UNPK  DECIMAL(3),DECIMAL+6(2)  UNPACK
         OI    DECIMAL+2,SIGN      FORCE SIGN
         MVC   OUTPRINT+36(3),DECIMAL   MOVE CC TO PRINT DET LINE
         MVC   HEXSTOR(3),TTR
         BAL   R4,HEXTRANS
         MVC   OUTPRINT+48(6),HEXSTOR
         MVC   OUTPRINT+64(6),CVOLNO
         B     ABEND
ERTIN    MVC   OUTPRINT+1(53),MSGERR6
         B     ABEND
         SPACE 1
         SPACE 1
ERRENT1  MVC   OUTPRINT+1(74),MSGERR2
         B     PR10
ERRENT2  MVC   OUTPRINT+1(74),MSGERR3
         B     PR10
ERRENT3  MVC   OUTPRINT+1(74),MSGERR4
PR10     ST    R10,HEXSTOR
         BAL   R4,HEXTRANS
         MVC   OUTPRINT+65(8),HEXSTOR
         B     ABEND
         SPACE 1
ERRCVTAB MVC   OUTPRINT+1(53),MSGERR5
         MVC   OUTPRINT+36(6),12(R10)
         SPACE 1
ABEND    MVC   MSGERS+8(80),OUTPRINT
MSGERS   WTO   '                                                       *
                                        '
         ABEND 492,DUMP
         SPACE 1
MSGERR1  DC    C'CONDITION CODE FROM LOCATE MACRO =     , TTR =       '
         DC    C' , CVOL =        .'
MSGERR2  DC    C'BAD ENTRY IN A VOLUME INDEX CONTROL ENTRY, SEE DUMP ('
         DC    C' ADDRESS =          )'
MSGERR3  DC    C'BAD ENTRY IN AN INDEX CONTROL ENTRY (IPE), SEE DUMP ('
         DC    C' ADDRESS =          )'
MSGERR4  DC    C'BAD ENTRY IN AN INDEX CONTROL ENTRY (GIPE), SEE DUMP '
         DC    C'( ADDRESS=          )'
MSGERR5  DC    C'TABLE CVOL IS TOO SHORT (MAX.5 VOL)                  '
MSGERR6  DC    C'TABLE INDEX TOO SHORT (MAX. 100 ELEMENTS)            '
         EJECT
***********************************************************************
*        DEVICE CODE-NAME TABLE                                       *
***********************************************************************
         SPACE 1
         DS    0D
DEVTAB   DC    X'30008001',H'05',C'=2400='
         DC    X'30808001',H'07',C'=2400-1='
         DC    X'30C08001',H'07',C'=2400-2='
         DC    X'34008001',H'07',C'=2400-4='
         DC    X'34208001',H'07',C'=2400-4='
         DC    X'30002001',H'05',C'=2311='
         DC    X'30402002',H'05',C'=2301='
         DC    X'30002004',H'05',C'=2302='
         DC    X'30002003',H'05',C'=2303='
         DC    X'30C02008',H'05',C'=2314='
         DC    X'30002005',H'05',C'=2321='
         DC    X'30502009',H'05',C'=3330='
         DC    X'3050200D',H'05',C'=3330='
         DC    X'00062000',H'05',C'=3330='
         DC    X'34008003',H'05',C'=3400='
         DC    X'FFFFFFFF',H'05',C'=FREE='
         DC    X'FFFFFFFF',H'05',C'=FREE='
         DC    X'FFFFFFFF',H'05',C'=FREE='
         DC    X'FFFFFFFF',H'05',C'=FREE='
         DC    X'FFFFFFFF',H'05',C'=FREE='
         DC    X'FFFFFFFF',H'05',C'=FREE='
         DC    X'FFFFFFFF',H'05',C'=FREE='
         DC    X'FFFFFFFF',H'05',C'=FREE='
         DC    X'FFFFFFFF',H'05',C'=FREE='
         DC    X'FFFFFFFF',H'05',C'=FREE='
         DC    X'FFFFFFFF',H'05',C'=FREE='
         DC    X'FFFFFFFF',H'05',C'=FREE='
         DC    X'FFFFFFFF',H'05',C'=FREE='
         DC    X'FFFFFFFF',H'05',C'=FREE='
UNK      DC    X'00000000',H'05',C'=????='
         SPACE 1
         EJECT
***********************************************************************
*        WORK AREAS                                                   *
***********************************************************************
         SPACE 1
TABINDEX DS    0F        21 ELEMENTS
         DC    21XL12'000000000000000000000000'
DECIMAL  DS    D                   WA FOR DECIMAL OPERATION
ATSCTLG  DC    A(TSYSCTLG-7)
TSYSCTLG DC    X'00',C'SYSRES'
         DC    4X'00000000000000'
ENDTSYSC DC    X'0000'
HEXSTOR  DC    3F'0'
HEXTABLE DC    C'0123456789ABCDEF'
INDEXBLK CAMLST BLOCK,TTR,NCVOL,BLOCKWA
INXSPEC1 CAMLST NAME,NDS2,,BLOCKWA
INXSPEC2 CAMLST NAME,NDS,NCVOL,BLOCKWA
         SPACE 1
EXCORAD  DC    F'0'
LENIX    DS    F
LENNIX   DS    F
         DS    0H
NDS      DS    CL44
NDS2     DS    CL44
NCVOL    DS    CL6
NEXREAD  DC    C'N'
         SPACE 1
VCO      DS    H
         SPACE 1
         DS    0F
TTR      DS    CL3
         DS    0D
BLOCKWA  DS    CL265
         SPACE 1
NORY     DC    C' '
TTRSW    DC    C' '
GISAVTTR DS    CL3
GISAVR10 DS    F
GISAVR12 DS    F
VCSAVTTR DS    CL3
VCSAVR10 DS    F
         SPACE 3
OUTPRINT DC    CL80' '
SAVAREG  DS    11F
         EJECT
***********************************************************************
*        CONSTANTS , EQUATES AND LITTERAL POOL                        *
***********************************************************************
         SPACE 1
ALLCATLG DC    C'ALLCATLG'
TTR0     DC    X'000000'
FIRSTTR  DC    X'000001'
ILENAME  DC    X'FFFFFFFFFFFFFFFF'
TRANSGDG EQU   ILENAME
TWELVE   DC    F'12'
TWENTY   DC    F'20'
         SPACE 1
BLANK    EQU   X'40'
SIGN     EQU   X'F0'
YES      EQU   C'Y'
NO       EQU   C'N'
ON       EQU   X'FF'
OFF      EQU   X'00'
POINT    EQU   C'.'
FLAGCVOL EQU   B'10000000'
FLAGDS   EQU   B'01000000'
FLAGINX  EQU   B'00100000'
FLAGGINX EQU   B'00010000'
FLAGALS  EQU   B'00000100'
TIPE     EQU   X'00'
TVCBPE   EQU   X'01'
TGIPE    EQU   X'02'
TCVPE    EQU   X'03'
TAE      EQU   X'04'
TNCVPE   EQU   X'05'
TDSPEMIN EQU   X'07'
TDSPEMAX EQU   X'1F'
         LTORG
         EJECT
***********************************************************************
*        WORK AREA OF CALLING PROGRAM                                 *
***********************************************************************
         SPACE 3
FROMUSER DSECT
         DS    0D
DSNINX   DS    CL44
CVOLNO   DS    CL6
DEVICECD DS    XL4
OPCODE   DS    C
         ORG   *-1
RTCODE   DS    C
FLAG     DS    X
NUMBVOL  DS    BL2
VOLIST   DS    CL60
         DS    CL2
ADVOLIST DS    F
         ORG   *-68
CURGENC  DS    BL2
GDGFLAG  DS    X
MAXGDG   DS    B
         DS    CL64
         ORG   *-68
CVPVOLS  DS    CL6
CVPDEVCD DS    XL4
         DS    CL58
ADRDVTAB DS    F
         END
         SPACE 1
