T580P230 CSECT
         PRINT ON,GEN
         SPACE 2
*********************************************************************
*                                                                   *
*        PROGRAM ID. :   T580P230                                   *
*                                                                   *
*        DATE WRITTEN :  JULY 1977                                  *
*                                                                   *
*        AUTHOR :        J.P. RAINSON                               *
*                                                                   *
*        LOCATION:       MISD BRUSSELS - TECHNICAL SUPPORT GROUP    *
*                                                                   *
*********************************************************************
         SPACE 3
*********************************************************************
*                                                                   *
*        PURPOSE                                                    *
*       ---------                                                   *
*        THIS PROGRAM  EXTRACTS DATA FROM THE SMF DUMP TAPE.        *
*        DATA ARE CONVERTED FROM VARIABLE LENGTH RECORDS            *
*        TO FIXED LENGTH RECORDS.                                   *
*                                                                   *
*         RECORD TYPES HANDLED FROM SYSUT1:-                        *
*              1. SMF TYPE 26 JES2 RECORDS.                         *
*              2. SMF TYPES 204,205,234 AND 235 RECORDS             *
*              3. SMF TYPES 15 OUTPUT,UPDAT,INOUT OR OUTIN          *
*                              DATA SET ACTIVITY.                   *
*                                                                   *
*         RECORD TYPES GENERATED:-                                  *
*              1. SYSUT2 - HASP ACCOUNTING RECORDS (FROM SMF26).    *
*              2. SYSUT3 - OS ACCOUNTING RECORDS (FROM SMF204,205   *
*                                                 234 & 235).       *
*              3. SYSUT4 - MF01 MICROFICH TAPES (FROM SMF15).       *
*                                                                   *
*********************************************************************
         EJECT
***********************************************************************
*        SMF RECORDS TYPE 15 DSECT                                    *
***********************************************************************
         SPACE 1
SMF15DSC DSECT                     SMF15 DSECT
         IFASMFR 15                GET SMF15 DSECT MACRO
SMF15LNG EQU   *-SMF15DSC          LENGTH OF SMF15 RECORDS DSECT
T580P230 CSECT                     END OF IFASMFR DESCT
SMF015ID EQU   15                  SMF RECORD 15 ID
         EJECT
***********************************************************************
*        MF01 MICROFICHE TAPE RECORD LAYOUT                           *
***********************************************************************
         SPACE 1
MFDSECT  DSECT
MFAREA   DS    0CL80
MFIDENT  DS    CL4                 RECORD TYPE (MF01)          - EBCDIC
MFVOLSER DS    CL6                 VOLUME SERIAL NUMBER        - EBCDIC
MFFILENO DS    CL2                 FILE NUMBER                 - EBCDIC
MFDATE   DS    CL5                 DATE CREATED (JULIAN)       - EBCDIC
MFTIME   DS    CL6                 TIME CREATED (HHMMSS)       - EBCDIC
MFJOBNAM DS    CL8                 JOB NAME                    - BINARY
MFDSNAME DS    CL44                DATA SET NAME               - BINARY
MFFILLER DS    CL5                 NOR USED                    - BINARY
T580P230 CSECT                     END OF MF TAPE RECORD DSECT
         EJECT
***********************************************************************
*        SMF RECORDS TYPE 26 DSECT                                    *
***********************************************************************
         SPACE 1
SMF26DSC DSECT                     SMF26 DSECT
         IFASMFR 26                GET SMF26 DSECT MACRO
SMF26LNG EQU   *-SMF26DSC          LENGTH OF SMF26 RECORDS DSECT
T580P230 CSECT                     END OF IFASMFR DESCT
SMF026ID EQU   26                  SMF RECORD 26 ID
         EJECT
***********************************************************************
*        HASP JOB ACCOUNTING CARD DSECT                               *
***********************************************************************
         SPACE 1
JACDSECT DSECT
JACAREA  DS    0CL80
JACJOBNM DS    CL8                 JOB NAME                    - EBCDIC
JACCHGCD DS    CL4                 ACCT'G CHARGE CODE          - EBCDIC
JACCATCD DS    CL2                 ACCT'G CATEGORY CODE        - EBCDIC
JACRDCLS DS    CL1                 JOB CLASS AT INPUT          - EBCDIC
JACEXCLS DS    CL1                 JOB CLASS AT EXEC           - EBCDIC
JACPRIO  DS    CL1                 JOB PRIORITY AT INPUT       - BINARY
JACPRTID DS    CL1                 PRINTER I.D.                - BINARY
JACPUNID DS    CL1                 PUNCH I.D.                  - BINARY
JACINDAT DS    CL3                 DATE READ (JULIAN)          - PACKED
JACINTIM DS    CL3                 TIME READ - /100 SEC        - BINARY
JACRDRTM DS    CL3                 JOB READ TIME - /100 SEC    - BINARY
JACCDSIN DS    CL2                 NUMBER OF CARDS READ        - BINARY
JACLINES DS    CL3                 NO. OF LINES PRINTED        - BINARY
JACCARDS DS    CL2                 NO. OF CARDS PUNCHED        - BINARY
JACSTDTE DS    CL5                 DATE STARTED (JULIAN)       - EBCDIC
JACSTTIM DS    CL6                 TIME STARTED (HHMMSS)       - EBCDIC
JACXEQTM DS    CL3                 ELAPSED EXEC TIME - /100 SEC- BINARY
JACPRTDT DS    CL3                 DATE PRINTED (JULIAN)       - PACKED
JACOUTIM DS    CL3                 TIME PRINTED - /100 SEC     - BINARY
JACPRTTM DS    CL3                 ELAPSED PRINT TIME - /100SEC- BINARY
         DS    CL7                 UNUSED (ZEROES)             - BINARY
JACENT   DS    CL2                 ENTITY NUMBER (UNUSED)      - EBCDIC
JACMAJCC DS    CL2                 MAJOR COST CENTRE           - PACKED
JACMINCC DS    CL2                 MINOR COST CENTRE           - EBCDIC
JACIDENT DS    CL1                 IDENTIFIER (X'FD')          - BINARY
JACDATE  DS    CL5                 DATE RECORD PUNCHED (JULIAN)- EBCDIC
JACJOBNO DS    CL3                 HASP-ASSIGNED JOB NUMBER    - EBCDIC
T580P230 CSECT                     END OF JOB ACCOUNTING CARD DSECT
         EJECT
***********************************************************************
*        MONSANTO SMF RECORDS TYPES 204,205,234 AND 235 DSECT         *
***********************************************************************
         SPACE 1
ACTDSECT $SMFUSER ACT,DSECT=YES,SMFHDR=YES,DOC=YES  OS SMF RECS DSECT
T580P230 CSECT                     END OF MONSANTO OS RECORDS DSECT
SMF204ID EQU   204                 SMF RECORD 204 ID
SMF205ID EQU   205                 SMF RECORD 205 ID
SMF234ID EQU   234                 SMF RECORD 234 ID
SMF235ID EQU   235                 SMF RECORD 235 ID
         EJECT
*******************************************************************
*        REGISTER EQUATES AND USAGES.                             *
*******************************************************************
         SPACE 1
R0       EQU   0    SVC COMMUNICATIONS AND WORK REGISTER
R1       EQU   1    SVC COMMUNICATIONS AND WORK REGISTER
R2       EQU   2    SUB-ROUTINE CONTROL INFORMATION AND WORK REG.
R3       EQU   3    WORK REGISTER
R4       EQU   4    BAL RETURN ADDRESS
R5       EQU   5    BASE REGISTER FOR INPUT RECORD
R6       EQU   6    BASE REGISTER FOR OUTPUT RECORDS
R7       EQU   7    BASE REGISTER FOR PRINT LINE
R8       EQU   8    UNUSED
R9       EQU   9    UNUSED
R10      EQU   10   UNUSED
R11      EQU   11   BASE REGISTER 2
R12      EQU   12   BASE REGISTER 1
R13      EQU   13   SAVE AREA POINTER
R14      EQU   14   BALR RETURN ADDRESS
R15      EQU   15   BALR ROUTINE ADDRESS AND WORK REGISTER
         SPACE 3
*******************************************************************
*        HOUSEKEEPING                                             *
*******************************************************************
         SPACE 1
         PGMIN EQUATES=NO,USING=(R12,R11)  ESTABLISH ADDRESSABILITY
*        PRINT NOGEN               SUPPRESS MACRO EXPANSION
         SPACE 3
*******************************************************************
*        SAVE ADDRESS AND LENGTH OF PARM OF EXEC CARD             *
*******************************************************************
         SPACE 1
         SAVEPARM                  ENSURE NO 0C4
         L     R1,0(R1)            LOAD ADDRESS OF PARM INTO R1
         MVC   PARMLGTH+2(2),0(R1) STORE LENGTH OF PARM INFO'S
         LA    R1,2(R1)            GET ADDRESS OF PARM INFO'S
         ST    R1,PARMADDR         STORE ADDRESS OF PARM INFO'S
         EJECT
*******************************************************************
*        TEST WHICH ARE THE DD'S SUPPLIED, AND OPEN DATA SETS     *
*         PRESENT.                                                *
*******************************************************************
         SPACE 1
         LA    R3,MAXDS            ESTABLISH LOOP
         LA    R2,DCBTABLE         POINT R2 AT DCB TABLE
         OI    0(R2),DDINT         INDICATE DD INTEREST
         BAL   R4,TESTIOT          GO TEST IF DD STATEMENT PRESENT
         BAL   R4,OPEN             GO OPEN DATA SET
         LA    R2,DCBNTRY(R2)      POINT AT NEXT TABLE ENTRY
         BCT   R3,*-16             PROCESS NEXT DATA SET
         SPACE 2
SETPRINT EQU   *         SET-UP PRINT D/S IF REQUIRED
         TM    PRINTSW,DDOPEN      PRINT D/S OPEN?
         BNO   SPXIT               NO. SKIP
         BAL   R4,PRINT            DUMMY FIRST WRITE FOR PUT LOCATE
         MVI   0(R7),X'8B'         SKIP TO TOP OF NEXT PAGE
         BAL   R4,PRINT            INVOKE
         MVI   0(R7),SPCE3AFT      PRTCTL FOR HEADING
         MVC   1(38,R7),=CL38'T580P230   REFORMAT SMF RECS IN HASP  '
         BAL   R4,PRINT            PRINT HEADING
         MVI   0(R7),SPCE2AFT      DOUBLE SPACING FOR DETAIL LINES.
SPXIT    EQU   *
         EJECT
***********************************************************************
*        READ INPUT DATASET. DETERMINE RECORD TYPE & BRANCH TO RTN.   *
***********************************************************************
         SPACE 1
READNEXT EQU   *
         BAL   R4,RUT1             READ INPUT RECORD
         USING SMF14HDR,R5         ESTABLISH SMF14 & 15 ADDRESSABILITY
         CLI   SMF14RTY,SMF015ID   TYPE 15 RECORD?
         BE    PROCR15             YES. BRANCH
         DROP  R5                  DROP SMF14 & 15 ADDRESSABILITY
         SPACE 1
         USING SMFRCD26,R5         ESTABLISH SMF26 ADDRESSABILITY
         CLI   SMF26RTY,SMF026ID   TYPE 26 RECORD?
         BE    PROCR26             YES. BRANCH
         DROP  R5                  DROP SMF26 ADDRESSABILITY
         SPACE 1
         USING ACTDSECT,R5         ESTABLISH SMF204,205,234 & 235 ADDR.
         CLI   SMFRECTP,SMF204ID   TYPE 204 RECORD?
         BE    PROCROS             YES. BRANCH
         CLI   SMFRECTP,SMF205ID   TYPE 205 RECORD?
         BE    PROCROS             YES. BRANCH
         CLI   SMFRECTP,SMF234ID   TYPE 234 RECORD?
         BE    PROCROS             YES. BRANCH
         CLI   SMFRECTP,SMF235ID   TYPE 235 RECORD?
         BE    PROCROS             YES. BRANCH
         DROP  R5                  DROP SMF204,205,234 & 235ADDRESSAB.
         SPACE 1
*        INSERT TESTS FOR FURTHER RECORD TYPES HERE.
         B     READNEXT            UNDEFINED RECORD TYPE. IGNORE.
         EJECT
***********************************************************************
*        PROCESS SMF TYPE 15 RECORDS                                  *
***********************************************************************
         SPACE 1
PROCR15  EQU   *
         TM    SYSUT4SW,DDOPEN     OUTPUT DATASET OPEN?
         BNO   PROCR15X            IF NOT FORGET FORMATTING
         BAL   R4,FMTMFREC         FORMAT MF RECORD
PROCR15X EQU   *
         B     READNEXT            READ NEXT INPUT RECORD
         SPACE 1
***********************************************************************
*        PROCESS SMF TYPE 26 RECORDS                                  *
***********************************************************************
         SPACE 1
PROCR26  EQU   *
         TM    SYSUT2SW,DDOPEN     OUTPUT DATASET OPEN?
         BNO   PROCR26X            IF NOT FORGET FORMATTING
         BAL   R4,FMTHASP          REFORMAT RECORD
PROCR26X EQU   *
         B     READNEXT            READ NEXT INPUT RECORD
         SPACE 1
***********************************************************************
*        PROCESS SMF TYPES 204,205,234 AND 235 RECORDS                *
***********************************************************************
         SPACE 1
PROCROS  EQU   *
         TM    SYSUT3SW,DDOPEN     OUTPUT DATASET OPEN?
         BNO   PROCROSX            IF NOT FORGET FORMATTING
         BAL   R4,FMTOS            REFORMAT RECORD
PROCROSX EQU   *
         B     READNEXT            READ NEXT INPUT RECORD
         EJECT
***********************************************************************
*        CREATION MF MICROFICHE RECORDS                               *
***********************************************************************
         SPACE 1
FMTMFREC SUBIN SAVE=(R0,R1,R2,R3,R4)  S/R ENTRY
         SPACE 1
*        DETERMINE IF AN MF RECORD IS TO BE CREATED
         SPACE 1
         USING SMF14HDR,R5         ESTABLISH SMF ADDRESSABILITY
         USING MFDSECT,R6          ESTABLISH MF ADDRESSABILITY
         SPACE 1
         CLC   SMFDSSNO(2),=C'MF'  IS IT AN MF VOL/SER?
         BNE   FMTMFREX            NO - STOP PROCESS THIS RECORD
         CLC   SMFDCBBL,=X'00000000'  BLOCK COUNT = 0?
         BE    FMTMFREX            YES - STOP PROCESS THIS RECORD
         SPACE 1
*        CREAT MF RECORD FOR SMF15 MF..... VOLSER
         SPACE 1
         MVI   WORKAREA,X'40'      INITIALISE W/A BINARY ZEROES
         MVC   WORKAREA+1(L'WORKAREA-1),WORKAREA  PROPAGATE
         LA    R6,WORKAREA         GET WORK AREA ADDRESS
         SPACE 1
         MVC   MFVOLSER,SMFDSSNO   GET VOLUME SERIAL NUMBER
         MVC   BINSTORE,=X'00000000'  RESET BINSTORE FIELD
         MVC   BINSTORE+2(2),SMFDEBVL   CONVERT BINARY FILE NO
         BAL   R4,CVD              - TO EBCDIC
         MVC   MFFILENO,DECIMAL+6  - AND SET UP FILE NUMBER
         MVC   MFJOBNAM,SMF14JBN   GET JOB NAME
         MVC   MFDSNAME(44),SMFJFCB1  GET DATA SET NAME
         UNPK  MFDATE,SMF14DTE+1(3)   SET UP DATE CREATED
         MVC   BINSTORE,SMF14TME   CONVERT BINARY TIME CREATED
         BAL   R4,CVD              - TO DECIMAL AND EBCDIC,
         BAL   R4,HHMMSS           - CONVERT TO HH.MM.SS
         MVC   MFTIME,TIMEHMS2      AND SET UP TIME CREATED
         MVC   MFIDENT,=C'MF01'    SET UP CARD IDENTIFIER
         SPACE 1
FMTMFREW EQU   *
         BAL   R4,WUT4             WRITE MF01 MICROFICH RECORD
         SPACE 1
FMTMFREX SUBOUT RESTORE=(R0,R1,R2,R3,R4) RETURN
         SPACE 1
         DROP  R5                  DROP SMF14 & 15 ADDRESSABILITY
         DROP  R6                  DROP MF RECORDS ADDRESSABILITY
         EJECT
***********************************************************************
*        CREATION OF HASP ACCOUNTING RECORDS                          *
***********************************************************************
         SPACE 1
FMTHASP  SUBIN SAVE=(R0,R1,R2,R3,R4)  S/R ENTRY
         SPACE 1
*        HASP RECORD CREATION
         SPACE 1
         USING SMFRCD26,R5         ESTABLISH SMF ADDRESSABILITY
         USING JACDSECT,R6         ESTABLISH JAC ADDRESSABILITY
         MVI   WORKAREA,X'00'      INITIALISE W/A BINARY ZEROES
         MVC   WORKAREA+1(L'WORKAREA-1),WORKAREA  PROPAGATE
         LA    R6,WORKAREA         GET WORK AREA ADDRESS
         SPACE 1
*        CORRECT INVALID TSO RECORDS
         SPACE 1
FMTTSO   EQU   *
         CLC   SMF26JID(3),=C'TSU'    IS IT A TSO RECORDS ?
         BNE   FMTTSOX                NO - BYPASS THIS SECTION
         CLC   SMF26ACT,=X'00000000'  PROJECT CODE SUPPLY ?
         BNE   *+10                   YES - BYPASS FORWARD CHAINING
         MVC   SMF26ACT,=C'1140'      ASSUME 1140 PROJECT CODE
         CLC   SMF26ROM,=X'00000000'  CATEGORY CODE SUPPLY ?
         BNE   *+10                   YES - BYPASS FORWARD CHAINING
         MVC   SMF26ROM,=C'0004'      ASSUME CATEGORY CODE 4
         TR    SMF26CLS,TABLECLS      ASSUME CLASS 'N' IF NOT A ==> Z
FMTTSOX  EQU   *
         SPACE 1
*        DEPENDING ON SMF26 RETRIVE DATA FROM MONSANTO MODS FIELDS
         SPACE 1
FMTACCTL EQU   *
         CLC   SMF26LEN,=X'00FC'   IS IT AN IBM SM26 REC TYPE
         BE    FMTACCTS            YES - FORMAT FROM STDT SMF26
         CLC   SMF26LEN,=X'0104'   IS IT A MODIFY SMF26 REC TYPE
         BE    FMTACCT1            YES - FORMAT FROM MODIFY SMF26
         CLC   SMF26LEN,=X'0118'   IS IT A MODIFY SMF26 REC TYPE
         BE    FMTACCT2            YES - FORMAT FROM MODIFY SMF26
         SPACE 1
*        UNKNOWN SMF26 RECORD TYPE - ABEND
         SPACE 1
         WTO   'T580P230 - UNKNOMN SMF26 RECORD *********'
         ABEND 230,DUMP            DUMP - UNKNOWM SMF26 FORMAT
         SPACE 1
FMTACCT  EQU   *                   ? LENGTH - ASSUME LAST MONS MODS
         SPACE 1
FMTACCT2 EQU   *                   MONSANTO SMF REC AS OFF JESS 4.20
*        REAL PRINT INFO'S ARE MOVE INTO CORRESPONDING STANDARD JES2
         MVC   SMF26OSD,SMF26PSD   GET REAL PRINT START DATE
         MVC   SMF26OPD,SMF26PED   GET REAL PRINT STOP DATE
         MVC   SMF26OST,SMF26PST   GET REAL PRINT START TIME
         MVC   SMF26OPT,SMF26PET   GET REAL PRINT STOP TIME
         MVC   SMF26XLN,SMF26NLP   GET REAL NBR LINES PRINTED
         SPACE 1
FMTACCT1 EQU   *                   MONSANTO SMF REC AS OFF MVS START
         MVC   JACCHGCD,SMF26ACT   SET UP CHARGE CODE
         MVC   JACCATCD,SMF26ROM+2 SET UP CATEGORY CODE
         CLC   SMF26MAJ,=X'000000' MAJOR COST CENTRE SUPPLY?
         BE    *+10                NO - BYPASS FORWARD CHAINING
         PACK  JACMAJCC,SMF26MAJ   SET UP MAJOR COST CENTRE
         CLC   SMF26MIN,=X'0000'   MINOR COST CENTRE SUPPLY?
         BE    *+10                NO - BYPASS FORWARD CHAINING
         MVC   JACMINCC,SMF26MIN   SET UP MINOR COST CENTRE
         CLC   SMF26ENT,=X'0000'   ENTITY CODE SUPPLY?
         BE    *+20                NO - BYPASS FORWARD CHAINING
         CLC   SMF26ENT,=C'  '     ENTITY CODE SUPPLY?
         BE    *+10                NO - BYPASS FORWARD CHAINING
         MVC   JACENT,SMF26ENT     SET UP ENTITY CODE
         B     FMTACCTX            GO CALCULATE ELAPSED TIMES
         SPACE 1
FMTACCTS EQU   *                   FORMAT ACCT FIELDS FROM STDT SMF26
         MVC   JACCHGCD,SMF26ACT   SET UP CHARGE CODE
         MVC   JACCATCD,SMF26ROM   SET UP CATEGORY CODE FR 2 FIRST POS.
         CLC   JACCATCD,=CL2'00'   CATEGORY = 00?
         BNE   *+10                NO - BYPASS FORWARD CHAINING
         MVC   JACCATCD,SMF26ROM+2 SET UP CATEGORY CODE FR 2 LAST POS.
         CLI   JACCATCD+(1),C' '   CAT CODE 1 POSITION?
         BNE   *+14                NO - BYPASS FORWARD CHAINING
         MVC   JACCATCD+1(1),JACCATCD  MOVE 1POS CAT TO 2ND POS
         MVI   JACCATCD,C'0'       MOVE 0 IN FIRS POS OF CATEGORY
FMTACCTX EQU   *
         SPACE 1
*        RETRIEVE STANDARD JES2 INFORMATIONS
         SPACE 1
         MVC   JACJOBNM,SMF26JBN   SET UP JOB NAME
         MVC   JACRDCLS,SMF26CLS   SET UP JOB CLASS AT INPUT
         MVC   JACEXCLS,SMF26CLS   SET UP JOB CLASS AT EXEC
         MVC   JACPRTID,SMF26PRR+1 SET UP PRINT ID
         MVC   JACPUNID,SMF26PUR+1 SET UP PUNCH ID
         MVC   JACINDAT,SMF26RSD+1 SET UP DATE READ
         CLC   SMF26XSD,ZEROWORD   START DATE ZERO?
         BE    *+10                YES - BYPASS FORWARD CHAINING
         UNPK  JACSTDTE,SMF26XSD+1(3) SET UP DATE EXECUTED
         MVC   JACPRIO,SMF26XPI    SET UP JOB PRIORITY AT INPUT
         MVC   JACINTIM,SMF26RST+1 SET UP JOB INPUT TIME
         MVC   JACOUTIM,SMF26OST+1 SET UP JOB OUTPUT TIME
         MVC   JACCDSIN,SMF26ICD+2 SET UP CARDS READ
         MVC   JACLINES,SMF26XLN+1 SET UP LINES PRINTED
         MVC   JACCARDS,SMF26XPU+2 SET UP CARDS PUNCHED
         CLC   SMF26XST,ZEROWORD   START DATE ZERO?
         BE    *+24                YES - BYPASS FORWARD CHAINING
         MVC   BINSTORE,SMF26XST   CONVERT BINARY EXEC START TIME
         BAL   R4,CVD              - TO DECIMAL AND EBCDIC,
         BAL   R4,HHMMSS           - CONVERT TO HH.MM.SS
         MVC   JACSTTIM,TIMEHMS2   - AND SET UP TIME EXECUTED
         MVI   JACIDENT,X'FD'      SET UP CARD IDENTIFIER
         MVC   JACPRTDT,SMF26OSD+1 SET UP DATE PRINTED
         UNPK  JACDATE,SMF26DTE+1(3) SET UP DATE CARD PUNCHED
         MVC   JACJOBNO,SMF26JNM+1 SET UP JOB NUMBER
         SPACE 1
         CLC   SMF26ENT,=C'  '     ENTITY CODE SUPPLY?
         BE    *+10                NO - BYPASS FORWARD CHAINING
         MVC   JACENT,SMF26ENT     SET UP ENTITY CODE
         SPACE 1
*        ELAPSE READ TIME CALCULATION
         MVC   ELAPSSD,SMF26RSD    LOAD READ START DATE
         MVC   ELAPSPD,SMF26RPD    LOAD READ STOP  DATE
         MVC   ELAPSST,SMF26RST    LOAD READ START TIME
         MVC   ELAPSPT,SMF26RPT    LOAD READ STOP  TIME
         BAL   R4,ELAPCALC         GO CALCULATE ELAPSE TIME
         MVC   JACRDRTM,ELAPTIME+1 SET UP ELAPSE READ TIME
         SPACE 1
*        ELAPSE EXEC TIME CALCULATION
         MVC   ELAPSSD,SMF26XSD    LOAD EXEC START DATE
         MVC   ELAPSPD,SMF26XPD    LOAD EXEC STOP  DATE
         MVC   ELAPSST,SMF26XST    LOAD EXEC START TIME
         MVC   ELAPSPT,SMF26XPT    LOAD EXEC STOP  TIME
         BAL   R4,ELAPCALC         GO CALCULATE ELAPSE TIME
         MVC   JACXEQTM,ELAPTIME+1 SET UP ELAPSE EXEC TIME
         SPACE 1
*        ELAPSE PRINT TIME CALCULATION
         MVC   ELAPSSD,SMF26OSD    LOAD PRINT START DATE
         MVC   ELAPSPD,SMF26OPD    LOAD PRINT STOP  DATE
         MVC   ELAPSST,SMF26OST    LOAD PRINT START TIME
         MVC   ELAPSPT,SMF26OPT    LOAD PRINT STOP  TIME
         BAL   R4,ELAPCALC         GO CALCULATE ELAPSE TIME
         MVC   JACPRTTM,ELAPTIME+1 SET UP ELAPSE PRINT TIME
         SPACE 1
FMTHASPW EQU   *
         BAL   R4,WUT2             WRITE REFORMATED RECORD
         SPACE 1
FMTHASPX SUBOUT RESTORE=(R0,R1,R2,R3,R4) RETURN
         EJECT
***********************************************************************
*
*        THE FUNCTION OF THIS SUBROUTINE IS TO RECOVER ACCOUNTING
*               INFORMATIONS FROM THE SMF26 RECORDS.
*
*              REGISTERS MUST BE SET AS FOLLOWS -
*                             R2   ADDRESS OF ACCOUNTING PARAMETERS
*                             R3   ADDRESS OF FIELD CONTAINING THE
*                                  NUMBER OF THEM
*                             R5   ADDRESS OF THE SMF RECORD
***********************************************************************
         SPACE 1
PARMGET  SUBIN SAVE=(R1,R2,R3,R8,R9,R10)
         SPACE 1
         XR    R10,R10               CLEAR WORK REGISTER
         XR    R8,R8               CLEAR WORK REGISTER
         XR    R9,R9               CLEAR WORK REGISTER
         IC    R9,3(R3)            GET NUMBER OF PARMS
         XR    R1,R1               CLEAR WORK REGISTER
         LA    R8,1                SET R8 TO BXH INCREMENT
*
*        PARM FIELD PROCESSING IS CONTROLLED BY 'BXH'
*         R9 CONTAINS THE NUMBER OF PARM FIELDS
*         R8 CONTAINS THE INCREMENT VALUE
*         R1 IS USED AS THE INDEX REGISTER
*
PARM1    BXH   R1,R8,PARMSEX       EXIT IF NO PARMS SUPPLIED
         IC    R10,0(,R2)           GET LENGTH OF 1ST PARM
         LA    R2,1(R10,R2)         POINT TO NEXT FIELD
PARM2    BXH   R1,R8,PARMSEX       BR IF PARMS EXHAUSTED
         IC    R10,0(R2)            GET LENGTH OF  PARM
PARM3    BXH   R1,R8,PARMSEX       EXIT IF PARMS FINISHED
         LA    R2,1(R10,R2)         INCREMENT TO 3RD PARM
         IC    R10,0(R2)            GET LENGTH OF 3RD PARM
         CLI   0(R2),0             TEST IF LENGTH IS ZERO
         BE    PARM4               GO TO NEXT PARM IF 4
         PACK  JACMAJCC,1(3,R2)    PACK MAJOR COST CENTRE TO RECORD
PARM4    BXH   R1,R8,PARMSEX       EXIT IF PARMS EXHAUSTED
         LA    R2,1(R10,R2)         POIUNT AT 4TH PARM
         IC    R10,0(R2)            GET LENGTH OF 4TH PARM
         CLI   0(R2),0             TEST IF LENGTH IS ZERO
         BE    PARM5               BRANCH ID NULL PARM
         MVC   JACMINCC,1(R2)      MOVE MINOR COST CENTRE TO RECORD
PARM5    BXH   R1,R8,PARMSEX       EXIT IF PARMS EXHAUSTED
         LA    R2,1(R10,R2)         POINT AT 5TH PARM
         IC    R10,0(R2)            GET LENGTH OF PARM
         CLI   0(R2),0             TEST IF LENGTH IS ZERO
         BE    PARMSEX             BR IF NULL PARM
         CLI   1(R2),C'E'          TEST IF IT IS AN ENTTIY CODE
         BNE   PARMSEX             BR IF NOT ENTTIY CODE
         MVC   JACENT,2(R2)        MOVE ENTITY CODE TO RECORD
         SPACE 1
PARMSEX  SUBOUT RESTORE(R1,R2,R3,R8,R9,R10)  RETURN TO CALLER
         SPACE 1
         DROP  R5                  DROP SMF26 ADDRESSABILITY
         DROP  R6                  DROP HASP RECORDS ADDRESSABILITY
         EJECT
***********************************************************************
*        CREATION OF OS ACCOUNTING RECORDS                            *
***********************************************************************
         SPACE 1
FMTOS    SUBIN SAVE=(R0,R1,R2,R3,R4)  S/R ENTRY
         SPACE 1
*        OS RECORD CREATION
         SPACE 1
         USING ACTDSECT,R5         ESTABLISH SMF ADDRESSABILITY
         MVI   WORKAREA,X'00'      INITIALISE W/A BINARY ZEROES
         MVC   WORKAREA+1(L'WORKAREA-1),WORKAREA  PROPAGATE
         LA    R6,WORKAREA         GET WORK AREA ADDRESS
         SPACE 1
*        CORRECT INVALID TSO RECORDS
         SPACE 1
FMTOSDFT EQU   *
         CLC   ACTCATCD,=C'  '     CATEGORY CODE SUPPLY ?
         BNE   *+10                YES - BYPASS FORWARD CHAINING
         MVC   ACTCATCD,=C'04'     ASSUME CATEGORY CODE = '04'
         CLI   ACTCATCD+1,C' '     CAT CODE 1 POS ?
         BNE   *+14                NO - BYPASS FORWARD CHAINING
         MVC   ACTCATCD+1(1),ACTCATCD  MOVE 1ST POS CAT TO 2ND POS
         MVI   ACTCATCD,C'0'       MOVE O IN FIRST POS OF CATEGOTY
         CLI   ACTCATCD,C' '       CAT CODE 1 POS = ' ' ?
         BNE   *+8                 NO - BYPASS FORWARD CHAINING
         MVI   ACTCATCD,C'0'       MOVE O IN FIRST POS OF CATEGOTY
         TR    ACTJCLAS,TABLECLS   ASSUME CLASS 'N' IF NOT A ==> Z
         TR    ACTHJCLS,TABLECLS   ASSUME CLASS 'N' IF NOT A ==> Z
FMTOSTSX EQU   *
*        RETRIEVE OS ACCOUNTING INFORMATIONS
         SPACE 1
         MVC   WORKAREA(ACTLGTH),ACTREC  MOVE OS RECORD IN W/A
         SPACE 1
FMTOSW   EQU   *
         BAL   R4,WUT3             WRITE ACCOUNTING OS RECORD
         SPACE 1
FMTOSX   SUBOUT RESTORE=(R0,R1,R2,R3,R4) RETURN
         SPACE 1
         DROP  R5                  DROP SMF204,205,234 & 235 ADDRESSAB.
         EJECT
***********************************************************************
*        CONVERT BINARY WORD TO DECIMAL AND EBCDIC                    *
***********************************************************************
         SPACE 1
CVD      SUBIN SAVE=(R3)           CONVERT COLUMN BINARY
         L     R3,BINSTORE         LOAD BINARY FIELD TO WORK REGISTER
         CVD   R3,DECIMAL          CONVERT TO DECIMAL
         OI    DECIMAL+7,X'0F'     SET ZONE TO 'F'
         XC    BINSTORE,BINSTORE   SET WORK AREA TO BINARY ZEROES
         MVC   DISPLAY,EDITCVD     MOVE EDIT PATTERN TO DISPLAY AREA
         ED    DISPLAY,DECIMAL     CONVERT TO EBCDIC
        SUBOUT RESTORE=(R3)        RETURN TO CALLER
         EJECT
***********************************************************************
*        CONVERT /100 SECS TO MMM.SS                                  *
***********************************************************************
         SPACE 1
MMMSS    SUBIN ,                   CONVERT 100'THS OF SEC TO MMM.SS
         DP    DECIMAL,HUNDRED     CONVERT HUMDREDTHS TO SECS
         CP    DECIMAL+6(2),FIFTY  TEST IF REMAINDER GREATER THAN 49
         BL    *+10                BYPASS ROUNDING IF NOT
         AP    DECIMAL(6),ONE      ROUND UP BY ONE SECOND
         DP    DECIMAL(6),SIXTY    CONVERT TO MINUTES AND SECONDS
         MVC   EDITWORK(7),EDMMMSS MOVE EDIT PATTERN OO WORK AREA
         ED    EDITWORK(7),DECIMAL+2 CONVERT MMMSS TO DISPLAY
         MVI   EDITWORK+4,PERIOD   ADD PUNCTUATION
         MVC   TIMEMS,EDITWORK+1   PRESERVE MMM.SS
        SUBOUT ,                   RETURN TO CALLER
         EJECT
***********************************************************************
*        CONVERT /100 SECS TO HH.MM.SS                                *
***********************************************************************
         SPACE 1
HHMMSS   SUBIN ,                   CONVERT 100'THS OF SEC TO HH.MM.SS
         DP    DECIMAL,HUNDRED     CONVERT HUNDREDTHS TO SECONDS
         CP    DECIMAL+6(2),FIFTY  TEST IF REMAINDER GREATER THAN 49
         BL    *+10                BYPASS ROUNDING IF NOT
         AP    DECIMAL(6),ONE      ROUND UP BY 1 SECOND
         DP    DECIMAL(6),SIXTY    CONVERT TO MUNUTES & SECONDS
         DP    DECIMAL(4),SIXTY    CONVERT TO HOURS & MINUTES
         MVC   EDITWORK,EDHHMMSS   MOVE EDIT PATTERN TO WORK AREA
         ED    EDITWORK,DECIMAL    CONVERT TO CHARACTER,
         MVI   EDITWORK+4,PERIOD    AND INSERT THE
         MVI   EDITWORK+7,PERIOD    PUNCTUATING PERIODS
         MVC   TIMEHMS,EDITWORK+2  SAVE EDITED HH.MM.SS
         MVC   TIMEHMS2(2),TIMEHMS  AND ALSO
         MVC   TIMEHMS2+2(2),TIMEHMS+3 SAVE UNEDITED
         MVC   TIMEHMS2+4(2),TIMEHMS+6 HHMMSS
        SUBOUT ,                   RETURN TO CALLER
         EJECT
***********************************************************************
*        CONVERT PACKED JULIAN DATE TO YY.DDD                         *
***********************************************************************
         SPACE 1
YYDDD    SUBIN ,                   CONVERT PACKED JULIAN DATE TO EBCDIC
         OI    2(R2),X'0F'         ENSURE SIGN IS HEX 'F'
         MVC   EDITWORK(7),EDITJUL SET UP EDIT PATTERN IN WORK AREA
         ED    EDITWORK(7),0(R2)   CONVERT TO YY.DDD
         MVC   DATEJUL,EDITWORK+1  PRESERVE EDITED JULIAN DATE
         UNPK  DATEJUL2,0(3,R2)    UNPACK DATE AS YYDDD
        SUBOUT ,                   RETURN TO CALLER
         EJECT
***********************************************************************
*        CALCULATE ELAPSED TIME FROM YYDDD PACKED AND HHMMSS00 BINARY *
*                                                                     *
*        AT ENTRY - ELAPSSD  CONTAINS START DATE                      *
*                 - ELAPSPD  CONTAINS STOP  DATE                      *
*                 - ELAPSST  CONTAINS START TIME                      *
*                 - ELAPSPT  CONTAINS STOP  TIME                      *
*                                                                     *
*        AT OUTPUT- ELAPTIME CONTAINS THE COMPUTED ELAPSED TIME       *
*                                                                     *
***********************************************************************
         SPACE 1
ELAPCALC SUBIN SAVE=(R1,R2,R3)     COMPUTE ELAPSED TIME
         SPACE 1
         XC    ELAPTIME,ELAPTIME   SET ELAPTIME BINARY ZEROES
         CLC   ELAPSSD,=X'00000000'  IS START DATE = ZEROES?
         BE    ELAPSOUT            YES - BYPASS ELAPSED TIME CALC.
         CLC   ELAPSPD,=X'00000000'  IS STOP  DATE = ZEROES?
         BE    ELAPSOUT            YES - BYPASS ELAPSED TIME CALC.
         CLC   ELAPSST,=X'00000000'  IS START TIME = ZEROES?
         BE    ELAPSOUT            YES - BYPASS ELAPSED TIME CALC.
         CLC   ELAPSPT,=X'00000000'  IS STOP  TIME = ZEROES?
         BE    ELAPSOUT            YES - BYPASS ELAPSED TIME CALC.
         SPACE 1
         MVC   DECIMAL,=PL8'0'     SET W/A PACKED ZEROES
         AP    DECIMAL,ELAPSPD     STORE STOP DATE IN W/A
         SP    DECIMAL,ELAPSSD     SUBTRACT START FROM STOP DATE
         CP    DECIMAL,=PL8'2'     DAYS DIFF > 1
         BL    *+10                NO - BYPASS FORWARD CHAINING
         MVC   DECIMAL,=PL8'1'     YES - ASSUME 1 DAY
         MP    DECIMAL,ELAPSSEC    CONVERT DIFF. DAYS IN /100 SEC.
         CVB   R1,DECIMAL          LOAD ADD DAYS /SEC IN R1
         L     R2,ELAPSPT          LOAD STOP TIME IN R2
         AR    R2,R1               ADD DAYS /SEC TO STOP TIME
         L     R3,ELAPSST          LOAD START TIME IN R3
         SR    R2,R3               SUBTRACT START FROM STOP TIME
         ST    R2,ELAPTIME         STORE ELAPSED TIME
         SPACE 1
ELAPSOUT SUBOUT RESTORE=(R1,R2,R3) RETURN TO CALLER
         EJECT
*******************************************************************
*        JOB TERMINATION ROUTINE -                                *
*         CLOSE ANY OPEN DATA SETS,                               *
*         SET A COMPLETION CODE IN REGISTER 15, AND RETURN.       *
*******************************************************************
         SPACE 1
EODUT1   EQU   *
         SPACE 1
JOBEND   EQU   *
         LA    R3,MAXDS            ESTABLISH LOOP
         LA    R2,DCBTABLE         POINT AT START OF DCB TABLE
         BAL   R4,CLOSE            CLOSE DATA SET IF OPEN
         LA    R2,DCBNTRY(R2)      POINT AT NEXT TABLE ENTRY
         BCT   R3,*-8              CLOSE NEXT DATA SET
         PGMOUT RC=COMPCODE        SET COND CODE AND RETURN
         TITLE 'I/O SUB-ROUTINES'
*******************************************************************
*        WRITE SUBROUTINE FOR SYSPRINT                            *
*******************************************************************
         SPACE 1
PRINT    SUBIN ,
         TM    PRINTSW,DDINT+DDPRES+DDOPEN   TEST IF NEED TO WRITE
         BNO   PRINTX              BRANCH IF NO
PRINTSVE MVC   PRINTRST+1(1),0(R7) SAVE CURRENT CONTROL CHAR
         PUT   SYSPRINT            WRITE RECORD TO SYSPRINT D/S
         LR    R7,R1               SAVE BUFFER ADDRESS
         MVI   1(R7),BLANK         MOVE BLANK TO START OF LINE
         MVC   2(131,R7),1(R7)      AND PROPAGANTE THROUGH
PRINTRST MVI   0(R7),X'09'         RESTORE PRINT CONTROL CHARACTER
*                                  TO NEXT BUFFER SEGMENT.
*                                  NOTE. THE DATA BYTE IN THIS INSTN.
*                                  IS MODIFIED BY MVC AT LABEL PRINTSVE
PRINTX   SUBOUT ,                  RETURN TO CALLER
         SPACE 2
*******************************************************************
*        READ SUBROUTINE FOR SYSUT1                               *
*******************************************************************
         SPACE 1
RUT1     SUBIN ,
         GET   SYSUT1,READAREA     READ RECORD FROM SYSUT1 D/S
         LA    R5,READAREA         SAVE RECORD ADDRESS
         AP    CNTUT1,ONE          INCREMENT RECORD COUNTER
         SUBOUT ,                  RETURN TO CALLER
         SPACE 2
*******************************************************************
*        WRITE SUBROUTINE FOR SYSUT2                              *
*******************************************************************
         SPACE 1
WUT2     SUBIN ,
         TM    SYSUT2SW,DDINT+DDPRES+DDOPEN  TEST IF NEED TO WRITE
         BNO   WUT2X               BRANCH IF NO
         PUT   SYSUT2,0(R6)        WRITE RECORD TO SYSUT2 D/S
         AP    CNTUT2,ONE          INCREMENT RECORD COUNTER
WUT2X    SUBOUT ,                  RETURN TO CALLER
         SPACE 2
         SPACE 2
*******************************************************************
*        WRITE SUBROUTINE FOR SYSUT3                              *
*******************************************************************
         SPACE 1
WUT3     SUBIN ,
         TM    SYSUT3SW,DDINT+DDPRES+DDOPEN  TEST IF NEED TO WRITE
         BNO   WUT3X               BRANCH IF NO
         PUT   SYSUT3,0(R6)        WRITE RECORD TO SYSUT3 D/S
         AP    CNTUT3,ONE          INCREMENT RECORD COUNTER
WUT3X    SUBOUT ,                  RETURN TO CALLER
         SPACE 2
*******************************************************************
*        WRITE SUBROUTINE FOR SYSUT4                              *
*******************************************************************
         SPACE 1
WUT4     SUBIN ,
         TM    SYSUT4SW,DDINT+DDPRES+DDOPEN  TEST IF NEED TO WRITE
         BNO   WUT4X               BRANCH IF NO
         PUT   SYSUT4,0(R6)        WRITE RECORD TO SYSUT4 D/S
         AP    CNTUT4,ONE          INCREMENT RECORD COUNTER
WUT4X    SUBOUT ,                  RETURN TO CALLER
         SPACE 2
         EJECT
*******************************************************************
*        SUPPLY DEFAULT RECORD LENGTH AND/OR BLOCK SIZE           *
*         IF NOT CODED.                                           *
*******************************************************************
         SPACE 1
BLKSZRTN SUBIN ,                   SUPPLY DEFAULT LRECL AND/OR BLKS
         USING IHADCB,R1           ESTABLISH DCB ADDRESSABILITY
         CLC   DCBLRECL,ZEROWORD   TEST IF LRECL SUPPLIED
         BNE   *+8                 BYPASS DEFAULT IF YES
         MVI   DCBLRECL+1,80       FORCE LRECL TO 80
         CLC   DCBBLKSI,ZEROWORD   TEST IF BLKSIZE SUPPLIED
         BNE   0(R14)              RETURN TO OPEN IF YES
         MVC   DCBBLKSI,DCBLRECL   FORCE SINGLE BLOCKING
         DROP  R1                  DROP DCB ADDRESSABILITY
         SUBOUT RETURN=(R14)       RETURN TO OPEN ROUTINES
         SPACE 2
*******************************************************************
*        I/O ERROR ROUTINE                                        *
*******************************************************************
         SPACE 1
IOERROR  SUBIN ,                   ANALYSE I/O ERROR
         MVC   COMPCODE,COND16     SET COMPLETION CODE
         SYNADAF ACSMETH=QSAM      CALL ANALYSIS ROUTINE
         MVC   WTOIOE+27(86),50(R1) ADD RESULT OF ANALYSIS TO LINE
         SYNADRLS ,                RELEASE OS BUFFER
         WTO   MF=(E,WTOIOE)       TELL OPERATOR OF ERROR
         SUBOUT RETURN=JOBEND      TERMINATE JOB
         EJECT
*******************************************************************
*        TEST IF A DD STATEMENT IS PRESENT BEFORE OPEN            *
*******************************************************************
         SPACE 1
TESTIOT  SUBIN ,                   TEST TASK INPUT/OUTPUT TABLE
         TESTIOT DDNAME=4(R2)      TEST IF DDNAME FOUND IN TIOT
         B     *+4(R15)            TEST CONDITION CODE
         OI    0(R2),DDPRES        TELL THAT DD STATEMENT SUPPLIED
         SUBOUT ,                  RETURN TO CALLER
         SPACE 3
*******************************************************************
*        OPEN ROUTINE                                             *
*******************************************************************
         SPACE 1
OPEN     SUBIN SAVE=(R3)           OPEN DATA SET
         TM    0(R2),DDINT+DDPRES  TEST IF DD INTERESTING AND
         BNO   OPENX               BRANCH IF NO    / PRESENT.
         L     R3,0(R2)            GET DCB ADDRESS
         CLC   12(8,R2),=C'INPUT   ' TEST FOR INPUT D/S
         BE    OPENZ               BRANCH IF INPUT D/S
         OPEN  ((R3),(OUTPUT))     OPEN OUTPUT DATA SET
         B     OPENY               GO SET SWITCH
OPENZ    OPEN  ((R3),(INPUT))      OPEN INPUT DATA SET
OPENY    OI    0(R2),DDOPEN        INDICATE DATA SET OPEN
OPENX    SUBOUT RESTORE=(R3)       RETURN TO CALLER
         SPACE 3
*******************************************************************
*        CLOSE ROUTINE                                            *
*******************************************************************
         SPACE 1
CLOSE    SUBIN SAVE=(R3)           CLOSE DATA SET
         TM    0(R2),DDOPEN        TEST IF DATA SET OPEN
         BZ    CLOSEX              EXIT IF NOT
         L     R3,0(R2)            GET DCB ADDRESS
         CLOSE ((R3))              CLOSE DATA SET
         NI    0(R2),FF-DDOPEN     SET OFF 'OPEN' SWITCH
CLOSEX   SUBOUT RESTORE=(R3)       RETURN TO CALLER
         TITLE 'DCB''S AND I/O CONTROL TABLES'
*******************************************************************
*        DCB'S TABLE                                              *
*******************************************************************
         SPACE 1
DCBTABLE DS    0F
PRINTSW  DC    X'00',AL3(SYSPRINT),CL8'SYSPRINT',CL8'OUTPUT'
SYSUT1SW DC    X'00',AL3(SYSUT1),CL8'SYSUT1',CL8'INPUT'
SYSUT2SW DC    X'00',AL3(SYSUT2),CL8'SYSUT2',CL8'OUTPUT'
SYSUT3SW DC    X'00',AL3(SYSUT3),CL8'SYSUT3',CL8'OUTPUT'
SYSUT4SW DC    X'00',AL3(SYSUT4),CL8'SYSUT4',CL8'OUTPUT'
         SPACE 1
TABSIZE  EQU   *-DCBTABLE          DCB'S TABLE SIZE
DCBNTRY  EQU   20                  LENGTH OF ONE TABLE ELEMENT
MAXDS    EQU   TABSIZE/DCBNTRY     MAXIMUN NUMBER OF DCB'S
         SPACE 1
DDINT    EQU   16                  DD INTEREST
DDPRES   EQU   8                   DD PRESENT
DDOPEN   EQU   1                   DATA SET IS OPEN
         SPACE 2
EXITLIST DC    X'85',AL3(BLKSZRTN) ENTRY FOR DCB MODIFICATION
         SPACE 2
WTOIOE   DS    0F
         DC    AL2(WTOEND-*),H'0',CL109'******** - I/O ERROR -'
WTOEND   EQU   *
         EJECT
*******************************************************************
*        DATA CONTROL BLOCKS                                      *
*******************************************************************
         SPACE 1
SYSPRINT DCB   DDNAME=SYSPRINT,                                        C
               DSORG=PS,                                               C
               SYNAD=IOERROR,                                          C
               EXLST=EXITLIST,                                         C
               RECFM=FBM,                                              C
               MACRF=PL,                                               C
               LRECL=133
         SPACE 3
SYSUT1   DCB   DDNAME=SYSUT1,                                          C
               DSORG=PS,                                               C
               SYNAD=IOERROR,                                          C
               EXLST=EXITLIST,                                         C
               MACRF=GM,                                               C
               EODAD=EODUT1
         SPACE 3
SYSUT2   DCB   DDNAME=SYSUT2,                                          C
               DSORG=PS,                                               C
               SYNAD=IOERROR,                                          C
               EXLST=EXITLIST,                                         C
               RECFM=FB,                                               C
               LRECL=80,                                               C
               MACRF=PM
         SPACE 3
SYSUT3   DCB   DDNAME=SYSUT3,                                          C
               DSORG=PS,                                               C
               SYNAD=IOERROR,                                          C
               EXLST=EXITLIST,                                         C
               RECFM=FB,                                               C
               LRECL=160,                                              C
               MACRF=PM
         SPACE 3
SYSUT4   DCB   DDNAME=SYSUT4,                                          C
               DSORG=PS,                                               C
               SYNAD=IOERROR,                                          C
               EXLST=EXITLIST,                                         C
               RECFM=FB,                                               C
               LRECL=80,                                               C
               MACRF=PM
         SPACE 3
         TITLE 'MISCELLANIOUS EQUATES, CONSTANTS AND WORK AREAS'
*******************************************************************
*        EQUATES                                                  *
*******************************************************************
         SPACE 1
FF       EQU   255                 FOR 'NI' INSTRUCTION
BLANK    EQU   X'40'               BLANK
ON       EQU   X'FF'               ON
OFF      EQU   X'00'               OFF
HIGHVAL  EQU   X'FF'               HIGH VALUE
LOWVAL   EQU   X'00'               LOW VALUE
SIGN     EQU   X'F0'               FOR FORCE SIGN TO 'F'
PERIOD   EQU   C'.'                PERIOD CONSTANT
         SPACE 1
SPCE1AFT EQU   X'09'               SPACE 1 AFTER PRINTING
SPCE2AFT EQU   X'11'               SPACE 2 AFTER PRINTING
SPCE3AFT EQU   X'19'               SPACE 3 AFTER PRINTING
PAGESKIP EQU   X'89'               SKIP TO NEW PAGE
         EJECT
*******************************************************************
*        CONSTANTS                                                *
*******************************************************************
         SPACE 1
ZEROWORD DC    F'0'                BINARY ZERO FULLWORD FOR TESTS
         SPACE 1
COND4    DC    H'4'                COMPLETION CODE OF 4
COND8    DC    H'8'                COMPLETION CODE OF 8
COND12   DC    H'12'               COMPLETION CODE OF 12
COND16   DC    H'16'               COMPLETION CODE OF 16
         SPACE 1
ZERO     DC    PL1'0'              PACKED CONSTANT OF ZERO
ONE      DC    PL2'1'              PACKED CONSTANT OF ONE
FIFTY    DC    PL2'50'             FIFTY
SIXTY    DC    PL2'60'             SIXTY
HUNDRED  DC    PL2'100'            ONE HUNDRED
ELAPSSEC DC    PL4'8640000'        NBR OF /100 SEC PER DAY
         EJECT
*******************************************************************
*        WORK AREAS                                               *
*******************************************************************
         SPACE 1
DECIMAL  DS    D                   WA FOR DECIMAL OPERATIONS
COMPCODE DC    H'0'                CONDITION CODE
         SPACE 1
PARMLGTH DC    F'0'                LENGTH OF PARM OF EXEC CARD
PARMADDR DS    F                   ADDRESS OF PARM INFO'S
         SPACE 1
PAGECOUN DC    PL2'0'              COUNT OF PAGES
LINECOUN DC    PL2'0'              COUNT OF LINES
MAXLINE  DC    PL2'55'             MAXIMUM NUMBER OF LINES PER PAGE
         SPACE 1
CNTUT1   DC    PL4'0'
CNTUT2   DC    PL4'0'
CNTUT3   DC    PL4'0'
CNTUT4   DC    PL4'0'
BINSTORE DC    F'0'                WORK AREA FOR PACKED OPERATIONS
CONDMASK DC    X'40202120'
EDITCVD  DC    X'40202020202020202020202020202120'
EDITJUL  DC    X'4021204B202020'
EDMMMSS  DC    X'40202021212020'
EDHHMMSS DC    X'40212020212020212020'
DISPLAY  DS    CL16                EBCDIC WORK AREA
EDITWORK DS    CL10                EDIT WORK AREA
TIMEHMS  DS    CL8                 EDITED HH.MM.SS
TIMEHMS2 DS    CL6                 UNEDITED HHMMSS
DATEJUL  DS    CL6                 EDITED YY.DDD
DATEJUL2 DS    CL5                 UNEDITED YYDDD
TIMEMS   DS    CL6                 EDITED MMM.SS
         SPACE 1
ELAPSSD  DC    PL4'0'              DATE START FOR ELAPS CALC.
ELAPSPD  DC    PL4'0'              DATE STOP  FOR ELAPS CALC.
ELAPSST  DC    F'0'                TIME START FOR ELAPS CALC.
ELAPSPT  DC    F'0'                TIME STOP  FOR ELAPS CALC.
ELAPTIME DC    F'0'                ELAPSED TIME RESULT
         SPACE 1
TABLECLS DC    256C'N'             CLASS VALIDATION TR TABLE(DEFAULT=N)
         ORG   TABLECLS+C'A'
         DC    C'ABCDEFGHI'
         ORG   TABLECLS+C'J'
         DC    C'JKLMNOPQR'
         ORG   TABLECLS+C'S'
         DC    C'STUVWXYZ'
         SPACE 1
READAREA DS    4096C                  SYSUT1 READ AREA
WORKAREA DC    CL256' '               FOR FORMATTED OUTPUT RECORDS
         EJECT
*******************************************************************
*        LITERAL POOL                                             *
*******************************************************************
         SPACE 1
         LTORG
         TITLE 'DCB DSECT'
*******************************************************************
*        DCB DSECT                                                *
*******************************************************************
         SPACE 1
         PRINT ON,NOGEN
         DCBD  DSORG=PS            GENERATE DCB DSECT
         PRINT NOGEN
         END
