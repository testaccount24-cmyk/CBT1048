 PARROT:  PROC OPTIONS(MAIN);                                              00010
                                                                           00020
          DCL                                                              00030
                                                                           00040
     /* *********************************************************** */     00050
     /*                                                             */     00060
     /* THE FIVE FILES DECLARED HERE ARE MANDATORY FOR ALL          */     00070
     /* APPLICATIONS. THE FILES ARE:                                */     00080
     /*                                                             */     00090
     /*   SYSUT1    - THE INPUT DATA SET TO BE REPORTED ON.         */     00100
     /*               THIS MUST BE A SEQUENTIAL FILE, EITHER        */     00110
     /*               WITH FIXED OR VARYING RECORD LENGTH, AND      */     00120
     /*               CURRENTLY HAS A MAXIMUM LOGICAL RECORD        */     00130
     /*               LENGTH OF 600 BYTES.                          */     00140
     /*                                                             */     00150
     /*   SYSIN     - INPUT CONTROL CARDS. THIS WILL USUALLY BE     */     00160
     /*               A DD * FILE, BUT CAN BE CARD IMAGES ON TAPE/  */     00170
     /*               DISK. LOGICAL RECORD LENGTH MUST BE 80 BYTES. */     00180
     /*                                                             */     00190
     /*   PRINT     - THE OUTPUT REPORT FILE. THIS CAN GO EITHER    */     00200
     /*               DIRECT TO PRINTER, OR TO SPOOL, BUT IN        */     00210
     /*               EITHER CASE THE FULL DCB                      */     00220
     /*                 (RECFM=FBA,LRECL=133,BLKSIZE=133)           */     00230
     /*                       MUST BE SPECIFIED. (IF THE PRINT IS   */     00240
     /*               BEING SPOOLED, THE ATTRIBUTE 'A' IN THE       */     00250
     /*               RECFM PARAMETER IS TO BE ENTERED WHEN THE     */     00260
     /*               PRINT IS TAKEN OFF THE SPOOL).                */     00270
     /*                                                             */     00280
     /*   SYSLIN    - AN INPUT DATA SET CONTAINING PRINT-LINE       */     00290
     /*               IMAGES OF THE PICTURE OF A PARROT WHICH IS    */     00300
     /*               PRINTED BETWEEN THE CONTROL STATEMENTS AND    */     00310
     /*               THE START OF THE REPORT.  THE FULL DCB IS     */     00320
     /*                      DCB=(RECFM=FBA,LRECL=133,BLKSIZE=133)  */     00330
     /*                                                             */     00340
     /*   TW80      - THE OUTPUT RANGE ANALYSIS REPORT. ALL THE     */     00350
     /*               NOTES UNDER 'PRINT' APPLY HERE.               */     00360
     /*                                                             */     00370
     /* *********************************************************** */     00380
                                                                           00390
          SYSUT1 FILE RECORD SEQUENTIAL,                                   00400
          SYSIN  FILE RECORD SEQUENTIAL,                                   00410
          SYSLIN FILE RECORD SEQUENTIAL,                                   00420
          TW80   FILE RECORD SEQUENTIAL,                                   00430
          WORK   FILE RECORD SEQUENTIAL,                                   00440
          PRINT  FILE RECORD SEQUENTIAL;                                   00450
                                                                           00460
     /* *********************************************************** */     00470
     /*                                                             */     00480
     /* OTHER FILES WHICH SHOULD BE ENTERED IN DD STATEMENTS IN THE */     00490
     /* JCL ARE:                                                    */     00500
     /*                                                             */     00510
     /*   SYSPRINT  - A PL/1 REQUIREMENT FOR MESSAGES FROM THE      */     00520
     /*               ERROR HANDLER ROUTINE.                        */     00530
     /*                                                             */     00540
     /* AND, IF AN INTERNAL SORT OF THE INPUT DATA IS REQUESTED,    */     00550
     /*                                                             */     00560
     /*   SYSOUT    - REQUIRED FOR MESSAGES FROM THE SORT PACKAGE.  */     00570
     /*   SORTLIB   - THE SYSTEM SORT LIBRARY.                      */     00580
     /*   SORTWKNN  - SORT WORK AREAS.                              */     00590
     /*                                                             */     00600
     /* NOTE THAT SORTIN AND SORTOUT ARE NOT REQUIRED, AND THAT     */     00610
     /* THE SYSIN DATA SET TO THE SORT IS INCLUDED IN THE CONTROL   */     00620
     /* CARDS TO THIS PROGRAM.                                      */     00630
     /*                                                             */     00640
     /* *********************************************************** */     00650
                                                                           00660
                                                                           00670
          DCL                                                              00680
                                                                           00690
     /* *********************************************************** */     00700
     /*                                                             */     00710
     /* 'INREC' IS THE DATA AREA WHEREIN THE CURRENT SYSUT1 RECORD  */     00720
     /* IS BEING PROCESSED.                                         */     00730
     /*                                                             */     00740
     /* *********************************************************** */     00750
                                                                           00760
          INREC CHAR(1200) VARYING STATIC EXTERNAL,                        00770
                                                                           00780
     /* *********************************************************** */     00790
     /*                                                             */     00800
     /* 'INCARD' IS THE RECEIVING AREA FPR THE CONTROL CARDS INTO   */     00810
     /* THE PROGRAM, AND DEFINED ON THIS STRING ARE THE STRUCTURES  */     00820
     /* FOR EACH INDIVIDUAL CARD TYPE.                              */     00830
     /* THE CARD TYPES, WITH REQUIREMENTS AND DESCRIPTION, ARE:     */     00840
     /*                                                             */     00850
     /*    1-4   MIN MAX  DESCRIPTION.                              */     00860
     /*                                                             */     00870
     /*    GR01   0   5   MAKE UP THE 3 LINES OF THE REPORT HEADING */     00880
     /*    GR02   0  20   GIVE CRITERIA FOR SELECTING RECORDS.      */     00890
     /*    GR03   1   1   SPECIFY THE KEY FIELDS FOR TOTALS, ETC.   */     00900
     /*    GR04   1   9   SPECIFY THE VALUE FIELDS ON THE FILE THAT */     00910
     /*                   WILL BE PROCESSED / PRINTED.              */     00920
     /*    GR05   0   1   IF PRESENT, INDICATES THAT ALL DETAIL     */     00930
     /*                   RECORDS ARE TO BE PRINTED.                */     00940
     /*    GR06   0   1   IF PRESENT, WILL CAUSE THE RECORDS TO BE  */     00950
     /*                   SORTED BEFORE BEING PROCESSED.            */     00960
     /*    GR07   0  20   AVAILABLE FOR USER-CODED ARITHMETIC.      */     00970
     /*    GR08   1   1   SPECIFIES WHICH VALUES (FIELDS FROM FILE  */     00980
     /*                   OR ARITHMETIC RESULTS) ARE TO BE PRINTED. */     00990
     /*    GR09   0  20   SPECIFIES THE RANGES FOR 2080 ANALYSES    */     01000
     /*                                                             */     01010
     /* *********************************************************** */     01020
                                                                           01030
          INCARD CHAR (80),                                                01040
          GR04_ALPHAKEY CHAR(1) DEF INCARD POS(14),                        01041
                                                                           01050
          1 GR01 DEFINED INCARD,                                           01060
            3 DES_GR01   CHAR (4),                                         01070
            3 BYTE_GR01  CHAR (1),                                         01080
            3 TITLE_GR01 CHAR (75),                                        01090
                                                                           01100
          1 GR02 DEFINED INCARD,                                           01110
            3 DES_GR02   CHAR (4),                                         01120
            3 FIL_GR02   (4),                                              01130
              5 CPOS_GR02 PIC '999',                                       01140
              5 CLEN_GR02 PIC '99',                                        01150
              5 CPAK_GR02 CHAR (1),                                        01160
              5 CTYP_GR02 CHAR (2),                                        01170
              5 CLIT_GR02 CHAR (11),                                       01180
                                                                           01190
          1 GR03 DEFINED INCARD,                                           01200
            3 DES_GR03   CHAR (4),                                         01210
            3 FIL_GR03   (4),                                              01220
              5 CPOS_GR03 PIC '999',                                       01230
              5 CLEN_GR03 PIC '99',                                        01240
              5 CPAK_GR03 CHAR (1),                                        01250
              5 CTOT_GR03 CHAR (1),                                        01260
              5 CPAG_GR03 CHAR (1),                                        01270
              5 CNAM_GR03 PIC '999',                                       01280
              5 CNML_GR03 PIC '99',                                        01290
              5 CTW8_GR03 CHAR (1),                                        01300
              5 CLCT_GR03 PIC'99',                                         01310
              5 CFIL_GR03 CHAR(3),                                         01320
                                                                           01330
          1 GR04 DEFINED INCARD,                                           01340
            3 DES_GR04   CHAR (4),                                         01350
            3 CFLD_GR04  CHAR (2),                                         01360
            3 CPOS_GR04  PIC '999',                                        01370
            3 CLEN_GR04  PIC '99',                                         01380
            3 CPAK_GR04  CHAR (1),                                         01390
            3 CDEC_GR04  PIC '9',                                          01400
            3 CKEY_GR04 PIC'9',                                            01410
            3 CFIL_GR04 CHAR(9),                                           01420
            3 FIL_GR04 (3),                                                01430
              5 CSPOS_GR04 PIC'999',                                       01440
              5 CSLEN_GR04 PIC'99',                                        01450
              5 CSPAK_GR04 CHAR(1),                                        01460
              5 CSTYP_GR04 CHAR(2),                                        01470
              5 CSLIT_GR04 CHAR(11),                                       01480
                                                                           01490
          1 GR05 DEFINED INCARD,                                           01500
            3 DES_GR05   CHAR (4),                                         01510
            3 CPOS_GR05  PIC '999',                                        01520
            3 CLEN_GR05  PIC '99',                                         01530
            3 CFIL_GR05  CHAR (71),                                        01540
                                                                           01550
          1 GR06 DEFINED INCARD,                                           01560
            3 DES_GR06   CHAR (4),                                         01570
            3 SORT_GR06  CHAR (76),                                        01580
                                                                           01590
          1 GR07 DEFINED INCARD,                                           01600
            3 DES_GR07   CHAR (4),                                         01610
            3 CFLD_GR07  CHAR (2),                                         01620
            3 CARI_GR07  CHAR (73),                                        01630
            3 CTOT_GR07  CHAR (1),                                         01640
                                                                           01650
           1 GR07TEST DEF INCARD,                                          01660
            3 DES_GR07TST  CHAR(4),                                        01670
            3 CFLD_GR07TST CHAR(2),                                        01680
            3 TEST_GR07TST CHAR(4),                                        01690
            3 FLD1_GR07TST CHAR(2),                                        01700
            3 EQGT_GR07TST CHAR(2),                                        01710
            3 FLD2_GR07TST CHAR(2),                                        01720
            3 GOTO_GR07TST CHAR(2),                                        01730
            3 SPRE_GR07TST CHAR(62),                                       01740
                                                                           01750
          1 GR08 DEFINED INCARD,                                           01760
            3 DES_GR08   CHAR (4),                                         01770
            3 CPRT_GR08 (5),                                               01780
              5 CFLD_GR08  CHAR (2),                                       01790
              5 CDEC_GR08  PIC '9',                                        01800
            3 CTW8_GR08  CHAR (2),                                         01810
            3 CDES_GR08  CHAR (59),                                        01820
                                                                           01830
          1 GR09 DEFINED INCARD,                                           01840
            3 DES_GR09   CHAR (4),                                         01850
            3 FILA_GR09  CHAR (6),                                         01860
            3 CVAL_GR09  PIC '999999999R',                                 01870
            3 FILB_GR09 CHAR(60),                                          01880
                                                                           01890
          1 GR10 DEF INCARD,                                               01900
            3 DES_GR10  CHAR(4),                                           01910
            3 KEY_GR10  PIC'9',                                            01920
            3 SPOS_GR10 PIC'999',                                          01930
            3 EPOS_GR10 PIC'999',                                          01940
            3 FLD_GR10  CHAR(5),                                           01950
            3 FMAT_GR10 CHAR(1),                                           01960
            3 DECS_GR10 PIC'9',                                            01970
            3 FILA_GR10 CHAR(2),                                           01980
            3 LIT_GR10  CHAR(60);                                          01990
                                                                           02000
                                                                           02010
                                                                           02020
          DCL                                                              02030
                                                                           02040
     /* *********************************************************** */     02050
     /*                                                             */     02060
     /* THE FOLLOWING ARE INSERTED HERE AS AN AMENDMENT TO THE      */     02070
     /* ORIGINAL PROGRAM, TO INTRODUCE INTO IT THE TWENTY-EIGHTY    */     02080
     /* RANGE ANALYSIS FACILITY. TO SIMPLIFY RECOGNISING THESE      */     02090
     /* FIELDS IN THE PROGRAM, THEY ARE ALL PREFIXED WITH 'TW'.     */     02100
     /* THEY ARE:                                                   */     02110
     /*                                                             */     02120
     /*   HEADA,B.. - THE 4 HEADING LINES FOR THE REPORT.           */     02130
     /*   LINEA     - THE DETAIL REPORT LINE.                       */     02140
     /*   ARRAY     - CONTAINING THE VALUES, COUNTS AND RANGES      */     02150
     /*               FOR EACH KEY BREAK, EACH RANGE.               */     02160
     /*   TW80SW    - SWITCH SET ON IF ANALYSIS REQUIRED.           */     02170
     /*   TW80VAL   - SUBSCRIPT OF VARIABLE TO BE ANALYSED.         */     02180
     /*   PRRA,B,C  - THE FIELDS FOR SETTING 'RANGE A TO B' IN      */     02190
     /*               THE PRINT LINE.                               */     02200
     /*   PAGE      - PAGE NUMBER FOR HEADINGS.                     */     02210
     /*   SUBSW     - SWITCH IF SUBANALYSIS (MAJOR KEY) WANTED.     */     02220
     /*   RNGES     - A COUNT OF THE NUMBER OF GR09 CARDS.          */     02230
     /*   INTPCT  |                                                 */     02240
     /*   TOTENT  |                                                 */     02250
     /*   TOTVAL  |                                                 */     02260
     /*   CUMENT  | - INTERMEDIATE WORK AREAS USED WHEN PREPARING   */     02270
     /*   CUMVAL  |   A LINE FOR PRINT OUTPUT.                      */     02280
     /*   INTENT  |                                                 */     02290
     /*   INTVAL  |                                                 */     02300
     /*                                                             */     02310
     /* *********************************************************** */     02320
                                                                           02330
          1 TWHEADA,                                                       02340
            3 TWBYTE_HEADA CHAR (20) INIT('1RANGE ANALYSIS.'),             02350
            3 TWHEAD_HEADA CHAR (75),                                      02360
            3 TWFILE_HEADA CHAR (11) INIT('      DATE'),                   02370
            3 TWDATE_HEADA CHAR (9),                                       02380
            3 TWFILB_HEADA CHAR (11) INIT('      PAGE'),                   02390
            3 TWPAGE_HEADA PIC 'ZZZ9BBB',                                  02400
                                                                           02410
          1 TWHEADB,                                                       02420
            3 TWBYTE_HEADB CHAR (1)  INIT('0'),                            02430
            3 TWHED1_HEADB CHAR (60),                                      02440
            3 TWFILA_HEADB CHAR (42) INIT                                  02450
                   ('             RANGE ANALYSIS FOR VARIABLE: '),         02460
            3 TWVARB_HEADB CHAR (30),                                      02470
                                                                           02480
          1 TWHEADC,                                                       02490
            3 TWFILA_HEADC CHAR (73)  INIT('0'),                           02500
            3 TWFILB_HEADC CHAR (60)                                       02510
                           INIT ('-----------CUMULATIVE-----------'),      02520
                                                                           02530
          1 TWHEADD,                                                       02540
            3 TWFILA_HEADD CHAR (32)  INIT('            RANGE'),           02550
            3 TWFILB_HEADD CHAR (41)                                       02560
                           INIT (' ENTRIES    %          VALUE   %'),      02570
            3 TWFILC_HEADD CHAR (60)                                       02580
                           INIT ('ENTRIES    %           VALUE   %'),      02590
                                                                           02600
          1 TWLINEA,                                                       02610
            3 TWBYTE_LINEA CHAR(1) INIT('0'),                              02620
            3 TWRNGE_LINEA CHAR(32),                                       02630
            3 TWENTA_LINEA PIC 'ZZZZZZ9',                                  02640
            3 TWEPCA_LINEA PIC 'ZZZZ9V.99',                                02650
            3 TWVALA_LINEA PIC 'ZZZZZZZZZZ9-',                             02660
            3 TWVPCA_LINEA PIC 'ZZZ9V.99-',                                02670
            3 TWENTB_LINEA PIC 'ZZZZZZZZZZZ9',                             02680
            3 TWEPCB_LINEA PIC 'ZZZZ9V.99',                                02690
            3 TWVALB_LINEA PIC 'ZZZZZZZZZZZ9-',                            02700
            3 TWVPCB_LINEA PIC 'ZZZ9V.99-',                                02710
            3 TWFILA_LINEA CHAR(24) INIT(' '),                             02720
                                                                           02730
                                                                           02740
          1 TWARRAY (21),                                                  02750
            3 TWARQTY (2) FIXED (7)    INIT((42)0),                        02760
            3 TWARVAL (2) FIXED (15,4) INIT((42)0),                        02770
            3 TWARNGE      FIXED (11),                                     02780
                                                                           02790
          TW80SW  BIT(1) INIT('0'B),                                       02800
          TW80VAL FIXED(3),                                                02810
                                                                           02820
          TWPRRA CHAR(27),                                                 02830
          1 TWPRA   DEFINED TWPRRA,                                        02840
            3 TWPRAX CHAR(16),                                             02850
            3 TWPRAY PIC 'ZZZZZZZZZ9-',                                    02860
          TWPRRB CHAR(27),                                                 02870
          1 TWPRB   DEFINED TWPRRB,                                        02880
            3 TWPRBX PIC 'ZZZZZZZZZ9-',                                    02890
            3 TWPRBY CHAR (5),                                             02900
            3 TWPRBZ PIC 'ZZZZZZZZZ9-',                                    02910
          TWPRRC CHAR(27),                                                 02920
          1 TWPRC   DEFINED TWPRRC,                                        02930
            3 TWPRCX PIC 'ZZZZZZZZZ9-',                                    02940
            3 TWPRCY CHAR(16),                                             02950
                                                                           02960
          TWPAGE    FIXED(3) INIT(0),                                      02970
          TWSUBSW   BIT(1)   INIT('0'B),                                   02980
          TWRNGES   FIXED(3) INIT(0),                                      02990
                                                                           03000
          TWINTPCT FIXED (7,3),                                            03010
          TWTOTENT FLOAT DECIMAL (16),                                     03020
          TWTOTVAL FLOAT DECIMAL (16),                                     03030
          TWCUMENT FLOAT DECIMAL (16),                                     03040
          TWCUMVAL FLOAT DECIMAL (16),                                     03050
          TWINTENT FLOAT DECIMAL (16),                                     03060
          TWINTVAL FLOAT DECIMAL (16);                                     03070
                                                                           03080
                                                                           03090
          DCL                                                              03100
                                                                           03110
     /* *********************************************************** */     03120
     /*                                                             */     03130
     /* NEXT WE HAVE THE VARIOUS AREAS FOR THE REPORT LINES. THERE  */     03140
     /* ARE FOUR OF THESE, THE THREE HEADING LINES (HEADA, HEADBX,  */     03150
     /* AND HEADCX), AND ONE 'GENERALISED' DETAIL LINE, LINEA.      */     03160
     /* 'CNT_LINE' IS THE POSITION ON THE LINE OF THE RECORD COUNT, */     03170
     /* WHEN PRINTED.                                               */     03180
     /*                                                             */     03190
     /* *********************************************************** */     03200
                                                                           03210
          1 HEADA,                                                         03220
            3 BYTE_HEADA CHAR (20) INIT ('1'),                             03230
            3 HEAD_HEADA CHAR (75),                                        03240
            3 FILE_HEADA CHAR (11) INIT ('     DATE'),                     03250
            3 DATE_HEADA CHAR (9),                                         03260
            3 FILB_HEADA CHAR (11) INIT ('     PAGE'),                     03270
            3 PAGE_HEADA PIC 'ZZZ9BBB',                                    03280
                                                                           03290
          1 HEADBX CHAR (133),                                             03300
          1 HEADB  DEFINED HEADBX,                                         03310
            3 BYTE_HEADB CHAR (1),                                         03320
            3 HED1_HEADB CHAR (75),                                        03330
            3 HED2_HEADB CHAR (57),                                        03340
                                                                           03350
          HEADX CHAR(133),                                                 03360
          HX_BYTE CHAR(1),                                                 03370
          1 HEADCX CHAR (133),                                             03380
          1 HEADC  DEFINED HEADCX,                                         03390
            3 BYTE_HEADC CHAR (1),                                         03400
            3 HED1_HEADC CHAR (75),                                        03410
            3 HED2_HEADC CHAR (57),                                        03420
                                                                           03430
          LINEA CHAR(133) INIT(' '),                                       03440
          1 LINEAXXXXX DEF LINEA,                                          03450
            3 BYTE_LINE CHAR(1),                                           03460
            3  KEY_LINE  CHAR (36),                                        03470
            3 NAME_LINE  CHAR (26),                                        03480
            3 VALUEX_LINE CHAR (70),                                       03490
                                                                           03500
          CNT_LINE PIC 'ZZZZ9BB' DEFINED LINEA POSITION (57),              03510
                                                                           03520
     /* *********************************************************** */     03530
     /*                                                             */     03540
     /* THE FIVE VALUES TO BE PRINTED ARE RIGHT-ALIGNED ON THE      */     03550
     /* SIGN, AND CAN HAVE THE DECIMAL POINT IN VARYING POSITIONS   */     03560
     /* ALONG THE VALUE (MAX = 4D.P.S, MIN = NONE). THE 'LVAL'      */     03570
     /* FIELDS ARE USED TO PUT THE VALUES IN THE CORRECT PLACE ON   */     03580
     /* THE PRINT LINE.                                             */     03590
     /*                                                             */     03600
     /* *********************************************************** */     03610
                                                                           03620
          1 VALUES_LINE DEFINED LINEA POSITION (64),                       03630
            3 VAL_LINE (5) CHAR(14),                                       03640
                                                                           03650
          LVALX CHAR (16),                                                 03660
          LVAL PIC 'ZZZZZZZZZZZV9999-' DEFINED LVALX,                      03670
          1 LVAL_FIL DEFINED LVALX,                                        03680
            3 LVAL_UNITS CHAR (11),                                        03690
            3 LVAL_DECS  CHAR (4),                                         03700
            3 LVAL_SIGN  CHAR (1),                                         03710
          FMAT_X  CHAR(60),                                                03720
          FMAT_90 PIC'(15)9-'                              DEF FMAT_X,     03730
          FMAT_91 PIC'(14)9V.9-'                           DEF FMAT_X,     03740
          FMAT_92 PIC'(13)9V.99-'                          DEF FMAT_X,     03750
          FMAT_93 PIC'(12)9V.999-'                         DEF FMAT_X,     03760
          FMAT_94 PIC'(11)9V.9999-'                        DEF FMAT_X,     03770
          FMAT_Z0 PIC'(14)Z9-'                             DEF FMAT_X,     03780
          FMAT_Z1 PIC'(13)Z9V.9-'                          DEF FMAT_X,     03790
          FMAT_Z2 PIC'(12)Z9V.99-'                         DEF FMAT_X,     03800
          FMAT_Z3 PIC'(11)Z9V.999-'                        DEF FMAT_X,     03810
          FMAT_Z4 PIC'(10)Z9V.9999-'                       DEF FMAT_X,     03820
          FMAT_C0 PIC'ZZZ,ZZZ,ZZZ,ZZZ,ZZ9-'                DEF FMAT_X,     03830
          FMAT_C1 PIC'ZZ,ZZZ,ZZZ,ZZZ,ZZ9V.9-'              DEF FMAT_X,     03840
          FMAT_C2 PIC'Z,ZZZ,ZZZ,ZZZ,ZZ9V.99-'              DEF FMAT_X,     03850
          FMAT_C3 PIC'ZZZ,ZZZ,ZZZ,ZZ9V.999-'               DEF FMAT_X,     03860
          FMAT_C4 PIC'ZZ,ZZZ,ZZZ,ZZ9V.9999-'               DEF FMAT_X,     03870
                                                                           03880
     /* *********************************************************** */     03890
     /*                                                             */     03900
     /* THE 'DATE' NAMES FOLLOWING ARE USED TO TRANSLATE THE IBM    */     03910
     /* DATE FORMAT YYMMDD INTO THE MORE READABLE FORM  DD MMM YY.  */     03920
     /*                                                             */     03930
     /* *********************************************************** */     03940
                                                                           03950
          1 XDATE    CHAR (6),                                             03960
          1 XDTE     DEFINED XDATE,                                        03970
            3 XYEAR  CHAR (2),                                             03980
            3 XMONTH PIC '99',                                             03990
            3 XDAY   CHAR (2),                                             04000
          1 YDATE     CHAR (9),                                            04010
          1 YDTE     DEFINED YDATE,                                        04020
            3 YDAY   CHAR (2),                                             04030
            3 YFILA  CHAR (1),                                             04040
            3 YMONTH CHAR (3),                                             04050
            3 YFILB  CHAR (1),                                             04060
            3 YYEAR  CHAR (2),                                             04070
          1 ZMONTH   (12) CHAR (3) INIT ('JAN','FEB','MAR','APR',          04080
                                         'MAY','JUN','JUL','AUG',          04090
                                         'SEP','OCT','NOV','DEC'),         04100
                                                                           04110
     /* *********************************************************** */     04120
     /*                                                             */     04130
     /* FINALLY, AS FAR AS PRINTING GOES, SOME MISCELLANEOUS FIELDS */     04140
     /*                                                             */     04150
     /*   BLANKLINE - WHEN NECESSARY TO SPACE OUT LINES, AND ALSO   */     04160
     /*               USED TO PRINT THE CONTROL CARDS ON INPUT.     */     04170
     /*   KEYX_LINE - FOR PACKING THE FOUR VARIABLE-LENGTH KEYS.    */     04180
     /*   CBYT      - FOR HOLDING THE REQUESTED SPACING OF LINES.   */     04190
     /*   LINECT    - )                                             */     04200
     /*   PAGENO    - ) TO CONTROL PAGE SKIPPING.                   */     04210
     /*                                                             */     04220
     /* *********************************************************** */     04230
                                                                           04240
          1 BLANKLINE CHAR (133) INIT (' '),                               04250
          KEYX_LINE CHAR(36) VARYING STATIC,                               04260
          CBYT    CHAR(1) INIT(' '),                                       04270
          UBYT CHAR(1),                                                    04280
          SKIPPRINT BIT(1) INIT('0'B),                                     04290
          SKIPPRINX BIT(1) INIT('0'B),                                     04300
          PRTOTAL BIT(1) INIT('1'B),                                       04310
          LINECT FIXED(3) INIT(99),                                        04320
          LINECX FIXED(3) INIT(55),                                        04330
          PAGENO PIC '9999';                                               04340
                                                                           04350
                                                                           04360
          DCL                                                              04370
                                                                           04380
     /* *********************************************************** */     04390
     /*                                                             */     04400
     /* THE VARIOUS DATA NAMES REQUIRED BY THE PL/1 SORT INTERFACE: */     04410
     /*                                                             */     04420
     /*   SORTSW    - SWITCH WHETHER THE SORT IS REQUIRED OR NOT.   */     04430
     /*   SRTCNTIN  - ) COUNTS OF THE RECORDS INTO AND OUT OF THE   */     04440
     /*   SRTCNTOUT - ) SORT, SO THAT THE 'SORTOUT' PROCEDURE CAN   */     04450
     /*                 NOTIFY THE SORT WHEN NO MORE RECORDS ARE    */     04460
     /*                 REQUIRED.                                   */     04470
     /*   COREVAL   - ) FIELDS USED IN CALLING THE SUB-MODULE       */     04480
     /*   PARM      - ) 'CORECHK', WHICH ASCERTAINS HOW MUCH CORE   */     04490
     /*                 IS AVAILABLE. THUS A VALUE CAN BE PASSED TO */     04500
     /*                 THE SORT IN 'SRTCORE', ALLOWING THE PROGRAM */     04510
     /*                 TO OPTIMISE ON TIME.                        */     04520
     /*                                                             */     04530
     /* ALL OTHER DATA NAMES IN THIS SECTION ARE USED EXACTLY AS    */     04540
     /* DESCRIBED IN THE SORT INTERFACE SECTION (PAGE 184) OF THE   */     04550
     /* PL/1 PROGRAMMER'S GUIDE.                                    */     04560
     /*                                                             */     04570
     /* *********************************************************** */     04580
                                                                           04590
          SORTSW BIT(1) INIT('0'B),                                        04600
          IHESRTD ENTRY (CHAR(76),CHAR(36),FIXED BIN(31),                  04610
                         FIXED BIN(31),ENTRY,ENTRY),                       04620
          IHESARC ENTRY (FIXED BIN(31)),                                   04630
          SRTIN   ENTRY RETURNS (CHAR(1200) VARYING),                      04640
          SRTOUT  ENTRY,                                                   04650
          RETCOD  FIXED BIN(31),                                           04660
          SRTCNTIN  FIXED(7) INIT(0),                                      04670
          SRTCNTOUT FIXED(7) INIT(0),                                      04680
          SRTCORE FIXED BIN(31),                                           04690
          COREVAL PIC'99999999',                                           04700
          PARM    FIXED(1) BASED (Q),                                      04710
          SRTFLD  CHAR(76),                                                04720
          SRTYPE  CHAR(36) INIT(' RECORD TYPE=V,LENGTH=(1200,,,,100) ');   04730
                                                                           04740
                                                                           04750
          DCL                                                              04760
                                                                           04770
     /* *********************************************************** */     04780
     /*                                                             */     04790
     /* FIELDS WHICH ARE USED IN THE USER-CODED ARITHMETIC SECTION  */     04800
     /* OF THE PROGRAM. THESE ARE:                                  */     04810
     /*                                                             */     04820
     /*   VALUES    - OF THE 27-FOLD ARRAY, ELEMENTS 1 TO 9 ARE FOR */     04830
     /*               FILE VALUES (FIELDS F1 TO F9), ELEMENTS 10 TO */     04840
     /*               18 ARE FOR EXTRA FILE VALUES (G1 TO G9),      */     04850
     /*               ELEMENTS 19 TO 27 ARE FOR ARITHMETIC RESULTS  */     04860
     /*               (W1 TO W9).                                   */     04870
     /*   VALUE   |                                                 */     04880
     /*   VALUE1  |                                                 */     04890
     /*   VALUE2  |                                                 */     04900
     /*   VALUED  | - TEMPORARY WORK AREAS.                         */     04910
     /*   VALUEP  |                                                 */     04920
     /*   VALIT     - 22-FOLD ARRAY FOR CONSTANT LITERALS.          */     04930
     /*   CONST     - A POINTER TO THE LAST-USED IN THE CONSTANTS   */     04940
     /*               SECTION OF THE ARRAY 'VALIT'.                 */     04950
     /*   FLDDES    - A STRING USED IN CONJUNCTION WITH THE BUILTIN */     04960
     /*               FUNCTION INDEX TO TRANSLATE, FOR EXAMPLE, THE */     04970
     /*               FIELD NAME 'W1' INTO THE SUBSCRIPT 19.        */     04980
     /*   ARITHMETIC- AN ARRAY CONTAINING THE TRANSLATED VERSION OF */     04990
     /*               THE USER-CODED ARITHMETIC. FOR EACH GR07 CARD */     05000
     /*               THERE IS ONE ELEMENT IN THIS ARRAY.           */     05010
     /*   ARIFD     - THE RECEIVING FIELD (WX) IN SUBSCRIPT FORM.   */     05020
     /*   ARIOP   - ) ONE OF EACH OF THESE THREE FOR EACH OPERATOR  */     05030
     /*   ARISN   - ) ACROSS THE GR07 CARD. 'OP' IS ONE OF +,-,*,/, */     05040
     /*   ARINO   - ) 'SN' IS '-' IF THIS OPERAND HAD A MINUS       */     05050
     /*               PREFIX, AND 'NO' IS THE SUBSCRIPT OF THE      */     05060
     /*               FIELD NUMBER / NUMERIC LITERAL IN 'VALUES'.   */     05070
     /*   ARICN   - ) SWITCH SET IF OPERAND IS CONSTANT IN 'VALIT'. */     05080
     /*   ARITT     - SWITCH SET IF ARITHMETIC IS TOTAL-TIME.       */     05090
     /*   ARILN     - THE NUMBER OF OPERATORS ACROSS THIS CARD.     */     05100
     /*                                                             */     05110
     /*   ARIFX     - A TEMPORARY AREA FOR HOLDING FIELD NUMBER.    */     05120
     /*   NOARI     - THE TOTAL NUMBER OF GR07 CARDS READ.          */     05130
     /*   NOFLD     - THE TOTAL NUMBER OF GR04 CARDS READ.          */     05140
     /*   BLARITH - )                                               */     05150
     /*   BLBYTES - ) THE ARITHMETIC ON A GR07 CARD.                */     05160
     /*   NBLARI    - THE SAME, WITH ALL BLANKS STRIPPED OUT, AND   */     05170
     /*               PREFIXED WITH A '+'. (FIRST OPERATOR).        */     05180
     /*                                                             */     05190
     /* *********************************************************** */     05200
                                                                           05210
          1 IPMF_VALUES BASED(IPMF1),                                      05220
            3 IPMF_VALS,                                                   05230
            3 VALUES(IPMFVAL REFER(IPMF_VALS),10) FLOAT(16),               05240
          1 VALUE_IDS BASED(ID_VAL),                                       05241
            3 IDS_VAL,                                                     05242
            3 VAL_IDS(IDSVAL REFER(IDS_VAL)) FIXED BIN(15),                05243
          VALUE  FLOAT(16),                                                05250
          VALUE1 FLOAT(16),                                                05260
          VALUE2 FLOAT(16),                                                05270
          VALUED FLOAT(16),                                                05280
          VALUEP FLOAT(16),                                                05290
 VAL_DEC1 FIXED(15,1),                                                     05291
 VAL_DEC2 FIXED(15,2),                                                     05292
 VAL_DEC3 FIXED(15,3),                                                     05293
 VAL_DEC4 FIXED(15,4),                                                     05294
 VAL_DEC5 FIXED(15,5),                                                     05295
          VALIT (23)    FIXED(15,4) INIT((23)0),                           05300
          CONST         FIXED(3) INIT(0),                                  05310
          1 IPMF_FIELDS BASED(IPMF2),                                      05320
            3 IPMF_FLDS,                                                   05330
            3 FLDDES(IPMFFLD REFER(IPMF_FLDS))  CHAR(2),                   05340
          1 IPMF_ARITH BASED(IPMF3),                                       05350
           2 IPMF_ARI,                                                     05360
           2 ARITHMETIC(IPMFARI REFER(IPMF_ARI)),                          05370
            3 ARIFD FIXED BIN(3),                                          05380
            3 ARIOP (20) CHAR (1),                                         05390
            3 ARISN (20) CHAR (1),                                         05400
            3 ARINO (20) FIXED BIN(3),                                     05410
            3 ARICN (20) BIT(1),                                           05420
            3 ARITT BIT(1),                                                05430
            3 ARILN FIXED(3) INIT((20)0),                                  05440
          ARIFX CHAR (2),                                                  05450
          NOARI FIXED (3) INIT(0),                                         05460
          NOFLD FIXED (3) INIT(0),                                         05470
          BLARITH CHAR (74),                                               05480
          BLBYTES (74) CHAR(1) DEFINED BLARITH,                            05490
          NBLARI  CHAR(75) VARYING STATIC;                                 05500
                                                                           05510
                                                                           05520
          DCL                                                              05530
                                                                           05540
     /* *********************************************************** */     05550
     /*                                                             */     05560
     /* VARIOUS ARRAYS AND ACCUMULATORS USED IN THE PROGRAM.        */     05570
     /*                                                             */     05580
     /*   ARRAY1  - USED TO STORE THE SELECTION TESTS ON THE GR02   */     05590
     /*             CARDS. MAX 20 CARDS, UP TO 4 TESTS ON EACH.     */     05600
     /*             TEST VALUE IS EITHER CHARACTER, WHEN ARN = 1    */     05610
     /*             AND ARLIT IS USED, OR NUMERIC, ARN = 0 AND      */     05620
     /*             ARNUM HOLDS THE VALUE.                          */     05630
     /*                                                             */     05640
     /*   ARRAY2  - NO LONGER EXISTS.                               */     05650
     /*                                                             */     05660
     /*   ARRAY3  - HOLDS DATA FOR THE 4 KEYS FROM THE GR03 CARD.   */     05670
     /*                                                             */     05680
     /*   ARRAY4  - HOLDS THE SELECTED RECORD COUNT FOR EACH OF THE */     05690
     /*             FIVE TOTALS (4 KEYS & GRAND).                   */     05700
     /*                                                             */     05710
     /*   ARRAY5  - HOLDS THE FIELD DESCRIPTIONS FROM THE POSSIBLE  */     05720
     /*             EIGHTEEN GR04 CARDS.                            */     05730
     /*                                                             */     05740
     /*   ARRAY6  - HOLDS THE 5 FIELD NAMES THAT ARE TO BE PRINTED. */     05750
     /*                                                             */     05760
     /* *********************************************************** */     05770
                                                                           05780
          1 IPMF_GR02 BASED(IPMF4),                                        05790
           2 IPMF_GR2,                                                     05800
           2 ARRAY1(IPMFGR2 REFER(IPMF_GR2),4),                            05810
            3 ARPOS FIXED (3),                                             05820
            3 ARLEN FIXED (2),                                             05830
            3 ARPAK CHAR (1),                                              05840
            3 ARTYP CHAR (2) INIT((80)(2)' '),                             05850
            3 ARN   BIT (1),                                               05860
            3 ARLIT CHAR (11),                                             05870
            3 ARNUM FIXED (11),                                            05880
                                                                           05890
          1 ARRAY3(8),                                                     05900
            3 ARPOS_GR03 FIXED BIN(15) INIT((8)0),                         05910
            3 ARLEN_GR03 FIXED (2),                                        05920
            3 ARPAK_GR03 CHAR (1),                                         05930
            3 ARTOT_GR03 CHAR (1),                                         05940
            3 ARPAG_GR03 CHAR(1) INIT((8)(1)' '),                          05950
            3 ARNAM_GR03 FIXED (3),                                        05960
            3 ARNML_GR03 FIXED (3),                                        05970
          UGR03 BIT(1) INIT('0'B),                                         05980
          1 ARRAY4(9),                                                     05990
            3 ARCNT FIXED(5) INIT((9)0),                                   06000
                                                                           06010
          1 IPMF_GR04 BASED(IPMF5),                                        06020
           2 IPMF_GR4,                                                     06030
           2 ARRAY5(IPMFGR4 REFER(IPMF_GR4)),                              06040
            3 ARFLD_GR04 FIXED BIN(15),                                    06050
            3 ARPOS_GR04 FIXED (3),                                        06060
            3 ARLEN_GR04 FIXED (2),                                        06070
            3 ARPAK_GR04 CHAR (1),                                         06080
            3 ARDEC_GR04 FIXED (1),                                        06090
            3 ARKEY_GR04 FIXED(1),                                         06100
            3 ARSEL_GR04(3),                                               06110
              5 ARSPOS_GR04 FIXED(3),                                      06120
              5 ARSLEN_GR04 FIXED(3),                                      06130
              5 ARSPAK_GR04 CHAR(1),                                       06140
              5 ARSTYP_GR04 CHAR(2),                                       06150
              5 ARSLIT_GR04 CHAR(11),                                      06160
              5 ARSNUM_GR04 FIXED(11),                                     06170
              5 ARSN_GR04 BIT(1),                                          06180
                                                                           06190
          1 ARRAY7 (20),                                                   06200
            3 ARSPOS_GR10 FIXED BIN(15),                                   06210
            3 AREPOS_GR10 FIXED BIN(15),                                   06220
            3 ARFLD_GR10  FIXED BIN(15),                                   06230
            3 ARFMT_GR10  CHAR(1),                                         06240
            3 ARDEC_GR10  FIXED BIN(15),                                   06250
            3 ARLIT_GR10  FIXED BIN(15),                                   06260
            3 ARRAY_GR12(0:8),                                             06270
              5 ARSPOS_GR12 FIXED BIN(15),                                 06280
              5 AREPOS_GR12 FIXED BIN(15),                                 06290
              5 ARFLD_GR12  FIXED BIN(15),                                 06300
              5 ARFMT_GR12  CHAR(1),                                       06310
              5 ARDEC_GR12  FIXED BIN(15),                                 06320
              5 ARLIT_GR12  FIXED BIN(15),                                 06330
          1 ARRAY8(60),                                                    06340
            3 ARSPOS_GR11 FIXED BIN(15),                                   06350
            3 AREPOS_GR11 FIXED BIN(15),                                   06360
            3 ARFLD_GR11  FIXED BIN(15),                                   06370
            3 ARDEC_GR11  FIXED BIN(15),                                   06380
            3 ARLIT_GR11  FIXED BIN(15),                                   06390
            3 ARFMT_GR11 CHAR(1),                                          06400
          LITERAL_POOL(40) CHAR(20),                                       06410
          ZSW_GR11(60) BIT(1) INIT((60)(1)'1'B),                           06420
          ZSW BIT(1) INIT('1'B),                                           06430
          SW11 BIT(1),                                                     06440
          SW12 BIT(1),                                                     06450
          NO_FMAT_LITS INIT(0),                                            06460
          NO_GR10      INIT(0),                                            06470
          NO_GR11      INIT(0),                                            06480
          NO_GR12(0:9);                                                    06490
          DO I = 0 TO 9;                                                   06500
             NO_GR12(I) = 0;                                               06510
          END;                                                             06520
          DCL                                                              06530
          $EXIT LABEL,                                                     06540
          1 ARRAY6 (5),                                                    06550
            3 ARFLD_GR08 FIXED(3) INIT((5)0),                              06560
            3 ARDEC_GR08 FIXED (1);                                        06570
                                                                           06580
                                                                           06590
          DCL                                                              06600
                                                                           06610
     /* *********************************************************** */     06620
     /*                                                             */     06630
     /* THE NEXT BATCH OF DATA-NAMES ARE USED FOR UNPACKING AND     */     06640
     /* FORMATTING 1) ALPHA / NUMERIC LITERALS FROM THE GR02 CARDS  */     06650
     /*            2) PACKED / KEX KEYS AND VALUES FROM THE FILE.   */     06660
     /*                                                             */     06670
     /* *********************************************************** */     06680
                                                                           06690
          XLIT  CHAR (11),                                                 06700
          NLIT  PIC '9999999999R' DEFINED XLIT,                            06710
          XREC  CHAR (11),                                                 06720
          NREC  PIC '9999999999R' DEFINED XREC,                            06730
          ZREC  CHAR (6),                                                  06740
          PREC  FIXED (11) BASED (P),                                      06750
          PLIT FIXED (11),                                                 06760
                                                                           06770
 /* *************************************************************** */     06780
 /*                                                                 */     06790
 /*      THE FOLLOWING FIELDS ARE USED TO ACCUMULATE THE            */     06800
 /*       NUMBER OF ERRORS ENCOUNTERED, AND TO INDICATE             */     06810
 /*       THESE AT THE END OF THE REPORT.                           */     06820
 /*                                                                 */     06830
 /* *************************************************************** */     06840
                                                                           06850
      ERRORSW BIT(1) INIT('0'B),                                           06860
         LITESW BIT(1) INIT('0'B),                                         06870
          LIT20SW BIT(1) INIT('0'B),                                       06880
          ERR0DIV BIT(1) INIT('0'B),                                       06890
          ZERO_DIVIDE_COUNT FIXED (15) INIT(0),                            06900
                                                                           06910
     /* *********************************************************** */     06920
     /*                                                             */     06930
     /* FINALLY, A MISCELLANY OF ODD DATA NAMES WITH VARIOUS USES.  */     06940
     /*                                                             */     06950
     /*   DREC    - ) USED TO POSITION THE DECIMAL POINT            */     06960
     /*   DECR    - ) IN THE PRINTED VALUES.                        */     06970
     /*   ABIT      - HOLDS THE CURRENT VALUE OF THE GR02           */     06980
     /*               ALPHA/NUMERIC SWITCH ARN(I,J) IN ARRAY1.      */     06990
     /*   LTOTSW    - SET ON WHEN A TOTAL HAS JUST BEEN PRINTED,    */     07000
     /*               OVERRIDING LINE SPACING ON NEXT DETAIL LINE.  */     07010
     /*   EOFSW     - IS SET ON ENDFILE OF THE INPUT DATA FILE.     */     07020
     /*   NAMESW    - IS SET ON IF THERE IS A GR05 CARD.            */     07030
     /*   NAMEPOS - )                                               */     07040
     /*   NAMELEN - ) ARE THE DETAILS ON THAT CARD.                 */     07050
     /*   LASTREC   - IS NEEDED FOR THE NAMES ON A TOTAL LINE, AND  */     07060
     /*               HOLDS THE PREVIOUSLY-PROCESSED RECORD.        */     07070
     /*   KEY1,2..  - ARE THE FOUR CURRENT KEYS.                    */     07080
     /*   LASTKEY1..- ARE THE FOUR PREVIOUS KEYS.                   */     07090
     /*   PRIME     - USED TO TEST FOR ALPHA LITERALS ON GR02 CARD. */     07100
     /*   LABL      - THE GR02 TEST, HOLDS ONE OF EQ, NE, LT, GT.   */     07110
     /*   FIRST_TIME                                                */     07120
     /*   NOKEYS    - NUMBER OF KEYS ON THE GR03 CARD.              */     07130
     /*   NOVALS    - NUMBER OF VALUES TO BE PRINTED.               */     07140
     /*   MIDVAL  - )                                               */     07150
     /*   MIDVAX  - ) TEMPORARY WORK AREAS.                         */     07160
     /*   TN        - USED TO OVERCOME A BUG IN PL/1 WHEN           */     07170
     /*               EXPONENTIATING HALFWORD BINARY NUMBERS        */     07180
     /*               WITH SUBSCRIPTED EXPONENTS.                   */     07190
     /*   REXIT     - LABEL FOR CALLING MAJOR SUBROUTINES.          */     07200
     /*   LEXIT     - LABEL FOR CALLING NESTED SUBROUTINES.         */     07210
     /*                                                             */     07220
     /* *********************************************************** */     07230
                                                                           07240
          DREC CHAR (15),                                                  07250
          DECR PIC '999999999V999999' DEFINED DREC,                        07260
          ABIT BIT (1),                                                    07270
          LTOTSW  BIT(1),                                                  07280
          EOFSW   BIT(1) INIT('0'B),                                       07290
          NAMESW  BIT(1) INIT('0'B),                                       07300
          NAMEPOS FIXED(3),                                                07310
          NAMELEN FIXED(2),                                                07320
                                                                           07330
          LASTREC CHAR(1200),                                              07340
          KEY1     CHAR (28) VARYING STATIC,                               07350
          KEY2     CHAR (28) VARYING STATIC,                               07360
          KEY3     CHAR (28) VARYING STATIC,                               07370
          KEY4     CHAR (28) VARYING STATIC,                               07380
          KEY5     CHAR(28) VARYING STATIC,                                07390
          KEY6     CHAR(28) VARYING STATIC,                                07400
          KEY7     CHAR(28) VARYING STATIC,                                07410
          KEY8     CHAR(28) VARYING STATIC,                                07420
          LASTKEY1 CHAR (28) VARYING STATIC,                               07430
          LASTKEY2 CHAR (28) VARYING STATIC,                               07440
          LASTKEY3 CHAR (28) VARYING STATIC,                               07450
          LASTKEY4 CHAR (28) VARYING STATIC,                               07460
          LASTKEY5 CHAR(28) VARYING STATIC,                                07470
          LASTKEY6 CHAR(28) VARYING STATIC,                                07480
          LASTKEY7 CHAR(28) VARYING STATIC,                                07490
          LASTKEY8 CHAR(28) VARYING STATIC,                                07500
                                                                           07510
          PRIME CHAR (1) INIT (''''),                                      07520
          LABL  CHAR (2),                                                  07530
          FIRST_TIME BIT (1) INIT ('1'B),                                  07540
                                                                           07550
          NOKEYS FIXED (1) INIT (0),                                       07560
          NOVALS FIXED (1) INIT (0),                                       07570
          MIDVAL FIXED (15,4),                                             07580
          MIDVAX FIXED (15,5),                                             07590
          TN FIXED (3) INIT (10),                                          07600
                                                                           07610
      GR07_IDS (50) CHAR(2) INIT((50)(2)' '),                              07620
                                                                           07630
          LEXIT LABEL,                                                     07640
          PEXIT LABEL,                                                     07650
          REXIT LABEL;                                                     07660
                                                                           07670
          P = ADDR(ZREC);                                                  07680
                                        /* CONVERT THE IBM DATE     */     07690
                                        /* INTO REPORT FORMAT       */     07700
          XDATE  = DATE;                                                   07710
          YYEAR  = XYEAR;                                                  07720
          YDAY   = XDAY;                                                   07730
          YMONTH = ZMONTH(XMONTH);                                         07740
          YFILA  = ' ';                                                    07750
          YFILB  = ' ';                                                    07760
          DATE_HEADA = YDATE;                                              07770
          TWDATE_HEADA = YDATE;                                            07780
          TWPRAX = '      LESS THAN';                                      07790
          TWPRBY = '  TO';              /* RANGE ANALYSIN LINES.    */     07800
          TWPRCY = '  AND OVER';                                           07810
                                                                           07820
                                                                           07830
          PAGENO = 0;                                                      07840
                                        /* ICARD IS A COUNT OF THE  */     07850
                                        /* NUMBER OF GR02 (SELECT)  */     07860
                                        /* CARDS READ.              */     07870
          ICARD = 0;                                                       07880
                                        /* ISW IS USED TO CALL      */     07890
                                        /* SELECTED SUBMODULES OF   */     07900
                                        /* PROCEDURE SRTOUT AFTER   */     07910
                                        /* END-OF-FILE IS REACHED.  */     07920
          ISW = 0;                                                         07930
                                                                           07940
          HEAD_HEADA = ' ';                                                07950
          HEADBX = ' ';                                                    07960
          HEADCX = ' ';                                                    07970
                                                                           07980
          KEY1 = ' ';                                                      07990
          KEY2 = ' ';                                                      08000
          KEY3 = ' ';                                                      08010
          KEY4 = ' ';                                                      08020
                                                                           08030
                                        /* INITIALISE, OPEN FILES,  */     08040
                                        /* SET CONDITIONS.          */     08050
          NUMBER_GR02 = 0;                                                 08060
          NUMBER_GR04 = 0;                                                 08070
          NUMBER_GR07 = 0;                                                 08080
          OPEN FILE(SYSIN) INPUT;                                          08090
          OPEN FILE(WORK) OUTPUT;                                          08100
          ON ENDFILE(SYSIN) GO TO $A2;                                     08110
          I = 0;                                                           08120
 $A1:     READ FILE(SYSIN) INTO(INCARD);                                   08130
          IF DES_GR01 = 'GR02' THEN NUMBER_GR02 = NUMBER_GR02 + 1;         08140
          IF DES_GR01 = 'GR04' THEN NUMBER_GR04 = NUMBER_GR04 + 1;         08150
          IF DES_GR01 = 'GR07'                                             08160
          THEN DO;                                                         08170
              NUMBER_GR07 = NUMBER_GR07 + 1;                               08180
              I = I + 1;                                                   08190
              GR07_IDS (I) = CFLD_GR07;                                    08200
          END;                                                             08210
          WRITE FILE(WORK) FROM(INCARD);                                   08220
          GO TO $A1;                                                       08230
 $A2:     CLOSE FILE(SYSIN);                                               08240
          CLOSE FILE(WORK);                                                08250
          IPMFVAL = NUMBER_GR04 + NUMBER_GR07;                             08260
          IPMFFLD = IPMFVAL;                                               08270
          IPMFARI = NUMBER_GR07;                                           08280
          IPMFGR2 = NUMBER_GR02;                                           08290
          IPMFGR4 = NUMBER_GR04;                                           08300
          ALLOCATE IPMF_VALUES;                                            08310
          ALLOCATE IPMF_FIELDS;                                            08320
          ALLOCATE IPMF_ARITH;                                             08330
          ALLOCATE IPMF_GR02;                                              08340
          ALLOCATE IPMF_GR04;                                              08350
          IDSVAL = IPMFVAL;                                                08351
          ALLOCATE VALUE_IDS;                                              08352
          VAL_IDS = 0;                                                     08353
          FLDDES = ' ';                                                    08360
          ARTYP = ' ';                                                     08370
          ARSTYP_GR04 = '  ';                                              08380
          VALUES = 0;                                                      08390
          ARILN = 0;                                                       08400
          ON ENDFILE(WORK) GO TO E1;                                       08410
          OPEN FILE(WORK) INPUT;                                           08420
          OPEN FILE(PRINT) OUTPUT;                                         08430
                                        /* HEADING FOR LISTING OF   */     08440
                                        /* CONTROL CARDS.           */     08450
          BLANKLINE = '1CONTROL CARD LISTING';                             08460
          WRITE FILE(PRINT) FROM(BLANKLINE);                               08470
                                                                           08480
     /* *********************************************************** */     08490
     /*                                                             */     08500
     /* IN THIS FIRST SECTION OF MAINSTREAM LOGIC, THE CONTROL      */     08510
     /* CARDS ARE READ AND PROCESSED. THE ACTUAL READ IS IN MODULE  */     08520
     /* R1, WHICH ALSO LISTS THE CARDS ON ENTRY.                    */     08530
     /*     THE STATEMENTS INCLUDED IN THE 'A' LABELS READ THROUGH  */     08540
     /* THE GR01 CARDS AND SET UP THE HEADING LINES FOR THE REPORT. */     08550
     /*                                                             */     08560
     /* *********************************************************** */     08570
                                                                           08580
          REXIT = A1;                                                      08590
          GO TO R1;                                                        08600
                                                                           08610
 A1:      IF DES_GR01 ^= 'GR01' THEN GO TO B2;                             08620
          IF BYTE_GR01 = '2' THEN CBYT = '0';                              08630
          IF BYTE_GR01 = '3' THEN CBYT = '-';                              08640
          HEAD_HEADA = TITLE_GR01;                                         08650
          TWHEAD_HEADA = TITLE_GR01;                                       08660
          REXIT = A2;                                                      08670
          GO TO R1;                                                        08680
                                                                           08690
 A2:      IF DES_GR01 ^= 'GR01' THEN GO TO B2;                             08700
          IF BYTE_GR01 = '2' THEN BYTE_HEADB = '0';                        08710
          IF BYTE_GR01 = '3' THEN BYTE_HEADB = '-';                        08720
          HED1_HEADB = TITLE_GR01;                                         08730
          REXIT = A3;                                                      08740
          GO TO R1;                                                        08750
                                                                           08760
 A3:      IF DES_GR01 ^= 'GR01' THEN GO TO B2;                             08770
          HED2_HEADB = TITLE_GR01;                                         08780
          REXIT = A4;                                                      08790
          GO TO R1;                                                        08800
                                                                           08810
 A4:      IF DES_GR01 ^= 'GR01' THEN GO TO B2;                             08820
          IF BYTE_GR01 = '2' THEN BYTE_HEADC = '0';                        08830
          IF BYTE_GR01 = '3' THEN BYTE_HEADC = '-';                        08840
          HED1_HEADC = TITLE_GR01;                                         08850
          REXIT = A5;                                                      08860
          GO TO R1;                                                        08870
                                                                           08880
 A5:      IF DES_GR01 ^= 'GR01' THEN GO TO B2;                             08890
          HED2_HEADC = TITLE_GR01;                                         08900
                                                                           08910
     /* *********************************************************** */     08920
     /*                                                             */     08930
     /* THIS SECOND SECTION, WITH LABELS 'B', READS THE GR02 CARDS  */     08940
     /* AND SETS UP THE RELEVANT DATA IN ARRAY1.                    */     08950
     /*                                                             */     08960
     /* *********************************************************** */     08970
                                                                           08980
 B1:      REXIT = B2;                                                      08990
          GO TO R1;                                                        09000
                                                                           09010
 B2:      IF DES_GR02 ^= 'GR02' THEN GO TO C1;                             09020
                                        /* AUGMENT COUNT OF GR02'S  */     09030
          ICARD = ICARD + 1;                                               09040
                                        /* SCAN ACROSS THE 4 TESTS, */     09050
                                        /* MOVING THE DATA, IF      */     09060
                                        /* THERE, INTO THE ARRAY.   */     09070
          DO I = 1 TO 4;                                                   09080
             IF CTYP_GR02(I) = '  ' THEN GO TO B1;                         09090
             ARPOS(ICARD,I) = CPOS_GR02(I);                                09100
             ARLEN(ICARD,I) = CLEN_GR02(I);                                09110
             ARPAK(ICARD,I) = CPAK_GR02(I);                                09120
             ARTYP(ICARD,I) = CTYP_GR02(I);                                09130
                                        /* FIND OUT IF CONSTANT ON  */     09140
                                        /* CARD IS IN QUOTES OR NOT */     09150
             XLIT = CLIT_GR02(I);                                          09160
             K = INDEX(XLIT,PRIME);                                        09170
                                                                           09180
             IF K = 0                                                      09190
                                        /* IF NOT, MOVE NUMERIC TO  */     09200
                                        /* 'ARN' & LITERAL TO ARRAY */     09210
             THEN DO;                                                      09220
                     ARNUM(ICARD,I) = NLIT;                                09230
                     ARN(ICARD,I) = '0'B;                                  09240
                  END;                                                     09250
                                        /* IF THERE IS A QUOTE,     */     09260
                                        /* LOCATE THE SECOND ONE    */     09270
                                        /* AND MOVE THE IN-BETWEEN  */     09280
                                        /* VALUE TO THE ARRAY.      */     09290
             ELSE DO;                                                      09300
                     SUBSTR(XLIT,K,1) = '*';                               09310
                     L = INDEX(XLIT,PRIME);                                09320
                     L1 = K + 1;                                           09330
                     L2 = L - K - 1;                                       09340
                     ARLIT(ICARD,I) = SUBSTR(XLIT,L1,L2);                  09350
                                        /* SIGNIFY ALPHA IN 'ARN'   */     09360
                     ARN(ICARD,I) = '1'B;                                  09370
                  END;                                                     09380
          END;                                                             09390
                                        /* GET NEXT GR02 RECORD.    */     09400
          GO TO B1;                                                        09410
                                                                           09420
     /* *********************************************************** */     09430
     /*                                                             */     09440
     /* THIS SECTION UNPACKS THE GR03 CARD, UNLOADING THE DATA FOR  */     09450
     /* THE (UP TO) FOUR KEYS INTO ARRAY3. IT ALSO COUNTS HOW MANY  */     09460
     /* KEYS ARE IN FACT USED.                                      */     09470
     /*                                                             */     09480
     /* *********************************************************** */     09490
                                                                           09500
 C1:      IF DES_GR03 ^= 'GR03' THEN GO TO D1;                             09510
          DO I = 1 TO 4;                                                   09520
             IF UGR03                                                      09530
             THEN J = I + 4;                                               09540
             ELSE J = I;                                                   09550
             ARPOS_GR03(J) = CPOS_GR03(I);                                 09560
             ARLEN_GR03(J) = CLEN_GR03(I);                                 09570
             ARPAK_GR03(J) = CPAK_GR03(I);                                 09580
             ARTOT_GR03(J) = CTOT_GR03(I);                                 09590
             ARPAG_GR03(J) = CPAG_GR03(I);                                 09600
             ARNAM_GR03(J) = CNAM_GR03(I);                                 09610
             ARNML_GR03(J) = CNML_GR03(I);                                 09620
             IF ARPOS_GR03(J) ^= 0 THEN NOKEYS = NOKEYS + 1;               09630
          IF CTW8_GR03 (1) ^= ' ' THEN TWSUBSW = '1'B;                     09640
          END;                                                             09650
          IF CLCT_GR03(1) > 0 THEN LINECX = CLCT_GR03(1);                  09660
                                                                           09670
          UGR03 = '1'B;                                                    09680
          REXIT = C1;                                                      09690
          GO TO R1;                                                        09700
                                                                           09710
     /* *********************************************************** */     09720
     /*                                                             */     09730
     /* THIS SECTION UNPACKS THE GR04 CARDS, PUTTING THE DATA FOR   */     09740
     /* THE (UP TO) NINE FIELDS INTO ARRAY5. IT COUNTS HOW MANY     */     09750
     /* FIELDS ARE SPECIFIED.                                       */     09760
     /*                                                             */     09770
     /* *********************************************************** */     09780
                                                                           09790
 D1:      IF DES_GR04 ^= 'GR04' THEN GO TO D5;                             09800
          NOFLD = NOFLD + 1;                                               09810
          ARPOS_GR04 (NOFLD) = CPOS_GR04;                                  09820
          ARLEN_GR04 (NOFLD) = CLEN_GR04;                                  09830
          ARPAK_GR04 (NOFLD) = CPAK_GR04;                                  09840
          ARDEC_GR04 (NOFLD) = CDEC_GR04;                                  09850
          IF GR04_ALPHAKEY = ' ' THEN GR04_ALPHAKEY = '9';                 09851
          ARKEY_GR04 (NOFLD) = CKEY_GR04;                                  09860
          DO I = 1 TO 3;                                                   09870
             IF CSTYP_GR04(I) = ' ' THEN GO TO D2;                         09880
             ARSPOS_GR04(NOFLD,I) = CSPOS_GR04(I);                         09890
             ARSLEN_GR04(NOFLD,I) = CSLEN_GR04(I);                         09900
             ARSPAK_GR04(NOFLD,I) = CSPAK_GR04(I);                         09910
             ARSTYP_GR04(NOFLD,I) = CSTYP_GR04(I);                         09920
             XLIT = CSLIT_GR04(I);                                         09930
             K = INDEX(XLIT,PRIME);                                        09940
          IF K = 0                                                         09950
          THEN DO;                                                         09960
                     ARSNUM_GR04(NOFLD,I) = NLIT;                          09970
                     ARSN_GR04(NOFLD,I) = '0'B;                            09980
                  END;                                                     09990
             ELSE DO;                                                      10000
                     SUBSTR(XLIT,K,1) = '*';                               10010
                     L = INDEX(XLIT,PRIME);                                10020
                     L1 = K + 1;                                           10030
                     L2 = L - K - 1;                                       10040
                     ARSLIT_GR04(NOFLD,I) = SUBSTR(XLIT,L1,L2);            10050
                     ARSN_GR04(NOFLD,I) = '1'B;                            10060
                  END;                                                     10070
          END;                                                             10080
 D2:      DO I = 1 TO IPMF_FLDS;                                           10090
             IF FLDDES(I) = CFLD_GR04 THEN GO TO D3;                       10100
             IF FLDDES(I) = ' ' THEN GO TO D3;                             10110
          END;                                                             10120
 D3:      FLDDES(I) = CFLD_GR04;                                           10130
          ARFLD_GR04(NOFLD) = I;                                           10140
          VAL_IDS(I) = NOFLD;                                              10141
                                                                           10150
          REXIT = D1;                                                      10160
          GO TO R1;                                                        10170
                                                                           10180
     /* *********************************************************** */     10190
     /*                                                             */     10200
     /* IF A GR05 CARD IS READ, 'NAMESW' IS SET TO SIGNIFY PRINTING */     10210
     /* OF ALL DETAIL RECORDS, AND THE DATA FOR THE DETAIL NAME IS  */     10220
     /* STORED.                                                     */     10230
     /*                                                             */     10240
     /* *********************************************************** */     10250
                                                                           10260
 D5:      IF DES_GR05 ^= 'GR05' THEN GO TO D7;                             10270
          NAMESW = '1'B;                                                   10280
          NAMEPOS = CPOS_GR05;                                             10290
          NAMELEN = CLEN_GR05;                                             10300
                                                                           10310
          REXIT = D7;                                                      10320
          GO TO R1;                                                        10330
                                                                           10340
     /* *********************************************************** */     10350
     /*                                                             */     10360
     /* IF A GR06 CARD IS READ, 'SORTSW' IS SET TO SIGNIFY THAT THE */     10370
     /* SELECTED RECORDS HAVE TO BE SORTED, AND THE 'SORT FIELDS='  */     10380
     /* DATA IS STORED TO PASS TO THE SORT INTERFACE.               */     10390
     /*                                                             */     10400
     /* *********************************************************** */     10410
                                                                           10420
 D7:      IF DES_GR06 ^= 'GR06' THEN GO TO D8;                             10430
          SORTSW = '1'B;                                                   10440
          SRTFLD = SORT_GR06;                                              10450
                                                                           10460
          REXIT = D8;                                                      10470
          GO TO R1;                                                        10480
                                                                           10490
     /* *********************************************************** */     10500
     /*                                                             */     10510
     /* THE NEXT SECTION, THRU TO LABEL D89, DEALS WITH UNPACKING   */     10520
     /* THE ARITHMETIC CARDS GR07. EACH FIELD NAME HAS TO BE        */     10530
     /* TRANSLATED INTO A SUBSCRIPT FOR THE ARRAY 'VALUES', EACH    */     10540
     /* LITERAL CONSTANT MUST BE PLACED IN THE ARRAY 'VALIT', & THE */     10550
     /* WHOLE ARITHMETIC STATEMENT CODED INTO THE ARRAY             */     10560
     /* 'ARITHMETIC'.                                               */     10570
     /*    FOUR POINTERS, K1 THRU K4, ARE INTRODUCED. K1 WILL POINT */     10580
     /* TO THE OPERATOR CURRENTLY BEING PROCESSED, K2 TO THE NEXT   */     10590
     /* ONE (OR OFF THE END OF THE STATEMENT). K3 IS USED TO SKIP   */     10600
     /* OVER A NEGATIVE PREFIX, AND K4 TO SCAN FOR A DECIMAL POINT  */     10610
     /* IN A LITERAL CONSTANT.                                      */     10620
     /*                                                             */     10630
     /* *********************************************************** */     10640
                                                                           10650
 D8:      IF DES_GR07 ^= 'GR07' THEN GO TO D9;                             10660
                                        /* AUGMENT COUNT OF GR07'S  */     10670
          NOARI = NOARI + 1;                                               10680
          IF TEST_GR07TST = 'TEST'                                         10690
          THEN DO;                                                         10700
                  ARIFD(NOARI) = -1;                                       10710
                  DO J = 1 TO IPMF_FLDS;                                   10720
                     IF FLDDES(J) = FLD1_GR07TST THEN GO TO $D80;          10730
                  END;                                                     10740
 $D80:            ARINO(NOARI,1) = J;                                      10750
                  DO J = 1 TO IPMF_FLDS;                                   10760
                     IF FLDDES(J) = FLD2_GR07TST THEN GO TO $D81;          10770
                  END;                                                     10780
 $D81:            ARINO(NOARI,3) = J;                                      10790
          IF GOTO_GR07TST = '$1'                                           10800
                  THEN DO;                                                 10810
                          ARINO(NOARI,4) = -1;                             10820
                          GO TO $D825;                                     10830
                       END;                                                10840
          IF GOTO_GR07TST = '$2'                                           10850
          THEN DO;                                                         10860
                  ARINO(NOARI,4) = -2;                                     10870
                  GO TO $D825;                                             10880
               END;                                                        10890
                  DO I = 1 TO NUMBER_GR07;                                 10900
                      IF GR07_IDS(I) = GOTO_GR07TST                        10910
                      THEN GO TO $82;                                      10920
                  END;                                                     10930
                  EQGT_GR07TST = '**';                                     10940
                  ARINO(NOARI,2) = 0;       /* NULLIFY THIS TEST */        10950
 $82:                                                                      10960
                  ARINO(NOARI,4) = I;                                      10970
 $D825:                                                                    10980
                  IF CTOT_GR07 = ' '                                       10990
                  THEN ARITT(NOARI) = '0'B;                                11000
                  ELSE ARITT(NOARI) = '1'B;                                11010
                  IF EQGT_GR07TST = 'EQ' THEN ARINO(NOARI,2) = 1;          11020
                  IF EQGT_GR07TST = 'NE' THEN ARINO(NOARI,2) = 2;          11030
                  IF EQGT_GR07TST = 'GT' THEN ARINO(NOARI,2) = 3;          11040
                  IF EQGT_GR07TST = 'LT' THEN ARINO(NOARI,2) = 4;          11050
                  DO J = 1 TO IPMF_FLDS;                                   11060
                      IF FLDDES(J) = CFLD_GR07 THEN GO TO $83;             11070
                      IF FLDDES(J) = '  '      THEN GO TO $83;             11080
                  END;                                                     11090
 $83:             FLDDES(J) = CFLD_GR07;                                   11100
                  ARINO(NOARI,5) = J;                                      11110
                  REXIT = D8;                                              11120
                  GO TO R1;                                                11130
               END;                                                        11140
                                        /* SUBSCRIPT OF RECEIVING   */     11150
                                        /* FIELD & PLACE IN ARRAY.  */     11160
          DO J = 1 TO IPMF_FLDS;                                           11170
             IF FLDDES(J) = CFLD_GR07 THEN GO TO D80;                      11180
             IF FLDDES(J) = ' ' THEN GO TO D80;                            11190
          END;                                                             11200
 D80:     FLDDES(J) = CFLD_GR07;                                           11210
          ARIFD(NOARI) = J;                                                11220
                                        /* PREFIX STATEMENT WITH +  */     11230
                                        /* AND STRIP OUT BLANKS.    */     11240
          BLARITH = CARI_GR07;                                             11250
          NBLARI = '+';                                                    11260
          DO J = 1 TO 74;                                                  11270
             IF BLBYTES(J) ^= ' ' THEN NBLARI = NBLARI || BLBYTES(J);      11280
          END;                                                             11290
          IF CTOT_GR07 = ' '            /* SET TOTAL-TIME SWITCH    */     11300
          THEN ARITT(NOARI) = '0'B;                                        11310
          ELSE ARITT(NOARI) = '1'B;                                        11320
                                                                           11330
          L = LENGTH(NBLARI);                                              11340
          BLARITH = NBLARI;                                                11350
                                        /* PUT POINTERS TO FIRST    */     11360
                                        /* OPERAND, SCAN K2 TO GET  */     11370
                                        /* TO NEXT ONE.             */     11380
          K1, K2 = 1;                                                      11390
 D81:     K2 = K2 + 1;                                                     11400
                                        /* K2 OFF END OF STATEMENT  */     11410
          IF K2 > L THEN GO TO D82;                                        11420
                                        /* K2 AT NEXT OPERAND.      */     11430
          IF BLBYTES(K2) = '+' | BLBYTES(K2) = '*' | BLBYTES(K2) = '/'     11440
          THEN GO TO D82;                                                  11450
                                        /* (BEWARE OF - PREFIXES).  */     11460
          IF BLBYTES(K2) = '-' & K2 ^= K1+1                                11470
          THEN GO TO D82;                                                  11480
          GO TO D81;                                                       11490
                                        /* POINT K3 AT THE PREFIX.  */     11500
 D82:     IF BLBYTES(K1+1) = '-' THEN K3 = K1 + 1;                         11510
                                 ELSE K3 = K1;                             11520
                                        /* IS OPERAND A FIELD NAME? */     11530
          IF BLBYTES(K3+1) > '{' /* <- HEX 'C0' */                         11540
           & BLBYTES(K3+1) < 'Â' /* <- HEX 'EA' */                         11550
          THEN DO;                                                         11560
                  ARIFX = SUBSTR(BLARITH,K3+1,2);                          11570
                                        /* PUT INTO SUBSCRIPT FORM. */     11580
          DO J = 1 TO IPMF_FLDS;                                           11590
             IF FLDDES(J) = ARIFX THEN GO TO D825;                         11600
          END;                                                             11610
 D825:                                                                     11620
                  K = ARILN(NOARI) + 1;                                    11630
                  ARICN(NOARI,K) = '0'B;     /* SIGNAL VARIABLE     */     11640
                                        /* AUGMENT COUNTER OF NO.   */     11650
                                        /* OF OPERTRS IN STATEMENT. */     11660
 D83:             ARILN(NOARI) = ARILN(NOARI) + 1;                         11670
                  IF K > 20                                                11680
                  THEN DO;                                                 11690
                      LIT20SW = '1'B;                                      11700
                      ERRORSW = '1'B;                                      11710
                      GO TO D89;                                           11720
                  END;                                                     11730
                  ARINO(NOARI,K) = J;                                      11740
                                        /* LOAD OPERAND TO ARRAY.   */     11750
                  ARIOP(NOARI,K) = SUBSTR(BLARITH,K1,1);                   11760
                                        /* LOAD PREFIX TO ARRAY.    */     11770
                  IF K1 = K3 THEN ARISN(NOARI,K) = ' ';                    11780
                             ELSE ARISN(NOARI,K) = '-';                    11790
                  IF K2 < L                                                11800
                                        /* MORE OPERATIONS. SET K1  */     11810
                                        /* TO NEXT ONE & REPEAT.    */     11820
                  THEN DO;                                                 11830
                          K1 = K2;                                         11840
                          GO TO D81;                                       11850
                       END;                                                11860
                                        /* END OF CARD. GET NEXT.   */     11870
                  GO TO D89;                                               11880
               END;                                                        11890
                                        /* ENTRY HERE IF OPERAND    */     11900
                                        /* NUMERIC LITERAL.         */     11910
          DECR = 0;                                                        11920
                                        /* SCAN FOR DECIMAL POINT.  */     11930
          K4 = 0;                                                          11940
          DO K = K3 TO K2;                                                 11950
             IF BLBYTES(K) = '.' THEN K4 = K;                              11960
          END;                                                             11970
                                        /* PUT LITERAL INTO 'DREC'. */     11980
          IF K4 = 0                                                        11990
          THEN SUBSTR(DREC,11+K3-K2,K2-K3-1) =                             12000
                         SUBSTR(BLARITH,K3+1,K2-K3-1);                     12010
          ELSE DO;                                                         12020
                  SUBSTR(DREC,11+K3-K4,K4-K3-1) =                          12030
                         SUBSTR(BLARITH,K3+1,K4-K3-1);                     12040
                  SUBSTR(DREC,10,K2-K4-1) =                                12050
                         SUBSTR(BLARITH,K4+1,K2-K4-1);                     12060
               END;                                                        12070
                                        /* FIND NEXT SLOT IN        */     12080
                                        /* 'VALUES', INSERT LITERAL */     12090
                                        /* & SET SUBSCRIPT IN J.    */     12100
         DO J = 1 TO CONST;                                                12110
               IF VALIT (J) = DECR                                         12120
               THEN GO TO D85;                                             12130
         END;                                                              12140
          CONST = CONST + 1;                                               12150
          VALIT(CONST) = DECR;                                             12160
         J = CONST;                                                        12170
         IF J > 22                                                         12180
         THEN DO;                                                          12190
              J = 23;                                                      12200
              CONST = 22;                                                  12210
             ERRORSW = '1'B;                                               12220
             LITESW  = '1'B;                                               12230
         END;                                                              12240
 D85:    K = ARILN(NOARI) + 1;                                             12250
         IF K > 20                                                         12260
         THEN DO;                                                          12270
             LIT20SW = '1'B;                                               12280
             ERRORSW = '1'B;                                               12290
             GO TO D83;                                                    12300
         END;                                                              12310
          ARICN(NOARI,K) = '1'B;             /* SIGNAL CONSTANT LIT.*/     12320
                                        /* STORE OPERATION IN       */     12330
                                        /* ARITHMETIC ARRAY.        */     12340
          GO TO D83;                                                       12350
                                                                           12360
 D89:                                                                      12370
          REXIT = D8;                                                      12380
          GO TO R1;                                                        12390
                                                                           12400
     /* *********************************************************** */     12410
     /*                                                             */     12420
     /* THE LAST REMAINING CARD TYPE IS THE 'GR08', PRINT REQUEST   */     12430
     /* CARD. WE PLACE THE VALUES FROM THE CARD INTO ARRAY6,        */     12440
     /* KEEPING A COUNT OF HOW MANY VALUES ARE REQUESTED PRINTED.   */     12450
     /*                                                             */     12460
     /* *********************************************************** */     12470
                                                                           12480
 D9:      IF DES_GR08 ^= 'GR08' THEN GO TO D92;                            12490
          DO I = 1 TO 5;                                                   12500
          DO J = 1 TO IPMF_FLDS;                                           12510
             IF FLDDES(J) = CFLD_GR08(I) THEN GO TO D91;                   12520
          END;                                                             12530
 D91:                                                                      12540
             ARFLD_GR08(I) = J;                                            12550
             IF CFLD_GR08(I) = ' ' THEN ARFLD_GR08(I) = 0;                 12560
             ARDEC_GR08 (I) = CDEC_GR08(I);                                12570
             IF CFLD_GR08 (I) ^= ' ' THEN NOVALS = NOVALS + 1;             12580
          END;                                                             12590
                                                                           12600
          IF CTW8_GR08 ^= ' '                                              12610
          THEN DO;                                                         12620
          DO J = 1 TO IPMF_FLDS;                                           12630
             IF FLDDES(J) = CTW8_GR08 THEN GO TO D915;                     12640
          END;                                                             12650
 D915:                                                                     12660
                  TW80VAL = J;                                             12670
                  TW80SW  = '1'B;                                          12680
                  TWVARB_HEADB = CDES_GR08;                                12690
               END;                                                        12700
          REXIT = D92;                                                     12710
          GO TO R1;                                                        12720
                                                                           12730
     /* *********************************************************** */     12740
     /*                                                             */     12750
     /* LATE ADDITION TO THE PROGRAM. THE NEXT BLOCK OF CODING      */     12760
     /* READS THE 'GR09' CARDS, COUNTS THEM, AND STORES THE VALUES  */     12770
     /* IN THE TW-ARRAY.                                            */     12780
     /*                                                             */     12790
     /* *********************************************************** */     12800
                                                                           12810
 D92:     IF DES_GR09 ^= 'GR09' THEN GO TO $D1;                            12820
          TWRNGES = TWRNGES + 1;                                           12830
          TWARNGE(TWRNGES) = CVAL_GR09;                                    12840
                                                                           12850
          REXIT = D92;                                                     12860
          GO TO R1;                                                        12870
                                                                           12880
 $D1:     IF DES_GR10 ^= 'GR10' THEN GO TO $D2;                            12890
          NO_GR10    = NO_GR10    + 1;                                     12900
          ARSPOS_GR10(NO_GR10)   = SPOS_GR10;                              12910
          AREPOS_GR10(NO_GR10)   = EPOS_GR10;                              12920
          ARFMT_GR10(NO_GR10)   = FMAT_GR10;                               12930
          ARDEC_GR10(NO_GR10)   = DECS_GR10;                               12940
          IF FLD_GR10 = 'LIT  '                                            12950
          THEN DO;                                                         12960
                  NO_FMAT_LITS = NO_FMAT_LITS + 1;                         12970
                  LITERAL_POOL(NO_FMAT_LITS) = LIT_GR10;                   12980
                  ARLIT_GR10(NO_GR10)   = NO_FMAT_LITS;                    12990
               END;                                                        13000
          I = 0;                                                           13010
          IF FLD_GR10 = 'CNT0 ' THEN I = 980;                              13020
          IF FLD_GR10 = 'CNT1 ' THEN I = 981;                              13030
          IF FLD_GR10 = 'CNT2 ' THEN I = 982;                              13040
          IF FLD_GR10 = 'CNT3 ' THEN I = 983;                              13050
          IF FLD_GR10 = 'CNT4 ' THEN I = 984;                              13060
          IF FLD_GR10 = 'KEY1 ' THEN I = 991;                              13070
          IF FLD_GR10 = 'KEY2 ' THEN I = 992;                              13080
          IF FLD_GR10 = 'KEY3 ' THEN I = 993;                              13090
          IF FLD_GR10 = 'KEY4 ' THEN I = 994;                              13100
          IF FLD_GR10 = 'NAME1' THEN I = 995;                              13110
          IF FLD_GR10 = 'NAME2' THEN I = 996;                              13120
          IF FLD_GR10 = 'NAME3' THEN I = 997;                              13130
          IF FLD_GR10 = 'NAME4' THEN I = 998;                              13140
          IF FLD_GR10 = 'LIT  ' THEN I = 999;                              13150
          IF FLD_GR10 = 'NAME9' THEN I = 1000;                             13160
          IF FLD_GR10 = 'CNT5 ' THEN I = 976;                              13170
          IF FLD_GR10 = 'CNT6 ' THEN I = 977;                              13180
          IF FLD_GR10 = 'CNT7 ' THEN I = 978;                              13190
          IF FLD_GR10 = 'CNT8 ' THEN I = 979;                              13200
          IF FLD_GR10 = 'NAME5' THEN I = 1001;                             13210
          IF FLD_GR10 = 'NAME6' THEN I = 1002;                             13220
          IF FLD_GR10 = 'NAME7' THEN I = 1003;                             13230
          IF FLD_GR10 = 'NAME8' THEN I = 1004;                             13240
          IF FLD_GR10 = 'KEY5 ' THEN I = 1005;                             13250
          IF FLD_GR10 = 'KEY6 ' THEN I = 1006;                             13260
          IF FLD_GR10 = 'KEY7 ' THEN I = 1007;                             13270
          IF FLD_GR10 = 'KEY8 ' THEN I = 1008;                             13280
          IF FLD_GR10 = 'LINE+' THEN I = 1009;                             13290
          IF I ^= 0                                                        13300
          THEN DO;                                                         13310
                  ARFLD_GR10(NO_GR10)   = I;                               13320
                  REXIT = $D1;                                             13330
                  GO TO R1;                                                13340
               END;                                                        13350
          ARIFX = FLD_GR10;                                                13360
          DO I = 1 TO IPMF_FLDS;                                           13370
             IF FLDDES(I) = ARIFX THEN GO TO $D15;                         13380
          END;                                                             13390
 $D15:    ARFLD_GR10(NO_GR10)   = I;                                       13400
          REXIT = $D1;                                                     13410
          GO TO R1;                                                        13420
 $D2:     IF DES_GR10 ^= 'GR11' THEN GO TO $D3;                            13430
          NO_GR11    = NO_GR11    + 1;                                     13440
          ARSPOS_GR11(NO_GR11)   = SPOS_GR10;                              13450
          AREPOS_GR11(NO_GR11)   = EPOS_GR10;                              13460
          ARFMT_GR11(NO_GR11)   = FMAT_GR10;                               13470
          ARDEC_GR11(NO_GR11)   = DECS_GR10;                               13480
          IF FILA_GR10 = 'ZZ' THEN ZSW_GR11(NO_GR11) = '0'B;               13490
          IF FLD_GR10 = 'LIT  '                                            13500
          THEN DO;                                                         13510
                  NO_FMAT_LITS = NO_FMAT_LITS + 1;                         13520
                  LITERAL_POOL(NO_FMAT_LITS) = LIT_GR10;                   13530
                  ARLIT_GR11(NO_GR11)   = NO_FMAT_LITS;                    13540
               END;                                                        13550
          I = 0;                                                           13560
          IF FLD_GR10 = 'CNT0 ' THEN I = 980;                              13570
          IF FLD_GR10 = 'CNT1 ' THEN I = 981;                              13580
          IF FLD_GR10 = 'CNT2 ' THEN I = 982;                              13590
          IF FLD_GR10 = 'CNT3 ' THEN I = 983;                              13600
          IF FLD_GR10 = 'CNT4 ' THEN I = 984;                              13610
          IF FLD_GR10 = 'KEY1 ' THEN I = 991;                              13620
          IF FLD_GR10 = 'KEY2 ' THEN I = 992;                              13630
          IF FLD_GR10 = 'KEY3 ' THEN I = 993;                              13640
          IF FLD_GR10 = 'KEY4 ' THEN I = 994;                              13650
          IF FLD_GR10 = 'NAME1' THEN I = 995;                              13660
          IF FLD_GR10 = 'NAME2' THEN I = 996;                              13670
          IF FLD_GR10 = 'NAME3' THEN I = 997;                              13680
          IF FLD_GR10 = 'NAME4' THEN I = 998;                              13690
          IF FLD_GR10 = 'LIT  ' THEN I = 999;                              13700
          IF FLD_GR10 = 'NAME9' THEN I = 1000;                             13710
          IF FLD_GR10 = 'CNT5 ' THEN I = 976;                              13720
          IF FLD_GR10 = 'CNT6 ' THEN I = 977;                              13730
          IF FLD_GR10 = 'CNT7 ' THEN I = 978;                              13740
          IF FLD_GR10 = 'CNT8 ' THEN I = 979;                              13750
          IF FLD_GR10 = 'NAME5' THEN I = 1001;                             13760
          IF FLD_GR10 = 'NAME6' THEN I = 1002;                             13770
          IF FLD_GR10 = 'NAME7' THEN I = 1003;                             13780
          IF FLD_GR10 = 'NAME8' THEN I = 1004;                             13790
          IF FLD_GR10 = 'KEY5 ' THEN I = 1005;                             13800
          IF FLD_GR10 = 'KEY6 ' THEN I = 1006;                             13810
          IF FLD_GR10 = 'KEY7 ' THEN I = 1007;                             13820
          IF FLD_GR10 = 'KEY8 ' THEN I = 1008;                             13830
          IF FLD_GR10 = 'LINE+' THEN I = 1009;                             13840
          IF I ^= 0                                                        13850
          THEN DO;                                                         13860
                  ARFLD_GR11(NO_GR11)   = I;                               13870
                  REXIT = $D2;                                             13880
                  GO TO R1;                                                13890
               END;                                                        13900
          ARIFX = FLD_GR10;                                                13910
          DO I = 1 TO IPMF_FLDS;                                           13920
             IF FLDDES(I) = ARIFX THEN GO TO $D25;                         13930
          END;                                                             13940
 $D25:    ARFLD_GR11(NO_GR11)   = I;                                       13950
          REXIT = $D2;                                                     13960
          GO TO R1;                                                        13970
 $D3:     IF DES_GR10 ^= 'GR12' THEN GO TO E1;                             13980
          J = KEY_GR10;                                                    13990
          IF J = 0 & FLD_GR10 = 'DELET'                                    14000
          THEN DO;                                                         14010
                  PRTOTAL = '0'B;                                          14020
                  REXIT = $D3;                                             14030
                  GO TO R1;                                                14040
               END;                                                        14050
          NO_GR12(J) = NO_GR12(J) + 1;                                     14060
          NO_GR1J = NO_GR12(J);                                            14070
          ARSPOS_GR12(NO_GR1J,J) = SPOS_GR10;                              14080
          AREPOS_GR12(NO_GR1J,J) = EPOS_GR10;                              14090
          ARFMT_GR12(NO_GR1J,J) = FMAT_GR10;                               14100
          ARDEC_GR12(NO_GR1J,J) = DECS_GR10;                               14110
          IF FLD_GR10 = 'LIT  '                                            14120
          THEN DO;                                                         14130
                  NO_FMAT_LITS = NO_FMAT_LITS + 1;                         14140
                  LITERAL_POOL(NO_FMAT_LITS) = LIT_GR10;                   14150
                  ARLIT_GR12(NO_GR1J,J) = NO_FMAT_LITS;                    14160
               END;                                                        14170
          I = 0;                                                           14180
          IF FLD_GR10 = 'GR11 ' THEN I = 1500;                             14190
          IF FLD_GR10 = 'CNT0 ' THEN I = 980;                              14200
          IF FLD_GR10 = 'CNT1 ' THEN I = 981;                              14210
          IF FLD_GR10 = 'CNT2 ' THEN I = 982;                              14220
          IF FLD_GR10 = 'CNT3 ' THEN I = 983;                              14230
          IF FLD_GR10 = 'CNT4 ' THEN I = 984;                              14240
          IF FLD_GR10 = 'KEY1 ' THEN I = 991;                              14250
          IF FLD_GR10 = 'KEY2 ' THEN I = 992;                              14260
          IF FLD_GR10 = 'KEY3 ' THEN I = 993;                              14270
          IF FLD_GR10 = 'KEY4 ' THEN I = 994;                              14280
          IF FLD_GR10 = 'NAME1' THEN I = 995;                              14290
          IF FLD_GR10 = 'NAME2' THEN I = 996;                              14300
          IF FLD_GR10 = 'NAME3' THEN I = 997;                              14310
          IF FLD_GR10 = 'NAME4' THEN I = 998;                              14320
          IF FLD_GR10 = 'LIT  ' THEN I = 999;                              14330
          IF FLD_GR10 = 'NAME9' THEN I = 1000;                             14340
          IF FLD_GR10 = 'CNT5 ' THEN I = 976;                              14350
          IF FLD_GR10 = 'CNT6 ' THEN I = 977;                              14360
          IF FLD_GR10 = 'CNT7 ' THEN I = 978;                              14370
          IF FLD_GR10 = 'CNT8 ' THEN I = 979;                              14380
          IF FLD_GR10 = 'NAME5' THEN I = 1001;                             14390
          IF FLD_GR10 = 'NAME6' THEN I = 1002;                             14400
          IF FLD_GR10 = 'NAME7' THEN I = 1003;                             14410
          IF FLD_GR10 = 'NAME8' THEN I = 1004;                             14420
          IF FLD_GR10 = 'KEY5 ' THEN I = 1005;                             14430
          IF FLD_GR10 = 'KEY6 ' THEN I = 1006;                             14440
          IF FLD_GR10 = 'KEY7 ' THEN I = 1007;                             14450
          IF FLD_GR10 = 'KEY8 ' THEN I = 1008;                             14460
          IF FLD_GR10 = 'LINE+' THEN I = 1009;                             14470
          IF I ^= 0                                                        14480
          THEN DO;                                                         14490
                  ARFLD_GR12(NO_GR1J,J) = I;                               14500
                  REXIT = $D3;                                             14510
                  GO TO R1;                                                14520
               END;                                                        14530
          ARIFX = FLD_GR10;                                                14540
          DO I = 1 TO IPMF_FLDS;                                           14550
             IF FLDDES(I) = ARIFX THEN GO TO $D35;                         14560
          END;                                                             14570
 $D35:    ARFLD_GR12(NO_GR1J,J) = I;                                       14580
          REXIT = $D3;                                                     14590
          GO TO R1;                                                        14600
                                                                           14610
     /* *********************************************************** */     14620
     /*                                                             */     14630
     /* THE NEXT 20-ODD LINES OF CODING DO THE MAJOR PROCESSING OF  */     14640
     /* THE FILE, BY CALLING SEPARATLY THE INTERNAL PROCEDURES      */     14650
     /* SRTIN, WHICH READS THE INPUT FILE AND PERFORMS THE          */     14660
     /* SELECTION TESTS ON EACH RECORD, AND SRTOUT, WHICH PROCESSES */     14670
     /* THE RECORDS, TAKING OFF THE VALUES, MATCHING KEYS, AND      */     14680
     /* PRINTING THE REPORT.                                        */     14690
     /*                                                             */     14700
     /*     THERE ARE TWO POSSIBLE INVOCATIONS:                     */     14710
     /*                                                             */     14720
     /*   1) IF A SORT IS REQUIRED (SORTSW IS ON BY A GR06 CARD),   */     14730
     /*      THE PROCEDURE IHESRTD IS INVOKED, WHICH CALLS RECORDS  */     14740
     /*      FROM SRTIN UNTIL ENDFILE, SORTS THEM, AND THEN PASSES  */     14750
     /*      THEM ONE AT A TIME TO SRTOUT.                          */     14760
     /*                                                             */     14770
     /*   2) IF SORTSW HAS NOT BEEN SET, WE GO DOWN TO LABEL E15,   */     14780
     /*      AND LOOP THROUGH 3 INSTRUCTIONS, GETTING RECORDS ONE   */     14790
     /*      AT A TIME FROM SRTIN AND PASSING THEM TO SRTOUT.       */     14800
     /*                                                             */     14810
     /*     IN EITHER CASE, WHEN ALL PROCESSING HAS BEEN FINISHED,  */     14820
     /* WE GO TO THE LABEL Z1 FOR OUR END-OF-JOB CLEARUP.           */     14830
     /*                                                             */     14840
     /* *********************************************************** */     14850
                                                                           14860
 E1:      CLOSE FILE(WORK);                                                14870
          NOKEYXX = NOKEYS;                                                14871
          DO I = NOKEYS TO 1 BY -1;                                        14872
             IF ARTOT_GR03(I) = 'T' THEN GO TO TTTTT;                      14873
             NOKEYXX = NOKEYXX - 1;                                        14874
          END;                                                             14875
 TTTTT:                                                                    14876
                                                /* THE FOLLOWING CODE */   14880
                                                /* PRINTS A PARROT AT */   14890
                                                /* THE HEAD OF THE    */   14900
                                                /* REPORT             */   14910
          OPEN FILE(SYSLIN) INPUT;                                         14920
          ON ENDFILE(SYSLIN) GO TO ENDLOGO;                                14930
 LOGO:    READ FILE(SYSLIN) INTO(BLANKLINE);                               14940
          WRITE FILE(PRINT) FROM(BLANKLINE);                               14950
          GO TO LOGO;                                                      14960
 ENDLOGO: CLOSE FILE(SYSLIN);                                              14970
          BLANKLINE = '0                   '                               14980
                      || HEAD_HEADA                                        14990
                      || FILE_HEADA                                        15000
                      || DATE_HEADA;                                       15010
          WRITE FILE(PRINT) FROM(BLANKLINE);                               15020
                                                                           15030
          OPEN FILE(SYSUT1) INPUT;                                         15040
          IF TW80SW THEN OPEN FILE(TW80) OUTPUT;                           15050
                                        /* RESET BLANK LINE HAVING  */     15060
                                        /* FINISHED PRINTING CARDS. */     15070
          BLANKLINE = ' ';                                                 15080
                                                                           15090
          IF SORTSW                                                        15100
                                        /* SORT REQUIRED.           */     15110
          THEN DO;                                                         15120
                                        /* ASCERTAIN HOW MUCH CORE  */     15130
                                        /* IS AVAILABLE FOR SORT.   */     15140
                  Q = ADDR(COREVAL);                                       15150
                  CALL CORECHK(PARM);                                      15160
                  SRTCORE = COREVAL;                                       15170
                  SRTCORE = SRTCORE - 6144;                                15180
                  CALL IHESRTD(SRTFLD,SRTYPE,SRTCORE,RETCOD,               15190
                                SRTIN,SRTOUT);                             15200
                  IF RETCOD = 16 THEN PUT SKIP EDIT ('SORT FAILED')(A);    15210
                  SORTSW = '0'B;                                           15220
                                        /* GO TO END-OF-JOB CLEARUP */     15230
                  GO TO Z1;                                                15240
               END;                                                        15250
                                        /* SORT NOT REQUIRED.       */     15260
                                        /* LOOP ROUND PROCEDURES.   */     15270
 E15:     CALL SRTIN;                                                      15280
          IF EOFSW THEN GO TO Z1;                                          15290
          CALL SRTOUT(INREC);                                              15300
          GO TO E15;                                                       15310
                                                                           15320
                                                                           15330
     /* *********************************************************** */     15340
     /*                                                             */     15350
     /* THIS SMALL SUBROUTINE MERELY READS IN THE CONTROL CARDS,    */     15360
     /* PRINTS THEM, AND RETURNS TO THE INVOCATION POINT.           */     15370
     /*                                                             */     15380
     /* *********************************************************** */     15390
                                                                           15400
 R1:      READ FILE(WORK) INTO(INCARD);                                    15410
          BLANKLINE = ' ' || INCARD;                                       15420
          WRITE FILE(PRINT) FROM(BLANKLINE);                               15430
         IF DES_GR01 = 'GR99' THEN GO TO R1;                               15440
          GO TO REXIT;                                                     15450
                                                                           15460
                                                                           15470
     /* *********************************************************** */     15480
     /*                                                             */     15490
     /* END-OF-JOB CLEARUP ROUTINE. AT THIS POINT WE HAVE JUST      */     15500
     /* PRINTED THE LAST DETAIL RECORD, BUT HAVE YET TO PRINT THE   */     15510
     /* TOTALS FOR THE LAST KEY.                                    */     15520
     /*     WE DO THIS BY CALLING SUBROUTINES OF SRTOUT, USING ISW  */     15530
     /* TO SIGNIFY THAT WE DO NOT WANT THE COMPLETE PROCESSING OF   */     15540
     /* THAT PROCEDURE, MERELY PART OF IT.                          */     15550
     /*                                                             */     15560
     /*     HAVING PRINTED THE TOTALS FOR THE FOUR KEYS, WE THEN    */     15570
     /* PRINT A GRAND TOTAL FOR THE FILE, AGAIN USING A SUBROUTINE  */     15580
     /* OF SRTOUT. THEN WE CLOSE THE FILES AND END THE JOB.         */     15590
     /*                                                             */     15600
     /* *********************************************************** */     15610
                                                                           15620
 Z1:      ISW = 2;                                                         15630
          CALL SRTOUT (INREC);                                             15640
          ISW = 3;                                                         15650
          CALL SRTOUT (INREC);                                             15660
          ISW = 4;                                                         15670
          CALL SRTOUT (INREC);                                             15680
          ISW = 5;                                                         15690
          CALL SRTOUT (INREC);                                             15700
          ISW = 6;                                                         15710
          CALL SRTOUT(INREC);                                              15720
          ISW = 7;                                                         15730
          CALL SRTOUT(INREC);                                              15740
          ISW = 8;                                                         15750
          CALL SRTOUT(INREC);                                              15760
          ISW = 9;                                                         15770
          CALL SRTOUT(INREC);                                              15780
                                        /* SET UP GRAND TOTAL LINE. */     15790
 Z5:      KEY_LINE  = 'GRAND TOTAL FOR FILE:';                             15800
          NAME_LINE = '*********    COUNT=';                               15810
                                        /* TOTAL RECORD COUNT.      */     15820
          CNT_LINE = ARCNT(9);                                             15830
          BYTE_LINE = '-';                                                 15840
                                        /* PRINT LINE.              */     15850
          ISW = 10;                                                        15860
          IF PRTOTAL THEN                                                  15870
          CALL SRTOUT (INREC);                                             15880
                                                                           15890
          IF TW80SW                     /* OVERALL RANGE ANALYSIS   */     15900
          THEN DO;                      /*                          */     15910
                  ISW = 11;                                                15920
                  J = 1;                                                   15930
                  CALL SRTOUT (INREC);                                     15940
               END;                                                        15950
                                                                           15960
                                     /* TELL OF ERRORS FOUND        */     15970
      IF ERRORSW                                                           15980
      THEN DO;                                                             15990
          BYTE_LINE = '1';                                                 16000
          KEY_LINE = ' ';                                                  16010
          NAME_LINE = ' ';                                                 16020
          VALUEX_LINE = ' ';                                               16030
          WRITE FILE(PRINT) FROM(LINEA);                                   16040
          KEY_LINE = 'WARNING : ERRORS FOUND';                             16050
          WRITE FILE(PRINT) FROM(LINEA);                                   16060
             IF LITESW                                                     16070
             THEN DO;                                                      16080
                 BYTE_LINE = ' ';                                          16090
                 KEY_LINE = 'TOO MANY NUMERIC LITERALS';                   16100
                 VALUEX_LINE = '( EXCESS FIELDS SET TO 0 )';               16110
                 WRITE FILE(PRINT) FROM(LINEA);                            16120
             END;                                                          16130
          BYTE_LINE = ' ';                                                 16140
             IF LIT20SW                                                    16150
             THEN DO;                                                      16160
                 BYTE_LINE = ' ';                                          16170
                 KEY_LINE = 'MORE THAN 20 OPERANDS IN 1 GR07';             16180
                 VALUEX_LINE = '( EXCESS OPERANDS IGNORED )';              16190
                 WRITE FILE(PRINT) FROM(LINEA);                            16200
             END;                                                          16210
             IF ERR0DIV                                                    16220
             THEN DO;                                                      16230
          KEY_LINE = '  NO. OF ATTEMPTS TO DIVIDE BY 0 :';                 16240
          NAME_LINE = '             COUNT=';                               16250
          VALUEX_LINE = '( RESULT FIELDS SET TO 0 )';                      16260
          CNT_LINE = ZERO_DIVIDE_COUNT;                                    16270
          WRITE FILE(PRINT) FROM(LINEA);                                   16280
             END;                                                          16290
      END;                                                                 16300
                                                                           16310
                                        /* CLOSE FILES - END JOB.   */     16320
 Z6:      CLOSE FILE(SYSUT1);                                              16330
          CLOSE FILE(PRINT);                                               16340
          IF TW80SW THEN CLOSE FILE(TW80);                                 16350
                                                                           16360
                                                                           16370
     /* *********************************************************** */     16380
     /*                                                             */     16390
     /* THE NEXT PROCEDURE, SRTIN, READS THROUGH THE INPUT DATA     */     16400
     /* FILE, AND PERFORMS THE SELECTION TESTS SPECIFIED ON THE     */     16410
     /* GR02 CARDS.                                                 */     16420
     /*    THESE LATTER ARE ON AN 'OR' BASIS, WITH THE TESTS ON     */     16430
     /* EACH CARD BEING 'AND'. THAT IS, IF ANY ONE OF THE SELECTION */     16440
     /* CARDS OK'S A RECORD, THE RECORD IS ACCEPTED; BUT FOR A      */     16450
     /* RECORD TO BE OK IT MUST PASS EVERY TEST ON THE CARD.        */     16460
     /*    SO, THROUGHOUT THE CODING, THE POINTER 'I' IS SCANNING   */     16470
     /* DOWN THE GR02 CARDS, AND WITHIN EACH CARD, THE POINTER 'J'  */     16480
     /* SCANS ACROSS THE FOUR TESTS.                                */     16490
     /*    ON ENDFILE OF THE INPUT DATA, WE EITHER CALL IHESARC,    */     16500
     /* TO TELL THE SORT THERE ARE NO MORE RECORDS, OR SET EOFSW ON */     16510
     /* DEPENDING ON WHETHER OR NOT THE RECORDS ARE TO BE SORTED.   */     16520
     /*                                                             */     16530
     /* *********************************************************** */     16540
                                                                           16550
 SRTIN:   PROC RETURNS(CHAR(1200) VARYING);                                16560
                                                                           16570
          ON ENDFILE(SYSUT1)                                               16580
          BEGIN;                                                           16590
         IF SORTSW                                                         16600
         THEN DO;                                                          16610
         IF SRTCNTIN = 0                                                   16620
         THEN DO;                                                          16630
               BLANKLINE = '0*** NO RECORDS SELECTED ***';                 16640
               DO I = 1 TO 10;                                             16650
                    WRITE FILE(PRINT) FROM(BLANKLINE);                     16660
               END;                                                        16670
               GO TO Z6;                                                   16680
         END;                                                              16690
         END;                                                              16700
                IF SORTSW THEN CALL IHESARC(8);                            16710
                          ELSE EOFSW = '1'B;                               16720
                GO TO ENDIN;                                               16730
          END;                                                             16740
                                                                           16750
                                        /* READ NEXT DATA RECORD.   */     16760
 E2:      READ FILE(SYSUT1) INTO(INREC);                                   16770
                                        /* IF NO TESTS, PASS RECORD */     16780
          IF ICARD = 0 THEN GO TO RETREC;                                  16790
                                        /* SCAN THROUGH CARDS       */     16800
          DO I = 1 TO ICARD;                                               16810
                                        /* SCAN TESTS ON CARD.      */     16820
             DO J = 1 TO 4;                                                16830
                                        /* ALL TESTS OK-PASS RECORD */     16840
                IF ARTYP(I,J) = '  ' THEN GO TO RETREC;                    16850
                                        /* LENGTH & POSN OF TEST.   */     16860
                L = ARLEN(I,J);                                            16870
                M = ARPOS(I,J);                                            16880
                                                                           16890
                IF ARPAK(I,J) = 'P'                                        16900
                                        /* FIELD ON FILE IS PACKED. */     16910
                                        /* UNPACK VIA PREC TO NREC. */     16920
                THEN DO;                                                   16930
                        PREC = 0;                                          16940
                        L1 = 7 - L;                                        16950
                        SUBSTR(ZREC,L1,L) = SUBSTR(INREC,M,L);             16960
                        NREC = PREC;                                       16970
                        GO TO E3;                                          16980
                     END;                                                  16990
                                                                           17000
                IF ARN(I,J)                                                17010
                                        /* FIELD HEX AND ALPHA,     */     17020
                                        /* PUT STRAIGHT INTO XREC.  */     17030
                THEN DO;                                                   17040
                        XREC = SUBSTR(INREC,M,L);                          17050
                     END;                                                  17060
                                        /* FIELD HEX AND NUMERIC.   */     17070
                                        /* RIGHT-ALIGN IN NREC.     */     17080
                ELSE DO;                                                   17090
                      XREC = '00000000000';                                17100
                        L1 = 12 - L;                                       17110
                        SUBSTR(XREC,L1,L) = SUBSTR(INREC,M,L);             17120
                     END;                                                  17130
                                                                           17140
 E3:            ABIT = ARN(I,J);                                           17150
                                        /* IF ALPHA, SET TEST VALUE */     17160
                                        /* IN XLIT. IF NUMERIC, SET */     17170
                                        /* IT IN PLIT.              */     17180
                IF ABIT                                                    17190
                THEN XLIT = ARLIT(I,J);                                    17200
                ELSE DO;                                                   17210
                        PREC = NREC;                                       17220
                        PLIT = ARNUM(I,J);                                 17230
                     END;                                                  17240
                                                                           17250
     /* *********************************************************** */     17260
     /*                                                             */     17270
     /* AT THIS POINT, THE FILE VALUE IS IN XREC/PREC, AND THE GR02 */     17280
     /* TEST VALUE IN XLIT/PLIT, DEPENDING ON ALPHA/NUM. WE NOW     */     17290
     /* PUT THE TEST VALUE (EQ, NE, GT, LT) IN 'LABL' AND MAKE THE  */     17300
     /* TEST. FOR EXAMPLE, WITH THE 'EQ' TEST (THE OTHERS ARE       */     17310
     /* ANALOGOUS), LEQ TESTS THE NUMERIC, LEQ1 THE ALPHA VALUES.   */     17320
     /* IF THE TEST IS PASSED, WE GO TO JEX AND RETURN FOR THE NEXT */     17330
     /* TEST ON THE CARD. IF FAILED, IEX TAKES US TO THE NEXT CARD. */     17340
     /*                                                             */     17350
     /* *********************************************************** */     17360
                                                                           17370
                LABL = ARTYP(I,J);                                         17380
                                                                           17390
                IF LABL = 'EQ' THEN GO TO LEQ;                             17400
                IF LABL = 'NE' THEN GO TO LNE;                             17410
                IF LABL = 'GT' THEN GO TO LGT;                             17420
                IF LABL = 'LT' THEN GO TO LLT;                             17430
                                                                           17440
 LEQ:           IF ABIT THEN GO TO LEQ1;                                   17450
                IF PLIT = PREC THEN GO TO JEX;                             17460
               GO TO IEX;                                                  17470
 LEQ1:          IF XLIT = XREC THEN GO TO JEX;                             17480
               GO TO IEX;                                                  17490
 LNE:           IF ABIT THEN GO TO LNE1;                                   17500
                IF PLIT = PREC THEN GO TO IEX;                             17510
               GO TO JEX;                                                  17520
 LNE1:          IF XLIT = XREC THEN GO TO IEX;                             17530
               GO TO JEX;                                                  17540
 LGT:           IF ABIT THEN GO TO LGT1;                                   17550
                IF PLIT < PREC THEN GO TO JEX;                             17560
               GO TO IEX;                                                  17570
 LGT1:          IF XLIT < XREC THEN GO TO JEX;                             17580
               GO TO IEX;                                                  17590
 LLT:           IF ABIT THEN GO TO LLT1;                                   17600
                IF PLIT > PREC THEN GO TO JEX;                             17610
               GO TO IEX;                                                  17620
 LLT1:          IF XLIT > XREC THEN GO TO JEX;                             17630
               GO TO IEX;                                                  17640
                                                                           17650
 JEX:        END;                                                          17660
                                        /* IF WE DROP PAST HERE,    */     17670
                                        /* ALL 4 TESTS ON CARD OK,  */     17680
                                        /* SO PASS RECORD OUT.      */     17690
             GO TO RETREC;                                                 17700
                                                                           17710
 IEX:     END;                                                             17720
                                        /* IF WE DROP PAST HERE, NO */     17730
                                        /* CARD OK'D THE RECORD, SO */     17740
                                        /* DROP IT & READ THE NEXT. */     17750
          GO TO E2;                                                        17760
                                                                           17770
 RETREC:  IF SORTSW                                                        17780
                                        /* IF SORT, COUNT RECORDS & */     17790
                                        /* TELL SORT ITS OK.        */     17800
          THEN DO;                                                         17810
                  SRTCNTIN = SRTCNTIN + 1;                                 17820
                  CALL IHESARC(12);                                        17830
               END;                                                        17840
                                        /* PASS THE RECORD ACROSS.  */     17850
          RETURN (INREC);                                                  17860
                                        /* END OF PROCEDURE SRTIN.  */     17870
 ENDIN:   END SRTIN;                                                       17880
                                                                           17890
                                                                           17900
     /* *********************************************************** */     17910
     /*                                                             */     17920
     /* THE NEXT PROCEDURE, SRTOUT, PROCESSES EACH RECORD PASSED.   */     17930
     /*                                                             */     17940
     /* THE MAINSTREAM CODING IS IN LABELS F2 THRU I2, WHICH .....  */     17950
     /*   1) UNPACKS THE KEYS FROM THE RECORD.                      */     17960
     /*   2) CHECKS IF THE SAME KEYS AS PREVIOUS RECORD (WITH       */     17970
     /*      NORMAL FIRST-TIME SAFEGUARDS).                         */     17980
     /*   3) PRINTS THE PREVIOUS KEYS TOTALS IF THEY DIFFER.        */     17990
     /*   4) UNPACKS THE VALUE FIELDS FROM THE RECORD.              */     18000
     /*   5) PERFORMS THE REQUIRED ARITHMETIC ON THESE FIELDS.      */     18010
     /*   6) PRINTS THE RECORD DETAIL IF REQUIRED.                  */     18020
     /*                                                             */     18030
     /* ADDITIONALLY, THERE ARE SEVERAL INTERNAL SUBROUTINES CALLED */     18040
     /*                                                             */     18050
     /*   T1    UNPACKS THE KEYS FROM THE FILE.                     */     18060
     /*   TOTS  SETS UP THE KEY TOTAL BREAKS FOR PRINTING.          */     18070
     /*   P1    PRINTS THE PAGE HEADING.                            */     18080
     /*   S1    PRINTS A DETAIL/TOTAL LINE.                         */     18090
     /*   AUG1  ADDS THE KEY TOTALS INTO THE NEXT LEVEL UP.         */     18100
     /*                                                             */     18110
     /* *********************************************************** */     18120
                                                                           18130
 SRTOUT:  PROC (INREC);                                                    18140
                                                                           18150
          DCL INREC CHAR(1200) VARYING;                                    18160
                                                                           18170
                                        /* COUNT RCDS OUT FROM SORT */     18180
          SRTCNTOUT = SRTCNTOUT + 1;                                       18190
                                                                           18200
     /* *********************************************************** */     18210
     /*                                                             */     18220
     /* IT HAS BEEN MENTIONED THAT THE END-OF-JOB ROUTINE USES      */     18230
     /* SUBROUTINES OF THIS PROCEDURE. SO ON ENTRY WE FIRST TEST    */     18240
     /* ISW. IF ZERO, THE WHOLE SRTOUT PROCEDURE IS REQUIRED & WE   */     18250
     /* PASS TO F1. IF NON-ZERO, WE SET THE ROUTINE EXIT LABELS     */     18260
     /* REXIT AND LEXIT TO THE END OF SRTOUT, AND PASS TO THE       */     18270
     /* REQUIRED ROUTINE.                                           */     18280
     /*                                                             */     18290
     /* *********************************************************** */     18300
                                                                           18310
          IF ISW = 0 THEN GO TO F1;                                        18320
                                        /* SET LABELS TO END SRTOUT */     18330
          REXIT = NEXTREC;                                                 18340
          LEXIT = NEXTREC;                                                 18350
                                        /* GO TO RELEVANT ROUTINE.  */     18360
          I = ISW;                                                         18370
          IF I = 10 THEN DO;                                               18380
          PEXIT = F0;                                                      18390
              GO TO P1;                                                    18400
 F0:          LEXIT = NEXTREC;                                             18410
              GO TO S1;                                                    18420
          END;                                                             18430
          IF I = 11 THEN GO TO O1;                                         18440
                   ELSE GO TO TOTS;                                        18450
                                                                           18460
     /* *********************************************************** */     18470
     /*                                                             */     18480
     /* THE NEXT SECTION, WITH LABELS 'F', UNPACKS THE KEYS FROM    */     18490
     /* THE RECORD, CALLING THE SUBROUTINE T1 WHICH PUTS THE I'TH   */     18500
     /* KEY INTO VARIABLE KEY4. IT ONLY UNPACKS AS MANY KEYS AS ARE */     18510
     /* REQUIRED (NOKEYS), PASSING TO LABEL G1 WHEN THIS IS DONE.   */     18520
     /*                                                             */     18530
     /* *********************************************************** */     18540
                                                                           18550
 F1:      I = 1;                                                           18560
                                        /* UNPACK FIRST KEY (I = 1) */     18570
          REXIT = F2;                                                      18580
          GO TO T1;                                                        18590
                                        /* SET IN 'KEY1'.           */     18600
 F2:      KEY1 = KEY8;                                                     18610
                                        /* IF ONLY ONE KEY, GO OUT. */     18620
          IF NOKEYS = 1 THEN GO TO G1;                                     18630
                                        /* REPEAT FOR SECOND KEY.   */     18640
          I = 2;                                                           18650
          REXIT = F3;                                                      18660
          GO TO T1;                                                        18670
 F3:      KEY2 = KEY8;                                                     18680
          IF NOKEYS = 2 THEN GO TO G1;                                     18690
                                        /* REPEAT FOR THIRD KEY.    */     18700
          I = 3;                                                           18710
          REXIT = F4;                                                      18720
          GO TO T1;                                                        18730
 F4:      KEY3 = KEY8;                                                     18740
          IF NOKEYS = 3 THEN GO TO G1;                                     18750
                                        /* REPEAT FOR LAST KEY.     */     18760
          I = 4;                                                           18770
          REXIT = F5;                                                      18780
          GO TO T1;                                                        18790
 F5:      KEY4 = KEY8;                                                     18800
          IF NOKEYS = 4 THEN GO TO G1;                                     18810
          I = 5;                                                           18820
          REXIT = F6;                                                      18830
          GO TO T1;                                                        18840
 F6:      KEY5 = KEY8;                                                     18850
          IF NOKEYS = 5 THEN GO TO G1;                                     18860
          I = 6;                                                           18870
          REXIT = F7;                                                      18880
          GO TO T1;                                                        18890
 F7:      KEY6 = KEY8;                                                     18900
          IF NOKEYS = 6 THEN GO TO G1;                                     18910
          I = 7;                                                           18920
          REXIT = F8;                                                      18930
          GO TO T1;                                                        18940
 F8:      KEY7 = KEY8;                                                     18950
          IF NOKEYS = 7 THEN GO TO G1;                                     18960
          I = 8;                                                           18970
          REXIT = G1;                                                      18980
          GO TO T1;                                                        18990
     /* *********************************************************** */     19000
     /*                                                             */     19010
     /* THE LABELS 'G' TEST THE CURRENT KEY VALUES AGAINST THE      */     19020
     /* PREVIOUS ONES. IF THEY DIFFER, 'TOTS' IS CALLED TO PRINT    */     19030
     /* THE PREVIOUS KEYS TOTALS, IF REQUIRED.                      */     19040
     /*                                                             */     19050
     /*    AS THERE ARE NO PREVIOUS KEYS FOR THE FIRST RECORD, THE  */     19060
     /* LASTKEYS ARE SET EQUAL, TO BYPASS THE TOTALS.               */     19070
     /*                                                             */     19080
     /*    IN CALLING 'TOTS', THE PARAMETER I PASSED POINTS TO THE  */     19090
     /* ACCUMULATOR IN ARRAY2 WHICH HOLDS THE RELEVANT VALUES. SO   */     19100
     /* I = 2 FOR KEY4, 3 FOR KEY3, 4 FOR KEY2, 5 FOR KEY1 (MAJOR). */     19110
     /*                                                             */     19120
     /* *********************************************************** */     19130
                                                                           19140
 G1:      IF FIRST_TIME                                                    19150
                                        /* RESET SWITCH & MOVE KEYS */     19160
          THEN DO;                                                         19170
                  FIRST_TIME = '0'B;                                       19180
                  LASTKEY1 = KEY1;                                         19190
                  LASTKEY2 = KEY2;                                         19200
                  LASTKEY3 = KEY3;                                         19210
                  LASTKEY4 = KEY4;                                         19220
                  LASTKEY5 = KEY5;                                         19230
                  LASTKEY6 = KEY6;                                         19240
                  LASTKEY7 = KEY7;                                         19250
                  LASTKEY8 = KEY8;                                         19260
               END;                                                        19270
                                                                           19280
          IF KEY1 ^= LASTKEY1                                              19290
                                        /* MAJOR KEY CHANGE.        */     19300
          THEN DO;                                                         19310
                  REXIT = G2;                                              19320
                                        /* ALL FOUR KEY TOTALS.     */     19330
                  DO I = 2 TO 9;                                           19340
                     GO TO TOTS;                                           19350
 G2:              END;                                                     19360
                  GO TO H1;                                                19370
               END;                                                        19380
                                                                           19390
          IF KEY2 ^= LASTKEY2                                              19400
                                        /* KEY2 CHANGE              */     19410
          THEN DO;                                                         19420
                  REXIT = G3;                                              19430
                                        /* TOTALS FOR KEYS 4, 3 & 2 */     19440
                  DO I = 2 TO 8;                                           19450
                     GO TO TOTS;                                           19460
 G3:              END;                                                     19470
                  GO TO H1;                                                19480
               END;                                                        19490
                                                                           19500
          IF KEY3 ^= LASTKEY3                                              19510
                                        /* KEY3 CHANGE              */     19520
          THEN DO;                                                         19530
                  REXIT = G4;                                              19540
                                        /* TOTALS FOR KEYS 4 & 3.   */     19550
                  DO I = 2 TO 7;                                           19560
                     GO TO TOTS;                                           19570
 G4:              END;                                                     19580
                  GO TO H1;                                                19590
               END;                                                        19600
                                                                           19610
          IF KEY4 ^= LASTKEY4                                              19620
                                        /* KEY4 CHANGE, TOTAL KEY4. */     19630
          THEN DO;                                                         19640
                  REXIT = G5;                                              19650
                  DO I = 2 TO 6;                                           19660
                  GO TO TOTS;                                              19670
 G5:              END;                                                     19680
                  GO TO H1;                                                19690
               END;                                                        19700
          IF KEY5 ^= LASTKEY5                                              19710
          THEN DO;                                                         19720
                  REXIT = G6;                                              19730
                  DO I = 2 TO 5;                                           19740
                     GO TO TOTS;                                           19750
 G6:              END;                                                     19760
                  GO TO H1;                                                19770
               END;                                                        19780
          IF KEY6 ^= LASTKEY6                                              19790
          THEN DO;                                                         19800
                  REXIT = G7;                                              19810
                  DO I = 2 TO 4;                                           19820
                     GO TO TOTS;                                           19830
 G7:              END;                                                     19840
                  GO TO H1;                                                19850
               END;                                                        19860
          IF KEY7 ^= LASTKEY7                                              19870
          THEN DO;                                                         19880
                  REXIT = G8;                                              19890
                  DO I = 2 TO 3;                                           19900
                     GO TO TOTS;                                           19910
 G8:              END;                                                     19920
                  GO TO H1;                                                19930
               END;                                                        19940
          IF KEY8 ^= LASTKEY8                                              19950
          THEN DO;                                                         19960
                  REXIT = H1;                                              19970
                  I = 2;                                                   19980
                     GO TO TOTS;                                           19990
               END;                                                        20000
                                                                           20010
          GO TO H2;                                                        20020
                                                                           20030
 H1:      LASTKEY1 = KEY1;                                                 20040
          LASTKEY2 = KEY2;                                                 20050
          LASTKEY3 = KEY3;                                                 20060
          LASTKEY4 = KEY4;                                                 20070
          LASTKEY5 = KEY5;                                                 20080
          LASTKEY6 = KEY6;                                                 20090
          LASTKEY7 = KEY7;                                                 20100
          LASTKEY8 = KEY8;                                                 20110
                                                                           20120
     /* *********************************************************** */     20130
     /*                                                             */     20140
     /* THE NEXT BLOCK OF CODING UNPACKS THE VALUE FIELDS (AS       */     20150
     /* SPECIFIED IN THE GR04 CARDS) FROM THE RECORD, AND PLACES    */     20160
     /* THEM IN THEIR CORRECT PLACE IN THE ARRAY 'VALUES'.          */     20170
     /*                                                             */     20180
     /* *********************************************************** */     20190
                                                                           20200
 H2:      DO I = 1 TO NOFLD;                                               20210
                                        /* LENGTH & POSITION.       */     20220
          DO IP1 = 1 TO 3;                                                 20230
             IF ARSTYP_GR04(I,IP1) = ' ' THEN GO TO H207;                  20240
             L = ARSLEN_GR04(I,IP1);                                       20250
             M = ARSPOS_GR04(I,IP1);                                       20260
             IF ARSPAK_GR04(I,IP1) = 'P'                                   20270
             THEN DO;                                                      20280
                     PREC = 0;                                             20290
                     L1 = 7 - L;                                           20300
                     SUBSTR(ZREC,L1,L) = SUBSTR(INREC,M,L);                20310
                     NREC = PREC;                                          20320
                     GO TO H203;                                           20330
                  END;                                                     20340
             IF ARSN_GR04(I,IP1)                                           20350
             THEN XREC = SUBSTR(INREC,M,L);                                20360
             ELSE DO;                                                      20370
                     XREC = '00000000000';                                 20380
                     L1 = 12 - L;                                          20390
                     SUBSTR(XREC,L1,L) = SUBSTR(INREC,M,L);                20400
                  END;                                                     20410
 H203:       ABIT = ARSN_GR04(I,IP1);                                      20420
             IF ABIT                                                       20430
             THEN XLIT = ARSLIT_GR04(I,IP1);                               20440
             ELSE DO;                                                      20450
                     PREC = NREC;                                          20460
                     PLIT = ARSNUM_GR04(I,IP1);                            20470
                  END;                                                     20480
             LABL = ARSTYP_GR04(I,IP1);                                    20490
             IF LABL = 'EQ' THEN GO TO H2EQ;                               20500
             IF LABL = 'NE' THEN GO TO H2NE;                               20510
             IF LABL = 'GT' THEN GO TO H2GT;                               20520
             IF LABL = 'LT' THEN GO TO H2LT;                               20530
 H2EQ:       IF ABIT THEN GO TO H2EQ1;                                     20540
             IF PLIT = PREC THEN GO TO H206;                               20550
             GO TO H208;                                                   20560
 H2EQ1:      IF XLIT = XREC THEN GO TO H206;                               20570
              GO TO H208;                                                  20580
 H2NE:       IF ABIT THEN GO TO H2NE1;                                     20590
             IF PLIT = PREC THEN GO TO H208;                               20600
             GO TO H206;                                                   20610
 H2NE1:      IF XLIT = XREC THEN GO TO H208;                               20620
              GO TO H206;                                                  20630
 H2GT:       IF ABIT THEN GO TO H2GT1;                                     20640
             IF PLIT < PREC THEN GO TO H206;                               20650
             GO TO H208;                                                   20660
 H2GT1:      IF XLIT < XREC THEN GO TO H206;                               20670
              GO TO H208;                                                  20680
 H2LT:       IF ABIT THEN GO TO H2LT1;                                     20690
             IF PLIT > PREC THEN GO TO H206;                               20700
             GO TO H208;                                                   20710
 H2LT1:      IF XLIT > XREC THEN GO TO H206;                               20720
              GO TO H208;                                                  20730
 H206:    END;                                                             20740
 H207:                                                                     20750
             L = ARLEN_GR04(I);                                            20760
             M = ARPOS_GR04(I);                                            20770
                                                                           20780
             IF ARPAK_GR04(I) = 'P'                                        20790
                                        /* PACKED NUMERIC -         */     20800
                                        /* TO MIDVAL VIA PREC.      */     20810
             THEN DO;                                                      20820
                     PREC = 0;                                             20830
                     L1 = 7 - L;                                           20840
                     SUBSTR(ZREC,L1,L) = SUBSTR(INREC,M,L);                20850
                     MIDVAL = PREC;                                        20860
                  END;                                                     20870
                                        /* UNPACKED NUMERIC -       */     20880
                                        /* TO MIDVAL VIA NREC.      */     20890
             ELSE DO;                                                      20900
                     NREC = 0;                                             20910
                     L1 = 12 - L;                                          20920
                     SUBSTR(XREC,L1,L) = SUBSTR(INREC,M,L);                20930
                     MIDVAL = NREC;                                        20940
                  END;                                                     20950
                                                                           20960
          IF ARDEC_GR04(I) = 1 THEN MIDVAL = MIDVAL / 10;                  20970
          IF ARDEC_GR04(I) = 2 THEN MIDVAL = MIDVAL / 100;                 20971
          IF ARDEC_GR04(I) = 3 THEN MIDVAL = MIDVAL / 1000;                20972
          IF ARDEC_GR04(I) = 4 THEN MIDVAL = MIDVAL / 10000;               20973
          IF ARDEC_GR04(I) = 5 THEN MIDVAL = MIDVAL / 100000;              20974
          IF ARDEC_GR04(I) = 6 THEN MIDVAL = MIDVAL / 1000000;             20975
                                        /* SUBSCRIPT OF FIELD NAME  */     21040
           J = ARFLD_GR04(I);                                              21050
                                        /* INSERT FIELD IN ARRAY.   */     21060
             VALUES(J,1) = MIDVAL;                                         21070
                                        /* REPEAT FOR NEXT FIELD.   */     21080
 H208:    END;                                                             21090
                                                                           21100
     /* *********************************************************** */     21110
     /*                                                             */     21120
     /* NOW THE ARITHMETIC REQUIRED IS PERFORMED ON THESE FIELDS.   */     21130
     /*                                                             */     21140
     /* *********************************************************** */     21150
                                                                           21160
          IF NOARI = 0 THEN GO TO H9;                                      21170
                                                                           21180
                                        /* FOR EACH ARITH STATEMENT */     21190
          DO I = 1 TO NOARI;                                               21200
                                        /* RECEIVING FIELD ZEROED.  */     21210
 $H2:        IF ARITT(I) THEN GO TO H23;                                   21220
          IF ARIFD(I) = -1                                                 21230
          THEN DO;                                                         21240
                  J1A = ARINO(I,1);                                        21250
                  J2A = ARINO(I,3);                                        21260
                  IF ARINO(I,2) = 1 THEN GO TO $H21;                       21270
                  IF ARINO(I,2) = 2 THEN GO TO $H22;                       21280
                  IF ARINO(I,2) = 3 THEN GO TO $H23;                       21290
                  IF ARINO(I,2) = 4 THEN GO TO $H24;                       21300
                  GO TO $H4;                                               21310
 $H21:            IF VALUES(J1A,1)  = VALUES(J2A,1)                        21320
                  THEN GO TO $H3;                                          21330
                  GO TO $H4;                                               21340
 $H22:            IF VALUES(J1A,1) ^= VALUES(J2A,1)                        21350
                  THEN GO TO $H3;                                          21360
                  GO TO $H4;                                               21370
 $H23:            IF VALUES(J1A,1)  > VALUES(J2A,1)                        21380
                  THEN GO TO $H3;                                          21390
                  GO TO $H4;                                               21400
 $H24:            IF VALUES(J1A,1)  < VALUES(J2A,1)                        21410
                  THEN GO TO $H3;                                          21420
                  GO TO $H4;                                               21430
 $H3:             J1A = ARINO(I,5);                                        21440
                  VALUES(J1A,1) = VALUES(J1A,1) + 1;                       21450
 IF ARINO(I,4) < 0 & BYTE_LINE ^= CBYT THEN LTOTSW = '1'B;                 21451
             IF ARINO(I,4) = -1                                            21460
             THEN DO;                                                      21470
                  SKIPPRINT = '1'B;                                        21480
                  GO TO H9;                                                21490
                END;                                                       21500
          IF ARINO(I,4) = -2                                               21510
          THEN GO TO NEXTREC;                                              21520
                  I = ARINO(I,4);                                          21530
                  GO TO $H2;                                               21540
 $H4:             GO TO H23;                                               21550
               END;                                                        21560
             VALUED = 0;                                                   21570
                                        /* FOR EACH OPERATOR ....   */     21580
             DO J = 1 TO ARILN(I);                                         21590
                                        /* SUBSCRIPT OF OPERAND     */     21600
                K1 = ARINO(I,J);                                           21610
                IF ARICN(I,J)                                              21620
                THEN VALUEP = VALIT(K1);     /* CONSTANT OR VARIABLE? */   21630
                ELSE VALUEP = VALUES(K1,1);                                21640
                IF ARISN(I,J) = '-'          /* IF NEGATIVE PREFIX.   */   21650
                THEN VALUEP = -VALUEP;                                     21660
                IF ARIOP(I,J) = '+' THEN VALUED = VALUED + VALUEP;         21670
                IF ARIOP(I,J) = '-' THEN VALUED = VALUED - VALUEP;         21680
                IF ARIOP(I,J) = '*'                                        21690
                THEN DO;                     /* PERFORM ARITHMETIC.   */   21700
                        VALUE1 = VALUED;                                   21710
                        VALUE2 = VALUEP;                                   21720
                        VALUE = VALUE1 * VALUE2;                           21730
                        VALUED = ROUND(VALUE,4);                           21740
                     END;                                                  21750
            IF ARIOP(I,J) = '/'                                            21760
            THEN DO;                                                       21770
                IF VALUEP ^= 0 THEN GO TO H21;                             21780
                VALUED = 0;                                                21790
                ZERO_DIVIDE_COUNT = ZERO_DIVIDE_COUNT + 1;                 21800
                ERRORSW = '1'B;                                            21810
          ERR0DIV = '1'B;                                                  21820
                GOTO H22;                                                  21830
 H21:           VALUE1 = VALUED;                                           21840
                VALUE2 = VALUEP;                                           21850
                VALUE = VALUE1 / VALUE2;                                   21860
                VALUED = ROUND(VALUE,4);                                   21870
 H22:                                                                      21880
            END;                                                           21890
                                                                           21900
                                        /* GET NEXT OPERAND.        */     21910
             END;                                                          21920
             K = ARIFD(I);                                                 21930
             VALUES(K,1) = VALUED;                                         21940
 H23:                                                                      21950
                                        /* TO NEXT ARITH STATEMENT. */     21960
          END;                                                             21970
                                                                           21980
     /* *********************************************************** */     21990
     /*                                                             */     22000
     /* HAVING FINALLY ARRIVED AT THE RESULT VALUES,                */     22010
     /* WE NEXT AUGMENT THE LOWEST LEVEL                            */     22020
     /* RECORD COUNT. THIS FINISHES THE CURRENT PROCESSING OF       */     22030
     /* INREC, AND WE STORE IT IN LASTREC IN CASE KEY TOTAL         */     22040
     /* BREAKS NEED TO TAKE NAMES FROM IT.                          */     22050
     /*                                                             */     22060
     /*     THEN IF A RANGE ANALYSIS WAS REQUIRED, WE ADD THE       */     22070
     /* VALUE INTO THE CORRECT SLOT (BY RANGE) IN THE TW-ARRAY,     */     22080
     /* AND AUGMENT THE CORRESPONDING RECORD COUNT.                 */     22090
     /*                                                             */     22100
     /*     WE THEN TEST NAMESW TO TEST IF THE DETAIL LINE HAS TP   */     22110
     /* BE PRINTED, AND SET THE LINE UP FOR PRINTING IN S1.         */     22120
     /*                                                             */     22130
     /*     FINALLY, ADD THE DETAIL LEVEL ACCUMULATORS UP TO        */     22140
     /* THE NEXT (KEY4) LEVEL, AND RETURN FOR THE NEXT RECORD.      */     22150
     /*                                                             */     22160
     /* *********************************************************** */     22170
                                                                           22180
 H9:                                                                       22190
                                        /* AUGMENT RECORD COUNT.    */     22200
          ARCNT(1) = ARCNT(1) + 1;                                         22210
                                        /* STORE CURRENT RECORD.    */     22220
          LASTREC = INREC;                                                 22230
                                                                           22240
          IF TW80SW                                                        22250
          THEN DO;                                                         22260
                  MIDVAL = VALUES(TW80VAL,1);                              22270
                  DO I = 1 TO TWRNGES;                                     22280
                     IF MIDVAL <= TWARNGE(I) THEN GO TO H95;               22290
                  END;                                                     22300
 H95:             TWARQTY(I,2) = TWARQTY(I,2) + 1;                         22310
                  TWARVAL(I,2) = TWARVAL(I,2) + MIDVAL;                    22320
              END;                                                         22330
                                                                           22340
                                        /* SIGNAL DETAIL LINE.      */     22350
          I = 1;                                                           22360
                                        /* IS DETAIL PRINT REQUIRED */     22370
          IF ^NAMESW THEN GO TO I2;                                        22380
          IF SKIPPRINT                                                     22390
          THEN DO;                                                         22400
                  SKIPPRINT = '0'B;                                        22410
                  GO TO I2;                                                22420
               END;                                                        22430
                                        /* IS NEW PAGE NEEDED?      */     22440
          IF LINECT > LINECX                                               22450
          THEN DO;                                                         22460
          PEXIT = I1;                                                      22470
                  GO TO P1;                                                22480
               END;                                                        22490
                                        /* SET UP KEYS IN LINE.     */     22500
 I1:      KEYX_LINE = KEY1 || '  ';                                        22510
          IF NOKEYS > 1 THEN KEYX_LINE = KEYX_LINE || KEY2 || '  ';        22520
          IF NOKEYS > 2 THEN KEYX_LINE = KEYX_LINE || KEY3 || '  ';        22530
          IF NOKEYS > 3 THEN KEYX_LINE = KEYX_LINE || KEY4;                22540
          KEY_LINE = KEYX_LINE;                                            22550
                                        /* TOTAL JUST PRINTED, SKIP */     22560
          IF LTOTSW THEN BYTE_LINE = '-';                                  22570
                    ELSE BYTE_LINE = CBYT;                                 22580
                                        /* RESET TOTAL SWITCH.      */     22590
          LTOTSW = '0'B;                                                   22600
                                        /* NAME ASSCTD WITH DETAIL? */     22610
          IF NAMEPOS ^= 0                                                  22620
          THEN NAME_LINE = SUBSTR(INREC,NAMEPOS,NAMELEN);                  22630
          ELSE NAME_LINE  = ' ';                                           22640
                                        /* GO TO PRINT LINE.        */     22650
          LEXIT = I2;                                                      22660
          GO TO S1;                                                        22670
                                        /* SET EXIT FOR NEXT RECORD */     22680
 I2:      LEXIT = NEXTREC;                                                 22690
          J = 2;                                                           22700
                                        /* ADD UP ACCUMULATORS.     */     22710
          GO TO AUG1;                                                      22720
                                                                           22730
                                                                           22740
                                                                           22750
                                                                           22760
     /* *********************************************************** */     22770
     /*                                                             */     22780
     /* THE FOLLOWING SUBROUTINE, T1, UNPACKS THE I'TH KEY FROM     */     22790
     /* THE RECORD, WHERE 'I' IS THE RECEIVED PARAMETER.            */     22800
     /*                                                             */     22810
     /* *********************************************************** */     22820
                                                                           22830
 T1:                                                                       22840
                                        /* LENGTH & POSITION OF KEY */     22850
          L = ARLEN_GR03(I);                                               22860
          M = ARPOS_GR03(I);                                               22870
                                                                           22880
          IF ARPAK_GR03(I) = 'P'                                           22890
                                        /* PACKED - TO PREC, NREC   */     22900
                                        /* & FINALLY TO KEY4.       */     22910
          THEN DO;                                                         22920
                  PREC = 0;                                                22930
                  L1 = 7 - L;                                              22940
                  SUBSTR(ZREC,L1,L) = SUBSTR(INREC,M,L);                   22950
                  NREC = PREC;                                             22960
                  L1 = (2 * L) - 1;                                        22970
                  L2 = 12 - L1;                                            22980
                  KEY8 = SUBSTR(XREC,L2,L1);                               22990
               END;                                                        23000
                                        /* HEX - STRAIGHT TO KEY4.  */     23010
          ELSE DO;                                                         23020
                  KEY8 = SUBSTR(INREC,M,L);                                23030
               END;                                                        23040
                                        /* END OF SUBROUTINE T1.    */     23050
          GO TO REXIT;                                                     23060
                                                                           23070
                                                                           23080
     /* *********************************************************** */     23090
     /*                                                             */     23100
     /* THE FOLLOWING SUBROUTINE, LABELS 'TOTS' THRU 'TOTEX1',      */     23110
     /* IS CALLED WHENEVER ONE OF THE FOUR KEYS CHANGES VALUE.      */     23120
     /* IT COMPRISES SOME OF THE MOST COMPLEX LOGIC IN THE ENTIRE   */     23130
     /* PROGRAM, AND THE PRECISE FLOW THROUGH THE ROUTINE DEPENDS   */     23140
     /* ON SEVERAL TESTS:                                           */     23150
     /*                                                             */     23160
     /* 1) IS THIS THE LOWEST KEY LEVEL?      NOKEY = 6-I           */     23170
     /* 2) HAVE DETAIL LINES BEEN PRINTED?    NAMESW                */     23180
     /* 3) IS A NEW PAGE NEEDED?              LINECT > 55           */     23190
     /* 4) IS A TOTAL REQUESTED FOR THIS KEY? ARTOT_GR03(6-I) = 'T' */     23200
     /* 5) IS THERE A NAME FOR THIS KEY?      ARNAM_GR03(6-I)^= 0   */     23210
     /* 6) IS A PAGE BREAK WANTED FOR IT?     ARPAG_GR03(6-I)^= ' ' */     23220
     /*                                                             */     23230
     /* DEPENDING ON THESE TESTS, IT WILL PRINT THE KEY VALUES IN   */     23240
     /* ONE OF THE FOLLOWING FORMATS (IF AT ALL):                   */     23250
     /*    (A):                                                     */     23260
     /*   -------KEY-------   --------KEY-NAME--------  ---VALUES-> */     23270
     /* OR (B):                                                     */     23280
     /*   -------KEY-------           (SPACES)          ---VALUES-> */     23290
     /* OR (C):                                                     */     23300
     /*   -------KEY-------   TOTAL **    COUNT=NNNNN   ---VALUES-> */     23310
     /* OR (D):                                                     */     23320
     /*   -------KEY-------   --------KEY-NAME--------  ---VALUES-> */     23330
     /*                       TOTAL **    COUNT=NNNNN               */     23340
     /*                                                             */     23350
     /*   JUST TO ADD TO THE DIFFICULTY, THE NUMBER OF ASTERISKS    */     23360
     /* AFTER 'TOTAL' VARIES WITH THE KEY LEVEL.                    */     23370
     /*                                                             */     23380
     /* STARTING SIMPLY, BRANCH OUT IF THE KEY DOESN'T EXIST,       */     23390
     /* AND GO TO ADD UP THE VALUE ACCUMULATORS.                    */     23400
     /*   THEN WE TEST IF A NEW PAGE IS NEEDED. WE WILL ONLY PRINT  */     23410
     /* A NEW PAGE BEFORE A LOWEST-LEVEL BREAK, SO THAT ALL TOTALS  */     23420
     /* GO ON THE SAME PAGE AS THEIR DETAIL LINES. THEREFORE, FOR A */     23430
     /* NEW PAGE, WE REQUIRE THAT THIS IS THE LOWEST LEVEL KEY, AND */     23440
     /* THAT NO DETAIL LINES ARE BEING PRINTED.                     */     23450
     /*                                                             */     23460
     /* *********************************************************** */     23470
                                                                           23480
 TOTS:    IF NOKEYS < 10-I THEN GO TO TOTEX;                               23490
                                        /* NEW PAGE NEEDED?         */     23500
                                        /* NO TOTAL PRINT- GO OUT.  */     23510
          IF ARTOT_GR03(10-I) ^= 'T' THEN GO TO TOTEX;                     23520
                                        /* SET UP KEY FLDS ON LINE. */     23530
          KEYX_LINE = LASTKEY1 || '  ';                                    23540
          IF I < 9 THEN KEYX_LINE = KEYX_LINE || LASTKEY2 || '  ';         23550
          IF I < 8 THEN KEYX_LINE = KEYX_LINE || LASTKEY3 || '  ';         23560
          IF I < 7 THEN KEYX_LINE = KEYX_LINE || LASTKEY4;                 23570
          KEY_LINE = KEYX_LINE;                                            23580
                                        /* IS THIS LOWEST LEVEL?    */     23590
          IF NOKEYS = 10-I & ^NAMESW                                       23600
                                        /* SET LINE SPACING-DETAIL. */     23610
          THEN DO;                                                         23620
                  IF LTOTSW THEN BYTE_LINE = '-';                          23630
                            ELSE BYTE_LINE = CBYT;                         23640
                  LTOTSW = '0'B;                                           23650
               END;                                                        23660
                                        /* SET LINE SPACING - TOTAL */     23670
          ELSE DO;                                                         23680
                  IF CBYT = ' ' THEN BYTE_LINE = '0';                      23690
                                ELSE BYTE_LINE = '-';                      23700
                  LTOTSW = '1'B;                                           23710
               END;                                                        23720
                                                                           23730
     /* *********************************************************** */     23740
     /*                                                             */     23750
     /* NOW WE TEST IF A NAME EXISTS. IF SO, WE CAN PRINT A LINE    */     23760
     /* OF TYPE 'A', WHICH MAY TURN OUT TO BE THE FIRST LINE OF 'D' */     23770
     /*                                                             */     23780
     /* *********************************************************** */     23790
                                                                           23800
          IF ARNAM_GR03(10-I) ^= 0                                         23810
                                                                           23820
          THEN DO;                                                         23830
                                        /* PUT NAME INTO LINE.      */     23840
                  NAME_LINE = SUBSTR(LASTREC,ARNAM_GR03(10-I),             23850
                                             ARNML_GR03(10-I));            23860
                                        /* PRINT LINE.              */     23870
                  LEXIT = TOTS1;                                           23880
                  GO TO S1;                                                23890
               END;                                                        23900
                                                                           23910
     /* *********************************************************** */     23920
     /*                                                             */     23930
     /* IF THIS IS NOT THE LOWEST LEVEL, WE NOW SET THE 'TOTAL **'  */     23940
     /* UP IN THE NAME POSITION OF THE LINE. IF IT IS, HOWEVER,     */     23950
     /* WE EITHER HAVE ALREADY PRINTED THE TYPE 'A' LINE, AND WE    */     23960
     /* EXIT, OR WE SET THE NAME POSITION BLANK FOR A TYPE 'B'.     */     23970
     /*                                                             */     23980
     /* *********************************************************** */     23990
                                                                           24000
 TOTS1:   IF NOKEYS ^= 10-I | NAMESW                                       24010
                                        /* NOT LOWEST LEVEL.        */     24020
          THEN DO;                                                         24030
                  NAME_LINE = 'TOTAL        COUNT=';                       24040
                  CNT_LINE = ARCNT(I-1);                                   24050
                  SUBSTR(NAME_LINE,7,I-1) = '****';                        24060
               END;                                                        24070
                                        /* IS LOWEST LEVEL PRINT.   */     24080
          ELSE DO;                                                         24090
                  IF ARNAM_GR03(10-I) = 0                                  24100
                                        /* BLANK NAME (TYPE 'B').   */     24110
                  THEN NAME_LINE = ' ';                                    24120
                                        /* TYPE 'A' - ALREADY DONE. */     24130
                  ELSE GO TO TOTEX;                                        24140
               END;                                                        24150
                                                                           24160
     /* *********************************************************** */     24170
     /*                                                             */     24180
     /* IF THERE WAS NO NAME, WE HAVE EITHER A TYPE 'B' OR 'C'      */     24190
     /* SET UP, SO WE PRINT IT AND GO OUT TO TOTEX.                 */     24200
     /*                                                             */     24210
     /* *********************************************************** */     24220
                                                                           24230
          IF ARNAM_GR03(10-I) = 0                                          24240
          THEN DO;                                                         24250
                  LEXIT = TOTEX;                                           24260
                  GO TO S1;                                                24270
               END;                                                        24280
                                                                           24290
     /* *********************************************************** */     24300
     /*                                                             */     24310
     /* HAVING GOT THIS FAR, WE ARE CERTAIN THAT IT IS A TYPA 'D',  */     24320
     /* AND WE HAVE MERELY TO PRINT THE SECOND LINE, FIRST BLANKING */     24330
     /* OUT EVERYTHING BAR THE NAME.                                */     24340
     /*                                                             */     24350
     /* *********************************************************** */     24360
                                                                           24370
          IF NO_GR11 ^= 0 THEN GO TO TOTEX;                                24380
          BYTE_LINE = ' ';                                                 24390
          KEY_LINE = ' ';                                                  24400
          VALUEX_LINE = ' ';                                               24410
          WRITE FILE(PRINT) FROM(LINEA);                                   24420
          LINECT = LINECT + 1;                                             24430
                                                                           24440
     /* *********************************************************** */     24450
     /*                                                             */     24460
     /* HAVING PRINTED THE TOTAL LINE, WE TEST IF A NEW PAGE        */     24470
     /* IS WANTED AFTER THIS KEY BREAK, AND IF SO SIGNAL SUCH TO    */     24480
     /* THE NEXT LOWEST-LEVEL PRINT.                                */     24490
     /*                                                             */     24500
     /*    THEN WE HAVE TO TEST IF THIS IS A MAJOR KEY, AND A       */     24510
     /* RANGE SUBANALYSIS IS REQUIRED FROM IT.                      */     24520
     /*                                                             */     24530
     /*    WE THEN ADD THE PRINT VALUES FOR THIS KEY INTO THOSE     */     24540
     /* OF THE NEXT HIGHEST, AND EXIT.                              */     24550
     /*                                                             */     24560
     /* *********************************************************** */     24570
                                                                           24580
 TOTEX:   IF ARPAG_GR03(10-I) ^= ' ' & SKIPPRINX ^= '1'B                   24590
          THEN LINECT = 80;                                                24600
          SKIPPRINX = '0'B;                                                24610
          IF I ^= 9 THEN GO TO TOTEXA;                                     24620
          IF ^TW80SW  THEN GO TO TOTEXA;                                   24630
                                                                           24640
          J = 2;                                                           24650
          LEXIT = TOTEXA;                                                  24660
          IF TWSUBSW THEN GO TO O1;     /* IF SUBANALYSIS NOT REOD  */     24670
                     ELSE GO TO O9;     /* GO TO ADD UP ARRAY VALUES*/     24680
 TOTEXA:                                                                   24690
                                        /* SIGNAL NEXT TOTAL LEVEL. */     24700
          J = I + 1;                                                       24710
          LEXIT = TOTEX1;                                                  24720
                                        /* ADD UP PRINT VALUES.     */     24730
          GO TO AUG1;                                                      24740
                                        /* END OF SUBROUTINE TOTS.  */     24750
 TOTEX1:  GO TO REXIT;                                                     24760
                                                                           24770
                                                                           24780
     /* *********************************************************** */     24790
     /*                                                             */     24800
     /* THIS NEXT SUBROUTINE, P1, PRINTS THE PAGE HEADING, CLEARS   */     24810
     /* THE SWITCH THAT SIGNALS A TOTAL HAS JUST BEEN PRINTED,      */     24820
     /* RESETS THE LINE COUNT, AND EXITS.                           */     24830
     /*                                                             */     24840
     /* *********************************************************** */     24850
                                                                           24860
 P1:      PAGENO = PAGENO + 1;                                             24870
          PAGE_HEADA = PAGENO;                                             24880
          WRITE FILE(PRINT) FROM(HEADA);                                   24890
          IF I = 10 THEN GO TO $P9;                                        24900
          IF NO_GR10 = 0 THEN GO TO $P9;                                   24910
          HEADX = '0';                                                     24920
          DO J1A = 1 TO NO_GR10;                                           24930
          IF ARFLD_GR10(J1A) = 1009                                        24940
          THEN DO;                                                         24950
                  WRITE FILE(PRINT) FROM(HEADX);                           24960
                  IF ARFMT_GR10(J1A) = '1' THEN HEADX = ' ';               24970
                  IF ARFMT_GR10(J1A) = '2' THEN HEADX = '0';               24980
                  IF ARFMT_GR10(J1A) = '3' THEN HEADX = '-';               24990
                  GO TO $P20;                                              25000
                  END;                                                     25010
             J1B = ARSPOS_GR10(J1A) + 1;                                   25020
             J1C = AREPOS_GR10(J1A) - J1B + 2;                             25030
             J1D = ARFLD_GR10(J1A);                                        25040
             J1E = ARDEC_GR10(J1A);                                        25050
             J1F = ARLIT_GR10(J1A);                                        25060
             HX_BYTE = ARFMT_GR10(J1A);                                    25070
             $EXIT = $P15;                                                 25080
             GO TO $X1;                                                    25090
 $P15:       SUBSTR(HEADX,J1B,J1C) = SUBSTR(FMAT_X,J1D,J1C);               25100
 $P20:     END;                                                            25110
          WRITE FILE(PRINT) FROM(HEADX);                                   25120
 $P9:                                                                      25130
          WRITE FILE(PRINT) FROM(HEADBX);                                  25140
          WRITE FILE(PRINT) FROM(HEADCX);                                  25150
          WRITE FILE(PRINT) FROM(BLANKLINE);                               25160
                                                                           25170
          LTOTSW = '0'B;                                                   25180
          LINECT = 10;                                                     25190
          GO TO PEXIT;                                                     25200
                                                                           25210
                                                                           25220
     /* *********************************************************** */     25230
     /*                                                             */     25240
     /* FOR ALL LEVELS OF DETAIL AND TOTAL PRINT (STIPULATED BY     */     25250
     /* THE RECEIVED PARAMETER 'I'), THE NEXT ROUTINE (S1 & S2)     */     25260
     /* SETS UP THE VALUES IN THE PRINT LINE, WRITES THE LINE OUT,  */     25270
     /* AND AUGMENTS THE LINE COUNT.                                */     25280
     /*                                                             */     25290
     /* *********************************************************** */     25300
                                                                           25310
 S1:         IF I = 1 THEN GO TO S19;        /* NOT TOTAL - NO ARITH  */   25320
          SKIPPRINX = '0'B;                                                25330
             IF NOARI = 0 THEN GO TO S19;                                  25340
             DO N1 = 1 TO NOARI;                                           25350
 $S2:           IF ARITT(N1) ^= '1'B                                       25360
                THEN GO TO S18;                 /* STMT NOT AT TOTALS */   25370
        IF ARIFD(N1) = -1                                                  25380
          THEN DO;                                                         25390
                  J1A = ARINO(N1,1);                                       25400
                  J2A = ARINO(N1,3);                                       25410
                  IF ARINO(N1,2) = 1 THEN GO TO $S21;                      25420
                  IF ARINO(N1,2) = 2 THEN GO TO $S22;                      25430
                  IF ARINO(N1,2) = 3 THEN GO TO $S23;                      25440
                  IF ARINO(N1,2) = 4 THEN GO TO $S24;                      25450
                  GO TO $S4;                                               25460
 $S21:            IF VALUES(J1A,I)  = VALUES(J2A,I)                        25470
                  THEN GO TO $S3;                                          25480
                  GO TO $S4;                                               25490
 $S22:            IF VALUES(J1A,I) ^= VALUES(J2A,I)                        25500
                  THEN GO TO $S3;                                          25510
                  GO TO $S4;                                               25520
 $S23:            IF VALUES(J1A,I)  > VALUES(J2A,I)                        25530
                  THEN GO TO $S3;                                          25540
                  GO TO $S4;                                               25550
 $S24:            IF VALUES(J1A,I)  < VALUES(J2A,I)                        25560
                  THEN GO TO $S3;                                          25570
                  GO TO $S4;                                               25580
 $S3:             J1A = ARINO(N1,5);                                       25590
                  VALUES(J1A,I) = VALUES(J1A,I) + 1;                       25600
 IF ARINO(N1,4) < 0 & BYTE_LINE ^= CBYT THEN LTOTSW = '1'B;                25601
          IF ARINO(N1,4) = -1                                              25610
          THEN DO;                                                         25620
                  SKIPPRINX = '1'B;                                        25630
                  GO TO LEXIT;                                             25640
               END;                                                        25650
          IF ARINO(N1,4) = -2                                              25660
          THEN GO TO REXIT;                                                25670
                  N1 = ARINO(N1,4);                                        25680
                  GO TO $S2;                                               25690
 $S4:             GO TO S18;                                               25700
               END;                                                        25710
                VALUED = 0;                  /* INIT WORK FIELD       */   25720
                DO N2 = 1 TO ARILN(N1);      /* FOR EACH OPERATOR     */   25730
                   K1 = ARINO(N1,N2);        /* SUBSCRIPT OF OPERAND  */   25740
                   IF ARICN(N1,N2)                                         25750
                   THEN VALUEP = VALIT(K1);  /* CONSTANT OR VARIABLE? */   25760
                   ELSE VALUEP = VALUES(K1,I);                             25770
                   IF ARISN(N1,N2) = '-'                                   25780
                   THEN VALUEP = -VALUEP;    /* NEGATIVE PREFIX.      */   25790
                   IF ARIOP(N1,N2) = '+' THEN VALUED = VALUED + VALUEP;    25800
                   IF ARIOP(N1,N2) = '-' THEN VALUED = VALUED - VALUEP;    25810
                   IF ARIOP(N1,N2) = '*'                                   25820
                   THEN DO;                                                25830
                           VALUE1 = VALUED;                                25840
                           VALUE2 = VALUEP;                                25850
                           VALUE = VALUE1 * VALUE2;                        25860
                           VALUED = ROUND(VALUE,4);                        25870
                        END;                                               25880
                   IF ARIOP(N1,N2) = '/'     /* CHECK FOR ZERODIVIDE  */   25890
                   THEN DO;                                                25900
                           IF VALUEP ^= 0 THEN GO TO S11;                  25910
                           VALUED = 0;                                     25920
                           ZERO_DIVIDE_COUNT = ZERO_DIVIDE_COUNT + 1;      25930
                           ERRORSW = '1'B;                                 25940
          ERR0DIV = '1'B;                                                  25950
                           GO TO S12;                                      25960
 S11:                      VALUE1 = VALUED;                                25970
                           VALUE2 = VALUEP;                                25980
                           VALUE = VALUE1 / VALUE2;                        25990
                           VALUED = ROUND(VALUE,4);                        26000
 S12:                   END;                                               26010
                END;                    /* GET NEXT OPERAND */             26020
                N2 = ARIFD(N1);                                            26030
                VALUES(N2,I) = VALUED;                                     26040
 S18:        END;                       /* GET NEXT ARITH STATEMENT */     26050
 S19:     DO K = 1 TO 5;                                                   26060
             VAL_LINE(K) = ' ';         /* CLEAR VALUE ON PRINT LINE  */   26070
             N1 = ARFLD_GR08(K);                                           26080
             IF N1 = 0 THEN GO TO S2;                                      26090
             LVAL = VALUES(N1,I);                                          26100
             IF LVAL = 0 THEN GO TO S2;                                    26110
                                        /* NUMBER OF DECIMALS TO BE */     26120
                                        /* PRINTED. TAKE FROM LVAL. */     26130
             L = ARDEC_GR08 (K);                                           26140
             IF L = 0                                                      26150
             THEN VAL_LINE(K) = '  ' || LVAL_UNITS || LVAL_SIGN;           26160
             ELSE VAL_LINE(K) = SUBSTR(LVAL_UNITS,L,12-L) || '.' ||        26170
                                SUBSTR(LVAL_DECS,1,L) || LVAL_SIGN;        26180
 S2:      END;                                                             26190
          IF NOKEYXX = 10-I & NAMESW ^= '1'B & LINECT > LINECX             26200
          THEN DO;                                                         26210
                  PEXIT = TOTS0;                                           26220
                  GO TO P1;                                                26230
 TOTS0:        END;                                                        26240
                                                                           26250
          IF NO_GR11 = 0 THEN GO TO $S9;                                   26260
          SUBSTR(LINEA,2,132) = ' ';                                       26270
          UBYT = BYTE_LINE;                                                26280
          J1A = 10-I;                                                      26290
          IF NO_GR12(J1A) > 0 THEN GO TO $S7;                              26300
          SW11 = '1'B;                                                     26310
          SW12 = '0'B;                                                     26320
 $S50:    DO J1A = 1 TO NO_GR11;                                           26330
          IF ARFLD_GR11(J1A) = 1009                                        26340
          THEN DO;                                                         26350
          SW11 = '0'B;                                                     26360
                  WRITE FILE(PRINT) FROM(LINEA);                           26370
                  IF ARFMT_GR11(J1A) = '1'                                 26380
                  THEN DO;                                                 26390
                          LINECT = LINECT + 1;                             26400
                          LINEA = ' ';                                     26410
                       END;                                                26420
                  IF ARFMT_GR11(J1A) = '2'                                 26430
                  THEN DO;                                                 26440
                          LINECT = LINECT + 2;                             26450
                          LINEA = '0';                                     26460
                       END;                                                26470
                  IF ARFMT_GR11(J1A) = '3'                                 26480
                  THEN DO;                                                 26490
                          LINECT = LINECT + 3;                             26500
                          LINEA = '-';                                     26510
                       END;                                                26520
                  GO TO $S59;                                              26530
               END;                                                        26540
             J1B = ARSPOS_GR11(J1A) + 1;                                   26550
             J1C = AREPOS_GR11(J1A) - J1B + 2;                             26560
             J1D = ARFLD_GR11(J1A);                                        26570
          IF J1D > 979 & SW11 & SW12                                       26580
          THEN GO TO $S59;                                                 26590
             J1E = ARDEC_GR11(J1A);                                        26600
          J1F = ARLIT_GR11(J1A);                                           26610
             HX_BYTE = ARFMT_GR11(J1A);                                    26620
          ZSW = ZSW_GR11(J1A);                                             26630
             $EXIT = $S51;                                                 26640
             GO TO $X1;                                                    26650
 $S51:       SUBSTR(LINEA,J1B,J1C) = SUBSTR(FMAT_X,J1D,J1C);               26660
 $S59:    END;                                                             26670
          GO TO $S9;                                                       26680
 $S7:     DO J2A = 1 TO NO_GR12(J1A);                                      26690
          IF ARFLD_GR12(J2A,J1A) = 1500                                    26700
          THEN DO;                                                         26710
                  SW12 = '1'B;                                             26720
                  SW11 = '1'B;                                             26730
                  GO TO $S50;                                              26740
               END;                                                        26750
          IF ARFLD_GR12(J2A,J1A) = 1009                                    26760
          THEN DO;                                                         26770
                  WRITE FILE(PRINT) FROM(LINEA);                           26780
                  IF ARFMT_GR12(J2A,J1A) = '1'                             26790
                  THEN DO;                                                 26800
                          LINECT = LINECT + 1;                             26810
                          LINEA = ' ';                                     26820
                       END;                                                26830
                  IF ARFMT_GR12(J2A,J1A) = '2'                             26840
                  THEN DO;                                                 26850
                          LINECT = LINECT + 2;                             26860
                          LINEA = '0';                                     26870
                       END;                                                26880
                  IF ARFMT_GR12(J2A,J1A) = '3'                             26890
                  THEN DO;                                                 26900
                          LINECT = LINECT + 3;                             26910
                          LINEA = '-';                                     26920
                       END;                                                26930
                  GO TO $S79;                                              26940
               END;                                                        26950
             J1B = ARSPOS_GR12(J2A,J1A) + 1;                               26960
             J1C = AREPOS_GR12(J2A,J1A) - J1B + 2;                         26970
             J1D = ARFLD_GR12(J2A,J1A);                                    26980
             J1E = ARDEC_GR12(J2A,J1A);                                    26990
             J1F = ARLIT_GR12(J2A,J1A);                                    27000
          HX_BYTE = ARFMT_GR12(J2A,J1A);                                   27010
             $EXIT = $S71;                                                 27020
             GO TO $X1;                                                    27030
 $S71:       SUBSTR(LINEA,J1B,J1C) = SUBSTR(FMAT_X,J1D,J1C);               27040
 $S79:    END;                                                             27050
 $S9:                                                                      27060
          WRITE FILE(PRINT) FROM(LINEA);                                   27070
                                                                           27080
          IF NO_GR11 ^= 0 THEN BYTE_LINE = UBYT;                           27090
          LINECT = LINECT + 1;                                             27100
          IF BYTE_LINE  = '0' THEN LINECT = LINECT + 1;                    27110
          IF BYTE_LINE  = '-' THEN LINECT = LINECT + 2;                    27120
          GO TO LEXIT;                                                     27130
                                                                           27140
     /* *********************************************************** */     27150
     /*                                                             */     27160
     /*     IF A RANGE ANALYSIS WAS REQUESTED, THIS NEXT SECTION    */     27170
     /* IS USED TO PRINT IT.                                        */     27180
     /*     THE RECEIVED PARAMETER IS J, WHICH HAS A VALUE OF 1     */     27190
     /* FOR THE OVERALL FILE ANALYSIS, OR 2 FOR A SUBANALYSIS ON    */     27200
     /* MAJOR KEY BREAK.                                            */     27210
     /*     WE FIRST PRINT THE HEADINGS, THEN ONE LINE FOR EACH     */     27220
     /* REQUESTED RANGE.                                            */     27230
     /*     IN O9, WE AUGMENT THE ACCUMULATOR ARRAYS, AND EXIT.     */     27240
     /*                                                             */     27250
     /* *********************************************************** */     27260
                                                                           27270
 O1:      TWPAGE = TWPAGE + 1;                                             27280
          TWPAGE_HEADA = TWPAGE;                                           27290
          WRITE FILE(TW80) FROM(TWHEADA);                                  27300
                                                                           27310
          IF J = 1                                                         27320
          THEN TWHED1_HEADB = 'OVERALL FILE ANALYSIS.';                    27330
          ELSE DO;                                                         27340
                  IF ARNAM_GR03(1) = 0                                     27350
                  THEN TWHED1_HEADB = 'SUB-ANALYSIS FOR MAJOR KEY '        27360
                                      || LASTKEY1;                         27370
                  ELSE TWHED1_HEADB = 'SUB-ANALYSIS FOR MAJOR KEY '        27380
                                      || LASTKEY1 || ' - '                 27390
                                      || SUBSTR(LASTREC,ARNAM_GR03(1),     27400
                                                ARNML_GR03(1));            27410
               END;                                                        27420
                                        /* COMPLETE HEADINGS        */     27430
          WRITE FILE(TW80) FROM(TWHEADB);                                  27440
          WRITE FILE(TW80) FROM(TWHEADC);                                  27450
          WRITE FILE(TW80) FROM(TWHEADD);                                  27460
          TWTOTENT = 0;                 /* INITIALISE WORK VARIABLS */     27470
          TWTOTVAL = 0;                                                    27480
          TWCUMENT = 0;                                                    27490
          TWCUMVAL = 0;                 /* SUM TOTAL ENTRIES < VALS */     27500
          DO ITW = 1 TO TWRNGES + 1;                                       27510
             TWTOTENT = TWTOTENT + TWARQTY(ITW,J);                         27520
             TWTOTVAL = TWTOTVAL + TWARVAL(ITW,J);                         27530
          END;                                                             27540
          DO ITW = 1 TO TWRNGES + 1;    /* FOR EACH RANGE ....      */     27550
             TWCUMENT = TWCUMENT + TWARQTY(ITW,J);                         27560
             TWCUMVAL = TWCUMVAL + TWARVAL(ITW,J);                         27570
             IF ITW = 1                 /* CUMULATE ENTRIES < VALS  */     27580
             THEN DO;                                                      27590
                     TWPRAY = TWARNGE(1);                                  27600
                     TWRNGE_LINEA = TWPRRA;                                27610
                     GO TO O2;                                             27620
                  END;                  /* SET UP CORRECT RANGE     */     27630
             IF ITW = TWRNGES + 1       /* DESCRIPTION IN LINE      */     27640
             THEN DO;                                                      27650
                     TWPRCX = TWARNGE(TWRNGES);                            27660
                     TWRNGE_LINEA = TWPRRC;                                27670
                     GO TO O2;                                             27680
                  END;                                                     27690
             TWPRBX = TWARNGE(ITW-1);                                      27700
             TWPRBZ = TWARNGE(ITW);                                        27710
             TWRNGE_LINEA = TWPRRB;                                        27720
 O2:         TWENTA_LINEA = TWARQTY(ITW,J);                                27730
             TWVALA_LINEA = TWARVAL(ITW,J);                                27740
             TWENTB_LINEA = TWCUMENT;                                      27750
             TWVALB_LINEA = TWCUMVAL;   /* START LOADING VALUES     */     27760
             IF TWTOTENT = 0            /* INTO PRINT LINE          */     27770
             THEN DO;                                                      27780
                     TWINTENT = 0;                                         27790
                     TWINTVAL = 0;                                         27800
                  END;                                                     27810
             ELSE DO;                                                      27820
                     TWINTENT = 100 * TWARQTY(ITW,J) / TWTOTENT;           27830
                     TWINTVAL = 100 * TWCUMENT       / TWTOTENT;           27840
                  END;                                                     27850
          TWINTPCT = TWINTENT;                                             27860
          TWEPCA_LINEA = ROUND(TWINTPCT,2);                                27870
          TWINTPCT = TWINTVAL;                                             27880
          TWEPCB_LINEA = ROUND(TWINTPCT,2);                                27890
             IF TWTOTVAL = 0                                               27900
             THEN DO;                                                      27910
                     TWINTENT = 0;                                         27920
                     TWINTVAL = 0;                                         27930
                  END;                                                     27940
             ELSE DO;                                                      27950
                     TWINTENT = 100 * TWARVAL(ITW,J) / TWTOTVAL;           27960
                     TWINTVAL = 100 * TWCUMVAL       / TWTOTVAL;           27970
                  END;                                                     27980
          TWINTPCT = TWINTENT;                                             27990
          TWVPCA_LINEA = ROUND(TWINTPCT,2);                                28000
          TWINTPCT = TWINTVAL;                                             28010
          TWVPCB_LINEA = ROUND(TWINTPCT,2);                                28020
                                     /* COMPLETES THE LINE - WRITE. */     28030
                                                                           28040
             WRITE FILE(TW80) FROM(TWLINEA);                               28050
          END;                          /* SET UP NEXT LINE.        */     28060
                                                                           28070
 O9:      IF J = 1 THEN GO TO LEXIT;                                       28080
          DO ITW = 1 TO 21;                                                28090
             TWARQTY(ITW,1) = TWARQTY(ITW,1) + TWARQTY(ITW,2);             28100
             TWARVAL(ITW,1) = TWARVAL(ITW,1) + TWARVAL(ITW,2);             28110
             TWARQTY(ITW,2) = 0;                                           28120
             TWARVAL(ITW,2) = 0;        /* AUGMENT & CLEAR ARRAYS.  */     28130
          END;                                                             28140
                                                                           28150
          GO TO LEXIT;                                                     28160
                                                                           28170
                                                                           28180
 $X1:     FMAT_X = ' ';                                                    28190
          IF J1D < 990 THEN GO TO $X5;                                     28200
          IF J1D = 991 THEN FMAT_X = LASTKEY1;                             28210
          IF J1D = 992 THEN FMAT_X = LASTKEY2;                             28220
          IF J1D = 993 THEN FMAT_X = LASTKEY3;                             28230
          IF J1D = 994 THEN FMAT_X = LASTKEY4;                             28240
          IF J1D = 1005 THEN FMAT_X = LASTKEY5;                            28250
          IF J1D = 1006 THEN FMAT_X = LASTKEY6;                            28260
          IF J1D = 1007 THEN FMAT_X = LASTKEY7;                            28270
          IF J1D = 1008 THEN FMAT_X = LASTKEY8;                            28280
          IF J1D = 995                                                     28290
          THEN FMAT_X = SUBSTR(LASTREC,ARNAM_GR03(1),ARNML_GR03(1));       28300
          IF J1D = 996                                                     28310
          THEN FMAT_X = SUBSTR(LASTREC,ARNAM_GR03(2),ARNML_GR03(2));       28320
          IF J1D = 997                                                     28330
          THEN FMAT_X = SUBSTR(LASTREC,ARNAM_GR03(3),ARNML_GR03(3));       28340
          IF J1D = 998                                                     28350
          THEN FMAT_X = SUBSTR(LASTREC,ARNAM_GR03(4),ARNML_GR03(4));       28360
          IF J1D = 1001                                                    28370
          THEN FMAT_X = SUBSTR(LASTREC,ARNAM_GR03(5),ARNML_GR03(5));       28380
          IF J1D = 1002                                                    28390
          THEN FMAT_X = SUBSTR(LASTREC,ARNAM_GR03(6),ARNML_GR03(6));       28400
          IF J1D = 1003                                                    28410
          THEN FMAT_X = SUBSTR(LASTREC,ARNAM_GR03(7),ARNML_GR03(7));       28420
          IF J1D = 1004                                                    28430
          THEN FMAT_X = SUBSTR(LASTREC,ARNAM_GR03(8),ARNML_GR03(8));       28440
          IF J1D = 999 THEN FMAT_X = LITERAL_POOL(J1F);                    28450
          IF J1D = 1000 THEN FMAT_X = SUBSTR(LASTREC,NAMEPOS,NAMELEN);     28460
          J1D = 1;                                                         28470
          GO TO $EXIT;                                                     28480
 $X5:     IF J1D = 980 THEN VALUED = ARCNT(9);                             28490
          IF J1D = 981 THEN VALUED = ARCNT(8);                             28500
          IF J1D = 982 THEN VALUED = ARCNT(7);                             28510
          IF J1D = 983 THEN VALUED = ARCNT(6);                             28520
          IF J1D = 984 THEN VALUED = ARCNT(5);                             28530
          IF J1D = 976 THEN VALUED = ARCNT(4);                             28540
          IF J1D = 977 THEN VALUED = ARCNT(3);                             28550
          IF J1D = 978 THEN VALUED = ARCNT(2);                             28560
          IF J1D = 979 THEN VALUED = ARCNT(1);                             28570
          IF J1D < 970 THEN VALUED = VALUES(J1D,I);                        28580
          IF VALUED = 0 & ZSW                                              28590
          THEN DO;                                                         28600
                  J1D = 1;                                                 28610
                  GO TO $EXIT;                                             28620
               END;                                                        28630
          IF HX_BYTE = 'Z' THEN GO TO $X6;                                 28640
          ZSW = '1'B;                                                      28650
          IF HX_BYTE = ',' THEN GO TO $X7;                                 28660
          IF J1E = 0                                                       28670
          THEN DO;                                                         28680
 VAL_DEC1 = VALUED;                                                        28690
 FMAT_90 = ROUND(VAL_DEC1,0);                                              28691
                  J1D = 16;                                                28700
                  GO TO $X9;                                               28710
               END;                                                        28720
          IF J1E = 1                                                       28730
          THEN DO;                                                         28740
 VAL_DEC2 = VALUED;                                                        28750
 FMAT_91 = ROUND(VAL_DEC2,1);                                              28751
                  J1D = 17;                                                28760
                  GO TO $X9;                                               28770
               END;                                                        28780
          IF J1E = 2                                                       28790
          THEN DO;                                                         28800
 VAL_DEC3 = VALUED;                                                        28810
 FMAT_92 = ROUND(VAL_DEC3,2);                                              28811
                  J1D = 17;                                                28820
                  GO TO $X9;                                               28830
               END;                                                        28840
          IF J1E = 3                                                       28850
          THEN DO;                                                         28860
 VAL_DEC4 = VALUED;                                                        28870
 FMAT_93 = ROUND(VAL_DEC4,3);                                              28871
                  J1D = 17;                                                28880
                  GO TO $X9;                                               28890
               END;                                                        28900
          IF J1E = 4                                                       28910
          THEN DO;                                                         28920
 VAL_DEC5 = VALUED;                                                        28930
 FMAT_94 = ROUND(VAL_DEC5,4);                                              28931
                  J1D = 17;                                                28940
                  GO TO $X9;                                               28950
               END;                                                        28960
 $X6:     IF J1E = 0                                                       28970
          THEN DO;                                                         28980
 VAL_DEC1 = VALUED;                                                        28990
 FMAT_Z0 = ROUND(VAL_DEC1,0);                                              28991
                  J1D = 16;                                                29000
                  GO TO $X9;                                               29010
               END;                                                        29020
          IF J1E = 1                                                       29030
          THEN DO;                                                         29040
 VAL_DEC2 = VALUED;                                                        29050
 FMAT_Z1 = ROUND(VAL_DEC2,1);                                              29051
                  J1D = 17;                                                29060
                  GO TO $X9;                                               29070
               END;                                                        29080
          IF J1E = 2                                                       29090
          THEN DO;                                                         29100
 VAL_DEC3 = VALUED;                                                        29110
 FMAT_Z2 = ROUND(VAL_DEC3,2);                                              29111
                  J1D = 17;                                                29120
                  GO TO $X9;                                               29130
               END;                                                        29140
          IF J1E = 3                                                       29150
          THEN DO;                                                         29160
 VAL_DEC4 = VALUED;                                                        29170
 FMAT_Z3 = ROUND(VAL_DEC4,3);                                              29171
                  J1D = 17;                                                29180
                  GO TO $X9;                                               29190
               END;                                                        29200
          IF J1E = 4                                                       29210
          THEN DO;                                                         29220
 VAL_DEC5 = VALUED;                                                        29230
 FMAT_Z4 = ROUND(VAL_DEC5,4);                                              29231
                  J1D = 17;                                                29240
                  GO TO $X9;                                               29250
               END;                                                        29260
 $X7:     IF J1E = 0                                                       29270
          THEN DO;                                                         29280
 VAL_DEC1 = VALUED;                                                        29290
 FMAT_C0 = ROUND(VAL_DEC1,0);                                              29291
                  J1D = 20;                                                29300
                  GO TO $X9;                                               29310
               END;                                                        29320
          IF J1E = 1                                                       29330
          THEN DO;                                                         29340
 VAL_DEC2 = VALUED;                                                        29350
 FMAT_C1 = ROUND(VAL_DEC2,1);                                              29351
                  J1D = 21;                                                29360
                  GO TO $X9;                                               29370
               END;                                                        29380
          IF J1E = 2                                                       29390
          THEN DO;                                                         29400
 VAL_DEC3 = VALUED;                                                        29410
 FMAT_C2 = ROUND(VAL_DEC3,2);                                              29411
                  J1D = 21;                                                29420
                  GO TO $X9;                                               29430
               END;                                                        29440
          IF J1E = 3                                                       29450
          THEN DO;                                                         29460
 VAL_DEC4 = VALUED;                                                        29470
 FMAT_C3 = ROUND(VAL_DEC4,3);                                              29471
                  J1D = 20;                                                29480
                  GO TO $X9;                                               29490
               END;                                                        29500
          IF J1E = 4                                                       29510
          THEN DO;                                                         29520
 VAL_DEC5 = VALUED;                                                        29530
 FMAT_C4 = ROUND(VAL_DEC5,4);                                              29531
                  J1D = 20;                                                29540
                  GO TO $X9;                                               29550
               END;                                                        29560
 $X9:     J1D = J1D - J1C + 1;                                             29570
          GO TO $EXIT;                                                     29580
                                                                           29590
     /* *********************************************************** */     29600
     /*                                                             */     29610
     /* THIS FINAL SUBROUTINE ADDS THE PRINT VALUES AT LEVEL I      */     29620
     /* INTO THOSE OF LEVEL J, AND, FOR I NOT = 1, ADDS THE RECORD  */     29630
     /* COUNT OF LEVEL I-1 INTO THAT OF LEVEL J-1,RESETTING THE     */     29640
     /* SOURCE TO ZERO IN EACH CASE.                                */     29650
     /*                                                             */     29660
     /* *********************************************************** */     29670
                                                                           29680
 AUG1:    DO K = 1 TO IPMF_VALS;                                           29690
          II2 = VAL_IDS(K);                                                29700
          IF II2 = 0 THEN GO TO AUG2;                                      29740
          IF ARKEY_GR04(II2) >  9-I  THEN GO TO AUG2;                      29760
          VALUES(K,J) = VALUES(K,I);                                       29770
          GO TO AUG3;                                                      29780
 AUG2:    VALUES(K,J) = VALUES(K,J) + VALUES(K,I);                         29790
 AUG3:                                                                     29800
             VALUES(K,I) = 0;                                              29810
          END;                                                             29820
          IF  I = 1 THEN GO TO LEXIT;                                      29830
          ARCNT(J-1) = ARCNT(J-1) + ARCNT(I-1);                            29840
          ARCNT(I-1) = 0;                                                  29850
          GO TO LEXIT;                                                     29860
                                                                           29870
                                                                           29880
     /* *********************************************************** */     29890
     /*                                                             */     29900
     /* WE FINALLY ARRIVE AT THE END OF THE PROCEDURE SRTOUT.       */     29910
     /* IF THIS PROCEDURE IS BEING USED BY THE SORT, WE TEST THE    */     29920
     /* COUNTS OF RECORDS INTO AND OUT OF THE SORT, AND SIGNAL      */     29930
     /* WHETHER OR NOT TO PASS ANY MORE RECORDS.                    */     29940
     /*                                                             */     29950
     /* *********************************************************** */     29960
                                                                           29970
 NEXTREC: IF SORTSW                                                        29980
          THEN DO;                                                         29990
                  IF SRTCNTIN = SRTCNTOUT                                  30000
                  THEN CALL IHESARC(8);                                    30010
                  ELSE CALL IHESARC(4);                                    30020
               END;                                                        30030
                                                                           30040
          RETURN;                                                          30050
                                        /* END OF PROCEDURE SRTOUT. */     30060
          END SRTOUT;                                                      30070
                                                                           30080
                                                                           30090
          END;      /* GROPE */                                            30100
                                                                           30110
