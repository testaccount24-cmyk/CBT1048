         TITLE 'T580P160 - ADD COST CENTRE TO OS RECORDS'
T580P160 CSECT
         PRINT ON,GEN,NODATA
         SPACE 1
*        REGISTER EQUATES AND USAGE
         SPACE 1
R0       EQU   0
R1       EQU   1
R2       EQU   2         WORK REGISTER
R3       EQU   3         WORK REGISTER
R4       EQU   4         BAL RETURN ADDRESS
R5       EQU   5         ADDRESS OF SYSPRINT BUFFER
R6       EQU   6         ADDRESS OF SYSUT1 BUFFER
R7       EQU   7         ADDRESS OF SYSUT2 BUFFER
R8       EQU   8         ADDRESS OF SYSOUT BUFFER
R9       EQU   9         ADDRESS OF SYSIN BUFFER / PARM POINTER
R10      EQU   10        WORK REGISTER
R11      EQU   11        BASE REGISTER 3
R12      EQU   12        BASE REGISTER 2
R13      EQU   13        SAVE AREA POINTER / BASE REGISTER 1
R14      EQU   14        BALR RETURN ADDRESS
R15      EQU   15        BALR ROUTINEADDRESS
         EJECT
***********************************************************************
*                                                                     *
*        FORMAT OF OS ACCOUNTING RECORDS                              *
*                                                                     *
***********************************************************************
         SPACE 1
OSRECD   DSECT                     FORMAT OF OS ACCT'G RECORDS
OSMACHID DS    CL3                 MACHINE-ID (145-158)
OSDATE   DS    CL5                 DATE JOB STARTED
OSCHRG   DS    CL4                 JOB CHARGE CODE
OSCAT    DS    CL2                 CATEGORY CODE
OSCCENT  DS    0CL5                COST CENTRE
OSCMAJ   DS    CL3                 MAJOR COST CENTER
OSCMIN   DS    CL2                 MONOR COST CENTER
         DS    CL30                FILLER
OSID     DS    CL2                 STEP NUMBER / JOB RECORD ID
         DS    CL54                FILLER
OSMU     DS    CL4                 MACHINE UNITS (
OSCOST   DS    CL4                 JOB COST
         DS    CL47                FILLER
OSLGTH   EQU   *-OSRECD            LENGTH OF DSECT
T580P160 CSECT
         EJECT
***********************************************************************
*        FORMAT OF T58RATE RECORD.                                    *
***********************************************************************
         SPACE 1
RATERECD DSECT                     FORMAT OF T58RATE RECORD
RDATES   DS    CL5                 DATE OF START OF PERIOD
         DS    CL1                 FILLER
RDATEE   DS    CL5                 DATE OF END OF PERIOD
         DS    CL69                FILLER
RLNGHT   EQU   *-RATERECD          LENGHT OF DSECT
T580P160 CSECT
         SPACE 5
***********************************************************************
*                                                                     *
*        FORMAT OF PROJECT LOG RECORDS.                               *
*                                                                     *
***********************************************************************
         SPACE 1
PROJCARD DSECT
PROJPROJ DS    CL4                 PROJECT NUMBER
PROJCHRG DS    CL4                 CHARGE CODE
PROJCC   DS    CL5                 COST CENTRE
PROJPERC DS    CL3                 PERCENTAGE TO BE CHARGED
PROJACRO DS    CL8                 SYSTEM ACRONYM
PROJDESC DS    CL29                DESCRIPTION OF CHARGE CODE
PROJISUE DS    CL15                PERSON TO WHOM ISSUED
PROJDATO DS    CL6                 DATE PROJECT OPENED
PROJDATC DS    CL6                 DATE PROJECT CLOSED
PROJLGTH EQU   *-PROJCARD          LENGTH OF DSECR
T580P160 CSECT
         EJECT
**********************************************************************
*        FORMAT OF INTERMEDIATE RECORD                                *
***********************************************************************
         SPACE 1
INTERMED DSECT                     FORMAT OF SORT RECORD
ICCENT   DS    CL5                 COST CENTRE
ICHRG    DS    CL4                 CHERGE CODE
ICAT     DS    CL2                 CATEGORY CODE
IMU      DS    CL4                 MACHINE UNITS
ICOST    DS    CL4                 JOB COST
ILNGTH   EQU   *-INTERMED          LENGTH OF DSECT
T580P160 CSECT
         EJECT
***********************************************************************
*                                                                     *
*        FORMAT OF A CHAIN ELEMENT CONSTRICTED FROM A PROJECT         *
*         LOG ENTRY.  EACH PROJECT LOG ENTRY WITH A % OF 100          *
*         AND HAS NOT BEEN CLOSED CREATES A TRUE ENTRY, WHILE         *
*         PROJECTS DISTRIBUTED ACROSS A NUMBER OF COST CENTRES        *
*         CREATE PSEUDO ENTRIES.  THESE ENTRIES INITIALLY COMPRISE    *
*         A CHAIN, BUT ARE LATER MOVED TO CONTIGUOUS AND SORTED       *
*         INTO CHARGE CODE SEQUENCE.  EACH ENTRY ON THIS FINAL        *
*         TABLE COMPRISES A FOUR BYTE CHARGE CODE AND A FIVE          *
*         BYTE COST CENTRE OR PSEUDO CODE.                            *
*                                                                     *
***********************************************************************
         SPACE 5
*********************************************
* CHNNEXT  *          *          *          *
*        ADDRESS OF NEXT CHAIN ELEMENT      *
*          *          *          *          *
*********************************************
* CHNCHRG  *          *          *          *
*              CHARGE CODE                  *
*          *          *          *          *
*********************************************
* CHNCOST  *          *          *          *
*              COST CENTRE                  *
*          *          *          *          *
*********************************************
*   COST   * CHNLAST  *          *          *
*  CENTRE  * ADDRESS OF LAST CHAIN ELEMENT  *
*  CONT'D  *           *         *          *
*********************************************
* CHNFLAG  *
*          *
*  FLAGS   *
************
         SPACE 5
CHNNEXT  EQU   0                   ADDRESS OF NEXT CHAIN ELEMENT
CHNCHRG  EQU   4                   CHARGE CODE
CHNCOST  EQU   8                   COST CENTRE
CHNLAST  EQU   12                  ADDRESS OF LAST CHAIN ELEMENT
CHNFLAG  EQU   16                  MISCELLANEOUS FLAGS
         SPACE 1
PROJCLOS EQU   1                   FLAG - PROJECT CLOESD
         EJECT
NTRYCHRG EQU   0                   CHARGE CODE
NTRYCOST EQU   4                   COST CENTRE
NTRYFLAG EQU   9                   MISCELLANEOUS FLAGS
         SPACE 5
*        NOTE :
*              THE PREVIOUS EQUATES ALSO APPLY TO THE
*               FINAL TABLE ENTRIES CONTRUCTED IN A SINGLE TABLE.
         EJECT
***********************************************************************
*        HOUSEKEEPING                                                 *
***********************************************************************
         SPACE 1
         PGMIN EQUATES=NO,USING=(R13,R12,R11) ESTABLISH ADDRESSABILITY
         PRINT NOGEN               SUPPRESS MACRO EXPANSION
         ST    R1,PARMPNTR         PRESERVE PARM POINTER
         ST    R13,E15R13S1        PRESERVE REG 13 FOR E15
         ST    R13,E35R13S1        PRESERVE REG 13 FOR E35
         L     R15,DATEADDR        GET ADDRESS OF DATERTN
         LA    R1,ADATEFLD         POINT R1 AT ADDRESS OF DATE FIELD
         BALR  R14,R15             PASS CONTROL TO DTERTN
         USING OSRECD,R6           ESTANLISH RECORD ADDRESSABILITY
         SPACE 5
***********************************************************************
*        OPEN DATA SETS                                               *
***********************************************************************
         SPACE 1
         LA    R10,MAXDS           ESTABLISH LOOP
         LA    R2,DCBTABLE         POINT AT AD-CON TABLE
LOOP1    BAL   R4,DDFIND           VERIFY DD STATEMENT EXISTS
         BAL   R4,OPEN             OPEN DATA SET IF PRESENT
         LA    R2,NTRYSIZE(,R2)    POINT AT NEXT TABLE ENTRY
         BCT   R10,LOOP1           PROCESS NEXT DATA SET
         LA    R5,SAFETY           POINT BUFFER POINTERS AT
         LA    R7,UT2REC            PSEUDO-BUFFER, LEST NO
         LA    R8,SAFETY            DD STATEMENT IS PRESENT
         EJECT
***********************************************************************
*        THIS ROUTINE PUTS OUT INITIAL INFORMATORY MESSAGES           *
*         TO SYSOUT ( T580R160 ).                                     *
***********************************************************************
         SPACE 1
         MVI   0(R8),PAGESKIP      ESTABLISH PAGE SKIP FOR SYSOUT
         MVI   0(R5),PAGESKIP       AND FOR SYSPRINT
         BAL   R4,PRINTOUT         SKIP TO NEW PAGE
         MVI   0(R5),SPCE3AFT      ESTABLISH TRIPLE SPACE
         MVI   0(R8),SPCE3AFT      ESTABLISH TRIPLE SPACE FOR SYSOUT
         MVC   5(L'LINE01,R8),LINE01 ADD HEADING LINE TO SYSOUT
         BAL   R4,PRINTOUT         WRITE HEADING LINE
         MVC   5(L'LINE02,R8),LINE02 ADD SUB-HEADING TO SYSOUT
         BAL   R4,PRINTOUT         WTITE SUB-HEADING
         LA    R10,MAXDS           ESTABLISH DETAIL LOOP
         LA    R2,DCBTABLE         POINT AT AD-CON TABLE
LOOP2    TM    0(R2),DDSTAT        TEST IF DD STATEMENT PRESENT
         BZ    *+14                BYPASS PRINT IF NOT
         MVC   10(8,R8),4(R2)      ADD DD NAME TO SYSOUT
         BAL   R4,PRINTOUT         PRINT DETAIL LINE
         LA    R2,NTRYSIZE(,R2)    POINT TO NEXT TABLE ENTRY
         BCT   R10,LOOP2           PROCESS NEXT ENTRY
         MVI   0(R8),SPCE2AFT       IN SYSPRINT AND SYSOUT
         BAL   R4,PRINTOUT          AND WRITE IT
         SPACE 5
***********************************************************************
*        VERIFY THAT SYSUT1 DD STATEMENT EXISTS                       *
***********************************************************************
         SPACE 1
TESTUT1  TM    SYSUT1SW,DDSTAT     TEST FOR SYSUT1 STATEMENT
         BO    TESTUT1X            BRANCH IF ONE EXISTS
         MVC   COMPCODE,COND16     SET CONDITION CODE TO 16
         WTO   'T580P160     ***** NO SYSUT1 STATEMENT *****'
         WTO   'T580P160     ***** PROCESSING BYPASSED *****'
         MVC   5(L'LINE08,R8),LINE08 ADD ERROR MESSAGE TO SYSOUT
         BAL   R4,PRINTOUT         WRITE ERROR MESSAGE
         MVC   5(L'LINE09,R8),LINE09 TELL OF INACTION
         BAL   R4,PRINTOUT         WRITE MESSAGE
         B     PRINTCDE            PRINT CONDITION CODE
TESTUT1X EQU   *                   EXIT FROM RTN
         EJECT
***********************************************************************
*        READ IN T580RATE RECORD CONTROL CARD.                        *
***********************************************************************
         SPACE 1
         USING RATERECD,R1         ESTABLISH TEMPORARY RECORD ADDRESSA
         GET   T580RATE            READ CONTROL CARD
         MVC   DATES,RDATES        STORE START DATE
         MVC   DATEE,RDATEE        STORE END DATE
         DROP  R1                  DROP TEMPORARY ADDRESSABILITY
         CLC   DATES,=C'99999'     TEST FOR 'NOOP' PERIOD
         BE    ENDUT1              TERMINATE STEP IF YES
         LA    R2,TABLE2SW         POINT AT D/S TABLE ENTRY
         BAL   R4,CLOSE            CLOSE CONTROL CARD RECORD D/S
         B     T58RATEX            EXIT FROM ROUTINE
         SPACE 5
ENDTAB02 EQU   *                   INVALID EOD ON CONTROL CRD D/S
         MVI   0(R8),SPCE3AFT      ESTABLISH TRIPLE SPACE
         BAL   R4,PRINTOUT          AND ADVANCE
         MVC   5(L'LINE38,R8),LINE38 TELL OF SYSTEM ERROR
         BAL   R4,PRINTOUT          AND WRITE LINE
         MVC   10(L'LINE41,R8),LINE41 TELL OF NO CONTROL CARD
         BAL   R4,PRINTOUT          AND WRITE LINE
         MVC   COMPCODE,COND16     SET CONDITION CODE OF 16
         B     ENDUT1               AND TRRMINATE JOB
         SPACE 1
T58RATEX EQU   *                   END OF CONTROL CRD READ
         EJECT
***********************************************************************
*        BUILD COST CENTRE / CHARGE CODE TABLE IN CORE                *
***********************************************************************
         SPACE 1
***********************************************************************
*    1.  SYSTABLE IS READ AND EVERY NON-BLANK TABLE ENTRY             *
*         FOUND BECOMES AN ELEMENT IN A CHAIN OF ENTRIES.             *
***********************************************************************
         SPACE 1
         USING PROJCARD,R3         ESTABLISH PROJECT LOG ADDRESSABILITY
         MVI   0(R8),SPCE2AFT       DOUBLE SPACE
         BAL   R4,PRINTOUT         PRINT THE LINE
         TM    TABLESW,DDSTAT      TEST FOR SYSTABLE STATEMENT
         BZ    GETTABLX            BYPASS PROCESSING IF NONE
         LA    R2,CHAIN            POINT R2 AT FIRST CHAIN FIELD
GETTABLE GET   SYSTABLE            GET TABLE RECORD
         AP    CNTTAB,ONE          INCREMENT RECORD COUNT
         LR    R3,R1               POINR R3 AT START OF RECORD
         CLC   PROJPERC,=C'000'    TEST IF OCCASIONAL USER
         BE    GETTABLE            IGNORE ENTRY ENTIRELY IF SO
         CLC   PROJPERC,=C'100'    VERIFY THAT ALL CHARGES TO 1 COST CN
         BE    TABBLD              BRANCH IF YES TO BUILD CHAIN
         CLC   PROJCHRG,CHNCHRG(R2) TST IF CHANGE OF CHARGE CODE
         BE    GETTABLE            GET NEXT IF NOT
         OI    SWITCH,NON100       INDICATE THAT NON-100 ENTRY BUILT
         B     TABBLD+L'TABBLD     BUILD CHAIN ELEMENT
TABBLD   NI    SWITCH,255-NON100   SET NON-100 SWITCH OFF
         AP    CNTNTRYS,ONE        INCREMENT ENTRY COUNT
       GETMAIN R,LV=17             GET CORE TO BUILD ELEMENT
         ST    R1,CHNNEXT(R2)      POINT PREVIOUS ELEMENT AT THIS ONE
         ST    R2,CHNLAST(R1)      POINT THIS ELEMENT AT LAST
         LR    R2,R1               POINT R2 AT THIS ELEMENT
         MVC   CHNCHRG(4,R2),PROJCHRG  CHARGE CODE TO ELEMENT
         MVI   CHNCOST(R2),C'P'    ASSUME PSEUDO CODE NEEDED ..
         MVC   CHNCOST+1(4,R2),PROJCHRG ... AND SET IT UP
         TM    SWITCH,NON100       TEST IF PSEUDO CODE NEEDED
         BO    *+10                BRANCH IF YES
         MVC   CHNCOST(5,R2),PROJCC SET UP TRUE ENTRY
         XC    CHNNEXT(4,R2),CHNNEXT(R2)  AND ZEROISE FORWARD POINTER
         XC    CHNFLAG(1,R2),CHNFLAG(R2) ZEROISE FLAGS
         CLC   PROJDATC,SPACES     TEST IF PROJECT CLOSED
         BE    *+8                 BRANCH IF NOT
         OI    CHNFLAG(R2),PROJCLOS INDICATE PROJECT CLOSED
         B     GETTABLE            GET NEXT RECORD
         EJECT
***********************************************************************
*        BUILD COST CENTRE / CHARGE CODE TABLE ( CONTINUED )          *
***********************************************************************
         SPACE 1
***********************************************************************
*    2.  AN AREA OF CORE LARGE ENOUGH TO CONTAIN ALL THE              *
*         COST CENTRE / CHARGE CODE ENTRIES CONTIGUOUSLY IS           *
*         ACQUIRED, THE CHAIN ELEMENTS ARE MOVED TO THIS AREA,        *
*         AND THE CHAIN ELEMENTS ARE RELEASED.                        *
***********************************************************************
         SPACE 1
ENDTABLE ZAP   DECIMAL,CNTNTRYS    MOVE ELEMENT COUNT TO WORK AREA
         CP    DECIMAL,ZERO        TEST FOR ANY ELEMENTS
         BE    GETTABLX            BRANCH IF NOT TO BYPASS PROCESSING
         AP    DECIMAL,ONE         ALLOW ROOM FOR DELIMITER
         MP    DECIMAL,TEN         MULTIPLY BY ELEMENT SIZE
         CVB   R0,DECIMAL          CONVEERT REQUIRED SIZE TO BINARY
       GETMAIN R,LV=(R0)           GET NECESSARY AREA OF CORE
         ST    R1,ADRTABLE         PRESERVE TABLE ADDRESS
         LR    R2,R1               INITIALISE TABLE POINTER
         L     R3,CHAIN            GET ADDRESS OF 1ST CHAIN ELEMENT
TABLOOP2 LTR   R1,R3               TEST FOR END OF CHAIN
         BZ    GETTABLX            BRANCH IF YES TO EXIT
         MVC   0(9,R2),CHNCHRG(R1) MOVE ELEMENT CONTENTS TO TABLE
         MVC   NTRYFLAG(1,R2),CHNFLAG(R3) MOVE FLAGS TO TABLE
         LA    R2,10(,R2)          ADJUST TABLE POINTER TO NEXT ENTRY
         L     R3,CHNNEXT(R1)      GET ADDRESS OF NEXT CHAIN ELEMENT
         LA    R0,17               INDICATE ELEMENT SIZE IN R0
      FREEMAIN R,LV=(R0),A=(R1)    FREE THE CHAIN ELEMENT
         NI    CCSW,X'0F'          ENABLE 'COST CENTRE' RTN
         B     TABLOOP2            PROCESS THE NEXT ELEMENT
GETTABLX EQU   *                   END OF COST/CHRG TABLE BUILD RTN
         LA    R2,TABLESW          POINT AT D/S CONTROL ELEMENT
         BAL   R4,CLOSE            CLOSE SYSTABLE D/S IF OPEN
         EJECT
***********************************************************************
*        INVOKE THE SORT AND PROCESS THE ACCOUNTIND CARDS             *
***********************************************************************
         SPACE 1
         STM   R5,R12,40(R13)      PRESERVE T580P160'S REGISTERS
         LA    R1,SORTPARM         ESTABLISH PARAMETER LINKAGE
         LINK  EP=SORT             PERFORM THE SORT
         CH    R15,COMPCODE        TEST IF SORT'S COMP CODE > PGM'S
         BNH   *+8                 BRANCH IF NOT
         STH   R15,COMPCODE        SAVE THE SORT'S COMPLETION CODE
         B     ENDUT1              PRINT TERMINATION MESSAGES
         EJECT
***********************************************************************
*        SORT EXIT E15 - REFORMAT THE ACCOUNTING RECORDS              *
***********************************************************************
         SPACE 1
         USING *,R15               ESTABLISH TEMPORARY ADDRESSABILITY
E15      SUBIN ,                   ENTER SORT EXIT E15
         STM   R14,R12,12(R13)     SAVE SORT'S REGISTERS
         ST    R13,E15R13S2        SAVE SORT'D SAVE AREA ADDRESS
         L     R13,E15R13S1        RETRIEVE PGM'S SAVE AREA ADDRESS
         MVC   E15REGSV(64),12(R13)    SAVE REGS FOR RET. FROM SORT
         LM    R5,R12,40(R13)      RETRIEVE T580P160'S REGISTERS
         B     E15CONT             BRANCH AROUND SAVE AREAS
E15R13S1 DS    F                   SAVE AREA FOR T580P160'S REG 13
E15R13S2 DS    F                   SAVE AREA FOR SORT'S REG 13
E15REGSV DS    16F                 REGS SAVE AREA FOR RET. FROM SORT
E15CONT  EQU   *                   CONTINUE
         DROP  R15                 DROP TEMPORARY ADDRESSABILITY
         SPACE 5
E15LOOP  BAL   R4,READ             GET HASP ACCOUNTING RECORD
         BAL   R4,COSTCNTR         RETRIEVE COST CENTER
         LA    R1,INTER            POINT AT INTERMEDIATE RECORD
         USING INTERMED,R1         ESTABLISH TEMPORARY EDDRESSABILITY
         MVC   ICCENT,OSCCENT      COST CENTRE TO INTERMED RECORD
         MVC   ICHRG,OSCHRG        CHARGE CODE TO INTERMED RECORD
         MVC   ICAT,OSCAT          CATEGORY CODE  INTERMED RECORD
         OI    ICAT,X'F0'          'OR' LEADING BLANK TO ZERO
         MVC   IMU,OSMU            MACHINE UNITS  INTERMED RECORD
         MVC   ICOST,OSCOST        JOB COST    TO INTERMED RECORD
         DROP R1                   DROP TEMPORARY ADDRESSABILITY
         LA    R15,INSERT          TELL SORT TO ACCEPT RECORD
         B     *+8                 BYPASS SETTING NO-RETURN CODE
         SPACE 5
E15EXIT  LA    R15,NORETURN        TELL SORT NOT TO RETURN
         MVC   12(64,R13),E15REGSV     RESTORE REGS FOR RET. FROM SORT
         STM   R5,R12,40(R13)      PRESERVE T580P160'S REGISTERS
         L     R13,E15R13S2        RESTORE SORT'S SAVE AREA POINTER
         L     R14,12(R13)         RESTORE THE SORT'S
         L     R0,20(R13)           GENERAL PURPOSE
         LM    R2,R12,28(R13)       REGISTERS
         BR    R14                 RETURN TO THE SORT
         EJECT
***********************************************************************
*        SORT EXIT E35 - PROCESS THE SORTED ACCOUNTING RECORDS        *
***********************************************************************
         SPACE 1
         USING *,R15               ESTABLISH TEMPORARY ADDRESSABILITY
E35      SUBIN ,                   ENTER SORT EXIT E35
         STM   R14,R12,12(R13)     SAVE SORT'S REGISTERS
         ST    R13,E35R13S2        SAVE SORT'D SAVE AREA SDDRESS
         L     R13,E35R13S1        RETRIEVE PGM'S SAVE AREA ADDRESS
         MVC   E35REGSV(64),12(R13)    SAVE REGS FOR RET. FROM SORT
         LM    R5,R12,40(R13)      RETRIEVE T580P160'S REGISTERS
         B     E35CONT             BRANCH AROUND SAVE AREAS
E35R13S1 DS    F                   SAVE AREA FOR T580P160'S REG13
E35R13S2 DS    F                   SAVE AREA FOR SORT'D REG 13
E35REGSV DS    16F                 REGS SAVE AREA FOR RET. FROM SORT
E35CONT  EQU   *                   CONTINUE
         DROP  R15                 DROP TEMPORARY ADDRESSABILITY
         SPACE 1
         L     R6,0(,R1)           GET ADDRESS OF RECORD FROM SORT
         LA    R6,0(,R6)           PURIFY HIGH ORDER BYTE
         LTR   R6,R6               TEST FOR END OF DATA
         BNZ   E35CONT2            BRANCH IF NOT
         BAL   R4,WRITPUT          GO WRITE LAST SYSUT2 RECORD
         LA    R15,NORETURN        TELL THE SORT NOT TO RERURN
         B     *+8                 BYPASS REG 15 LOAD
         SPACE 1
E35EXIT  LA    R15,DELETE          TELL THE SORT TO DELETE THE RECORD
         MVC   12(64,R13),E35REGSV RESTORE REGS FOR RET. FROM SORT
         STM   R5,R12,40(R13)      PRESERVE T580P160'S REGISTERS
         L     R13,E35R13S2        RESTORE THE SORT'S REG 13
         L     R14,12(R13)         RESTORE THE SORT'S
         LM    R0,R12,20(R13)       REGISTERS
         BR    R14                 RETURN TO THE SORT
         SPACE 1
E35CONT2 LA    R4,E35EXIT          ESTABLISH SUB-ROUTINE RETURN
         BAL   R4,WRITE            WRITE AMENDED RECORD
         B     E35EXIT             RETURN TO THE SORT
         SPACE 1
         EJECT
***********************************************************************
*        PUT OUT TERMINATION MESSAGES TO SYSPRINT AND SYSOUT.         *
***********************************************************************
         SPACE 1
ENDUT1   MVI   0(R8),SPCE3AFT      ESTABLISH TRIPLE SPACE
         BAL   R4,PRINTOUT          AND SPACE FORWARDS
         MVI   0(R8),SPCE3AFT      RE-ESTABLISH TRIPLE SPACE
         MVC   5(L'LINE17,R8),LINE17 TERMINATION HEADING
         BAL   R4,PRINTOUT         PRINT HEADING
         EJECT
***********************************************************************
*        TERMINATION MESSAGES (CONTINUED)                             *
***********************************************************************
         SPACE 1
         MVC   5(L'LINE37,R8),LINE37         **
         MVC   L'LINE37+5(10,R8),EDITMASK      *
         ED    L'LINE37+5(10,R8),CNTTAB        ** SYSTABLE RECORDS READ
         BAL   R4,PRINTOUT                   **
         SPACE 1
         MVC   5(L'LINE34,R8),LINE34         **
         MVC   L'LINE34+5(10,R8),EDITMASK      *
         ED    L'LINE34+5(10,R8),CNTNTRYS     ** COST/CHRG TAB ENTRIES
         BAL   R4,PRINTOUT                   **
         SPACE 1
         MVC   5(L'LINE04,R8),LINE04         **
         MVC   L'LINE04+5(10,R8),EDITMASK      *
         ED    L'LINE04+5(10,R8),CNTUT1        ** SYSTT1 RECORDS READ
         BAL   R4,PRINTOUT                   **
         SPACE 1
         MVC   5(L'LINE13,R8),LINE13         **
         MVC   L'LINE13+5(10,R8),EDITMASK      *
         ED    L'LINE13+5(10,R8),CNTREJ        ** RECORDS NOT SELECTED
         BAL   R4,PRINTOUT                   **
         SPACE 1
         MVC   5(L'LINE06,R8),LINE06         **
         MVC   L'LINE06+5(10,R8),EDITMASK      *
         ED    L'LINE06+5(10,R8),CNTUT2       ** SYSUT2 RECORDS WRITEN
         BAL   R4,PRINTOUT                   **
         SPACE 1
         MVI   0(R8),SPCE2AFT      ESTABLISH DOUBLE SPACE
         BAL   R4,PRINTOUT          AND ISSUE IT
         EJECT
***********************************************************************
*        PRINT CONDITION CODE                                         *
***********************************************************************
         SPACE 1
PRINTCDE MVC   5(L'LINE07,R8),LINE07 ADD COND CODE MESSAGE
         MVI   0(R8),SPCE2AFT      ESTABLISH DOUBLE SPACE
         LH    R2,COMPCODE         GET CONDITION CODE
         CVD   R2,WORKAREA         CONVERT IT TO DECIMAL
         ED    CONDMASK,WORKAREA+6 CONVERT IT TO PRINTABLE EBCDIC
         MVC   L'LINE07+6(2,R8),CONDMASK+2 ADD IT TO PRINT LINE
         BAL   R4,PRINTOUT         PRINT COND CODE MESSGAE
         MVC   5(L'LINE10,R8),LINE10 MOVE IN FINAL MESSAGE
         SPACE 5
***********************************************************************
*        JOB TERMINATION ROUTINE - CLOSE ANY OPEN DATA SETS,          *
*         SET A COMPLETION CODE IN REGISTER 15, AND RETURN .          *
***********************************************************************
         SPACE 1
JOBEND   LA    R10,MAXDS           ESTABLISH LOOP
         TM    SYSOUTSW,DDSTAT     TEST FOR SYSOUT
         BZ    *+8                 BRANCH IF NOT
         OI    SYSOUTSW,DDOPEN     'RE-CONNECT' FOR CLOSE
         LA    R2,DCBTABLE         POINT AT AD-CON TABLE
         BAL   R4,CLOSE            CLOSE DATA SET
         LA    R2,NTRYSIZE(,R2)    POINT AT NEXT TABLE ENTRY
         BCT   R10,*-8             CLOSE NEXT DATA SET
         SPACE 1
**********************************************************************
*        PRINT ERROR MESSAGE AND DUMP IF CONDITIO CODE NOT = 0       *
**********************************************************************
         SPACE 1
         CLC   COMPCODE,=H'0'      TEST IF GOOD END
         BE    GOODEND             YES - BYPASS DUMP
         WTO   'T580P160 **  BAD END OF PROGRAM  **'
         ABEND 0016,,STEP          ABEND WITH CC16
         SPACE 1
GOODEND  EQU   *
        PGMOUT RC=COMPCODE         SET COND CODE AND RETURN
         EJECT
***********************************************************************
*        THIS ROUTINE USES THE BINARY CHOP SEARCH TECHNIUUE TO        *
*         SC+N THE TABLE OF COST CENTRE / CHARGE CODE ENTRIES TO      *
*         GAT A DEFAULT COST CENTRE FOR A SPECIFIC CHARGE CODE.       *
*         ON ENTRY, CCCHARGE CONTAINS THE CHARGE CODE TO BE           *
*         MATCHED, AND THE CORRESPONDING CODT CEBTRE IS PLACED        *
*         IN CC.  IF NO MATCH IS FOUND, CC IS SET TO SPACES.          *
*         CC IS ALSO INITIALISED TO SPACES, AND THE ROUTINE IS        *
*         BYPASSED IF NO TABLE WAS CREATED.                           *
***********************************************************************
         SPACE 1
COSTCNTR SUBIN SAVE=(R4)           GET DEFAULT COST CENTRE
CCSW     EQU   *+1                 BRANCH SET OFF IF TABLE EXISTS
         B     CCEND               BYPASS SEARCH IF NO TABLE
CC1      ZAP   CNTLO,ZERO          ZEROIZE LO COUNTER
         ZAP   CNTHI,CNTNTRYS      INITIALISE
         AP    CNTHI,ONE            HI COUNTER
         L     R2,ADRTABLE         POINT R2 AT THE TABLE
         SPACE 1
CCLOOP   ZAP   DECIMAL,CNTHI       MOVE HI TO WORK AREA
         SP    DECIMAL,CNTLO       SUBTRACT LO FROM HI
         CP    DECIMAL,ONE         TEST IF DIFFERENCE IS 1
         BE    CCEND               BRANCH IF YES ( NO MATCH )
         SPACE 1
         ZAP   DECIMAL,CNTHI       MOVE HI COUNT TO WORK AREA
         AP    DECIMAL,CNTLO       ADD LO TO HI
         DP    DECIMAL,TWO         DIVIDE BY TWO
         SP    DECIMAL(6),ONE      DECREMENT FOR CORRECT DISPLACEMENT
*                                   - ENTRY X HAS DISPLACEMENT 9*(X01)
         ZAP   CNTMID,DECIMAL(6)   PRESERVE THE RESULT ( NEW INDEX )
         EJECT
***********************************************************************
*        BINARY CHOP SEARCH ( CONTINUED )                             *
***********************************************************************
         SPACE 1
         ZAP   DECIMAL,CNTMID      MOVE SEARCH INDEX TO WORK AREA
         AP    CNTMID,ONE          INCREMENT FROM DISPLACEMENT TO INDEX
         MP    DECIMAL,TEN         MULTIPLY BY ELEMENT LENGHT
         CVB   R3,DECIMAL          CONVERT INDEX TO BINARY
         AR    R3,R2               POINT R3 AT ENTRY TO BE TESTED
         CLC   OSCHRG,NTRYCHRG(R3) TEST FOR MATCH
         BE    CCFOUND             BRANCH IF EQUAL ( MATCH )
         SPACE 1
         BL    *+14                BRANCH IF LOW
         ZAP   CNTLO,CNTMID        ADJUST LO TO NEW SEARCH VALUE
         B     CCLOOP              RE-ITERATE
         ZAP   CNTHI,CNTMID        ADJUST HI TO NEW SEARCH VALUE
         B     CCLOOP              RE-ITERATE
         SPACE 1
CCFOUND  CLC   OSCMAJ,SPACES       TEST IF MAJOR COST CENTRE SUPPLIED
         BNE   *+10                BRANCH IF YES
         MVC   OSCMAJ,NTRYCOST(R3) ADD MAJOR COST CENTRE
         CLC   OSCMIN,SPACES       TEST IF MINOR COST CENTRE SUPPLIED
         BNE   *+10                BRANCH IF YES
         MVC   OSCMIN,NTRYCOST+3(R3) ADD MINOR COST CENTRE
CCEND2   B     CCEXIT              RETURN
         SPACE 1
CCEND    EQU   *                   NO MATCHING COST CENTRE FOUND
         MVI   0(R8),SPCE3AFT      ESTABLISH TRIPLE SPACE
         BAL   R4,PRINTOUT          AND ADVANCE
         MVC   5(L'LINE38,R8),LINE38 TELL OF SYSTEM ERROR
         BAL   R4,PRINTOUT          AND WRITE LINE
         MVC   10(L'LINE39,R8),LINE39 TELL OF NO MATCH
         BAL   R4,PRINTOUT         PRINT LINE
         MVC   10(L'LINE40,R8),LINE40 IDENTIFY CHARGE CODE
         MVC   10+L'LINE40+1(4,R8),OSCHRG ADD CHARGE CODE TO LINE
         BAL   R4,PRINTOUT          AND PRINT THE LONE
         MVC   COMPCODE,COND16     SET CONDITION CODE OF 16
CCEXIT   SUBOUT RESTORE=(R4)       RETURN TO CALLER
         EJECT
***********************************************************************
*        ACCUM VALUE AND WRITE SYSUT2 ON KEY CHANGE                   *
***********************************************************************
         SPACE 1
WRITE    SUBIN SAVE=(R4)           WRITE TO SYSUT2
         TM    SYSUT2SW,DDOPEN     TEST IF DATA SET OPEN
         BZ    0(R4)               RETURN IF NOT
WRITESW  BC    0,WRITE1            BRANCH IF NOT FIRST TIME
         OI    WRITESW+1,X'F0'     STET FIRST TIME SWITCH
         MVC   INTEROLD,0(R6)      MOVE FIRST RECORD TO STORE
         B     WRITEX               AND FINISH THIS TIME
WRITE1   CLC   INTEROLD(11),0(R6)  MOST IF CHANGE OF CONTROL FIELD
         BNE   WRITE2              BRANCH IF YES
         USING INTERMED,R6         ESTABLISH TEMPORARY ADDRESSABILITY
         AP    INTEROLD+11(4),IMU  INCREMENT MACHINE UNIT COUNT
         AP    INTEROLD+15(4),ICOST ADD TO JOB COST COUNT
         B     WRITEX              EXIT FROM ROUTINE
WRITE2   BAL   R4,WRITPUT          GO WRITE SYSUT2 RECORD
         MVC   INTEROLD,0(R6)      SET UP NEW COUNTERS & KEY
         DROP  R6                  DROP TEMPORARY ADDRESSABILITY
WRITEX  SUBOUT RESTORE=(R4)        RETURN TO CALLER
         SPACE 1
WRITPUT  SUBIN ,                   WRITE SYSUT2 RECORD
         MVC   C1CCENT,INTEROLD    SET UP COST CENTRE
         MVC   C1CHRG,INTEROLD+5   SET UP CHERGE CODE
         MVC   C1CAT,INTEROLD+9    SET UP CATEGORY CODE
         AP    INTEROLD+11(4),FIVE ROUND TO 2 DECIMALS
         MVC   INTERMU,EDIT8       EDIT PATTERN TO INTERMEDIATE FIELD
         ED    INTERMU,INTEROLD+11 EDIT 3 DECIMMAL MU
         MVC   C1MU+1(7),INTERMU   MOVE 2 DECIMAL MU TO RCCORD
         UNPK  C1COST+1(7),INTEROLD+15(4)  SET UP MVS JOB COST
         MVI   C1COST,C'0'         ZERO TO FIRST POSITION OF JOB COST
         PUT   SYSUT2,COST01       WRITE COST01 RECORD
         AP    CNTUT2,ONE          INCREMENT RECORD COUNT
WRITPUTX SUBOUT ,                  RETURN TO CALLER
         SPACE 1
***********************************************************************
*        PRINT ROUTINE FOR SYSOUT ( T580R160 )                        *
***********************************************************************
         SPACE 1
PRINTOUT SUBIN ,                   PRINT TO SYSOUT
         TM    SYSOUTSW,DDOPEN     TEST IF DD STAT OPEN
         BZ    PRINTX              EXIT IF NOT
         PUT   SYSOUT              WRITE THE LINE
         LR    R8,R1               PRESERVE BUFFER ADDRESS
         MVI   0(R8),SPACE         MOVE SPACE TO START OF LINE
         MVC   2(131,R8),1(R8)      AND PROPAGATE THROUGH
         MVI   0(R8),SPCE1AFT      ESTABLISH SINGLE SPACE
PRINTX  SUBOUT ,                   RETURN TO CALLER
         EJECT
***********************************************************************
*                                                                     *
*        THIS ROUTINE SCANS THE TIOT TO DETERMINE  WHETHER            *
*         A SPECIFIC DD STATEMENT IS PRESENT IN THE JCL.  ON          *
*         ENTRY TO THE ROUTINE, R2 POINTS AT THE ENTRY IN             *
*         THE DCB AD-CON TABLE OF THE REQUIRED DATA SET NAME.         *
*         IF THE SPECIFIED DD STATEMENT IS FOUND, CONTROL IS          *
*         RETURNED TO THE ADDRESS IN REGISTER 4, OTHERWISE            *
*         CONTROL IS RETURNED TO R4+4.                                *
*                                                                     *
***********************************************************************
         SPACE 5
DDFIND   SUBIN PREFIX=D,SAVE=(R3,R10) ENTRY TO DD SEARCH ROUTINE
         SR    R10,R10             ZEROISE WORK REGISTER
         L     R3,16               GET CVT ADDRESS
         L     R3,0(,R3)           GET ADDRESS OF TCB DISPATCH FIELDS
         L     R3,4(,R3)           GET ADDRESS OF THIS TCB
         L     R3,12(,R3)          GET ADDRESS OF TIOT
         LA    R3,24(,R3)          POINT AT FIRST DD ENTRY
DDLOOP   CLC   0(4,R3),ZEROWORD    TEST FOR END OF TIOT
         BE    DDNOTFND            BRANCH IF YES
         CLC   4(8,R3),4(R2)       TEST FOR DD NAME MATCH
         BE    DDFOUND             BRANCH IF YES
         IC    R10,0(R3)           INSERT ENTRY LENGTH
         AR    R3,R10              INCREMENT TO NEXT ENTRY
         B     DDLOOP              PROCESS NEXT ENTRY
         SPACE 1
DDFOUND  OI    0(R2),DDSTAT        INDICATE DD STATEMENT FOUND
        SUBOUT PREFIX=D,RESTORE=(R3,R10) RETURN TO MAIN-LINE
         SPACE 1
DDNOTFND EQU   *                   RETURN TO R4+4
        SUBOUT PREFIX=D,RESTORE=(R3,R10),RETURN=4(R4)
         EJECT
***********************************************************************
*        OPEN / CLOSE ROUTINES                                        *
***********************************************************************
         SPACE 5
OPEN     SUBIN ,                   ENTRY TO OPEN ROUTINE
         L     R3,0(,R2)           GET DCB ADDRESS
         CLC   12(L'INPUT,R2),INPUT TEST FOR INPUT DATA SET
         BE    OPEN2               BRANCH IF YES
         OPEN  ((R3),(OUTPUT))     OPEN OUTPUT DATA SET
         B     OPEN3               SET SWITCH
OPEN2    OPEN  ((R3),(INPUT))      OPEN INPUT DATA SET
OPEN3    OI    0(R2),DDOPEN        INDICATE DATA SET OPEN
        SUBOUT ,                   RETURN TO MAIN-LINE
         SPACE 5
CLOSE    SUBIN ,                   ENTRY TO CLOSE SUB-ROUTINE
         TM    0(R2),DDOPEN        TEST IF DATA SET OPEN
         BZ    0(R4)               RETURN IF NOT
         L     R3,0(,R2)           GET DCB ADDRESS
         CLOSE ((R3))              CLOSE DATA SET
         NI    0(R2),255-DDOPEN    SET OFF 'OPEN' SWITCH
        SUBOUT ,                   RETURN TO MAIN-LINE
         SPACE 5
BLKSZRTN SUBIN ,                   SUPPLY DEFAULT IF NO BLKSIZE
         USING IHADCB,R1           ESTABLISH DCB ADDRESSABILITY
         CLC   DCBBLKSI,ZEROWORD   HAS BLOCK-SIZE BEEN SUPPLIED
         BNE   0(R14)              RETURN TO OPEN IF YES
         MVC   DCBBLKSI,DCBLRECL   MOVE LRECL TO BLKSIZE
        SUBOUT RETURN=(R14)        RETURN TO OPEN ROUTINES
         DROP  R1                  DROP DCB ADDRESSABILITY
         EJECT
***********************************************************************
*        READ SUB-ROUTINES                                            *
***********************************************************************
         SPACE 1
READ     SUBIN ,                   READ FROM SYSUT1
         GET   SYSUT1              GET NEXT RECORD
         LR    R6,R1               SAVE BUFFER ADDRESS
         AP    CNTUT1,ONE          INCREMENT COUNTER
         AP    CNTREJ,ONE          INCREMENT REJECT COUNT ON ASSUMPTION
         USING OSRECD,R6           ESTABLISH TEMPORARY ADDRESSABILITY
         CLC   OSID,=C'99'         TEST FOR JOB RECORD
         BNE   READ                REJECT RECORD IF NOT
         CLC   OSDATE,DATES        TEST IF RECORD BEFORE PERIOD
         BL    READ                REJECT IF YES
         CLC   OSDATE,DATEE        TEST IF RECORD AFTER END OF PERIOD
         DROP  R6                  DROP ADDRESSABILITY
         BH    READ                RECECT RECORD IF YES
         SP    CNTREJ,ONE          DERREMENT REJECT COUNT COS NOT
        SUBOUT ,                   RETURN TO MAIN-LINE
         EJECT
***********************************************************************
*        SYNAD ROUTINES FOR ALL I/O                                   *
***********************************************************************
         SPACE 1
IOERROR  SUBIN ,                   PROCESS I/O ERROR
         MVC   COMPCODE,COND12     SET CONDITION CODE
         SYNADAF ACSMETH=QSAM      CALL O.S. ROUTINE
         MVC   LINE15+12(86),50(R1) SAVE RESULT OF ANALYSIS
         SYNADRLS ,                RELEASE O.S. BUFFER
         WTO   MF=(E,LINE14)       TELL OPERATOR OF ERROR
        SUBOUT RETURN=PRINTCDE
         EJECT
*        MISCELLANAOUS EQUATES
         SPACE 1
MAXDS    EQU   5                   ***** ALTER IF DD NAMES ADDED *****
*                                   NUMBER OF DATA SETS UT433 CAN OPEN
SORTDS   EQU   5                   ***** ALTER IF SORT IS CHANGED*****
*                                   NUMBER OF SORT DD STATEMENTS THAT
*                                   MUST BE PRESENT BEFORE THE SORT
*                                   IS INVOKED.
SORTFLDS EQU   7                   ***** ALTER IF SORT IS CHANGED *****
*                                   NUMBER OF FIELDS ON WHICH DATA MAY
*                                   BE SORTED.  NOTE THAT IF THIS VALUE
*                                   IS ALTERED THEN PARMLIMT MUST ALSO
*                                   BE CHANGED.
DELETE   EQU   4                   TELL SORT TO DELETE
NORETURN EQU   8                   TELL THE SORT NOT TO RETURN
INSERT   EQU   12                  TELL SORT TO INSERT RECORD
DDSTAT   EQU   1                   DD STATEMENT FOUND
DDOPEN   EQU   2                   DATA SET OPEN
SPCE1AFT EQU   X'09'               ADVANCE 1 AFTER PRINTING
SPCE2AFT EQU   X'11'               ADVANCE 2 AFTER PRINTING
SPCE3AFT EQU   X'19'               ADVANCE 3 AFTER PRINTING
PAGESKIP EQU   X'8B'               SKIP TO NEW PAGE
COMMA    EQU   C','                COMMA FOR PARM SCAN
PERIOD   EQU   C'.'                PERIOD
OPENBRAK EQU   C'('                OPENING PARENTHESIS
SPACE    EQU   X'40'               BLANK
         SPACE 5
SWITCH   DC    X'00'               GENERAL BIT SWITCH
NON100   EQU   1                   INDICATE A NON-100 % LOG ENCOUNTERED
         EJECT
LINE01   DC    C'T580P160 - INITIATION MESSAGES'
LINE02   DC    C'THE FOLLOWING DD STATEMENTS WERE ENCOUNTERED -'
LINE04   DC    C'NUMBER OF RECORDS READ FROM T580F090   ='
LINE06   DC    C'NUMBER OF RECORDS WRITTEN TO T580F091  ='
LINE07   DC    C'CONDITION CODE ='
LINE08   DC    C'***** NO T580F090 STATEMENT *****'
LINE09   DC    C'***** PROCESSING BYPASSED *****'
LINE10   DC    C'END OF T580P160'
LINE13   DC    C'NUMBER OF RECORDS REJECTED             ='
LINE14   DS    0F
         DC    AL2(WTOEND-*),H'0',C'T580P160 - '
LINE15   DS    0CL98
         DC    C'I/O ERROR - '
         DC    CL86' '
WTOEND   EQU   *
LINE17   DC    C'T580P160 - TERMINATION MESSAGES'
LINE28   DC    C'NUMBER OF DUPLICATE RECORDS REJECTED   ='
LINE34   DC    C'NUMBER OF COST / PSEUDO CODES          ='
LINE37   DC    C'NUMBER OF RECORDS READ FROM T580F050   ='
LINE38   DC    C'COST SYSTEM ERROR - '
LINE39   DC    C'CHARGE CODE HAS NO COST CENTRE'
LINE40   DC    C'CHARGE CODE IS'
LINE41   DC    C'NO T580RATE CONTROL CARD'
         EJECT
SORTPARM DS    0F                  ADDRESS OF SORT PARAMETERS
         DC    X'80',AL3(SORTLIST) ADDRESS OF SORT PARAMETERS
         DC    X'0000'             FILLER
SORTLIST DC    X'0028'             LENGTH OF PARAMETER AREA
FLDADDR  DC    A(DEFSTART)         ADDRESS OF DEFAULT FIELD
         DC    A(DEFEND)           END OF DEFAULT SORT FIELD
         DC    A(RECSTART)         START OF RECORD STATEMENT
         DC    A(RECEND)           END OF RECORD STATEMENT
         DC    A(E15)              ADDRESS OF E15 SORT EXIT
         DC    A(E35)              ADDRESS OF E35 SORT EXIT
         DC    X'00',C'MAX'        REQUEST CORE OPTIMISATION
         DC    X'01',AL3(1028)     RESERVE 1K FOR SAFETY
         DC    X'03',AL3(LISTSW+4) SPECIFY MESSAGE DD-NAME
         DC    X'FF',X'00',C'AP'   REQUEST ALL MESSAGES TO THE PRINTER
         SPACE 1
DEFSTART DC    C' SORT FIELDS=(1,19,CH,A)'
DEFEND   DC    C' '
RECSTART DC    C'RECORD LENGTH=(160,160,160),TYPE=F'
RECEND   DC    C' '
INTERIM  DS    CL160               INTERMEDIATE RECORD AREA
         SPACE 1
SORTABLE DS    0F
LISTSW   DC    X'00',AL3(0),CL8'SYSLIST'
         DC    X'00',AL3(0),CL8'SORTLIB'
         DC    X'00',AL3(0),CL8'SORTWK01'
         DC    X'00',AL3(0),CL8'SORTWK02'
         DC    X'00',AL3(0),CL8'SORTWK03'
TABEND   EQU   *                   END OF SORT'S DD TABLE
TABSIZE  EQU   *-SORTABLE          LENGTH OF TABLE
NTRYSIZ2 EQU   TABSIZE/SORTDS      SIZE OF TABLE ENTRY
         EJECT
WORKAREA DS    D
DECIMAL  DS    D                   WORK AREA FOR PACKED OPERATIONS
CHAIN    DC    A(0)                ADDRESS OF 1ST CHAIN ELEMENT
ADRTABLE DS    F                   ADDRESS OF COST/CHARGE TANLE
ADRSORT1 DS    F                   ADDRESS OF SORT WORK AREA 1
ADRSORT2 DS    F                   ADDRESS OF SORT WORK AREA 2
NUMSRTAB DC    F'7'                NUMBER OF ENTRIES ON DEFAULT TABLE
ADRCODET DC    A(CODETABL)         ADDRESS OF WORK OCDE TABLE
NUMCODET DC    F'9'                NUMBER OF DEFAULT ENTRIES
CHAIN2   DC    A(0)                ADDRESS OF FIRST TABLE 2 ELEMENT
CHAIN3   DC    A(0)                ADRESS OF FIRST TABLE 3 ELEMENT
ZEROWORD DC    F'0'
PARMPNTR DS    F                   POINTER TO PARM
PARMR7R8 DS    2F                  SAVE AREA FOR R7 & R8 USED IN GETPA
COMPCODE DC    H'0'
COND4    DC    H'4'                ERROR IN PARM FIELD
COND12   DC    H'12'               I/O ERROR CONDITION CODE
COND16   DC    H'16'
         SPACE 1
CNTPARM  DC    PL3'0'              COUNT OF SUB-PRRMS
CNTNTRYS DC    PL4'0'              COUNT OF VALID SYSTABLE ENTRIES
CNTUT1   DC    PL4'0'              COUNT OF SYSUT1 RECORDS READ
CNTUT2   DC    PL4'0'              COUNT OF SYSUT2 RECORDS WRITTEN
CNTIN    DC    PL4'0'              COUNT OF SYSIN RECORDS READ
CNTTAB   DC    PL4'0'              COUNT OF SYSTABLE RECPRDS READ
CNTFF    DC    PL4'0'              COUNT OF X'FF' RECORDS
CNTFE    DC    PL4'0'              COUNT OF X'FE' RECORDS
CNTINV   DC    PL4'0'              COUNT OF INVALID RECORDS
CNTDUP   DC    PL4'0'              COUNT OF DUPLICATE RECORDS REJECTED
CNTREJ   DC    PL4'0'              COUNT OF REJECTED RECORDS
CNTTAB2  DC    PL3'0'              COUNT OF TABLE 2 ENTRIES
CNTTAB3  DC    PL3'0'              COUNT OF TABLE 3 ENTRIES
CNTLINE  DC    PL2'0'              LINE COUNT FOR SYSOUT
CNTPAGE  DC    PL2'0'              PAGE COUNT FOR SYSOUT
CNTHI    DC    PL3'0'              COUNTER FOR BINARY CHOP TABLE SEARCH
CNTLO    DC    PL3'0'              COUNTER FOR BINARY CHOP TABLE SEARCH
CNTMID   DC    PL3'0'              COUNTER FOR BINARY CHOP TABLE SEARCH
ZERO     DC    PL2'0'              ZERO
ONE      DC    PL2'1'              ONE
TWO      DC    PL2'2'              TWO
FIVE     DC    PL2'5'              FIVE
SIX      DC    PL2'6'              SIX
NINE     DC    PL2'9'              NINE
TEN      DC    PL2'10'             TEN
TWENTY   DC    PL2'20'             TWENTY
FIFTY    DC    PL2'50'             FIFTY
SIXTY    DC    PL2'60'             SIXTY
HUNDRED  DC    PL2'100'            ONE HUNDRED
PARMLIMT DC    PL2'6'              NO. OF POSSIBLE FIELDS
ENDOPAGE DC    PL2'55'             END OF PAGE
OVERFLOW DC    PL2'54'             END OF PAGE COUNT USED PRE REPOETS
         EJECT
EDITMASK DC    X'40206B2020206B202120' EDIT MASK FOR PL4
EDIT8    DC    X'4020202020202120' EDIT PATTERN FOR PL4
CONDMASK DC    X'40202120'
EDITCVD  DC    X'40202020202020202020202020202120'
EDITPAGE DC    X'40202120'
EDITJUL  DC    X'4021204B202020'
EDMMMSS  DC    X'40202021212020'
EDHHMMSS DC    X'40212020212020212020'
         SPACE 1
DISPLAY  DS    CL16                EBCDIC WORK AREA
EDITWORK DS    CL10                EDIT WORK AREA
SAFETY   DS    CL133               PSEUDO-BUFFER
RECSTORE DC    CL19' '             STORE FOR DUPLICATE RECORD TEDT
UT2REC   DS    CL110               SYSUT2 RECORD FOR SUBSTITUTE BUFF
         SPACE 1
TESTCAT  DS    CL2                 WORK RREA FOR SELECT ON CAT
TESTCHRG DS    CL4                 WORK AREA FOR SELECT ON CHARGE-CODE
TESTDATE DS    CL5                 WORK AREA FOR SELECT ON RECORD DATE
TESTCC   DS    CL5                 WORK AREA FOR SELECT ON COST-CENTRE
         SPACE 1
CC       DS    0CL5                DEFAULT COST CENTRE FROM 'COSTCNTR'
CCMAJ    DC    CL3' '              DEFAULT MAJOR COST CENTRE
CCMIN    DC    CL2' '              DEFAULT MINOR COST CENTRE
CCCHARGE DS    CL4                 CHARGE CODE TO BE MATCHED
ORCC     DC    X'F0F0F0F0F0'       'OR' FIELD FOR COST CENTRE
         SPACE 1
CODETABL DC    C'414243444546909899$$$$$$$$$$$$$$$$$$$$'
CODETABE EQU   *-CODETABL          LENGTH OF CODE TABLE
CODETABN EQU   CODETABE/2          NUMBER OF ENTRIES IN TABLE
         EJECT
DATEADDR DC    V(DTERTN)           ADDRESS OF DATE ROUTINE
ADATEFLD DC    A(DATEFLD)          ADDRESS OF RECEIVING AREA
         SPACE 1
DATEFLD  DC    C'COBOLDATE'        FOR DTERTN
PAGE     DC    C'PAGE'             PAGE
LOWVALUE DC    8X'00'
HIVALUE  DC    10X'FF'             HIGH-VALUES
ASTERISK DC    8C'*'
SPACES   DC    CL10' '             SPACES (10)
ZEROES   DC    8C'0'               EBCDIC CONCSTANT OF ZERO
         SPACE 1
DATES    DS    CL5                 DATE OF START OF PERIOD
DATEE    DS    CL5                 DATE OF END OF PERIOD
         SPACE 1
INPUT    DC    CL8'INPUT'          INPUT CONSTANT FOR OPEN ROUTINE
         SPACE 1
         EJECT
COST01   DS    0CL80               COST01 OUTPUT RECORD
         DC    C'COST01'
C1CCENT  DS    CL5                 COST CENTRE
C1CHRG   DS    CL4                 CHARGE CODE
         DC    CL28' '
C1MU     DC    CL8' '              MACHINE UNITS
C1CAT    DS    CL2                 CATEGORY CODE
         DC    CL14' '
C1COST   DC    CL8' '              JOB COSTS
         DC    CL5' '
         SPACE 1
INTER    DS    CL19
         SPACE 1
INTEROLD DS    CL19' '
         SPACE 1
INTERMU  DS    CL8                 FIELD TO REDUCE 3 DEC TO 2 FOR MU
         SPACE 1
         LTORG
         EJECT
DCBTABLE DS    0F
TABLE2SW DC    X'00',AL3(T580RATE),CL8'T580RATE',CL8'INPUT'
TABLESW  DC    X'00',AL3(SYSTABLE),CL8'T580F050',CL8'INPUT'
SYSOUTSW DC    X'00',AL3(SYSOUT),CL8'T580R160',CL8'OUTPUT'
SYSUT1SW DC    X'00',AL3(SYSUT1),CL8'T580F090',CL8'INPUT'
SYSUT2SW DC    X'00',AL3(SYSUT2),CL8'T580F091',CL8'OUTPUT'
TABLEEND EQU   *                   END OF AD-CON TABLE
TABLESIZ EQU   *-DCBTABLE          LENGTH OF TABLE
NTRYSIZE EQU   TABLESIZ/MAXDS      SIZE OF TABLE ENTRY
         SPACE 1
EXITLIST DC    X'85',AL3(BLKSZRTN) ENTRY FOR DCB MODIFICATION
         SPACE 4
SYSOUT   DCB   DDNAME=T580R160,                                        *
               DSORG=PS,                                               *
               MACRF=PL,                                               *
               RECFM=FBM,                                              *
               LRECL=133,                                              *
               SYNAD=IOERROR,                                          *
               EXLST=EXITLIST
         SPACE 4
SYSUT1   DCB   DDNAME=T580F090,                                        *
               DSORG=PS,                                               *
               MACRF=GL,                                               *
               RECFM=FB,                                               *
               LRECL=160,                                              *
               EODAD=E15EXIT,                                          *
               SYNAD=IOERROR,                                          *
               EXLST=EXITLIST
         EJECT
SYSUT2   DCB   DDNAME=T580F091,                                        *
               DSORG=PS,                                               *
               MACRF=PM,                                               *
               RECFM=FB,                                               *
               LRECL=80,                                               *
               SYNAD=IOERROR,                                          *
               EXLST=EXITLIST
         SPACE 5
SYSTABLE DCB   DDNAME=T580F050,                                        *
               DSORG=PS,                                               *
               MACRF=GL,                                               *
               RECFM=FB,                                               *
               LRECL=80,                                               *
               EODAD=ENDTABLE,                                         *
               SYNAD=IOERROR,                                          *
               EXLST=EXITLIST
         EJECT
T580RATE DCB   DDNAME=T580RATE,                                        *
               DSORG=PS,                                               *
               MACRF=GL,                                               *
               RECFM=FB,                                               *
               LRECL=80,                                               *
               EODAD=ENDTAB02,                                         *
               SYNAD=IOERROR,                                          *
               EXLST=EXITLIST
         EJECT
         PRINT GEN                 ALLOW DCB DSECT EXPANSION
         DCBD  DSORG=PS            GENERATE DCB DSECT
T580P160 CSECT
         PRINT NOGEN               SUPPRESS MACRO EXPANSION
         SPACE 1
         LTORG
         SPACE 1
$L       EQU   *-T580P160
$L1      EQU   $L/100000*100000
$L2      EQU   ($L-$L1)/10000*10000
$L3      EQU   ($L-$L1-$L2)/1000*1000
$L4      EQU   ($L-$L1-$L2-$L3)/100*100
$L5      EQU   ($L-$L1-$L2-$L3-$L4)/10*10
$L6      EQU   ($L-$L1-$L2-$L3-$L4-$L5)
         SPACE 1
$LENGTH  EQU   $L1/100000*1048576+$L2/10000*65536+$L3/1000*4096+$L4/100*
               256+$L5/10*16+$L6
         SPACE 1
         END
