         MACRO
         SEGM  &NAME=,&PARENT=,&PTR=,&POINTER=,&BYTES=,                ,
               &FREQ=,&INDEX=,&RULES=,&SOURCE=,&COMPRTN=
         GBLA  &S,&SEGS,&SLC,&F1,&F2,&F3,&MT                   @BA41949
         GBLA  &ORG,&CDNBR,&PNBR,&LEV,&EXTDBN,&RTKEY
         GBLA  &REC(10),&BLK(10),&DSC(10),&DSL(10)             @BA22673
         GBLA  &SB(255),&SB1(255),&SF1(255),&SF2(255)
         GBLA  &IB(255),&SFLD(255),&SLCF(255),&SLCS(255),&SLDP(255)
         GBLB  &GB1(16),&GB2(16),&GB4(16),&IQFB,&ERROR,&QUITB  @BA40823
         GBLB  &HIER(255),&PRD(255)
         GBLC  &ACC,&OVF(10),&PLIST(100),&FSF1(1000),&FN1(1000)
         GBLC  &SI(255),&SN(500),&SLCN(255),&SLCP(255)
         LCLA  &N,&PN,&W,&X,&Y,&Z
         LCLB  &PP,&B(8)
.**********************************************************************
.**********************************************************************
.**                                                                  **
.**                           APARLOG 1.1.1                          **
.**                                                                  **
.**      PP43872 MSG DFS0730I I,01 PREFIX WAS ONE BYTE TOO SHORT     **
.**              AFTER APPLYING APAR PP41912                         **
.**      PP48829 LRECL IS TWO BYTES OFF IF SHSAM IS CODED BUT        **
.**              IS CORRECT IF DEFAULTED.                            **
.**                                                                  **
.**********************************************************************
.**********************************************************************
.**
&MT      SETA  3              SEGM - MACRO INDICATOR           @BA43872
         AIF   (&GB1(1)).A
         MNOTE 8,' DBD001 - DBD CARD MUST OCCUR 1ST IN A DBDGEN. '
&GB1(16) SETB  1
.A       AIF   (&CDNBR GT 0 OR '&SOURCE' NE '').B
         MNOTE 8,'SEGM100 - DATASET CARD MUST PRECEDE SEGM. '
&GB1(16) SETB  1
.B       AIF   (&S LT &SEGS).C
         MNOTE 8,'SEGM110 - SEGM SPECIFICATION LIMIT EXCEEDED. '
&GB1(16) SETB  1
&S       SETA  &S-1
.C       ANOP
         AIF   (&ORG NE 16).CGO                                @BI5ZZ
         MNOTE 8,'SEGM470 - SEGM STMT IS NOT APPLICABLE TO GSAM.'
&GB1(16) SETB  1                                               @BI5ZZ
.CGO     ANOP                                                      GSAM
&S       SETA  &S+1
&SLCS(&S) SETA (&SLC+1)*65536          SET 1ST LCHILD IN SEGMENT.
&SFLD(&S) SETA (&F1+1)*65536           SET 1ST FIELD IN SEGMENT.
&GB1(5)  SETB  0                INITIALIZE
&GB1(6)  SETB  0                 INTRA-MACRO
&GB1(7)  SETB  0                  CHECK
&GB1(8)  SETB  1                   SWITCHES
&GB1(11) SETB  0 SET IF VIRTUAL IS CODED.                      @BA22672
&F2      SETA  0
&F3      SETA  0
         AIF   (&GB1(2)).D
         AIF   (&S EQ 1 OR &ORG NE 3).D
&ORG     SETA  4
.D       AIF   ('&NAME' EQ '' OR K'&NAME GT 8).E
         ALPHA AN1,FIELD=&NAME
         AIF   (NOT &QUITB).F
.E       MNOTE 8,'SEGM120 - NAME OPERAND IS OMITTED OR INVALID. '
&GB1(16) SETB  1
.F       ANOP
&GB1(9)  SETB  ('&SOURCE' NE '')
&GB1(10) SETB  (&GB1(10) OR (&S NE 1 AND '&SOURCE' EQ ''))
&SN(&S)  SETC  '&NAME'
         AIF   (N'&SOURCE LE 2).G
         MNOTE 8,'SEGM300 - SOURCE OPERAND IS INVALID. '
&GB1(16) SETB  1
.G       AIF   (NOT &GB1(9)).I
         AIF   (&ORG NE 7 AND &ORG NE 12).H
         MNOTE 8,'SEGM300 - SOURCE OPERAND IS INVALID FOR &ACC DBDS. '
&GB1(16) SETB  1
.H       SOURSEG &SOURCE,ADD       PROCESS SOURCE SEGMENT OPERAND.
.I       AIF   ((&N+1) EQ &S).J
&N       SETA  &N+1
         AIF   ('&SN(&N)' NE '&SN(&S)').I
         MNOTE 8,'SEGM140 - SEGMENT NAME IS A DUPLICATE NAME. '
&GB1(16) SETB  1
.J       EXPARMS PARM=&PARENT,NBR=3
&GB1(16) SETB  (&GB1(16) OR &ERROR)
         AIF   (&ERROR).AE
         AIF   (&PNBR GT 2 OR '&PLIST(3)' NE '').K
         AIF   (&ORG LT 7 AND &S NE 1 AND '&PLIST(1)' EQ '').M
         AIF   ((&S EQ 1 OR &ORG GE 7) AND '&PLIST(2)' NE '').K
         AIF  (&S EQ 1 AND ('&PLIST(1)' EQ '' OR '&PLIST(1)' EQ '0')).L
         AIF   ((&ORG EQ 7 OR &ORG EQ 12) AND ('&PLIST(1)' EQ ''  OR   *
               '&PLIST(1)' EQ '0')).L   SHARED SEC. INDX           1327
         AIF   ('&PLIST(1)' EQ '' OR '&PLIST(1)' EQ '0').M
         AIF   ('&PLIST(2)' EQ '' OR '&PLIST(2)' EQ 'DBLE' OR '&PLIST(2,
               )' EQ 'SNGL').L
.K       MNOTE 8,'SEGM150  PHY. PARENT PARAMETER IS OMITTED OR INVALID'
&GB1(16) SETB  1
.L       AIF   (&S NE 1 AND &ORG NE 7 AND &ORG NE 12).N
&SLDP(&S) SETA &SLDP(&S)+1
&LEV     SETA  1
         AGO   .W
.M       MNOTE 8,'SEGM160 - PHYSICAL PARENT PARAMETER IS INVALID. '
&GB1(16) SETB  1
.N       AIF   ('&PLIST(1)' EQ '0' OR &S EQ 1).V
&PP      SETB  ('&PLIST(2)' EQ 'DBLE')
&N       SETA  1
.O       AIF   ('&SN(&N)' EQ '&PLIST(1)').P
&N       SETA  &N+1
         AIF   ((&N+1) LE &S).O
         MNOTE 8,'SEGM170 - SEGMENT PHYSICAL PARENT IS NOT DEFINED. '
&GB1(16) SETB  1
.P       ANOP
&PN      SETA  &N        SAVE PARENT SEGMENT NUMBER.
&X       SETA  (&SLDP(&N)-&SLDP(&N)/4096*4096)/32 PARENT'S DATASET ID
         AIF   (&X EQ &CDNBR).R    PARENT'S ID EQUAL SEGMENT'S ID ?
         AIF   (&X EQ 0).Q         IS PARENT A LOGICAL SEGMENT ?
         AIF   (&N EQ 1 AND &ORG EQ 2).R PARENT ROOT IN HISAM MULT DSG?
         AIF   (&ORG EQ 2).Q       HISAM - MULTIPLE DATASET GROUPS ?
         AIF   (NOT &HIER(&N)).R   IS PARENT HIERARCHIC ?
.Q       MNOTE 8,'SEGM360 - PHYSICAL PARENT MUST RESIDE IN THE SAME '
         MNOTE *,'          DATABASE AS IT''S PHYSICAL CHILDREN. ' 1505
&GB1(16) SETB  1
.R       ANOP
&SLDP(&S) SETA (&N*1048576)+&SLDP(&S)   PHYSICAL PARENT SEGMENT NUMBER.
         AIF   (&ORG LE 4 OR &ORG GE 7).T IS ORGANIZATION HD ?
         AIF   (&HIER(&N) OR &GB1(9)).T HIER PARENT OR PHANTOM CHILD ?
&SF2(&N) SETA  &SF2(&N)+1 INCREMENT NBR OF PHYSICAL CHILDREN IN PARENT
&SB(&N)  SETA  &SB(&N)+4*65536     ADD SIZE OF PHYSICAL CHILD POINTER
         AIF   (NOT &PP).S         TWO WAY POINTERS ?
&SB(&N)  SETA  &SB(&N)+4*65536     ADD SIZE OF ADDITIONAL POINTER
.S       SEGPTRS &N                CHECK SEGMENT SIZE (PARENT)
.T       AIF   (NOT &HIER(&N)).U   IS PARENT HIERARCHIC ?
         AIF   ('&PLIST(2)' EQ '').U DIRECT POINTER FROM PARENT ?
         MNOTE 4,'SEGM400 - &PLIST(2) PTR FROM HIERARCHIC PARENT IS IGN,
               ORED. '
.U       ANOP
&X       SETA  &SLDP(&N)-&SLDP(&N)/32*32     PARENT'S LEVEL
&SLDP(&S) SETA &SLDP(&S)+&X+1                SET SEGMENT'S LEVEL
         AIF   (&X+1 LE &LEV).V              LOWEST LEVEL ?
&LEV     SETA  &LEV+1
         AIF   (&ORG NE 7 OR &X+1 LE 2).V
         AIF   ('&INDEX' EQ '').V
         MNOTE 8,'SEGM161 - PHYSICAL PARENT PARAMETER IS INVALID, '
         MNOTE *,'          &ACC DBDS CANNOT HAVE INDEX SEGMENTS '
         MNOTE *,'          LOWER THAN LEVEL 2. '
&GB1(16) SETB  1
.V       AIF   ('&PLIST(4)' EQ '').W    LOGICAL PARENT SPECIFIED ?
         AIF   ('&PLIST(5)' NE '').W    LOGICAL PARENT KEY STORAGE ?
&PLIST(5) SETC 'V'       SET DEFAULT
.W       HIERSEQ &S,&N,&X     CHECK HIERARCHIC SEQUENCE
         AIF   ((&S EQ 1 OR &ORG GE 7) AND &PNBR GT 1).Z
         AIF   (&PNBR LE 1).AE
         AIF  ('&PLIST(4)' EQ '' AND '&PLIST(5)' EQ '' AND '&PLIST(6)' ,
               EQ '').AE
         AIF   (NOT &GB1(9)).Y
.X       MNOTE 8,'SEGM180 - IF SOURCE SEGMENT PARAMETER IS SPECIFIED, '
         MNOTE *,'          ALL OTHER OPERANDS ARE INVALID EXCEPT THE '
         MNOTE *,'          PHYSICAL PARENT NAME PARAMETER. '
&GB1(16) SETB  1
         MEXIT
.Y       AIF   ('&PLIST(4)' EQ '' OR '&PLIST(5)' EQ '').Z
         AIF   ('&PLIST(5)' EQ 'PHYSICAL' OR '&PLIST(5)' EQ 'P' OR '&PL,
               IST(5)' EQ 'VIRTUAL' OR '&PLIST(5)' EQ 'V').AA
.Z       MNOTE 8,'SEGM190 - LOGICAL PARENT PARAMETER IS INVALID. '
&GB1(16) SETB  1
.AA      AIF   ('&PLIST(6)' EQ '').AB
         ALPHA FIELD=&PLIST(6)
         AIF   (NOT &QUITB).AB
         MNOTE 8,'SEGM200 - LOGICAL PARENT DBNAME IS INVALID - &PLIST(6,
               )..'
&GB1(16) SETB  1
.AB      ANOP
&GB1(6)  SETB  (&PNBR GT 1)        LOGICAL PARENT SPECIFIED
         AIF   (NOT &GB1(6) OR '&NAME' EQ '').AB2
.AB1     AIF   (&W GE &F1).AB2
&W       SETA  &W+1
         AIF   ('&NAME' NE '&FSF1(&W)').AB1
         MNOTE 8,'SEGM460 - INDEX SOURCE SEGMENT IS A LOGICAL SEGMENT.'
         MNOTE *,'          REFERENCE XDFLD STATEMENT NAME - &FN1(&W) '
&GB1(16) SETB  1
.AB2     ANOP
&SLC     SETA  &SLC+1
         AIF   (&SLC LE 255).AC
         MNOTE 8,'LCHD110 - LCHILD SPECIFICATION LIMIT EXCEEDED. '
&GB1(16) SETB  1
&SLC     SETA  &SLC-1
         AGO   .AE
.AC      ANOP
&SLCS(&S) SETA &SLCS(&S)+1    INCREMENT NBR OF LCHILD FOR THIS SEGMENT
&SLCN(&SLC) SETC '&PLIST(4)'  SET LOGICAL PARENT AS FIRST
&SLCF(&SLC) SETA (&S*256)+8   LCHILD ENTRY FOR THIS SEGMENT
&GB1(11) SETB  ('&PLIST(5)' EQ 'VIRTUAL' OR '&PLIST(5)' EQ 'V')
         AIF   (&GB1(11)).AD  LOGICAL PARENT KEY IS VIRTUAL ?
&SLCF(&SLC) SETA &SLCF(&SLC)+16 SET LOGICAL PARENT KEY FLAG
.AD      AIF   ('&PLIST(6)' EQ '').AE
         EXTDBD &PLIST(6)
&SLCF(&SLC)  SETA  (&EXTDBN*1048576)+&SLCF(&SLC) LPARENT DB NBR
.AE      AIF   (&GB1(9) AND '&BYTES' NE '').X
         AIF   (&GB1(9) AND '&BYTES' EQ '').AM
         AIF   (T'&BYTES NE 'O').AG
.AF      AIF   ('&BYTES(1)' NE '' AND &IQFB).AG
         MNOTE 8,'SEGM210 - BYTES OPERAND IS OMITTED OR INVALID. '
&GB1(16) SETB  1
         AGO   .AM
.AG      AIF   ((T'&BYTES(1) NE 'N' AND NOT &IQFB) OR N'&BYTES GT 2).AF
         AIF   (N'&BYTES GT 1 AND (&ORG EQ 11 OR NOT &GB1(2))).AF
         AIF   (T'&BYTES(2) NE 'N' AND T'&BYTES(2) NE 'O').AF
         AIF   (&BYTES(1) GT 65000).AF
         AIF   (&ORG NE 11).AG05   NO-CHECK EVEN LRECL         @BA33273
         AIF   (&BYTES(1)-(&BYTES(1)+1)/2*2 EQ 0).AG05         @BA33273
         AIF   (&REC(1) NE 0 AND (&REC(1)-(&REC(1)+1)/2*2 EQ 0)).AG05
.**********************************************************************
.*
.*       ADD PHYSICAL CODE AND DELETE FLAG
.*       TO PREFIX AND DATA,  EXCEPT:
.*             FOR SHISAM        -  NO PHYSICAL CODE OR DELETE FLAG
.*
.**********************************************************************
.AG05    ANOP                 CHECK FOR SHSAM                  @BA33273
         AIF   (NOT(&S EQ 2 AND &ORG EQ 4)).NHSAM              @BA28540
&S       SETA  &S-1               SET TO FIRST SEGM            @BA28540
&B(4)    SETB  1                  PHYSICAL CODE AND DEL FLAG   @BA28540
&SB(&S) SETA  &SB(&S)+(&B(4)*2)*65536 TWO BYTES IN PREFIX      @BA33273
         SEGPTRS 1                CHECK FOR SIZE               @BA28540
&S       SETA  &S+1               RESET SEGM INDICATOR         @BA28540
&B(4)    SETB  0                   RESET SHSAM INDICATOR       @BA28540
.NHSAM   ANOP
&B(4)    SETB  ((&ORG EQ 11) OR (&S EQ 1 AND (&ORG EQ 4 OR &ORG EQ 3)))
&SB(&S)  SETA  &SB(&S)+(2-2*&B(4))*65536+&BYTES(1)             @BA43872
         AIF   (&ORG NE 1 OR (NOT &GB1(2))).AG1                @BA27160
&SB(&S)  SETA  &SB(&S)+1      BYTE FOR SHISAM IDENTIFIER VSAM  @BA27160
.AG1     ANOP
         AIF   (T'&BYTES(2) EQ 'O').AI
         AIF   (&ORG EQ 7 OR &ORG EQ 12 OR &BYTES(2) GT &BYTES(1)).AF
&SB1(&S) SETA  (1*4)*65536*256+4
         AIF   (&BYTES(2) LE 4).AI
&SB1(&S) SETA  (1*4)*65536*256+&BYTES(2)
.AI      AIF   (&ORG NE 7 OR &S EQ 1).AJ
         AIF   (&BYTES(1) EQ &SB(&S-1)-&SB(&S-1)/65536*65536).AJ
         MNOTE 8,'SEGM211 - BYTES OPERAND FOR MULTI-INDEX DBDGENS '
         MNOTE *,'          MUST BE EQUAL ON ALL SEGM STATEMENTS. '
&GB1(16) SETB  1
.AJ      AIF   (&CDNBR EQ 0).AM
&SLDP(&S) SETA &SLDP(&S)+(&CDNBR*32)    SET SEGMENT DATASET NUMBER
&DSC(&CDNBR)  SETA  &DSC(&CDNBR)+1      INCREMENT DATASET SEGMENT COUNT
&Y       SETA  &DSL(&CDNBR)/65536       LARGEST SEGMENT IN DATASET
&Z       SETA  &DSL(&CDNBR)-&DSL(&CDNBR)/65536*65536   SMALLEST SEGMENT
         AIF   (&REC(&CDNBR) EQ 0 AND NOT &GB2(&CDNBR)).AM
&N       SETA  &BLK(&CDNBR)
         AIF   ((&ORG LE 2 OR &ORG GE 7) AND &GB2(&CDNBR) AND &REC(&CDN,
               BR) EQ 0).AL
         AIF   ((&ORG LE 2 OR &ORG GE 7) AND &GB2(&CDNBR)).AK
&N       SETA  &REC(&CDNBR)*&BLK(&CDNBR)
         AIF   (&ORG GT 2 AND &ORG LT 7).AL
.AK      AIF   (&SLDP(&S)-(&SLDP(&S)/32*32) GT 2 OR &CDNBR LT 2).AL
         AIF   (&REC(&CDNBR) GE &BYTES(1)+2+&RTKEY).AL
         MNOTE 8,'SEGM290 - SEGMENT LENGTH IS GREATER THAN SPECIFIED '
         MNOTE *,'          RECORD LENGTH PLUS ROOT SEGMENT KEY. '
&GB1(16) SETB  1
.AL      AIF   (&N EQ 0).AM
         AIF  (&N GE &BYTES(1)+(2-2*&B(4)) OR (&N GE &BYTES(1) AND     *
               &ORG EQ 3)).AM
         MNOTE 8,'SEGM260 - SEGMENT SIZE EXCEEDS SPECIFIED BLOCK SIZE.'
&GB1(16) SETB  1
.AM      AIF   (&GB1(9) AND '&FREQ' NE '').X
         AIF   (&GB1(9) AND '&FREQ' EQ '').AN
         SETFREQ &FREQ          SET SEGMENT FREQUENCY
.AN      AIF   (T'&COMPRTN EQ 'O').AR
         AIF   (&GB1(6) OR &ORG EQ 7 OR &ORG EQ 11 OR &ORG EQ 12).AQ
         AIF   (&GB1(9)).X
         AIF   (K'&NAME LT 5).AO
         AIF   ('&NAME'(1,4) NE '$NDX' OR '&NAME'(5,1) LT '0').AO
         MNOTE 8,'SEGM450 - SEGMENT NAME IS INVALID FOR COMPRESSION. '
&GB1(16) SETB  1
.AO      AIF   (NOT &GB1(2) OR N'&COMPRTN GT 3).AQ
&GB4(11) SETB  (T'&BYTES(2) EQ 'O')     VARIABLE LENGTH        @BA40823
         AIF   (T'&BYTES(2) NE 'O' OR &ORG LT 3).AP
&SB1(&S) SETA  &SB1(&S)+4         ADD MINIMUM SEGMENT SIZE
.AP      ALPHA ALL,FIELD=&COMPRTN(1)
         AIF   (&QUITB OR K'&COMPRTN(1) GT 8).AQ
         EXTDBD &COMPRTN(1),RTN
&SB1(&S) SETA  &SB1(&S)+(&EXTDBN*65536)
&B(2)    SETB  ('&COMPRTN(2)' EQ 'KEY')
         AIF   (&ORG LE 2 AND &S EQ 1 AND &B(2)).AQ
         AIF   (T'&COMPRTN(2) NE 'O' AND '&COMPRTN(2)' NE 'DATA' AND NO,
               T &B(2)).AQ
&B(1)    SETB  ('&COMPRTN(3)' EQ 'INIT')
&X       SETA  (1*8)+(&B(2)*2)+&B(1)
&SB1(&S) SETA  &SB1(&S)+&X*65536*256
         AIF   (&B(1) OR T'&COMPRTN(3) EQ 'O').AR
.AQ      MNOTE 8,'SEGM440 - COMPRTN OPERAND IS INVALID. '
&GB1(16) SETB  1
.AR      AIF   (&GB1(9) AND '&INDEX' NE '').X
         AIF   ('&INDEX' EQ '').AW
         AIF   (&ORG NE 7).AV
         AIF   ('&PARENT(2)' EQ '' AND &CDNBR LT 2).AU
         EXPARMS PARM=&INDEX,NBR=1
&GB1(16) SETB  (&GB1(16) OR &ERROR)
         AIF   (&ERROR).AW
         AIF   (&PNBR GT 2 OR '&PLIST(1)' EQ '').AU
         AIF   ('&INDEX(2)' NE '' AND '&INDEX(2)' NE 'BLANK' AND '&INDE,
               X(2)' NE 'ZERO' AND T'&INDEX(2) NE 'N').AU
&SI(&SLC) SETC '&INDEX(1)'
&SLCF(&SLC) SETA &SLCF(&SLC)+32         SET INDEX ENTRY FLAG
         AIF   ('&INDEX(2)' EQ '').AW
         AIF   ('&INDEX(2)' NE 'ZERO').AS
&SLCF(&SLC) SETA &SLCF(&SLC)+2          ZERO ENTRIES NOT INDEXED
         AGO   .AW
.AS      AIF   ('&INDEX(2)' NE 'BLANK').AT
&SLCF(&SLC) SETA &SLCF(&SLC)+4          BLANK ENTRIES NOT INDEXED
&IB(&SLC) SETA 64                       SET NON-INDEX CHARACTER
         AGO   .AW
.AT      AIF   (T'&INDEX(2) NE 'N').AU
         AIF   (K'&INDEX(2) LT 4 OR K'&INDEX(2) GT 5).AU
         AIF   ('&INDEX(2)'(1,1) NE 'X').AU
&SLCF(&SLC) SETA &SLCF(&SLC)+1          SET NON-INDEX CHARACTER FLAG
&IB(&SLC) SETA &INDEX(2)                SET NON-INDEX CHARACTER
         AGO   .AW
.AU      MNOTE 8,'SEGM230 - INDEX OPERAND IS OMITTED OR INVALID. '
&GB1(16) SETB  1
         AGO   .AW
.AV      MNOTE 8,'SEGM240 - INDEX OPERAND IS INVALID FOR ACCESS=&ACC..'
&GB1(16) SETB  1
.AW      AIF   (NOT &GB1(9)).BE
&PRD(&S) SETB  ('&PTR(1)' EQ 'PAIRED' OR '&POINTER(1)' EQ 'PAIRED')
         AIF   ('&PTR' NE '' AND '&POINTER' NE '').AY
         AIF   (&ORG EQ 11 AND ('&PTR' NE '' OR '&POINTER' NE '')).AZ
         AIF   (NOT &PRD(&S)).BD
         AIF   (&S LE 1 OR &PN EQ 0).BC
&N       SETA  &SLCS(&PN)/65536         FIRST LCHILD FOR PARENT
&X       SETA  &SLCS(&PN)-&N*65536+&N-1 LAST LCHILD FOR PARENT
         AIF   (&X LT &N).BC
.AX      AIF   (&N GT &X).BC
         AIF   ('&SLCP(&N)' EQ '&SN(&S)').BA
&N       SETA  &N+1
         AGO   .AX
.AY      MNOTE 8,'SEGM250 - POINTER AND PTR OPERANDS ARE EXCLUSIVE. '
&GB1(16) SETB  1
         MEXIT
.AZ      MNOTE 8,'SEGM430 - PTR/POINTER OPERAND IS INVALID. '
&GB1(16) SETB  1
         MEXIT
.BA      AIF   (&SLCF(&N)-&SLCF(&N)/16*16 NE 0).BB
         MNOTE 4,'SEGM420 - LCHILD STMT - &SLCN(&N) - MUST SPECIFY'
         MNOTE *,'          POINTERS WHEN PAIRED WITH A LOGICAL SEGMENT,
               .'
         MNOTE *,'          DEFAULT POINTER=SNGL ASSUMED FOR LCHILD. '
&SLCF(&N) SETA &SLCF(&N)+2              SET SNGL FLAG
&SB(&PN) SETA  &SB(&PN)+4*65536         ADD POINTER TO PARENT PREFIX
.BB      SEGPTRS &PN                    CHECK SIZE OF PARENT
&SF2(&S) SETA  &SF2(&S)+&PRD(&S)*32768  SET PAIRED FLAG
         AGO   .BD
.BC      MNOTE 8,'SEGM410 - INVALID OR INCOMPLETE SEGMENT PAIRING. '
&GB1(16) SETB  1
.BD      AIF   ('&RULES' NE '').X
         AIF   (NOT &PRD(&S) AND ('&PTR' NE '' OR '&POINTER' NE '')).X
         MEXIT
.BE      AIF   ('&PTR' NE '' AND '&POINTER' NE '').AY
         AIF   ((&ORG EQ 3 OR &ORG EQ 4 OR &ORG EQ 11) AND ('&POINTER' ,
               NE '' OR '&PTR' NE '')).AZ
         AIF   ('&PTR' EQ '').BF
         EXPARMS PARM=&PTR,NBR=1
         AGO   .BI
.BF      AIF   ('&POINTER' NE '' OR &ORG LT 5 OR &ORG GE 7).BH
&PLIST(1) SETC 'T'                      SET DEFAULT POINTER
&PNBR    SETA  1
         AIF   ('&PARENT(2)' EQ '').BJ
         AIF   ('&INDEX' NE '').BG
&PNBR    SETA  &PNBR+1
&PLIST(&PNBR) SETC 'LT'
.BG      AIF   (NOT &GB1(11)).BJ
&PNBR    SETA  &PNBR+1
&PLIST(&PNBR) SETC 'LP'
         AGO   .BJ
.BH      EXPARMS PARM=&POINTER,NBR=1
.BI      ANOP
&GB1(16) SETB  (&GB1(16) OR &ERROR)
         AIF   (&ERROR).BK
.BJ      SETFLGS &PN,RULES=&RULES
&SF2(&S) SETA  &SF2(&S)+(&PRD(&S)*32768)+(&PP*2048) SET PRD AND DBLE
         SEGPTRS &S                     CHECK SEGMENT SIZE
.BK      AIF   (&PN LE 1).BL
         AIF   (NOT &HIER(&PN)).BL      IS PARENT HIERARCHIC ?
&X       SETA  (&SF1(&PN)/8192)-(&SF1(&PN)/32768*4)
&Y       SETA  (&SF1(&S)/8192)-(&SF1(&S)/32768*4)
         AIF   (&X EQ &Y).BL
         MNOTE 8,'SEGM380 - CHILD SEGMENT MUST CONTAIN THE SAME NUMBER'
         MNOTE *,'          OF PHYSICAL TWIN POINTERS AS ITS PARENT. '
&GB1(16) SETB  1
.BL      MEXIT
         MEND
