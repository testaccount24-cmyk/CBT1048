//IEANTM00     JOB  (1140,5),'MODIFIED R21.7',CLASS=T
/*MESSAGE      PK1217,SYS217
//JOBLIB       DD   DSN=SYS1.LINKLIB,UNIT=2314,VOL=SER=PK1217,DISP=SHR
//STEP01 EXEC ASMFCL,PARM.LKED='SYSLMOD,IEWL,XREF,LIST,RENT,REFR,DC'
//ASM.SYSLIB   DD
//             DD   DSN=SYS1.R217MAC,DISP=SHR
//             DD   DSN=SYS1.GENLIB,DISP=SHR
//             DD   DSN=SYS1.MODGEN,DISP=SHR
//             DD   DSN=SYS1.MODGEN2,DISP=SHR
//ASM.SYSIN    DD   *
 TITLE   'IEANTM00 - IGC0001C - ABEND LOAD 0 (MFT ATTACH,MFT)'
IGC0001C CSECT
*500000,504000,525000                                         CE A35198
*        ROUTINE NAME - ABEND LOAD 0                                  *
         SPACE 3
*        MODULE  NAME - IEANTM00                                      *
         SPACE 3
*        SVCLIB  NAME - IGC0001C                                      *
         SPACE 3
*        THE FOLLOWING TABLE IS A LIST OF THE ABEND MODULES FOR       *
*        AN MFT,MFT-ATTACH SYSTEM                                     *
         SPACE 3
*        ROUTINE NAME         MODULE NAME         SVCLIB NAME         *
         SPACE 1
*        LOAD  0              IEANTM00            IGC0001C            *
*        LOAD  G              IEANTM0G            IGC0G01C            *
*        LOAD  1              IEANTM01            IGC0101C            *
*        LOAD  2              IEANTM02            IGC0201C            *
*        LOAD  3              IEANTM03            IGC0301C            *
*        LOAD  J              IEANTM0J ***        IGC0J01C            *
*        LOAD  4              IEANTM04            IGC0401C            *
*        LOAD  5              IEANTM05 **         IGC0501C            *
*        LOAD  6              IEANTM06            IGC0601C            *
*        LOAD  7              IEANTM07            IGC0701C            *
*        LOAD  8              IEANTM08            IGC0801C            *
*        LOAD  9              IEANTM09            IGC0901C            *
*        LOAD  H              IEANTM0H            IGC0H01C            *
*        LOAD  10             IEANTM0A            IGC0A01C            *
*        LOAD  11             IEANTM0B *          IGC0B01C            *
*        LOAD  12             IEANTM0C ***        IGC0C01C            *
*        LOAD  13             IEANTM0D ***        IGC0D01C            *
*        LOAD  14             IEANTM0E ***        IGC0E01C            *
*        LOAD  15             IEANTM0F ***        IGC0F01C            *
        SPACE 2
*      * NOTE  THAT IN A SYSTEM WITH THE MCS OPTION THE MODULE        *
*        NAME FOR LOAD 11 IS IEACTM0B.                                *
         SPACE 2
         SPACE 2
*     ** NOTE THAT IN AN MFT SYSTEM WITHOUT ATTACH, THE MODULE        *
*        NAME FOR LOAD 5 IS IEAMTM05.                                 *
         SPACE 2
*    *** NOTE THAT IN A SYSTEM WITHOUT ATTACH,                        *
*        LOADS 12,13,14,15 AND J DO NOT EXIST                         *
         SPACE 4
*        BELOW IS A LIST OF THE STAE MODULES USED IN ALL MFT SYSTEMS  *
         SPACE 2
*        ROUTINE NAME         MODULE NAME         SVCLIB NAME         *
         SPACE 1
*        LOAD  1              IEASTM11            IGC0111C            *
*        LOAD  2              IEASTM12            IGC0211C            *
*        LOAD  3              IEASTM13            IGC0311C            *
*        LOAD  4              IEASTM14            IGC0411C            *
         SPACE 4
*        BELOW IS A LIST OF THE DAR MODULES USED IN ALL MFT SYSTEMS   *
         SPACE 2
*        ROUTINE NAME         MODULE NAME         SVCLIB NAME         *
         SPACE 1
*        LOAD  1              IEADTM22            IGC0221C            *
*        LOAD  2              IEADTM23            IGC0321C            *
*        LOAD  3              IEADTM24            IGC0421C            *
*        LOAD  4              IEADTM25            IGC0521C            *
         EJECT
*        BELOW IS AN ENTRY-EXIT MATRIX TABLE DESCRIBING THE POSSIBLE  *
*        ENTRIES AND EXITS TAKEN BY THE ABEND MODULES VIA XCTL. THIS  *
*        TABLE DOES NOT DESCRIBE SVC OR BRANCH ENTRIES AND EXITS      *
*        NOR DOES IT DESCRIBE THE STAE,GRAPHICS OR DAR INTERFACES.    *
*        REFER TO EACH MODULE FOR A LIST OF POSSIBLE ENTRIES AND EXITS*
         SPACE 5
*        LOAD 0  EXITS   TO LOADS   G,11,12                           *
*        LOAD 0  ENTERED BY LOADS   11                                *
*        LOAD G  EXITS   TO LOAD    1,2                               *
*        LOAD G  ENTERED BY LOAD    0                                 *
*        LOAD 1  EXITS   TO LOADS   11                                *
*        LOAD 1  ENTERED BY LOADS   0                                 *
*        LOAD 2  EXITS   TO LOADS   3,9                               *
*        LOAD 2  ENTERED BY LOADS   0,11                              *
*        LOAD 3  EXITS   TO LOADS   4,J                               *
*        LOAD 3  ENTERED BY LOADS   2                                 *
*        LOAD J  EXITS   TO LOADS   4                                 *
*        LOAD J  ENTERED BY LOADS   3                                 *
*        LOAD 4  EXITS   TO LOADS   5,7,8,10,12,13,14                 *
*        LOAD 4  ENTERED BY LOADS   3,9,10,H,J                        *
*        LOAD 5  EXITS   TO LOADS   6,9                               *
*        LOAD 5  ENTERED BY LOADS   4                                 *
*        LOAD 6  EXITS   TO LOADS   7,9,12,13,14                      *
*        LOAD 6  ENTERED BY LOADS   5                                 *
*        LOAD 7  EXITS   TO LOADS                                     *
*        LOAD 7  ENTERED BY LOADS   4,6,8,14                          *
*        LOAD 8  EXITS   TO LOADS   7,13,14                           *
*        LOAD 8  ENTERED BY LOADS   4                                 *
*        LOAD 9  EXITS   TO LOADS   4,H                               *
*        LOAD 9  ENTERED BY LOADS   2,5,6                             *
*        LOAD H  EXITS   TO LOADS   4                                 *
*        LOAD H  ENTERED BY LOADS   9                                 *
*        LOAD 10 EXITS   TO LOADS   4                                 *
*        LOAD 10 ENTERED BY LOADS   4                                 *
*        LOAD 11 EXITS   TO LOADS   0,2,14                            *
*        LOAD 11 ENTERED BY LOADS   0,1                               *
*        LOAD 12 EXITS   TO LOADS   13                                *
*        LOAD 12 ENTERED BY LOADS   0,4,6                             *
*        LOAD 13 EXITS   TO LOADS   14                                *
*        LOAD 13 ENTERED BY LOADS   4,6,8,12                          *
*        LOAD 14 EXITS   TO LOADS   7                                 *
*        LOAD 14 ENTERED BY LOADS   0,4,6,8,11,13                     *
*        LOAD 15 EXITS   TO LOADS   7,14                              *
*        LOAD 15 ENTERED BY LOADS   4,6,8,13                          *
         EJECT
*        FUNCTION -                                                   *
*        A) NORMAL TERMINATION
*              THE FOLLOWING FUNCTIONS ARE PERFORMED BY ABEND         *
*              LOAD 1 FOR NORMAL END                                  *
         SPACE
*              1)   NORMAL COMPLETION CODE IS STORED.                 *
*              2)   THE TCBPIE FIELD IS CLEARED.                      *
*              3)   IF THE SYSTEM HAS AN INTERVAL TIMER, THE IQE      *
*                   POINTER OFF THE TQE IS CLEARED. IF THE TQE IS     *
*                   CURRENTLY IN USE, THE TIMER IS CANCELLED.         *
*              4)   ALL OPEN DCBS DESCRIBED BY DEBS FROM THE TCBDEB   *
*                   FIELD ARE CLOSED.                                 *
*              5A)  IN A SYSTEM WITH THE MCS OPTION, LOAD 1 EXITS     *
*                   TO LOAD 11 TO PURGE WTOR REQUESTS AND TO PROCESS  *
*                   MCS TERMINATION MODULES.                          *
*              5B)  IN A NON-MCS SYSTEM THE UCM IS CHECKED FOR        *
*                   OUTSTANDING WQES AND RQES. IF ANY ARE FOUND       *
*                   LOAD 1 EXITS TO LOAD 11 TO PURGE WTOR REQUESTS    *
*              6)   IF NO WTOR REQUESTS ARE OUTSTANDING AND IF        *
*                   THE NORMAL TERMINATING TASK IS A SUBTASK,         *
*                   LOAD 1 EXITS TO LOAD 14. (MFT ATTACH ONLY)        *
*              7)   IF NO WTOR REQUESTS ARE OUTSTANDING AND IF        *
*                   THE NORMAL TERMINATING TASK IS THE JOB STEP       *
*                   TASK,OR IF LOAD 1 WAS ENTERED BY LOAD 11, ANY     *
*                   IQES FOR THIS TASK ON THE THIRD STAGE EXIT        *
*                   EFFECTOR'S QUEUE LABELLED LEQC ARE DEQUEUED.      *
*              8)   IF THE TASK'S DISPATCHING PRIORITY DOES NOT       *
*                   EQUAL ITS LIMIT PRIORITY, A CHAP MACRO IS         *
*                   ISSUED TO RESTORE THE ORIGINAL PRIORITY.          *
*                   (MFT ATTACH ONLY)                                 *
*              9)   THE BOUNDARY BOX AND FQES ARE INITIALIZED FOR     *
*                   HIARCHY ZERO AND IF APPLICABLE FOR HIARCHY ONE.   *
*                   IF THE SYSTEM HAS THE LCS OPTION,THE FQE FOR      *
*                   H1 WILL REFLECT THAT ALL OF H1 IS FREE UNLESS     *
*                   ONLY H1 IS USED BY THE PARTITION. THE FQE FOR     *
*                   H0 (OR ONLY H1 PARTITIONS) WILL REFLECT THAT      *
*                   ALL OF CORE EXCEPT THE FIRST 72 BYTES OF THE      *
*                   PARTITION ARE FREE. THE FOLLOWING FIELDS OF THE   *
*                   TCB ARE THEN CLEARED - TCBTIOT,TCBFSA,TCBLLS,     *
*                   TCBJLB AND SECONDARY TCBFLAGS. THE JOB PACK       *
*                   AREA QUEUE POINTER IN THE PIB IS ALSO CLEARED     *
*                   IN AN MFT ATTACH SYSTEM.                          *
*                   THE PRIMARY TCBFLAG FIELD IS RESET LEAVING ONLY   *
*                   BITS 29.1,30.1,30.2,30.7,31.4 AND 31.7 ON IF      *
*                   THEY ARE CURRENTLY SET.                           *
*              10)  A PRB AND PROGRAM IS BUILT AT THE TOP OF THE      *
*                   PARTITION WHICH EXECUTES A LPSW INSTRUCTION       *
*                   WHICH EXECUTES AN SVC XCTL TO 'GO' IF THE         *
*                   PARTITION IS SCHEDULER SIZE OR TO 'SMALLGO'       *
*                   IF THE PARTITION IS SMALLER THAN SCHEDULER SIZE.  *
         SPACE 2
*              11)  THE TCBRBP FIELD IS INITIALIZED TO POINT TO THE   *
*                   CREATED PRB AND A BRANCH TO THE LPSW INSTRUCTION  *
*                   IS TAKEN.                                         *
         SPACE 2
*        B) ABNORMAL TERMINATION
*                   IF ENTERED FOR ABNORMAL TERMINATION THIS MODULE   *
*                   WILL IMMEDIATELY TAKE AN EXIT TO THE NEXT LOAD.   *
*                   BEFORE EXITING VIA AN XCTL, A CHECK IS MADE TO    *
*                   DETERMINE IF ENOUGH CORE EXISTS FOR THE SVC SECOND*
*                   LEVEL INTERRUPT HANDLER TO DO A SUCCESSFUL        *
*                   GETMAIN FOR XCTL'S SVRB. BECAUSE A REGISTER       *
*                   FORM OF THE GETMAIN MACRO IS CONSIDERED A         *
*                   CONDITIONAL REQUEST IF THE ABNORMAL TERMINATION   *
*                   BIT IS ON, ABEND IS ABLE TO UTILIZE THE GETMAIN   *
*                   SERVICE ROUTINE. IF THE GETMAIN FAILS, ABEND WILL *
*                   BRANCH TO ABTERM TO SCHEDULE ABEND FOR THE JOB    *
*                   STEP TASK IF THE ABENDING TASK IS A SUBTASK.      *
*                   IF THE GETMAIN FAILS AND THE ABENDING TASK        *
*                   IS A JOB STEP TASK THEN ABEND WILL STEAL CORE     *
*                   AT PARTITION+32 IF CORE WAS NOT ALREADY STOLEN    *
*                   AND IF THE ABEND SVRB POOL IS NOT AVAILUABLE.     *
*                   IF CORE WAS STOLEN ONCE THEN CORE IS STOLEN AT    *
*                   PARTITION+176. IF CORE WAS STOLEN TWICE THEN      *
*                   ALL RB'S EXCEPT ABEND'S SVRB ARE DEQUED AND       *
*                   CORE STOLEN AT PARTITION+176. THIS IS DONE TO     *
*                   AVOID AN ACTIVE RB CHAIN LOOPED TO ITSELF IF      *
*                   XCTL ABENDS AND THE XCTL SVRB RESIDES IN THE      *
*                   SECOND STEAL AREA.                                *
         EJECT
*        APPLICABILITY - OPTION 2 (MFT) SYSTEM WITH/WITHOUT THE       *
*                        ATTACH OPTION                                *
         SPACE 3
*        ATTRIBUTES - REENTRANT,REFRESHABLE                           *
         SPACE 3
*        ENTRY POINT - IGC0001C                                       *
         SPACE 3
*        INPUT - FOR NORMAL END, REGISTER 1 MUST CONTAIN ALL ONES.    *
*                REGISTER 15 MUST CONTAIN THE COMPLETION CODE AND     *
*                THE ISSUER OF THE SVC 13 MUST BE IN SUPERVISOR       *
*                STATE. IF ENTRY IS FROM LOAD 11 THEN THE             *
*                SIXTH WORD OF THE EXTENDED SAVE AREA OF              *
*                ABENDS SVRB MUST CONTAIN CHARACTER 'B0'.             *
*                FOR ABNORMAL END, REGISTER 1 MUST CONTAIN THE        *
*                COMPLETION CODE UNLESS ABTERM SCHEDULED THE ABEND.   *
         SPACE 3
*        OUTPUT - THE STORING OF THE COMPLETION CODE IF ABTERM        *
*                 WAS NOT ENTERED.                                    *
*                 IF A BRANCH TO ABTERM IS TAKEN, REGISTER 0 WILL     *
*                 CONTAIN THE TCB TO ABEND AND REGISTER 1 WILL        *
*                 CONTAIN THE COMPLETION CODE. OTHERWISE NO OUTPUT.   *
         SPACE 3
*        ENTERED BY - 1) THE SVC SLIH WHEN THE ABEND SVC IS ISSUED.   *
*                     2) ABEND LOAD 11 WHEN A JOB STEP TASK           *
*                        TERMINATING NORMALLY,REQUIRED A WTOR PURGE.  *
         SPACE 3
*        EXITS -      1) TO ABEND LOAD G FOR ABNORMAL TERMINATION    *
*                     2) TO ABTERM TO SCHEDULE ABEND FOR THE JOB STEP *
*                        IF THERE WAS INSUFFICIENT CORE  FOR XCTL     *
*                        SVRB FOR A SUBTASK ABEND.(MFT ATTACH ONLY)
*                     3) TO ABEND LOAD 11 IF A NORMAL TERMINATING     *
*                        TASK REQUIRES A WTOR PURGE OR IF MCS OPTION  *
*                        IS GENERATED IN THE SYSTEM.                  *
*                     4) TO ABEND LOAD 14 IF THE NORMAL TERMINATING   *
*                        TASK IS A SUBTASK THAT DOES NOT REQUIRE A    *
*                        WTOR PURGE. (MFT ATTACH ONLY)                *
*                     5) FOR JOB STEP NORMAL TERMINATION, TO THE      *
*                        SCHEDULER MODULE GO FOR SCHEDULER            *
*                        SIZE PARTITIONS ELSE TO SMALLGO FOR          *
*                        SMALL PARTITIONS.                            *
         SPACE 3
*        WORK AREAS - THE TWELVE WORDS OF THE EXTENDED SAVE AREA      *
*                     OF ABENDS SVRB.                                 *
         SPACE 3                                                      *
*        NOTES  -  THIS ABEND MODULE PERFORMS NORMAL TERMINATION      *
*                  FOR JOB STEP TASKS THAT DO NOT REQUIRE WTOR        *
*                  PURGE.                                             *
         SPACE 3
*        EXTERNAL REFERENCES - LEQC - IQE QUEUE MAINTAINED BY         *
*                              THE THIRD STAGE EXIT EFFECTOR.         *
*                            - IEA0AB00 - ENTRY POINT OF ABTERM.      *
*                            - JPAQ - QUEUE OF REENTRANT MODULES      *
*                              FOR THE PARTITION MAINTAINED OFF       *
*                              THE TCBPIB. (MFT ATTACH ONLY)          *
*                            - IEEMSER - ADDRESS OF MASTER SCHEDULER  *
*                              DATA AREA                              *
*                            - IEECUCB - ADDRESS OF UCM               *
         SPACE 3
*        TABLES AND CONTROL BLOCKS REFERENCED -                       *
*              CVT,TCB,RB,DEB,DCB,TQE,IQE,WQE,RQE,FQE                 *
         SPACE 3
*        SVC'S USED - EXIT (3), XCTL (7), GETMAIN (10),               *
*                     FREEMAIN (10), CLOSE (20), CHAP (44),           *
*                     TTIMER (46).                                    *
         EJECT
         SPACE 1                                                 *MONS*
***********************************************************************
*                                                                *MONS*
*        THE FOLLOWING CODE CALLS THE ACCOUNTING SVC TO          *MONS*
*        TURN OFF THE FLAG THAT TRIGGERS THE'HIGH WATER          *MONS*
*        MARK' ROUTINE IN GETMAIN/FREEMAIN. THE SAME CALL        *MONS*
*        IS MADE FROM THE STEP TERMINATION MODULE IEFSD515       *MONS*
*        TO STORE THE STEP ABEND CODE.                           *MONS*
*                                                                *MONS*
***********************************************************************
         SPACE 1                                                 *MONS*
ACCTG    EQU   254                 ACCOUNTING SVC NUMBER         *MONS*
STEPTERM EQU   6                   INDICATOR CODE FOR ACCT'NG SVC*MONS*
         LR    R6,R15              SAVE COMPLETION CODE          *MONS*
         LA    R15,STEPTERM        INDICATE STEP TERMINATION     *MONS*
         SVC   ACCTG               CALL ACCOUNTING SVC           *MONS*
         LR    R15,R6              RESTORE COMPLETION CODE       *MONS*
         SPACE 1                                                 *MONS*
         BALR  BASE,R0                  ESTABLISH
         USING *,BASE                   ADDRESSABILITY
         USING CVTDSECT,CVTREG          DSECT FOR CVT
         USING TCBSECT,TCBREG           DSECT FOR TCB
         USING RBSECT,RBREG             DSECT FOR RB
         B     BEGIN                    BRANCH AROUND IDENTIFIER
NAME     DC    C'IGC0001C'
BEGIN    EQU   *
         CLC   XESAWD5(TWO),LOAD11      Q. ENTRY FROM WTOR PURGE
         BE    IQEPURGE                 YES-GO TO IQE PURGE
         OI    TCBFLGS,TCBFX            PREVENT ASYNCH EXITS
         LA    BRANCHAB,ABNORMAL        INITIALIZE BRANCHING REG
         TM    TCBFLGS,TCBFE            Q. IS NORMAL END BIT ON
         BCR   Z,BRANCHAB               NO-BRANCH
         SR    WKREG,WKREG              CLEAR REG
         BCTR  WKREG,R0                 INITIALIZES WITH ALL ONES
         CLR   R1,WKREG                 Q. REG 1 HAVE ALL ONES
         BCR   NE,BRANCHAB              NO-BRANCH FOR ABEND
         L     WKREG,XRBLNK             GET CALLERS RB
         TM    N17(WKREG),PPSTATE       Q. CALLER IN SPVR STATE
         BCR   ON,BRANCHAB              NO-BRANCH FOR ABEND
         TM    TCBFLGS,TCBABTRM         Q. ABTERM BIT ON
         BCR   ON,BRANCHAB              YES-BRANCH FOR ABEND
         EJECT
*        THE FOLLOWING CODE IS EXECUTED ONLY FOR NORMAL END
         ST    R15,TCBCMP               STORE NORMAL COMP CODE
*
*  THIS CODE WILL CANCEL THE JOBSTEP TQE DESCRIBED BY THE PIB
*
JOBSTEP  EQU   *                                             AB  A58187
         CL    TCBREG,TCBFTJST     Q. JOBSTEP ABEND          AB  A58187
         BNE   NOTJSTCB            NO. CONTINUE FOR SUBTSK   AB  A58187
         L     WKREG,TCBPIB        GET PIB POINTER           AB  A58187
         LA    WKREG,ZERO(WKREG)   CLEAR HI BYTE             AB  A58187
         LTR   WKREG,WKREG         Q. ANY PIB                AB  A58187
         BZ    NOTJSTCB            NO.                       AB  A58187
         L     WKREG,PIBTQE(WKREG) GET PIB TQE POINTER       AB  A58187
         LA    WKREG,ZERO(WKREG)   CLEAR HI BYTE             AB  A58187
         LTR   WKREG,WKREG         Q. ANY TQE                AB  A58187
         BZ    NOTJSTCB            NO.  BRANCH               AB  A58187
         XC    N100(FOUR,WKREG),N100(WKREG)  ZERO PP S/A     AB  A58187
NOTJSTCB EQU   *                                             AB  A58187
         L     WKREG,TCBTME             GET TIMER
         LA    WKREG,ZERO(WKREG)        CLEAR HI BYTE
         LTR   WKREG,WKREG              Q. TIMER EXIST
         BZ    CKCLOSE                  NO-BRANCH TO CLOSE
         XC    N100(FOUR,WKREG),N100(WKREG) SET IQE SAVE PTR TO ZERO
         TM    ZERO(WKREG),HEX80        Q. ELEMENT NOT IN USE OR ON Q
         BNO   TIMERCAN                 NO-BRANCH
         B     CKCLOSE                  GO TO CLOSE
TIMERCAN EQU   *
         TTIMER CANCEL                  CANCEL TIMER
CKCLOSE  EQU   *
         USING DEBSECT,DEBREG           DSECT FOR DEB
         L     DEBREG,TCBDEB            GET DEB
         LTR   DEBREG,DEBREG            Q. DEB EXIST
         BZ    STOPIT                   NO. BRANCH OUT OF LOOP AB M2063
         MVC   XRBESA(FOUR),DEBDCBAD    MOVE DCB INTO LIST
         MVI   XRBESA,HEX80             FLAG END OF LIST
         LA    R1,XRBESA                GET ADDR FOR CLOSE
         CLOSE MF=(E,(1))               CLOSE DATA SET
         CL    DEBREG,TCBDEB            Q. DEB DEQUED
         BNE   CKCLOSE                  YES-BRANCH
         MVC   TCBDEB+ONE(THREE),DEBDEBAD+ONE    DEQ DEB
         B     CKCLOSE                  BRANCH FOR MORE DEBS
STOPIT   EQU  *                                                AB M2063
         LA    R15,15                   SET UP PURGE PARM     AB A56566
         SVC   109                      PURGE OUTSTANDING I/O AB A56566
         EJECT
*        THE FOLLOWING ROUTINE DETERMINES IF A WTOR PURGE IS NEEDED.
*        IF SO AN XCTL IS DONE TO LOAD 11 OF ABEND. LOAD 11 WILL XCTL
*        TO LOAD 0 IF THIS IS A NORMAL END FOR A JOB STEP TASK. IF
*        THE CURRENT ENTRY IS FOR A NORMAL SUB-TASK END LOAD 11
*        PASSES CONTROL TO LOAD 14 TO HANDLE SUBTASK END.
         SPACE 5
CKWQE    EQU   *
         L     UCMREG,CVTCUCB           GET UCM POINTER
         TM    UCMMODE(UCMREG),HEX02    Q. MCS SYSTEM             20061
         BO    TOLOAD11                 YES-BRANCH
         NC    UCMRPYQ(FOUR,UCMREG),UCMRPYQ(UCMREG)  Q. ANY RQES  20061
         BNZ   TOLOAD11                 YES-BRANCH FOR WTOR PURGE
         L     WKREG,UCMWTOQ(UCMREG)    GET WQE PTR               20061
         LTR   WKREG,WKREG              Q. ANY WQES
         BZ    SUBCHECK                 NO-BRANCH-PURGE NOT NEEDED
         NC    ZERO(FOUR,WKREG),ZERO(WKREG)  Q. MORE THAN ONE WQE
         BZ    SUBCHECK                 NO-BRANCH-PURGE NOT NEEDED
TOLOAD11 EQU   *
         LH    SAVE,LOAD11              XCTL TO WTOR PURGE
GOODBYE  EQU   *
         SR    R0,R0
         MVC   XESAWD3(EIGHT),NAME      MOVE IN BASIC NAME
         STH   SAVE,XESAWD4             STORE SECOND PART OF NAME
         LA    R15,XESAWD3              GET NAMES ADDRESS
         ST    R15,XESAXCTL             STORE PTR INTO LIST
         LA    R15,XESAXCTL             GET PTR TO LIST
         XCTL  SF=(E,(15))              GO TO NEXT MODULE
         SPACE 5
SUBCHECK EQU   *
         TM    CVTOPTA,SYSMFTAT         Q. MFT ATTACH SYSTEM
         BNO   IQEPURGE                 NO-BRANCH
         LH    SAVE,LOAD12              FREE FRB AND WLE, IF ANY  M1165
         CL    TCBREG,TCBFTJST          Q. IS THIS THE JOB STEP TASK
         BNE   GOODBYE                  NO-BRANCH                 20048
         SPACE 5
*        THE FOLLOWING CODE IS EXECUTED ONLY BY JOB STEP TASKS-NORM END
         SPACE
IQEPURGE EQU   *
         L     BEGQUE,CVTBTERM          GET ABTERMS ADDRESS
         L     BEGQUE,N16(BEGQUE)       GET ADDR OF QUEUE ORIGIN
         LR    NEXTIQE,BEGQUE
LOOP     EQU   *
         LR    FIRSTIQE,NEXTIQE
NEXT     EQU   *
         L     NEXTIQE,ZERO(FIRSTIQE)   GET NEXT IQE
         LTR   NEXTIQE,NEXTIQE          Q. LAST IQE ON QUEUE
         BL    ENDQUE                   YES-BRANCH
         LA    NEXTIQE,ZERO(NEXTIQE)    CLEAR NOISE           AB M5280
         L     WKREG,TWELVE(NEXTIQE)    GET TCB PTR           AB M5280
         LA    WKREG,ZERO(WKREG)        CLEAR NOISE           AB M5280
         CR    TCBREG,WKREG             TCB = IQETCB          AB M5280
         BNE   LOOP                     NO-SEARCH NEXT IQE
         MVC   ZERO(FOUR,FIRSTIQE),ZERO(NEXTIQE)  RELINK IQES
         B     NEXT                     GET NEXT IQE
ENDQUE   EQU   *
         ST    FIRSTIQE,FOUR(BEGQUE)    SAVE ADDR OF LAST IQE
         MVI   FOUR(BEGQUE),ALL         FLAG FOR END
         TM    CVTOPTA,SYSMFTAT         Q. MFT ATTACH SYSTEM
         BNO   NOCHAP                   NO-BRANCH
         CLC   TCBFTLMP(ONE),TCBDSP     Q. CHAP NEEDED
         BE    ZPIB                     NO-BRANCH
         L     R0,TCBFTLMP              GET LIMIT PRIORITY
         SRL   R0,N24                   ISOLATE IT
         L     WKREG,TCBFLGS+THREE      GET DISP PRIORITY
         N     WKREG,MASK               CLEAR FLAGS
         SR    R0,WKREG                 DETERMINE AMOUNT TO CHAP
         ST    TCBREG,XRBESA            STORE TCB ADDRESS
         LA    R1,XRBESA                GET PTR TO IT             20048
         CHAP  (0),(1)                                            20048
ZPIB     EQU   *
         L     WKREG,TCBPIB             GET PIB PTR
         XC    JPQ(FOUR,WKREG),JPQ(WKREG) ZERO JPAQ
NOCHAP   EQU   *
         LA    BUMP,N72                 INITIALIZE REG
         L     MSS,TCBMSS
         LR    WKREG,MSS                GET BB ADDR
         LA    R0,N16
         SR    WKREG,R0                 GET PTR TO TA QUEUE
         XC    ZERO(N16,WKREG),ZERO(WKREG)  CLEAR TA QUE AND AB. APP.
         NC    FOUR(EIGHT,MSS),FOUR(MSS) Q. ONLY H1 BEING USED
         BNZ   H0USED                   NO-BRANCH
MSSLOOP  LA    MSS,TWELVE(MSS)          POINT TO H1
H0USED   EQU   *
         LM    FQEREG,HIGH,FOUR(MSS)    GET LOWER AND UPPER BOUNDS
         AR    FQEREG,BUMP              GET PTR TO WHERE FQE IS BUILT
         SR    HIGH,FQEREG              DETERMINE SIZE OF FREE AREA
         ST    HIGH,FOUR(FQEREG)             BUILD
         XC    ZERO(FOUR,FQEREG),ZERO(FQEREG) FQE
         IC    WKREG,ZERO(MSS)          SAVE POSSIBLE LCS FLAG
         ST    FQEREG,ZERO(MSS)         STORE FQE ADDR IN MSS
         STC   WKREG,ZERO(MSS)          RESTORE HI BYTE
         TM    ZERO(MSS),MSSDBBOX       Q. ALSO INITIALIZE SEP H1
         BZ    CLEANUP                  NO-BRANCH
         SR    BUMP,BUMP                CHANGE SIZE TO ZER-BUILD FQE
*                                       AT TOP OF PART IN H1
         B     MSSLOOP                  INITIALIZE H1
CLEANUP  EQU   *
         SR    R0,R0                    CLEAR REG
         ST    R0,TCBPIE                CLEAR PIE FIELD
         ST    R0,TCBTRN                CLEAR TESTRAN FIELD
*     CODE TO ZERO OUT THE TIOT  REMOVED FOR REL 21.6         AB A47868
         XC    TCBFSA+ONE(THREE),TCBFSA+ONE  ZERO SAVE AREA
         XC    TCBLLS(EIGHT),TCBLLS     ZER LLS AND JOBLIB DCB
         XC    TCBFL2(N11),TCBFL2       ZERO FLAGS AND STAE
         NC    TCBFLGS(FIVE),RESET      RESET PRIME FLAG FIELD
         L     WKREG,CVTMSLT            GET MASTER RES. DATA AREA
         NI    N137(WKREG),ALL-HEX80    TURN OFF CONSOLE FLAG
         LTR   BUMP,BUMP                Q. IS REG MSS POINTING TO
*                                       CORRECT BOUND BOX
         BNZ   MOVEDUMM                 YES-BRANCH
         LA    WKREG,TWELVE             INITIALIZE REG
         SR    MSS,WKREG                GET PTR TO BOUND. BOX
MOVEDUMM L     FQEREG,LOWER(MSS)        GET PTR TO LOW OF PARTITION
         MVC   ZERO(N70,FQEREG),DUMPGM  MOVE PRB AND DUMMY PGM
         ST    TCBREG,N28(FQEREG)       LINK RB TO
         ST    FQEREG,TCBRBP            TCB
         LA    WKREG,N40(FQEREG)        GET PTR TO NAME IN XCTL LIST
         ST    WKREG,N32(FQEREG)        STORE ADDR INTO XCTL LIST
         LA    WKREG,N68(FQEREG)        GET ADDR OF SVC 7 INSTR.
         ST    WKREG,N60(FQEREG)        STORE ADDR INTO PSW
         TM    TCBPIB,SCHEDSIZ          Q. SCHEDULER SIZE PARTITION
         BO    SETBIT                   YES-BRANCH
         MVC   N40(EIGHT,FQEREG),SMALLGO  XCTL TO SMALLGO
SETBIT   EQU   *
         OI    TCBFLGS+TWO,TCBSCHED     FLAG SCHEDULER IN PROCESS
         LA    R15,N32(FQEREG)          GET ADDR OF LIST
         NI    TCBTCTFG,ALL-TCBTCTGF    INDICATE NO TCT UPDATE   A32900
         B     N64(FQEREG)              EXECUTE DUMMY PROGRAM
         EJECT
*        THE FOLLOWING CODE IS EXECUTED ONLY FOR ABNORMAL END
ABNORMAL EQU   *
         ST    R1,XESAWD7               SAVE COMP CODE FOR LOAD G
         LH    SAVE,LOADG               GET NAME OF NEXT LOAD
         SPACE 2
CKCORE   EQU   *
         L     R0,SVRBSZE               DO GETMAIN IN SP254 TO
*                                       PROTECT AGAINST BAD FQE
         GETMAIN R,LV=(0)               SVRB SIZE AND GQE
         LTR   R15,R15                  Q. CORE OBTAINED
         BNZ   CKSUB                    NO-BRANCH
         FREEMAIN  R,LV=152,A=(1)       FREE THE CORE         CE A35198
         B     GOODBYE                  GO TO XCTL
CKSUB    EQU   *
         TM    CVTOPTA,SYSMFTAT         Q. MFT ATTACH
         BNO   POOLTEST                 NO-BRANCH             CE A35198
         CL    TCBREG,TCBFTJST          Q. JOB STEP TASK
         BNE   ABSTEP                   NO-BRANCH TO ABEND JOB STEP
POOLTEST EQU   *                                              CE A35198
         L     R1,CVTBTERM              LOCATE ABTERM ROUTINE CE A35198
         L     R1,SVRBPOOL(R1)         LOCATE ABEND SVRB POOL CE A35198
         L     R0,USERTCB(R1)        LOCATE POOL CONTROL WORD CE A35198
         CR    R0,TCBREG              IS CUR. TASK USING POOL CE A35198
         BE    GOODBYE                  YES, CORE AVAIL.      CE A35198
         LTR   R0,R0                    IS POOL FREE          CE A35198
         BNZ   CKSUBCON                 NO, STEAL CORE        CE A35198
         ST    TCBREG,USERTCB(R1)       RESERVE POOL          CE A35198
         B     GOODBYE                  XCTL TO NEXT LOAD     CE A35198
CKSUBCON EQU   *
         L     MSS,TCBMSS               GET MSS POINTER
         NC    FOUR(EIGHT,MSS),FOUR(MSS)  Q. ONLY H1 USED
         BNZ   NOLCS                    NO-BRANCH
         LA    MSS,TWELVE(MSS)          PTR TO LCS BOUND BOX
NOLCS    EQU   *
         L     LOW,FOUR(MSS)            GET LOWER BOUNDARY
         LA    LOW,N32(LOW)             BYPASS PRB
         TM    TCBFLGS,TCBFS            Q. Q WAS CORE ALREADY STOLEN
         BZ    STEAL                    NO-BRANCH
         LA    LOW,N144(LOW)            BYPASS ABENDS SVRB
STEAL    EQU   *
         IC    WKREG,ZERO(MSS)          SAVE POSS LCS FLAG
         ST    LOW,ZERO(MSS)            SET FQE PTR IN MSS
         STC   WKREG,ZERO(MSS)          RESTORE HI BYTE
         XC    ZERO(SEVEN,LOW),ZERO(LOW)  ZEO FQE
         MVI   SEVEN(LOW),N144          SIZE FOR XCTL SVRB    AC A37447
         OI    TCBFLGS,TCBFS            SET FIRST STEAL BIT
         B     GOODBYE                  XCTL TO NEXT LOAD
         EJECT
*        THE FOLLOWING ROUTINE CONVERTS THE ABEND FOR THIS SUBTASK
*        TO A JOB STEP ABEND, BECAUSE CORE MUST BE STOLEN FOR
*        XCTL'S SVRB.
         SPACE 2
ABSTEP   EQU   *
         OI    TCBCMP,TCBSTEP           SET STEP BIT
         OI    TCBNDFL+TWO,TCBAWF       SET THIS TASK NON-DISP
         OI    TCBFLGS+FOUR,PRIMNDFL    SET PRIMARY FLAG
         L     R0,TCBFTJST              GET JOB STEP TASK
         L     R1,TCBCMP                GET COMP CODE
         L     R13,CVTBTERM             GET EPA OF ABTERM
         BALR  R14,R13                  GO TO ABTERM
         XC    XESAWD4(FOUR),XESAWD4    ZERO ECB
         LA    R1,XESAWD4               GET ADDR OF ECB
         WAIT  1,ECB=(1)                PUT TASK INTO WAIT
         EJECT
         IHBMFTAB
         EJECT
IGC0001C CSECT
*                            CONSTANTS
RESET    DC    X'C061090000'            USED TO RESET TCBFLGS     20048
*        THE NEXT ELEVEN STATEMENTS MUST BE CONTIGUOUS
***********************************************************************
DUMPGM   DC    D'0'                     PRB
         DC    H'9'                     FOR
         DC    X'00C0'                  DUMMY
         DC    4F'0'                    PROGRAM
         DC    D'0'                     TWO WDS IN XCTL LIST
         DC    C'GO      '              ASSUMED XCTL NAME
SVRBSZE  DC    X'FE000098'              NOT USED IN           AC A37447
MASK     DC    X'000000FF'              DUMMY PGM                 20048
         DC    X'FF040000'              PSW IN SPVR FOR SCHED
         DC    F'0'                     ADDRESS SUPPLIED AT EXECUTION
         LPSW  N56(FQEREG)              LPSW INST EXECUTES
         SVC   7                        THIS SVC
***********************************************************************
SMALLGO  DC    C'SMALLGO '              SMALL PARTITION
LOADG    DC    C'G0'                    IGC0101C
RECURLD  DC    C'20'                    IGC0201C
LOAD11   DC    C'B0'                    IGC0B01C
LOAD12   DC    C'C0'                    IGC0C01C                  M1165
         SPACE 5
*                             REGISTER EQUATES
R0       EQU   0
R1       EQU   1
BASE     EQU   2
CVTREG   EQU   3
TCBREG   EQU   4
RBREG    EQU   5
BRANCHAB EQU   6
DEBREG   EQU   6
UCMREG   EQU   6
R7       EQU   7
WKREG    EQU   7
PARAM    EQU   8
BEGQUE   EQU   8
MSS      EQU   8
NEXTIQE  EQU   9
FQEREG   EQU   9
SAVE     EQU   9
R9       EQU   9
R10      EQU   10
FIRSTIQE EQU   10
HIGH     EQU   10
BUMP     EQU   11
LOW      EQU   11
R11      EQU   11
TEMPTCB  EQU   12                                                 20048
CKCREG   EQU   12                                                 20048
R13      EQU   13
R14      EQU   14
R15      EQU   15
         SPACE 5
*                     GENERAL EQUATES
LOWER    EQU   4
R6       EQU   6
N11      EQU   11
N16      EQU   16
N17      EQU   17
N20      EQU   20
N24      EQU   24
N28      EQU   28
N32      EQU   32
N40      EQU   40
JPQ      EQU   44
N56      EQU   56
N60      EQU   60
N64      EQU   64
N68      EQU   68
N70      EQU   70
N72      EQU   72
N100     EQU   100
N137     EQU   137
N144     EQU   144
UCMWTOQ  EQU   X'18'                                              20061
UCMRPYQ  EQU   X'1C'                                              20061
UCMMODE  EQU   X'44'                                              20061
PRIMNDFL EQU   X'01'
MSSDBBOX EQU   X'01'
PIBTQE   EQU   X'28'                                         AB  A58187
HEX02    EQU   X'02'
HEX0F    EQU   X'0F'                                              20048
HEX80    EQU   X'80'
HEXBF    EQU   X'BF'
SVRBPOOL EQU   X'28'        DISP. TO SVRB POOL PTR, IN ABTERM CE A35198
USERTCB  EQU   432         DISP. TO CONTROL WORD IN SVRB POOL CE A35198
QUIESE   EQU   X'42'
INDEX1   EQU   4
INDEX2   EQU   8
INDEX3   EQU   12
         EJECT
*
* THE FOLLOWING SPACE IS RESERVED FOR MAINTENANCE
*
         DC    H'0'
         DC    H'0'
         DC    H'0'
         DC    H'0'
         DC    H'0'
         DC    H'0'
         DC    H'0'
         DC    H'0'
         DC    H'0'
         DC    H'0'
         DC    H'0'
         DC    H'0'
         DC    H'0'
         DC    H'0'
         DC    H'0'
         DC    H'0'
         DC    H'0'
         DC    H'0'
         DC    H'0'
         DC    H'0'
         END
/*
//LKED.SYSLMOD DD   DSN=TESTLIB,DISP=SHR
//LKED.SYSIN   DD   *
  NAME IGC0001C(R)
/*
