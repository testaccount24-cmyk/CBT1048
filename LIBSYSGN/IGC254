
//IGC254 JOB (1140,0005),'ASSEMBLE SVC254',CLASS=T
//STEP01       EXEC ASMFCL
//ASM.SYSIN    DD   *
         TITLE 'OS/MFT ACCOUNTING SVC - IGC254'
         SPACE
* WRITTEN BY D. R. HURTGEN
*
* MONSANTO COMPANY - CREVE COEUR
*
* FEBRUARY 1969
*
* MODIFIED BY D.A.MOORCROFT
*
* NOVEMBER 1972
*
* THIS RESIDENT SVC ROUTINE CONSISTS OF A SERIES OF SMALL SERVICE
* ROUTINES WHOSE FUNCTIONS ARE THE STORAGE AND RETRIEVAL OF STATISTICS
* REGARDING THE VARIOUS JOBS AND JOB STEPS BEING EXECUTED. THESE
* ROUTINES PROVIDE A METHOD WHEREBY DATA GATHERED IN RATHER DISPARATE
* SECTIONS OF THE OPERATING SYSTEM CAN BE COLLECTED IN ONE PLACE AND
* THEN FED BACK TO AN ACCOUNTING ROUTINE WHEN NEEDED.
*
* SINCE UP TO FIFTEEN JOBS CAN BE EXECUTING CONCURRENTLY, INFORMATION
* REGARDING EACH IS KEPT INVIOLABLE BY SETTING UP THE STORAGE AREA IN
* A MANNER WHICH ALLOWS USE OF THE TASKS STORAGE PROTECT KEY AS AN
* INDEXING DEVICE.
*
* UPON ENTRY, REGISTERS ARE SET AS FOLLOWS -
*    0 - COMMUNICATIONS REGISTER - CURRENTLY UNUSED.
*    1 - DATA, THE ADDRESS OF DATA, OR THE ADDRESS OF WHERE DATA IS TO
*        BE PLACED.
*    2 - UNPREDICTABLE
*    3 - ADDRESS OF THE COMMUNICATIONS VECTOR TABLE.
*    4 - ADDRESS OF THE ACTIVE (CALLERS) TASK CONTROL BLOCK.
*    5 - ADDRESS OF THE LAST ACTIVE REQUEST BLOCK FOR THIS TASK.
*    6-12 - UNPREDICTABLE.
*   13 - CONTAINS THE SAME INFORMATION AS WHEN THIS ROUTINE WAS CALLED.
*   14 - RETURN ADDRESS TO THE SVC FLIH.
*   15 - CONTAINS AN ENTRANCE CODE SPECIFYING THE FUNCTION THAT IS TO
*        BE PERFORMED.
*
* ATTRIBUTES - TYPE-I SVC, DISABLED, AND SERIALLY REUSABLE.
         EJECT
*                             INITIALIZATION
         ENTRY ACCTGTBL,COUNTRTN
IGC254   START
         USING *+2,BASE  ESTABLISH ADDRESSABILITY - THIS ROUTINE
         USING ACTGDATA,ACCTGPTR                  - NUCLEUS ACCTG DATA
         USING USERDATA,USERPTR                   - CALLERS DATA AREA
         BALR  BASE,0    SET BASE REGISTER
         SR    2,2  RESET R2
         L     R6,TCBPIB(,TCBPTR)  PIB ADDRESS TO REG 6
         LA    R6,0(,R6)           CLEAR HIGH-ORDER BYTE
         LTR   R6,R6               ENSURE PIB EXISTS
         BZ    RETURN              NO PIB - SO DO NOTHING
         IC    R2,PIBPKF(,R6)      GET PROTECT KEY FROM PIB
         SRA   R2,4                MOVE OUT INSIGNIFICANT BITS
         SLA   R2,7                MULTIPLY BY 128
         BCR   ZERO,RETURN    RETURN IF KEY IS ZERO
         C     R2,=A(TBLEND-TBLSTART) TEST IF INDEX IN RANGE
         BNL   ABNDTASK            IF NOT ABEND CALLING TASK
         C     ENTCODE,=A((ADREND-ADRSTART)/4)    Q.-CODE IS VALID
         BL    VALIDCOD                           B.-YES
ABNDTASK L     2,CVTBTERM(,CVTPTR) GET ADDRESS OF RESIDENT ABEND RTN
         LR    0,TCBPTR  INDICATE WHICH TASK TO ABEND AND
         L     1,COMPLCOD  THE COMPLETION CODE
         BR    2    GO TO ABEND - ABEND WILL RETURN TO TYPE-I SVC EXIT
VALIDCOD LA    ACCTGPTR,ACCTGTBL(2) INDEX THIS TASKS STORAGE AREA
         SLL   ENTCODE,2 MULTIPLY ENTRANCE CODE BY FOUR
         L     9,ADRSTART(ENTCODE) INDEX THE ENTRY LIST
         BR    9    GO TO THE SPECIFIED ROUTINE
         SPACE 2
* LIST OF ENTRY POINTS FOR FUNCTIONS PERFORMED BY THIS ROUTINE
ADRSTART DC    A(JOBSTART)
         DC    A(STEPSTRT)
         DC    A(STEPENDA)
         DC    A(STEPENDB)
         DC    A(JOBEND)
         DC    A(ATTACHA)
         DC    A(ATTACHB)
         DC    A(ACTRESET)
         DC    A(ISAMFLAG)
         DC    A(CONDCODE)
ADREND   EQU   *
         EJECT
* ENTRY AT JOB START FROM IEFACTRT
JOBSTART MVI   JOBFLAGS,0     INITIALIZE JOB FLAGS
         XC    TOTMCHUN(IOCHRGD+4-TOTMCHUN),TOTMCHUN ZERO OUT TOTALS
         MVC   JOBDATE(MODELNO-JOBDATE),XJOBDATE  SAVE DATE AND TIMES
         LH    6,JOBCOUNT     GET INTERNAL JOB NUMBER
         CH    6,=H'999' Q.-JOB NUMBER IS AT MAXIMUM
         BNE   *+6       B.-NO
         SR    6,6  RESET IT
         LA    6,1(,6)   BUMP IT BY ONE
         STH   6,JOBCOUNT     SAVE IT
         STH   6,JOBNUMBR     GIVE IT TO THIS JOB
         SPACE 2
* ENTRY AT STEP START FROM IEFACTRT
STEPSTRT OC    JOBFLAGS,XJOBFLGS   SET FLAGS
         MVC   STEPDATE(REGANDDS-STEPDATE),XSTEPDTE SAVE DATE AND TIMES
         XC    REGANDDS,REGANDDS   CLEAR REGION AND NUMBER OF DATA SETS
         XC    IONTCHGD(8),IONTCHGD     CLEAR I/O CHARGES            72
         XC    HWMSTEP,HWMSTEP    CLEAR HIGH WATER MARK
         XC    HWMBYTES,HWMBYTES          NI    REGNADDR,255-X'80'  RESET IPL FL
         NOP   NOTIPL              ONE TIME SWITCH
         OI    *-3,X'F0'           SET SWITCH TO BRANCH
         OI    REGNADDR,X'80'      SET FLAG TO INDICATE THIS IS FIRST
*                                   STEP SINCE IPL
NOTIPL   BR    RETURN              RETURN TO CALLER
         SPACE 2
* ENTRY AT THE BEGINNING OF STEP END PROCESSING FROM IEFACTRT
STEPENDA MVC   MODELNO,CPUID+1     INSERT MACHINE NUMBER
         L     WA,TCBMSS(,TCBPTR)  GET BOUNDARY BOX ADDRESS
         L     WA,4(,WA)           GET ADDR OF START OF PART'N
         STCM  WA,7,REGNADDR+1     STORE LOWER ORDER THREE BYTES
         MVC   XJOBFLGS(DSECTEND-JOBFLAGS),JOBFLAGS GIVE HIM EVERYTHING
         BR    RETURN    RETURN TO CALLER
         SPACE 2
* ENTRY AT THE END OF STEP PROCESSING FROM IEFACTRT
STEPENDB NC    JOBFLAGS,XJOBFLGS   RESET INDICATED JOB FLAGS
         OC    JOBFLAGS,XJOBFLGS   SET ANY NEW ONES INDICATED
         MVC   TOTMCHUN(TOTDISKU+2-TOTMCHUN),XTOTMCHU SAVE JOB TOTALS
         XC    REGANDDS,REGANDDS   CLEAR REGION SIZE
         BR    RETURN    RETURN TO CALLER
         SPACE 2
* ENTRY AT JOB END FROM IEFACTRT
JOBEND   MVC   XJOBFLGS(DSECTEND-JOBFLAGS),JOBFLAGS GIVE HIM EVERYTHING
         MVI   JOBFLAGS,0     RESET JOB FLAGS
         BR    RETURN    RETURN TO CALLER
         SPACE 2
* ENTRY PRIOR TO EXECUTION OF USERS PROGRAM FROM IEFSD513
ATTACHA  ST    1,REGANDDS     SAVE REGION SIZE AND NUMBER OF DATA SETS
         OI    JOBFLAGS,USERPROG   START HIGH WATER MARK ROUTINE
         ST    11,SAVEAPTR         SAVE ADDR OF ACCNTG DATA      *ISAM*
         ST    14,SAVERETN         SAVE RETURN ADDRESS           *ISAM*
         LA    1,1(0,0)            LOAD PARM REG TO SPECIFY BIN  *ISAM*
         L     15,=V(IGC011)       ADDRESS OF TIME SVC           *ISAM*
         BALR  14,15               BRANCH TO IGC011              *ISAM*
         USING *,14                ESTABLISH TEMP ADDRESSABILITY *ISAM*
         L     11,SAVEAPTR         RESTORE PTR TO ACCOUNTING DATA*ISAM*
         L     14,SAVERETN         RESTORE RETURN ADDRESS        *ISAM*
         DROP  14                  RELINQUISH TEMP ADDRESSABILITY*ISAM*
         ST    0,ISAMSTRT          SAVE TIME FOR ISAM CALCULATION*ISAM*
         BR    RETURN              RETURN TO CALLER
         SPACE 2
* ENTRY AT END OF EXECUTION OF USERS PROGRAM FROM IEFSD515
ATTACHB  STH   1,ABENDCOD          SAVE COMPLETION CODE
         NI    JOBFLAGS,X'FF'-USERPROG  STOP HIGH WATER MARK ROUTINE
         BR    RETURN    RETURN TO CALLER
         SPACE 2
* ENTRY FROM PROGRAM WHICH DUMPS THE SYS1.ACCT DATA SET
ACTRESET L     6,CVTJOB(,CVTPTR)   GET ADDRESS OF NUCLEUS WORK AREA
         NI    NWAFLAG(6),255-NWAOPEN   FORCE IEFWAD TO OPEN SYS1.ACCT
         BR    RETURN    RETURN TO CALLER
         SPACE 2
* ENTRY FROM IGG0192C - ISAM OPEN, THIRD LOAD
ISAMFLAG OI    JOBFLAGS,ISAMJOB   SET FLAG IN ACCTG TABLE
         BR    RETURN             RETURN TO CALLER
         SPACE 2
* ENTRY FROM IEFSD515 TO PRESERVE STEP COMPLETION CODE
CONDCODE STH   R1,STEPCOND         STORE STEP COMPLETION CODE
         BR    RETURN              RETURN TO CALLER
         SPACE 2
         DROP  BASE,USERPTR
         EJECT
* THIS ROUTINE, WHILE A PART OF IGC254, IS NEVER ENTERED VIA A SUPER-
* VISOR CALL. IT IS ENTERED FROM I.O.S. BY LOADING THE ENTRY POINT
* ADDRESS AND EXECUTING A BRANCH AND LINK. THE PURPOSE OF THIS ROUTINE
* IS TO GATHER I/O STATISTICS FOR ACCOUNTING.
*
* REGISTER SETTINGS UPON ENTRY ARE -
*   0 - TCB ADDRESS
*   1 - RQE ADDRESS
*   2 - RETURN ADDRESS TO IOS
*   3 - ADDRESS (BASE) OF THIS ROUTINE
*   4 - DCB ADDRESS
*   7 - UCB ADDRESS
*   ALL OTHERS ARE UNPREDICTABLE
         SPACE 2
         USING *,3
COUNTRTN STM   4,1,SAVEAREA   SAVE IOS REGISTERS
         LR    WA,0 PUT TCB ADDRESS WHERE IT CAN BE USED
         L     WA,TCBPIB(WA)       GET PIB ADDRESS
         LA    WA,0(,WA)           CLEAR HIGH-ORDER BYTE
         LTR   WA,WA               TEST IF PIB EXISTS
         BZ    IOSEXIT             NO PIB - SO DO NOTHING
         SR    ACCTGPTR,ACCTGPTR
         IC    ACCTGPTR,PIBPKF(,WA) GET PROTECT KEY FROM PIB
         SRA   ACCTGPTR,4          MOVE OUT INSIGNIFICANT BITS
         SLL   ACCTGPTR,7          MULTIPLY BY 128
         BZ    IOSEXIT             IGNORE TASK IF PROTECT KEY ZERO
         C     ACCTGPTR,=A(TBLEND-TBLSTART) TEST IF INDEX IN RANGE
         BNL   IOSEXIT             IF NOT, IGNORE I/O
         LA    ACCTGPTR,ACCTGTBL(ACCTGPTR)   INDEX USERS ACCTG AREA
         TM    JOBFLAGS,USERPROG   Q.-IS THIS THE SCHEDULER
         BZ    IOSEXIT             B.-RETURN IF IT IS
         LM    IOBREG,DEBREG,4(RQEREG)  RETRIEVE IOB AND DEB ADD
         TM    UCBTYP+2(UCBREG),X'A0'   TEST FOR TAPE OR DISK      EXCP
         BZ    IOSEXIT                  BRANCH IF NOT              EXCP
         LA    WA,DCBMACRF(,DCBREG)     ASSUME LOCATION AFTER OPEN EXCP
         TM    DCBOFLGS(DCBREG),X'10'   Q.-DCB OPENED              EXCP
         BO    *+8                      B.-YES                     EXCP
         LA    WA,DCBMACR(,DCBREG) SET TO LOCATION BEFORE OPEN     EXCP
         TM    0(WA),X'80'    TEST FOR EXCP                        EXCP
         BZ    NOTEXCP        BRANCH IF NOT                        EXCP
         L     WB,=A(7294)         CHARGE USING DEFAULT BLKSIZE    EXCP
         B     TSTDEV               AND DETERMINE DEVICE TYPE
NOTEXCP  LH    WB,DCBBLKSI(,DCBREG)     GET BLOCK SIZE             EXCP
         N     WB,=A(X'7FFF') GET RID OF EXTRANEOUS BITS           EXCP
TSTDEV   CLI   UCBTYP+2(UCBREG),X'80'   Q.-IS THIS TAPE
         BNE   ISDISK                   B.-NO                      EXCP
         M     WA,=F'167'          CALCULATE DATA TRANSFER TIME
         A     WB,=F'80000'        ADD START/STOP TIME               72
         B     CONVERTM  GO CONVERT TO T.U.                          72
ISDISK   M     WA,=F'32' CALCULATE DATA TRANSFER TIME              EXCP
         A     WB,=F'125000'  ADD AVERAGE ROTATIONAL DELAY
         A     WB,=F'150000'       ADD PSEUDO AVERAGE ACCESS TIME
         TM    DCBDSORG(DCBREG),X'80' TEST FOR I.S. ORGANISATION
         BZ    *+8                 BRANCH IF NOT
         OI    JOBFLAGS,ISAMJOB    SET FLAG IN ACCT'G TABLE
CONVERTM M     WA,=F'384'                                            72
DONTFACT A     WB,=F'50000'                                          72
         D     WA,=F'100000'                                         72
STOREIO  A     WB,IONTCHGD    I/O NOW IN TUS                         72
         ST    WB,IONTCHGD                                           72
IOSEXIT  LM    4,1,SAVEAREA   RESTORE REGISTERS
         BR    2    RETURN TO IOS
         EJECT
*                             EQUATES
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
USERPTR  EQU   1    POINTER TO CALLERS DATA AREA
CVTPTR   EQU   3    POINTER TO CVT
TCBMSS   EQU   24   OFFSET TO BOUNDARY BOX ADDR IN TCB
TCBPTR   EQU   4    POINTER TO TCB
ACCTGPTR EQU   11   POINTER TO TASKS ACCOUNTING STORAGE AREA
BASE     EQU   12   BASE REGISTER
RETURN   EQU   14   RETURN ADDRESS TO SVC FLIH
ENTCODE  EQU   15   ENTRANCE CODE
RQEREG   EQU   1    RQE ADDRESS
DCBREG   EQU   4    DCB ADDRESS
IOBREG   EQU   5    IOB ADDRESS
DEBREG   EQU   6    DEB ADDRESS
UCBREG   EQU   7    UCB ADDRESS
WA       EQU   8    WORK REGISTER
WB       EQU   9    WORK REGISTER
CVTBTERM EQU   52   DISPLACEMENT TO ADDRESS OF RESIDENT ABEND ROUTINE
TCBPKF   EQU   28   DISPLACEMENT TO STORAGE PROTECT KEY
USERPROG EQU   X'80'  FLAG BIT TO INDICATE A USER PROG IS EXECUTING
NWAFLAG  EQU   7    DISPLACEMENT TO FLAGS IN THE NUCLEUS WORK AREA
NWAOPEN  EQU   128  FLAG - BIT ON INDICATES SYS1.ACCT IS OPENED
CVTJOB   EQU   12   DISPL. TO ADDR. OF CONTROL BLOCKS USED BY SCHEDULER
UCBTYP   EQU   16   DISPLACEMENT TO DEVICE TYPE FIELD
DCBBLKSI EQU   62   DISPL. TO BLOCK SIZE
DCBDSORG EQU   26                  DISPL. TO DS ORGANISATION IN DCB
DCBOFLGS EQU   48                                                  EXCP
DCBMACRF EQU   42                                                  EXCP
DCBMACR  EQU   50                                                  EXCP
ZERO     EQU   8    CONDITION CODE
ISAMJOB  EQU   4    BIT SETTING   1=THIS STEP USES ISAM          ISAM
PQEREGN  EQU   24   OFFSET TO REGION START ADDRESS IN PQE
TCBPQE   EQU   X'98' OFFSET TO PQE - 8 IN TCB
TCBPIB   EQU   124  OFFSET TO PIB ADDRESS IN TCB
PIBPKF   EQU   24   OFFSET TO PROTECT KEY IN PIB
         SPACE 2
*                             CONSTANTS
         LTORG *              LITERAL POOL
CPUID    DC    H'145'         MACHINE NUMBER IN BINARY               72
         DS    0F   FORCE ALIGNMENT
COMPLCOD DC    X'80CAB000'    ABEND COMPLETION CODE
JOBCOUNT DC    H'0'      INTERNAL JOB NUMBER
         SPACE 2
*                        ACCOUNTING STORAGE AREA
         DS    0D
ACCTGTBL EQU   *-128
TBLSTART EQU   *                   START OF ACCT'G TABLE
         DC    192F'0'             ACCT'G TABLE FOR 6 ELEMENTS
TBLEND   EQU   *                   END OF ACCT'G TABLE
SAVEAREA DS    14F  FOR SAVING IOS REGISTERS
SAVEAPTR DS    F                   TEMPORARY REG SAVE            *ISAM*
SAVERETN DS    F                   TEMPORARY REG SAVE            *ISAM*
         DC    CL8'IGC254'         IDENTIFY MODULE IN CORE DUMP
         SPACE 2
*              GENERATE THE DECIMAL LENGTH OF THIS ROUTINE
         SPACE
$L       EQU   *-IGC254       COMPUTE INTERMEDIATE VALUES
$L1      EQU   $L/100000*100000
$L2      EQU   ($L-$L1)/10000*10000
$L3      EQU   ($L-$L1-$L2)/1000*1000
$L4      EQU   ($L-$L1-$L2-$L3)/100*100
$L5      EQU   ($L-$L1-$L2-$L3-$L4)/10*10
$L6      EQU   $L-$L1-$L2-$L3-$L4-$L5
$LENGTH  EQU   $L1/100000*1048576+$L2/10000*65536+$L3/1000*4096+$L4/100C
               *256+$L5/10*16+$L6  THIS IS THE DECIMAL LENGTH
         EJECT
*                             DSECTS
         SPACE
* THIS DSECT DEFINES THE ACCOUNTING STORAGE AREAS IN THIS ROUTINE
         SPACE
ACTGDATA DSECT
JOBFLAGS DS    C                   JOBFLAGS - BIT ON INDICATES...
*
*                   BIT 01234567
*                       V    VVV
*                       V    VV. USE JOB ACCOUNTING PARMS INSTEAD OF
*                       V    VV     STEP ACCOUNTING PARMS(SET DURING
*                       V    VV     STEP INITIATION)
*                       V    V.. STEP ACCOUNTING RECORD HAS BEEN WRITEN
*                       V    V    (SET DURING STEP TERMINATION)
*                       V    ... ISAM DATA SET OPENED DURING THIS STEP
*                       V         (SET BY ACCOUNTING SVC)
*                       ........ STEP HAS STARTED, HIGH WATER MARK
*                                 ROUTINE MAY OPERATE (SET BY ACCOUNTNG
*                                  SVC ATTACHA ENTRY)
JOBDATE  DS    CL3                 DATE JOB STARTED (YYDDDF)
JOBTIMEB DS    F                   TIME JOB STARTED (BINARY TO .01 SEC)
JOBTIMED DS    F                   TIME JOB STARTED (0HHMMSSF)
         DS    0F                  FORCE ALIGNMENT
MODELNO  DS    C                   MACHINE MODEL NUMBER (BINARY)
STEPDATE DS    CL3                 DATE STEP STARTED (YYDDDF)
STEPTIME DS    F                   TIME STEP STARTED(BINARY TO .01 SEC)
REGANDDS DS    F                   BYTES 1-2 REGION SIZE(BINARY TO 2K)
*                                  BYTE    3 NO. OF TAPE ALOCATIONS(BIN
*                                  BYTE    4 NO. OF DISK ALOC. (BINARY)
JOBNUMBR DS    H                   INTERNAL JOB NUMBER GENERATED BY...
*                                  .ACCOUTING ROUTINE (BINARY)
ABENDCOD DS    H                   SYSTEM ABEND CODE (AAAF)
TOTMCHUN DS    F        JOB TOTALS - MACHINE UNITS
TOTCOMPU DS    F                   - COMPUTE UNITS(BASE 155 CPU TIME)
TOTIOTIM DS    F                   - I/O TIME
TOTISAM  DS    F                   - ISAM TIME
TOTCPU   DS    F                   - CPU TIME (ACTUAL)
TOTCOST  DS    F                   - COST TO .01 DOLLARS
TOTOCPYU DS    F                   - OCCUPANCY UNITS
TOTIOUNT DS    F                   - I/O UNITS
TOTRUN   DS    F                   - RUN TIME
TOTCORUT DS    F                   - CORE UTILIZATION
TOTIOUTL DS    F                   - I/O UTILIZATION
TOTTAPEU DS    H                   - TAPE D.S. ALLOCATIONS
TOTDISKU DS    H                   - DISK D.S. ALLOCATIONS
         DS    6F                  UNUSED
         DS    H                   UNUSED
STEPCOND DS    H                   COMPLEYION CODE RETURNED BY PROGRAM
HWMBYTES DS    F                   HIGH WATER MARK FOR STEP IN BYTES
HWMSTEP  DS    H                   HIGH WATER MARK FOR STEP
*                                    ( FROM IEAQGM )
HWMJOB   DS    H                   HIGH WATER MARK FOR JOB
*                                    ( FROM IEAQGM )
REGNADDR DS    F                   REGION STARTING ADDRESS FROM
*                                    PQE.  BIT 0 IS SET BY STEP
*                                    START CODE IN IGC254 IF THIS
*                                    IS FIRST STEP SINCE IPL.
ISAMSTRT DS    F                   TIME STAMP TAKEN AT ATTACHA ENTRY
*                                   IN IGC254 FOR ELAPSED TIME CALCS
IONTCHGD DS    F                   I/O TIME NOT YET CHARGED...
*                                  .ACCUMULATED IN IGC254 IOS EXIT AND
*                                  .DEDUCTED IN IEAQNU (TIMER UNITS)
IOCHRGD  DS    F                   I/O TIME CHARGED...
*                                  .THE TIME SUBTRACTED OUT BY IEAQNU
*                                  .IN THIS STEP (TIMER UNITS)
DSECTEND DS    0F   END OF DSECT
         SPACE
* THIS DSECT DEFINES AN AREA ACQUIRED BY IEFACTRT WHICH IN FORM AND
* CONTENT, IS THE SAME AS THE ONE ABOVE.
         SPACE
USERDATA DSECT
XJOBFLGS DS    C
XJOBDATE DS    CL3
         DS    F
         DS    F
         DS    0F
         DS    C
XSTEPDTE DS    CL3
         DS    F
         DS    F
         DS    H
         DS    H
XTOTMCHU DS    F
         DS    CL96
         DS    0F   END OF DSECT
         END
/*
//LKED.SYSLMOD DD   DISP=SHR,
//             DSN=SYS1.R206LIB(IGC254)
