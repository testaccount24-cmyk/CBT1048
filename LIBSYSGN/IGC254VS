//IGC254   JOB (1510,B01264,03,0068,024),FMATTA,MSGLEVEL=1,CLASS=A
/*MAIN         TIME=6
//VS254  EXEC ASMGCL,PARM.ASM='LOAD,LREF,ESD,RLD,NOD,FULLX',
//  PARM.LKED='NCAL,RENT,REUS,REFR,XREF,LIST'
//ASM.SYSUT2 DD SEP=SYSUT1
//ASM.SYSIN DD *
         TITLE 'OS/MVT  ACCOUNTING  SVC  -    IGC254'
         ISEQ  73,80
         SPACE
*
* MONSANTO COMPANY - CREVE COEUR
*
*
* THIS RESIDENT SVC ROUTINE CONSISTS OF A SERIES OF SMALL SERVICE
* ROUTINES WHOSE FUNCTIONS ARE THE STORAGE AND RETRIEVAL OF STATISTICS
* REGARDING THE VARIOUS JOBS AND JOB STEPS BEING EXECUTED. THESE
* ROUTINES PROVIDE A METHOD WHEREBY DATA GATHERED IN RATHER DISPARATE
* SECTIONS OF THE OPERATING SYSTEM CAN BE COLLECTED IN ONE PLACE AND
* THEN FED BACK TO AN ACCOUNTING ROUTINE WHEN NEEDED.
*
* SINCE UP TO FIFTEEN JOBS CAN BE EXECUTING CONCURRENTLY, INFORMATION
* REGARDING EACH IS KEPT INVIOLABLE BY SETTING UP THE STORAGE AREA IN
* A MANNER WHICH ALLOWS USE OF THE TASKS STORAGE PROTECT KEY AS AN
* INDEXING DEVICE.
*
* UPON ENTRY, REGISTERS ARE SET AS FOLLOWS -
*    0 - COMMUNICATIONS REGISTER - CURRENTLY UNUSED.
*    1 - DATA, THE ADDRESS OF DATA, OR THE ADDRESS OF WHERE DATA IS TO
*        BE PLACED.
*    2 - UNPREDICTABLE
*    3 - ADDRESS OF THE COMMUNICATIONS VECTOR TABLE.
*    4 - ADDRESS OF THE ACTIVE (CALLERS) TASK CONTROL BLOCK.
*    5 - ADDRESS OF THE LAST ACTIVE REQUEST BLOCK FOR THIS TASK.
*    6-12 - UNPREDICTABLE.
*   13 - CONTAINS THE SAME INFORMATION AS WHEN THIS ROUTINE WAS CALLED.
*   14 - RETURN ADDRESS TO THE SVC FLIH.
*   15 - CONTAINS AN ENTRANCE CODE SPECIFYING THE FUNCTION THAT IS TO
*        BE PERFORMED.
*
* ATTRIBUTES - TYPE-I SVC, DISABLED, AND SERIALLY REUSABLE.
         EJECT
*                             INITIALIZATION
IGC254   START
         USING *+2,BASE  ESTABLISH ADDRESSABILITY - THIS ROUTINE
         USING WRKDSECT,USERPTR
         BALR  BASE,0    SET BASE REGISTER
         NOP   GOON ONE TIME SWITCH                                  72
         OI    *-3,X'F0' SET TO BRANCH                               72
         STIDP CPU                 DETERMINE WHAT MACHINE WE ARE ON
P1       CLC   CPU+1(3),SER165     Q. IS IT 165
         BNE   P2                            N.
         MVI   CPUID,0                       Y. INDEX = 0 FOR 165
         B     ARND1
P2       CLC   CPU+1(3),SER15A     Q. IS IT 15A??
         BNE   P3                            N.
         MVI   CPUID,1                       Y. INDEX = 1 FOR 158 A
         B     ARND1
P3       CLC   CPU+1(3),SER15B     Q. IS IT 15B?
         BNE   P4                            N.
         MVI   CPUID,2                       Y. INDEX = 2 FOR 158 B
         B     ARND1
P4       MVI   CPUID,1             DEFAULT TO 15A
ARND1    EQU   *
*
*        THE FOLLOWING CODE IS DEPENDENT ON A PRIOR ZAP TO IEASMFEX.
*        IEASMFEX HAS BEEN EXPANDED BY 32 BYTES AND AT LOCATION X'D0'
*        THE CHARACTERS 'MISD' HAVE BEEN ZAPPED.  INSTRUCTION '07FE'
*        MUST IMMEDIATELY PRECEDE LOCATION 'D0' FOR VERIFICATION.
*        THIS CODE THEN DYNAMICALLY ZAPS  IEASMFEX TO LINK ITSELF
*        TO IGC254 AT ADDRESS 'IOCOUNT' TO ACCUMULATE THE I/O CHARGE.
*
         L     R6,=V(IEASMFEX)    SMF EXCP COUNTER ROUTINE
         CLC   =C'MISD',X'D0'(R6) Q. MISD PRELIM EXPAND AND ZAP IS ON
         BNE   GOON               A. NO
         LA    R6,X'CE'(R6)       POINT TO LAST INSTR '07FE' IN IEASMFE
         CLC   0(2,R6),=X'07FE'   Q. AT INSTR '07FE'
         BNE   GOON               A. NO
         MVC   0(SMFZAPL,R6),SMFZAP    ZAP AND GET LINK W/IEASMFEX
******************
         NOP   GOON
*
         L     R6,=V(IEAVNU00)    LOAD DISPATCHER ADDRESS
         LA    R6,X'73C'(R6)      POINT TO ADDR FOR COMPARE AND ZAP
         CLC   IOZP,0(R6)         Q. WILL ZAP MATCH TO REPLACE INSTR'S
         BNE   GOON               A. NO
         MVC   0(IOZAPL,R6),IOZAP      ZAP AND GET LINK W/IEAVNU00
GOON     EQU   *
         C     ENTCODE,=A((ADREND-ADRSTART)/4)    Q.-CODE IS VALID
         BL    VALIDCOD                           B.-YES
         L     2,CVTBTERM(,CVTPTR) GET ADDRESS OF RESIDENT ABEND RTN
         LR    0,TCBPTR  INDICATE WHICH TASK TO ABEND AND
         L     1,COMPLCOD  THE COMPLETION CODE
         BR    2    GO TO ABEND - ABEND WILL RETURN TO TYPE-I SVC EXIT
VALIDCOD EQU   *
         SLL   ENTCODE,2 MULTIPLY ENTRANCE CODE BY FOUR
         L     9,ADRSTART(ENTCODE) INDEX THE ENTRY LIST
         BR    9    GO TO THE SPECIFIED ROUTINE
         SPACE 2
* LIST OF ENTRY POINTS FOR FUNCTIONS PERFORMED BY THIS ROUTINE
ADRSTART DC    A(JOBSTART)
         DC    A(NOTIPL)          DUMMY ENTRY
         DC    A(STEPENDA)
         DC    A(NOTIPL)          DUMMY ENTRY
         DC    A(STEPENDA)
ADREND   EQU   *
         EJECT
* ENTRY AT JOB START FROM IEFACTRT
*
JOBSTART MVI   JOBFLAGS,0     INITIALIZE JOB FLAGS
         XC    TOTMCHUN(IOCHRGD+4-TOTMCHUN),TOTMCHUN ZERO OUT TOTALS
         LH    6,JOBCOUNT     GET INTERNAL JOB NUMBER
         CH    6,=H'999' Q.-JOB NUMBER IS AT MAXIMUM
         BNE   *+6       B.-NO
         SR    6,6  RESET IT
         LA    6,1(,6)   BUMP IT BY ONE
         STH   6,JOBCOUNT     SAVE IT
         STH   6,JOBNUMBR     GIVE IT TO THIS JOB
         MVC   MACHINDX,CPUID     INSERT MACHINE INDEX
         NI    REGNADDR,255-X'80'  RESET IPL FLAG
         NOP   NOTIPL              ONE TIME SWITCH
         OI    *-3,X'F0'           SET SWITCH TO BRANCH
         OI    REGNADDR,X'80'      SET FLAG TO INDICATE THIS IS FIRST
*                                   STEP SINCE IPL
NOTIPL   BR    RETURN              RETURN TO CALLER
         SPACE 2
* ENTRY AT THE BEGINNING OF STEP END PROCESSING FROM IEFACTRT
*
STEPENDA MVC   MACHINDX,CPUID      INSERT MACHINE INDEX
         L     WA,TCBPQE(,TCBPTR)  LOAD DUMMY PQE ADDR - 8
         L     WA,8(,WA)           LOAD ADDR OF FIRST PQE
         L     WA,PQEREGN(,WA)     LOAD ADDR OF REGION START
         STCM  WA,7,REGNADDR+1     STORE LOWER ORDER THREE BYTES
         BR    RETURN    RETURN TO CALLER
         SPACE 2
         EJECT
* THIS ROUTINE, WHILE A PART OF IGC254, IS NEVER ENTERED VIA A SUPER-
* VISOR CALL. IT IS ENTERED FROM I.O.S. BY LOADING THE ENTRY POINT
* ADDRESS AND EXECUTING A BRANCH AND LINK. THE PURPOSE OF THIS ROUTINE
* IS TO GATHER I/O STATISTICS FOR ACCOUNTING.
*
* REGISTER SETTINGS UPON ENTRY ARE -
*   0 - TCB ADDRESS
*   1 - RQE ADDRESS
*   2 - RETURN ADDRESS TO IOS
*   4 - DCB ADDRESS
*   7 - UCB ADDRESS
*   ALL OTHERS ARE UNPREDICTABLE
         SPACE 2
         DROP  USERPTR            DROP PRIOR USAGE
         USING WRKDSECT,ACCTGPTR  ACCOUNTING AREA REFERENCE
         USING *,R15              SET BASE
IOCOUNT  STM   4,1,SAVEAREA       SAVE SMFEXCP REGISTERS
         TM    UCBTYP+2(UCBREG),X'A0'   TEST FOR TAPE OR DISK      EXCP
         BZ    SMFEXIT            A. NO - NOT TAPE OR DISK
         TM    UCBTYP+1(UCBREG),4  IS IT A CTC?
         BO    SMFEXIT            A. YES
         LA    WA,DCBMACRF(,DCBREG)     ASSUME LOCATION AFTER OPEN EXCP
         TM    0(WA),X'80'    TEST FOR EXCP                        EXCP
         BZ    NOTEXCP        BRANCH IF NOT                        EXCP
*
*   ATTEMPT TO IDENTIFY 'AMIGOS' EXCP FROM OTHERS                AMGS
*                                                                AMGS
         B     DFLTBLKS           PREVENT AMIGOS FROM 0C4/700 ABEND
         LA    WA,X'90'            LOAD OFFSET(BACKWARDS) OF ID  AMGS
         LR    WB,DCBREG           GET ADDRESS OF DCB            AMGS
         LA    WB,0(,WB)           INSURE HIGH ORDER BYTE IS ZEROAMGS
         SR    WB,WA               WB NOW ADDR OF 'AMIGOS' ID    AMGS
         CLC   0(6,WB),=C'AMIGOS'  IS AMIGOS ID PRESENT          AMGS
         BE    ISAMIGOS            YES - GO PICKUP BLKSIZE       AMGS
*                                  NO  - MIGHT STILL BE AMIGOS   AMGS
*                                        CYL INDEX ACCESS        AMGS
         LA    WB,X'90'(,WB)       RESTORE DCB ADDRESS           AMGS
         ICM   WA,7,5(RQEREG)     LOAD IOB ADDRESS FROM RQE
         SR    WB,WA               DETERMINE OFFSET OF DCB & IOB AMGS
         CLM   WB,7,=X'0003EC'     IS OFFSET SAME AS AMIGOS USES AMGS
         BNE   DFLTBLKS            NO  - NOT AMIGOS,USE DEFAULT  AMGS
*                                  YES - THIS IS PROBABLY AMIGOS AMGS
ISAMIGOS LH    WB,X'34'(,DCBREG)   LOAD AMIGOS BLOCK SIZE        AMGS
*   PUT BLOCK SIZE THRU RANGE CHECK TO INSURE VALIDITY           AMGS
         CLM   WB,3,=H'13030'      IS ASSUMED BLOCK SIZE VALID   AMGS
         BNH   ISDISK              YES - USE IT                  AMGS
*                                  NO  - USE DEFAULT BLOCK SIZE  AMGS
DFLTBLKS L     WB,=A(12500+32*7294) CHARGE USING DEFAULT BLKSIZE AMGS
         B     CONVERTM                   AND RESUME               EXCP
NOTEXCP  LH    WB,DCBBLKSI(,DCBREG)     GET BLOCK SIZE             EXCP
         N     WB,=A(X'7FFF') GET RID OF EXTRANEOUS BITS           EXCP
         CLI   UCBTYP+2(UCBREG),X'80'   Q.-IS THIS TAPE
         BNE   ISDISK                   B.-NO                      EXCP
         M     WA,=F'62' CALCULATE DATA TRANSFER TIME                72
         A     WB,=F'60000'   ADD START/STOP TIME                    72
         B     CONVERTM  GO CONVERT TO T.U.                          72
ISDISK   M     WA,=F'32' CALCULATE DATA TRANSFER TIME              EXCP
         A     WB,=F'125000'  ADD AVERAGE ROTATIONAL DELAY
CONVERTM M     WA,=F'384'                                            72
         SR    R6,R6
         IC    R6,CPUID            MACHINE INDEX TO R6
         SLA   R6,2                MULTIPLY BY 4
         A     WB,ROUND(R6)        FACTOR TO 155 BASE
         D     WA,DENOM(R6)
         LR    ACCTGPTR,TCBREG    TCB ADDRESS
         L     ACCTGPTR,TCBOTC(ACCTGPTR)    GET MOTHER TCB
         L     ACCTGPTR,TCBUSER(ACCTGPTR)   GET TCB ACCOUNTING AREA
         LTR   ACCTGPTR,ACCTGPTR  Q. TCB HAS ACCOUNTING AREA
         BZ    SMFEXIT            A. NO
STOREIO  A     WB,IONTCHGD    I/O NOW IN TUS                         72
         ST    WB,IONTCHGD                                           72
SMFEXIT  LM    4,1,SAVEAREA       RESTORE REGISTERS
         BR    RETURN             RETURN TO SMF AND VS
         EJECT
*---------------------------------------------------------------------*
*              DISPATCHER MOD TO BOMB JOB OFF ON 322
*              WHEN I/O TIME ACCUMULATED EXCEEDS TIME REMAINING
*              FOR THE JOB CPU TIME
*---------------------------------------------------------------------*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R7       EQU   7
R13      EQU   13
TQE      EQU   9
TCBD     EQU   13
TQEFLGS  EQU   0
TQEINCOM EQU   X'08'    INTERVAL IS COMPLETE
TQETYPE  EQU   X'03'    REAL TQE
TQETOD   EQU   X'40'    TOD CLOCK OPTION USED
TQEOFF   EQU   X'80'    NOT ON TIMER QUEUE
TQEVAL   EQU   X'10'
TQESAV   EQU   X'20'    TQE SAVE AREA FOR TASK TQE TIME
         DROP  ACCTGPTR
         USING WRKDSECT,R6
         USING *,R15
IOBOMB   DS    0F                 MUST BE ON FULL WORD ALIGNMENT
         STM   R0,R15,SAVEDSP     SAVE DISPATCHER REGISTERS
         TM    TQEFLGS(TQE),TQEINCOM+TQETYPE Q. TASK TQE/NOT COMPLETE
         BNE   DJS04                         A. NO
*
DJS03    L     R6,TCBUSER(TCBD)   GET ACCOUNTING AREA
         LTR   R6,R6              Q. ACCOUNTING AREA FOUND
         BZ    DSPOUT             A. NO
*
         TM    TQEFLGS(TQE),TQEOFF     Q. ON TIMER QUEUE
         BZ    DSPOUT                  A. YES
         TM    TQEFLGS(TQE),TQEINCOM   Q. INTERVAL COMPLETE
         BO    DSPOUT                  A. YES
         TM    TQEFLGS(TQE),TQETOD Q. TIME-OF-DAY CLOCK USED
         BNZ   DSPOUT              A. YES
         TM    TQEFLGS(TQE),TQETYPE    Q. TASK TQE
         BNZ   DSPOUT                  A. NO
*
         ST    R7,SAVE7           SAVE REG 7
         L      7,IONTCHGD        LOAD I/O TIME IN TIMER UNITS
         CL     7,=F'38400'       CONVERT TO SECONDS
         BL    DSPOUT
         SR    R6,R6              CLEAR IT OR DIVIDE CONQUERS
         D     R6,=F'38400'       CONVERT TO SECONDS
         LR    R6,7
         L     R7,SAVE7           RESTORE REG 7
         L     R0,TQEVAL(TQE)     LOAD JOB TIME REMAINING
         CLR   R0,R6              Q. TIME LEFT LESS THAN I/O TIME
         BH    DSPOUT             A. NO - GET BACK TO DISPATCHER
         LR    R7,R0              SAVE TIME REMAINING IN SECONDS
         M     R6,=F'38400'       CONVERT TO TIMER UNITS
         LR    R0,R7              I/O TIME IN T.U.S TO BE CHARGED
         L     R7,SAVE7           RESTORE REG 7
         L     R6,TCBUSER(TCBD)   GET ACCOUNTING AREA
         LTR   R6,R6              Q. AREA FOR ACCTG THERE
         BZ    DSPOUT             A. NO- LEAVE AND DO NOTHING
         ST    R0,IOCHRGD         I/O TIME CHARGED TO USER
         SR    R0,R0              ZERO R0 - TIME LEFT
         ST    R0,TQEVAL(TQE)     SET JOB TIME LEFT TO ZERO
         ST    R0,IONTCHGD        CLEAR IT OR IT WILL BE CHRGD TO USER
         B     DSPOUT    **********  TEMPORARY BRANCH  ******
         OI    TQEFLGS(TQE),TQEINCOM   SET TIME INTERVAL COMPLETE
DSPOUT   EQU   *
         LR    R6,R15             SAVE BASE
         L     R15,=V(IEAQTE00)   ENQUEUE ENTRY PT IN IEAVTI00
         BALR  R2,R15             GO ENQUEUE TQE
         LR    R15,R6             RESTORE BASE
         LM    R0,R15,SAVEDSP     LOAD DISPATCHER REGISTERS
         BR    R2                 RETURN TO DISPATCHER
*
DJS04    TM    TQEFLGS(TQE),TQETYPE    Q. TASK TQE
         BCR   8,R2                    A. YES - DO NOT PROCESS
         LR    R6,R15             SAVE BASE
         L     R15,=V(IEAQTD01)   DEQUEUE ENTRY PT IN IEAVTI00
         BALR  R2,R15             GO DEQUEUE TQE
         LR    R15,R6             RESTORE BASE
         MVC   TQEVAL(8,TQE),TQESAV(TQE) RESTORE JOB TIME
         NI    TQEFLGS(TQE),X'FF'-TQETYPE   MARK AS TASK TYPE
         B     DJS03              GO ENQUEUE TQE
*
SAVE7    DS    F
SAVEDSP  DS    16F
IOZAP    DC    X'47F0C58A'        THIS CODE WILL ESTABLISH LINKAGE
         DC    A(IOBOMB)          WITH THIS MONSANTO ROUTINE
         DC    X'58F0C586'        TO BOMB OFF WITH 322 ON CPU/IO TIMES
IOZAPL   EQU   *-IOZAP
IOZP     DC    X'910B90004770C60258F0CE5A052F'   CODE IN IEAVNU00
         EJECT
*                             EQUATES
USERPTR  EQU   1    POINTER TO CALLERS DATA AREA
CVTPTR   EQU   3    POINTER TO CVT
TCBPTR   EQU   4    POINTER TO TCB
ACCTGPTR EQU   11   POINTER TO TASKS ACCOUNTING STORAGE AREA
BASE     EQU   12   BASE REGISTER
RETURN   EQU   14   RETURN ADDRESS TO SVC FLIH
ENTCODE  EQU   15   ENTRANCE CODE
RQEREG   EQU   1    RQE ADDRESS
DCBREG   EQU   4    DCB ADDRESS
IOBREG   EQU   5    IOB ADDRESS
DEBREG   EQU   6    DEB ADDRESS
UCBREG   EQU   7    UCB ADDRESS
WA       EQU   8    WORK REGISTER
WB       EQU   9    WORK REGISTER
CVTBTERM EQU   52   DISPLACEMENT TO ADDRESS OF RESIDENT ABEND ROUTINE
TCBPKF   EQU   28   DISPLACEMENT TO STORAGE PROTECT KEY
TCBREG   EQU   0
TCBJSTCB EQU   124
TCBOTC   EQU   132
TCBLTC   EQU   136
TCBUSER  EQU   168                ACCOUNTING AREA OFFSET
R15      EQU   15
CVTJOB   EQU   12   DISPL. TO ADDR. OF CONTROL BLOCKS USED BY SCHEDULER
UCBTYP   EQU   16   DISPLACEMENT TO DEVICE TYPE FIELD
DCBBLKSI EQU   62   DISPL. TO BLOCK SIZE
DCBOFLGS EQU   48                                                  EXCP
DCBMACRF EQU   42                                                  EXCP
DCBMACR  EQU   50                                                  EXCP
ZERO     EQU   8    CONDITION CODE
PQEREGN  EQU   24   OFFSET TO REGION START ADDRESS IN PQE
TCBPQE   EQU   X'98' OFFSET TO PQE - 8 IN TCB
R6       EQU   6                   REGISTER 6
         SPACE 2
*                             CONSTANTS
         LTORG *              LITERAL POOL
CPUID    DS    XL1                 PERMINANT LOC FOR MACHINDX
SER165   DC    XL3'60127'          SERIAL NO. FOR 165
SER15A   DC    XL3'00000'          SERIAL NO. FOR 15A
SER15B   DC    XL3'23633'          SERIAL NO. FOR 15B
         DS    0H
SMFZAP   DC    X'070058F0F0D807FF0000',A(IOCOUNT)
SMFZAPL  EQU   *-SMFZAP
ROUND    DC    F'150000',F'80000',F'80000'   165,15A,15B
DENOM    DC    F'300000',F'160000',F'160000' 165,15A,15B
ABEND222 DC    XL3'002220'         LAST 3 BYTES SHIFTED 8
         DS    0F   FORCE ALIGNMENT
COMPLCOD DC    X'80CAB000'    ABEND COMPLETION CODE
JOBCOUNT DC    H'0'      INTERNAL JOB NUMBER
CPU      DS    D                   CPU ID INFO DOUBLE WORD
SAVEAREA DS    14F  FOR SAVING IOS REGISTERS
SAVEAPTR DS    F                   TEMPORARY REG SAVE
SAVERETN DS    F                   TEMPORARY REG SAVE
         SPACE 2
*              GENERATE THE DECIMAL LENGTH OF THIS ROUTINE
         SPACE
$L       EQU   *-IGC254       COMPUTE INTERMEDIATE VALUES
$L1      EQU   $L/100000*100000
$L2      EQU   ($L-$L1)/10000*10000
$L3      EQU   ($L-$L1-$L2)/1000*1000
$L4      EQU   ($L-$L1-$L2-$L3)/100*100
$L5      EQU   ($L-$L1-$L2-$L3-$L4)/10*10
$L6      EQU   $L-$L1-$L2-$L3-$L4-$L5
$LENGTH  EQU   $L1/100000*1048576+$L2/10000*65536+$L3/1000*4096+$L4/100C
               *256+$L5/10*16+$L6  THIS IS THE DECIMAL LENGTH
         EJECT
*---------------------------------------------------------------------*
* WORKING STORAGE AREA OBTAINED VIA GETMAIN
*
*
WRKDSECT DSECT
* THE FOLLOWING PORTION OF THIS DSECT, DOWN TO THE ACCOUNTING RECORD,
*  DEFINES ONE SEGMENT OF THE ACCOUNTING TABLE STORED IN THE RESIDENT
*  ACCOUNTING SVC. THERE IS ONE SEGMENT FOR EACH JOB IN EXECUTION,
*  INDEXED VIA THE JOBS UNIQUE PROTECT KEY.
*
*
         DS    0F                  FORCE ALIGNMENT
JOBFLAGS DS    C                   JOBFLAGS - BIT ON INDICATES...
*
*                   BIT 01234567
*                       V    VVV
*                       V    VV. USE JOB ACCOUNTING PARMS INSTEAD OF
*                       V    VV     STEP ACCOUNTING PARMS(SET DURING
*                       V    VV     STEP INITIATION)
*                       V    V.. STEP ACCOUNTING RECORD HAS BEEN WRITEN
*                       V    V    (SET DURING STEP TERMINATION)
*                       V    .
*                       V
*                       ........ STEP HAS STARTED, HIGH WATER MARK
JOBDATE  DS    CL3                 DATE JOB STARTED (YYDDDF)
JOBTIMED DS    F                   TIME JOB STARTED (0HHMMSSF)
         DS    0F                  FORCE ALIGNMENT
MACHINDX DS    XL1               CPU INDEX   165=0     15A=1     15B=2
JOBNUMBR DC    H'0'               INTERNAL JOB NUMBER  (IGC254)
TOTMCHUN DS    F        JOB TOTALS - MACHINE UNITS
TOTCOMPU DS    F                   - COMPUTE UNITS(BASE 155 CPU TIME)
TOTIOTIM DS    F                   - I/O TIME
TOTPGMC  DS    F                   - PROGRAM CHARGE
TOTCPU   DS    F                   - CPU TIME (ACTUAL)
TOTCOST  DS    F                   - COST TO .01 DOLLARS
TOTOCPYU DS    F                   - OCCUPANCY UNITS
TOTIOUNT DS    F                   - I/O UNITS
TOTRUN   DS    F                   - RUN TIME
TOTCORUT DS    F                   - CORE UTILIZATION
TOTIOUTL DS    F                   - I/O UTILIZATION
TOTTAPEU DS    H                   - TAPE D.S. ALLOCATIONS
TOTDISKU DS    H                   - DISK D.S. ALLOCATIONS
REGNADDR DS    F                  REGION START ADDRESS (IGC254)
IONTCHGD DS    F                   I/O TIME NOT YET CHARGED...
*                                  .ACCUMULATED IN IGC254 IOS EXIT AND
*                                  .DEDUCTED IN IEAQNU (TIMER UNITS)
IOCHRGD  DS    F                   I/O TIME CHARGED...
*                                  .THE TIME SUBTRACTED OUT BY IEAQNU
*                                  .IN THIS STEP (TIMER UNITS)
JOBWKEND DS    D
JTCB     EQU   JOBWKEND-JOBFLAGS
* END OF NUCLEUS WORKAREA DEFINITION
*---------------------------------------------------------------------*
         END
/*
//LKED.SYSLMOD DD DSN=SYS.VSLINK,DISP=SHR
//LKED.SYSIN DD *
      NAME  IGC254(R)
/*
