//IEFACTRT     JOB  (1306,5,,,104),'ACCOUNTING 370/158',CLASS=N
//STEP01   EXEC  ASMFCL,
//   PARM.LKED='SYSLMOD,IEWL,LIST,XREF,LET,NCAL'
//ASM.SYSIN    DD   *
         TITLE 'MONSANTO OS/MFT ACCOUNTING ROUTINE --- IEFACTRT'
***********************************************************************
*        SPECIAL VERSION OF IEFACTRT TO RE-PRODUCE 370/145 CHARGES    *
*        ON A 370/158.                                                *
*        CPU IS 3.6 TIMES FASTER.                                     *
*        64K ALLOCATED TO EACH UNIT PARTITION INSTEAD OF 52K.         *
***********************************************************************
         EJECT
*
* DESIGNED AND CODED BY D. R. HURTGEN - FEB 1969
*
* REVISED AND RECODED BY L. G. CLARK JR - MAY 1972
*
* MODIFIED FOR MFT BY D.A.MOORCROFT - NOV 1972
*
* MODIFIED FOR 370/158 BY P.S.GRANT -OCT 1976
*
* MONSANTO COMPANY - MANAGEMENT AND INFORMATION SYSTEMS DEPARTMENT
*
* THIS ROUTINE RECORDS THE USE OF RESOURCES IN AN OS MFT ENVIRONMENT.
*  ACCOUNTING DATA IS GATHERED FROM PARAMETERS PASSED FROM OS,
*  MODIFICATIONS TO OS PASSED VIA A RESIDENT ACCOUNTING SVC, AND
*  MODIFICATIONS TO HASP PASSED VIA A DUMMY WTO.
* THE COST OF EACH STEP AND JOB IS CALCULATED BASED ON THE GATHERED
*  ACCOUNTING DATA AND PRINTED VIA SMB AT STEP AND JOB TERMINATION
*  ALONG WITH A SUMMARY OF RESOURCES USED.
* ALL ACCOUNTING DATA IS RECORDED ON A DISK DATA SET( SYS1.ACCT ) AT
*  STEP AND JOB TERMINATION FOR INPUT TO AN MISD BILLING SYSTEM.
*
* THE ACCOUNTING ROUTINE CONSISTS OF THREE LOGICALLY INDEPENDENT
*  ROUTINES...
*   1) JOB AND STEP INITIATION PROCESSING
*   2) STEP TERMINATION PROCESSING
*   3) JOB  TERMINATION PROCESSING
*
* COMMUNICATIONS BETWEEN THE ROUTINES (WHICH ARE SEPARATED BY TIME) IS
*  ACCOMPLISHED VIA AN ACCOUNTING TABLE STORED IN THE RESIDENT
*  ACCOUNTING SVC. THE TABLE IS DIVIDED INTO FIFTEEN PARTS OF 128
*  BYTES, ONE FOR EACH PROTECT KEY A UNIQUE  JOB   MIGHT HAVE DURING
*  EXECUTION.     (NO STORAGE IS USED FOR PROTECT KEY ZERO SINCE JOBS
*  RUNNING UNDER THAT KEY ARE NOT ACCTOUNTED FOR)
*
* ATTRIBUTES - ENABLED, PROBLEM STATE, REENTRANT
*
         PRINT OFF
         TITLE 'MONSANTO OS/MFT ACCOUNTING ROUTINE - IEFACTRT - INITIALX
               IZATION'
         PRINT ON
IEFACTRT START
         USING *,BASEA,BASEB       ESTABLISH ADDRESSABILITY
         STM   0,14,0(13)          SAVE REGISTERS(SCHEDULER CONVENTION)
         LR    BASEA,R15           LOAD BASE REG A
         LA    BASEB,2048          LOAD 2048 CONSTANT
         LA    BASEB,2048(BASEA,BASEB) BASEB NOW BASEA + 4096
*
* INSURE THAT SYSTEM TASKS DO NOT ENTER THIS ROUTINE
*
         L     WA,CVTPTR           LOAD ADDRESS OF CVT
         L     WA,0(,WA)           LOAD ADDRESS DOUBLE WORD OF TCB ADDR
         L     WA,4(,WA)           LOAD ADDRESS OF ACTIVE TCB
         TM    TCBPIB(WA),X'C0'    TEST FOR PBLM PGM PART'N
         BNO   FASTEXIT            YES - NO ACCOUNTING NECESSARY
*                                  NO  - CONTINUE INITIALIZATION
         L     APL,TCBPIB(,WA)     LOAD ADR OF PIB
         LA    APL,0(,APL)         CLEAR HIGH-ORDER BYTE
         LTR   APL,APL             TEST IF PIB EXISTS
         BZ    FASTEXIT            NO PIB - SYSTEM TCB SO EXIT
         TM    PIBPKF(APL),X'F0'   TEST FOR ZERO PROTECT KEY
         BZ    FASTEXIT            YES - NO ACCT'G NECESSARY
*                                  NO - CONTINUE INITIALISATION
*
         USING APLDSECT,APL        ESTABLISH ACCTG. PARM. LIST ADDRESS.
         LR    APL,R1              LOAD PASSED ADDRESS OF ACCTG. PARMS
         L     WA,APLJACTF         NO  - LOAD ADDR ACCTNG. DATA FIELDS
         CLI   0(WA),0             ARE THERE ANY ACCOUNTING FIELDS
         BE    FASTEXIT            NO  - MUST BE JOB STARTED BY 'START'
*                                   COMMAND FROM CONSOLE - IGNORE IT
*                                  YES - CONTINUE INITIALIZATION
* OBTAIN WORKAREA FOR REENTRANT CODE
*
         LR    WA,R0               SAVE ENTRANCE CODE PASSED BY OS
*
         LA    R0,WRKEND-WRKDSECT  SETUP LENGTH OF STORAGE REQUESTED...
*                                  ... AND SUBPOOL ZERO (HIGHORDER BYT)
         GETMAIN R,LV=(0)
         LR    WRK,R1              LOAD ADDRESS OF AQUIRED STORAGE
         USING WRKDSECT,WRK        ESTABLISH ADDRESSABILITY TO WORKAREA
*
* SETUP SAVEAREA CHAINING (THIS IS CONVENTION USED IN THE SCHEDULER)
*
         ST    SAVE,R13SAVE        SAVE ADDRESS OF PREVIOUS SAVE AREA
         LA    SAVE,SAVEAREA       LOAD ADDRESS OF NEW SAVE AREA
*
* DETERMINE WHAT PHASE OF ACCOUNTING IS TO BE DONE ON THIS ENTRY VIA
*  AN ENTRANCE CODE PASSED BY OS
*
         SH    WA,=H'12'           SUBTRACT STEP TERM CODE FROM ENTR.
         BZ    STEPTERM            CODE WAS 12 - STEP TERMINATION
         BP    JOBTERM             CODE WAS 16 - JOB  TERMINATION
*                                  CODE WAS  8 - STEP INITIATION
*
         PRINT OFF
         TITLE 'MONSANTO OS/MFT ACCOUNTING ROUTINE - IEFACTRT - JOB ANDX
                STEP INITIATION PROCESSING'
         PRINT ON
         EJECT
* THIS SECTION OF THE ACCOUNTING ROUTINE HANDLES JOB AND STEP
*  INITIATION PROCESSING. ITS MAIN FUNCTIONS ARE TO VALIDATE ACCOUNTING
*  PARAMETER ENTRIES AND SETUP FOR TERMINATION PROCESSING
*
*
         MVI   JOBFLAGS,0          INITIALIZE ALL FLAG BITS TO ZERO
         L     WF,APLFLSNO         LOAD ADDRESS OF STEP NUMBER(& FLAGS)
         CLI   1(WF),1             IS THIS THE FIRST STEP
         BNE   NOTFIRST            NO  - SKIP JOB ACCTNG. PARM CHECK
*                                  YES - JOB START
*
* THIS IS STEP ONE, JOB START. JOB ACCOUNTING PARMS MUST BE CHECKED
*
         LM    WA,WB,APLJTIME      LOAD ADDRESSES OF COUNT OF PARMS...
*                                  .AND DATA FIELDS
         BAL   LINK,CKPARMS        GO CHECK THE ACCOUNTING PARMS
         B     NOTFIRST            NORMAL RETURN - NO BAD PARMS
*
*  ERROR RETURN FROM ACCOUNTING PARM VERIFICATION SUBROUTINE. SKELETON
*   OF MESSAGE HAS BEEN SETUP BY SUBROUTINE.
*
         MVC   SMBWRITE+L'MESSAGEA(L'JPARMERR),JPARMERR MOVE IN ...
*                                  INDICATION THAT JOB PARMS INVALID
         LA    WA,L'MESSAGEA+L'JPARMERR LOAD LENGTH OF MESSAGE
         STH   WA,MSGLEN(,LCT)     MOVE LENGTH OF MESSAGE TO LCT
         BALR  LINK,R15            BRANCH TO SMB WRITER TO PRINT MSG
         OI    0(WF),BIT7          SETTING THIS BIT ON CAUSES THE...
*                                  .SYSTEM TO CANCEL THE JOB ON RETURN.
*                                  .WF HOLDS ADDRESS FROM APLFLSNO PARM
*
* CHECK STEP ACCOUNTING PARMS IF PRESENT
*
NOTFIRST LM    WA,WB,APLSTIME      LOAD ADDRESSES OF PARM COUNT AND...
*                                  .PARM DATA FIELDS
         CLI   3(WA),0             WERE OPTIONAL STEP PARMS SPECIFIED
         BE    SETFLAG             NO  - SKIP STEP PARM VERIFICATION
         BAL   LINK,CKPARMS        YES - GO CHECK STEP ACCTNG. PARMS
         B     SETFLAG+L'SETFLAG   NORMAL RETURN - STEP PARMS OK TO USE
*
* ERROR RETURN FROM STEP ACCOUNTING PARM CHECK. SKELETON OF ERROR
*  MESSAGE HAS BEEN SETUP BY SUBROUTINE. NOTIFY USER THE JOB
*  ACCOUNTING PARMS WILL BE USED IF VALID.
*
         MVC   SMBWRITE+L'MESSAGEA(L'SPARMERR),SPARMERR INDICATE THAT
*                                  JOB ACCOUNTING PARMS WILL BE USED
         LA    WA,L'MESSAGEA+L'SPARMERR DETERMINE LENGTH OF MESSAGE
         STH   WA,MSGLEN(,LCT)     MOVE LENGTH OF MESSAGE TO LCT
         BALR  LINK,R15            BRANCH TO SMB WRITER TO PRINT MSG
*
* INDICATE JOB ACCOUNTING PARMS TO BE USED
*
SETFLAG  OI    JOBFLAGS,BIT7       SET FLAG ON INDICATING JOB PARMS
* CHECK FLAG BYTE TO SEE IF JOB HAS FAILED
*
REGIONOK TM    0(WF),BIT7          HAS THE JOB FAILED
         BO    RETURN              YES - GO SETUP RETURN TO SYSTEM
*                                  NO  - MAKE FINAL SETUP FOR STEPSTART
*
* THE JOB STEP HAS PASSED ALL CHECKS.
*
         TIME  BIN                 REQUEST CURRENT DATE AND TIME
         ST    R1,STEPDATE-1       SAVE DATE ( YYDDDF FORM)
         ST    R0,STEPTIME         SAVE TIME(BINARY TO .01 SECOND)
*
* ASSUME THIS IS STEP AND NOT JOB START UNTIL CHECKED
*
         LA    R15,STEPSTRT        LOAD STEP START SVC ENTRANCE CODE
*
         CLI   1(WF),1             IS THIS JOB START (STEP 1 )
         BNE   SETUPSVC            NO  - STEP ASSUMPTION CORRECT
*                                  YES - SETUP FOR JOB START
*
* THIS IS JOB START (STEP 1). DO THINGS DONE ONLY AT JOB START.
*
         MVC   JOBDATE(L'JOBDATE+L'JOBTIMEB),STEPDATE JOBSTART DATE &
*                                  TIME WILL BE THE SAME AS FIRST STEP
         BAL   LINK,DECTMCVT       CONVERT JOB START TIME (STEP 1 TIME
*                                   LEFT IN R0) TO DECIMAL HHMMSS
         ST    WD,JOBTIMED         STORE HHMMSS TIME OF JOB START
*
*
         LA    R15,JOBSTART        SETUP ACCOUNTING SVC ENTRANCE CODE
*                                   FOR JOB START
* ISSUE ACCOUNTING SVC TO SAVE DATA COLLECTED FROM JOB/STEP START
*  IN RESIDENT SVC ACCOUNTING TABLE.
*
SETUPSVC LA    R1,JOBFLAGS         LOAD ADDRESS OF COLLECTED DATA
         SVC   ACCTG               GO TO ACCOUNTING SVC
*
         EJECT
*
* ACCOUNTING FUNCTIONS COMPLETE FOR THIS ENTRY. RETURN TO SYSTEM.
*
*  FREE AREA OBTAINED FOR WORKSPACE
*
RETURN   LR    R1,WRK              LOAD ADDRESS OF AREA TO BE FREED
         L     R0,=A(WRKEND-WRKDSECT) LOAD LENGTH OF AREA TO BE FREED
         FREEMAIN R,LV=(0),A=(1)   FREE THE AREA
*
*  RESTORE ADDRESSABILITY TO PREVIOUS SAVE AREA
*
         L     SAVE,R13SAVE        LOAD ADDRESS OF PREVIOUS SAVE AREA
*
*  RESTORE REGISTERS TO  STATE BEFORE ENTRY TO THIS ROUTINE
*
FASTEXIT LM    0,14,0(13)          RESTORE THE REGISTERS FROM THE
*                                   PREVIOUS SAVE AREA
         BR    LINK                RETURN TO OS
*
***********************************************************************
         PRINT OFF
         TITLE 'MONSANTO OS/MFT ACCOUNTING ROUTINE - IEFACTRT - STEP TEX
               RMINATION PROCESSING'
         PRINT ON
         EJECT
***********************************************************************
*  STEP TERMINATION PROCESSING
*
*   A STEP ACCOUNTING RECORD WILL BE WRITTEN TO THE ACCOUNTING DATA
*    SET DURING STEP-END PROCESSING. THE RECORD IS COMPLETED FROM DATA
*    GATHERED AT STEP-START, DATA GATHERED BY MODIFICATIONS IN MFT
*    NUCLEUS AND SCHEDULER CODE, AND DATA NORMALLY FURNISHED BY THE
*    SYSTEM UPON ENTRY TO THE ACCOUNTING ROUTINE. THE COST OF THE STEP
*    IS ALSO CALCULATED AT THIS TIME. SEVERAL LINES OF SMB'S (REFERRED
*    TO AS THE SMB ACCOUNTING BOX) ARE WRITTEN TO LET THE USER KNOW
*    THE COST OF THE STEP AND WHAT RESOURCES WERE INCLUDED IN THE COST.
*    JOB TOTALS ARE UPDATED AT THIS TIME FOR LATER USE IN JOB-END
*    PROCESSING.
*
*
* RETRIEVE ACCOUNTING INFORMATION STORED IN THE RESIDENT ACCOUNTING
*  SVC AT STEP-START.
*
STEPTERM LA    R15,STEPENDA        SET SVC ENTRANCE CODE
         LA    R1,JOBFLAGS         LOAD ADDRESS OF RETURNING DATA
         SVC   ACCTG               RETRIEVE THE DATA
*
* DETERMINE IF STEP EVER EXECUTED
*
         LH    WA,REGANDDS         LOAD STEP'S REGION SIZE
         LTR   WA,WA               IS REGION SIZE ZERO
         BZ    RETURN              YES - THIS STEP NEVER EXECUTED
*                                  NO  - CONTINUE
*
* SETUP POINTERS TO THE ACCOUNTING PARAMETERS
*
         LM    WC,WD,APLJTIME      LOAD ADDRESSES OF JOB PARMS
         TM    JOBFLAGS,BIT7       ARE JOB ACCTNG. PARMS TO BE USED
         BO    RESETJFL            YES - SKIP SETTING STEP PARMS
         LM    WC,WD,APLSTIME      NO  - LOAD ADDRS OF STEP PARMS
RESETJFL NI    JOBFLAGS,255-BIT7   RESET FLAG IF SET
*
* INITIALIZE ACCOUNTING RECORD
*
         BAL   LINK,SETEMUP        BRANCH TO INITIALIZING SUBROUTINE
*                                   WD = ADDR STEP NAME ON RETURN
* COMPLETE ACCOUNTING RECORD
*
*   STEP NAME
*
         MVC   ACTSNAME,0(WD)      MOVE STEP NAME TO ACCOUNTING RECORD
*
*   PROGRAM NAME
*
         MVC   ACTSPGM,=C'*.SN.DDN' INITIALIZE PROGRAM NAME
         L     WF,LCTSCTAD(,LCT)   LOAD ADDRESS OF STEP CONTROL TABLE
         TM    SCTSTYPE(WF),X'80'  DID EXEC CARD USE PGM REFERBACK
         BO    NOTDATYP            YES - LEAVE AS INITIALIZED
         MVC   ACTSPGM,SCTPGMNM(WF) NO - MOVE IN PROGRAM NAME
*
*   HIGH WATER MARK ( CORE USED )
*
NOTDATYP LH    WA,HWMSTEP          LOAD STEP HIGH WATER MARK(CORE USED)
         CVD   WA,WORKAREA         CONVERT IT TO DECIMAL
         MVC   ACTHIWTR,WORKAREA+5 MOVE CORE USED TO ACCTNG. RECORD
*
*   REGION START ADDRESS AND IPL FLAG
*
         MVC   ACTRADDR,REGNADDR   MOVE IN REGION ADDR & IPL FLAG
*
* GET I/O TIME ( LEAVE IN WD )
*
         L     WD,IONTCHGD         LOAD I/O TIME NOT CHARGED
         A     WD,=A(180*128/2)    CONVERT FROM TIMER ...
         SR    WC,WC                ... UNITS TO HUNDREDTHS ...
         D     WC,=A(180*128)        ... OF A MINUTE
*
*   WD NOW CONTAINS I/O TIME IN HUNDREDTHS OF A MINUTE
*
* GET TOTAL CPU TIME USED.
*        CONVERT TIME FOR 370/158 TO 370/145 BASE MACHINE
*        EQUIVALENT.
*
         L     R1,APLSTIME         ADDRESS OF CPU TIME PASSED BY OS
         L     R0,0(0,R1)          LOAD STEP CPU TIME
         SRL   R0,8                TIME IS IN BYTES 1-3,SHIFT OUT BYTE4
         BAL   LINK,BINGOON        CONVERT FROM HUND.SEC TO HUND.MIN
         LTR   R1,R1               IS STEP CPU TIME ZERO?
         BNZ   *+8                 NO. SKIP MSI.
         LA    R1,1                YES. FORCE MIN CPU TIME (0.01 MIN)
         MH    R1,=H'10'           SCALE TO 3 DECIMAL POSITIONS.
         LR    WE,R1               SAVE REAL CPU TIME IN WE
*        IF CPU TIME GTR THAN 0.01 MIN, APPLY FACTOR OF 3.6 TO CONVERT
*        370/158 TIME TO 370/145 EQUIVALENT.
         C     R1,=F'10'           IS CPU TIME GTR. THAN 0.01 MIN.
         BNH   NOFACTOR            NO. SKIP FACTORISATION.
         MH    R1,FACTOR           YES. APPLY CPU CONVERSION FACTOR
         SR    R0,R0               CLEAR R0 FOR DIVIDE
         AH    R1,=H'5'            HALF ADJUST
         D     R0,=F'10'           SCALE TO 3 DEC POSITIONS
NOFACTOR EQU   *
         CVD   R1,WORKAREA         CONVERT BASE 155 COMPUTE UNITS TODEC
         MVC   ACTCOMPU,WORKAREA+4 MOVE TO ACCOUNTING RECORD
*
*   UPDATE COMPUTE UNITS TOTAL
*
         LR    WC,R1               SAVE COMPUTE UNITS FOR LATER USE
         A     R1,TOTCOMPU         ADD ACCUMULATED COMPUTE UNITS
         ST    R1,TOTCOMPU         STORE UPDATED TOTAL
*
*   I/O TIME ( LEAVE IN WD)
*
         CVD   WD,WORKAREA         CONVERT BASE 155 I/O TIME TO DECIMAL
         MVC   ACTIOTIM,WORKAREA+5 MOVE I/O TIME TO ACCTNG. RECORD
*
*   UPDATE I/O TIME TOTAL
*
         L     R1,TOTIOTIM         LOAD ACCUMULATED I/O TIME
         AR    R1,WD               ADD I/O TIME FROM THIS STEP
         ST    R1,TOTIOTIM         UPDATE I/O TIME TOTAL
*
         MH    WD,=H'10'           SCALE FROM 2 TO 3 FRACTIONAL POS.
*
* MOVE REAL CPU TIME TO ACCOUNTING RECORD
*
         LR    R1,WE               LOAD REAL CPU TIME
         SR    R0,R0               ZERO REGISTER FOR DIVIDE
         AH    R1,=H'5'            HALF ADJUST
         D     R0,=F'10'           SCALE CPU TIME FROM 3 TO 2 FRACT.
         CVD   R1,WORKAREA         CONVERT CPU TIME TO DECIMAL
         MVC   ACTCPUTM,WORKAREA+5 MOVE TO ACCTNG. RECORD
*
* UPDATE CPU TIME ACCUMULATOR FOR JOB TOTAL
*
         A     R1,TOTCPU           ADD CPU TIME FROM PREVIOUS STEPS
         ST    R1,TOTCPU           UPDATE TOTAL CPU TIME
*
* GET TIME OF DAY STEP ENDED
*
         TIME  BIN                 RETURN BINARY TIME IN R0
         ST    R0,TEMP1            SAVE TIME FOR LATER USE
         BAL   LINK,BINTMCVT       CONVERT FROM HUND.SEC TO HUND.MIN
         CVD   R1,WORKAREA         CONVERT TIME TO DECIMAL
         MVC   ACTSTIME,WORKAREA+4 TIME STEP ENDED TO ACCTNG. REC
*
* CALCULATE ELAPSED STEP TIMES
*
*   ELAPSED TIME INCLUDING DATA SET ALLOCATION TIME
*
         LR    WA,R1               SAVE TIME STEP ENDED
         LR    WF,R1               SAVE TIME STEP ENDED
         L     R0,STEPTIME         LOAD STEP START TIME(FROM INITIATION
         BAL   LINK,BINTMCVT       CONVERT FROM HUND.SEC TO HUND.MIN
         SR    WF,R1               SUBTRACT START TIME FROM END TIME
         BNM   *+8                 BRANCH IF STEP DID NOT CROSS MIDNITE
         A     WF,=F'144000'       CROSSED MIDNIGHT - ADD ONE DAY
         ST    WF,ELAPSTM2         STORE ELAPSED TIME(INCL. D.S. ALOC.)
*
*   ELAPSED TIME EXCLUDING DATA SET ALLOCATION TIME
*
         L     R0,ISAMSTRT         GET STEP START TIME(TAKEN AT ATTACH)
         BAL   LINK,BINTMCVT       CONVERT FROM HUND.SEC TO HUND.MIN
         SR    WA,R1               SUBTRACT START FROM END FOR ELAPSED
         LR    R1,WA               MOVE ELAPSED TIME TO R1
         BNM   *+8                 BRANCH IF STEP DID NOT CROSS MIDNITE
         A     R1,=F'144000'       CROSSED MIDNITE - ADJUST
         ST    R1,ELAPSTIM         STORE ELAPSED TIME OF STEP
*
* TEST FOR ISAM CHARGING
*
         TM    JOBFLAGS,BIT5       WAS AN ISAM D.S. OPENED IN THIS STEP
         BZ    NOTISAM             NO  - SKIP ISAM CODE
         NI    JOBFLAGS,255-BIT5   YES - RESET ISAM FLAG
* CALCULATE ISAM CHARGE  ( LEAVE IN R1 )
*
         M     R0,=F'9'            COMPUTE ...
         AH    R1,=H'1'             ... 45 PERCENT ...
         D     R0,=F'2'              ... ELAPSED & SCALE TO 3 FRACT.
         SR    R1,WC               SUBTRACT OUT COMPUTE UNITS
         SR    R1,WD               SUBTRACT OUT I/O TIME
         BP    *+6                 IF A POSITIVE VALUE IS IN R1, THEN
*                                   IT IS THE TIME NECESSARY TO BRING
*                                   THE CHARGE UP TO THE MINIMUM ISAM
*                                   45 PERCENT CHARGE. ELSE THE CHARGE
*                                   IS OR EXCEEDS THE MINIMUM CHARGE
*                                  AND THERE IS NO EXTRA ISAM CHARGE.
*
NOTISAM  SR    R1,R1               ZERO THE ISAM CHARGE REGISTER
         CVD   R1,WORKAREA         CONVERT ISAM CHARGE TO DECIMAL
         MVC   ACTISAM,WORKAREA+4  MOVE TO ACCTNG. RECORD
*
* UPDATE ISAM TOTAL
*
         L     R0,TOTISAM          LOAD ACCUMULATED ISAM TIME
         AR    R0,R1               ADD IN ISAM TIME FROM THIS STEP
         ST    R0,TOTISAM          STORE UPDATED ISAM TOTAL
*
* COMPUTE RUN_TIME = ISAM + I/O + COMPUTE_UNITS  (LEAVE IN R1)
*
         AR    R1,WC               ADD COMPUTE_UNITS TO ISAM TIME
         AR    R1,WD               ADD IN I/O TIME TO GET RUN_TIME
         ST    R1,RUNTIME          STORE RUN_TIME FOR USE IN SMB BOX
*
* UPDATE RUN TIME TOTAL
*
         L     WC,TOTRUN           LOAD ACCUMULATED RUN TIME
         AR    WC,R1               ADD IN RUNTIME FROM THIS STEP
         ST    WC,TOTRUN           STORE UPDATED RUNTIME TOTAL
*
* TAPE ALLOCATIONS
*
         SR    WC,WC               ZERO WORK REGISTER
         IC    WC,REGANDDS+2       LOAD NO. OF TAPE ALLOCATIONS
         CVD   WC,WORKAREA         CONVERT TO DECIMAL
         MVC   ACTTAPEU,WORKAREA+6 MOVE TO ACCOUNTING RECORD
*
*  UPDATE TAPE ALLOCATION ACCUMULATOR
*
         LH    WD,TOTTAPEU         LOAD ACCUMULATED TAPE ALLOCS
         AR    WD,WC               ADD IN TAPE ALLOC THIS STEP
         STH   WD,TOTTAPEU         UPDATE ACCUMULATOR
*
* DISK ALLOCATIONS
*
         SR    WD,WD               ZERO WORK REGISTER
         IC    WD,REGANDDS+3       LOAD NO. OF DISK ALLOCATIONS
         CVD   WD,WORKAREA         CONVERT TO DECIMAL
         MVC   ACTDISKU,WORKAREA+6 MOVE TO ACCTNG. RECORD
*
*  UPDATE DISK ALLOCATION ACCUMULATOR
*
         LH    WA,TOTDISKU         LOAD ACCUMULATED DISK ALLOCS
         AR    WA,WD               ADD IN DISK ALLOC THIS STEP
         STH   WA,TOTDISKU         UPDATE ACCUMULATOR
*
* FIND TOTAL UNITS ALLOCATED
*
         AR    WD,WC               ADD DISK AND TAPE TO GET TOTAL IN WD
         STH   WD,TALOCS           STORE TOTAL ALOCS FOR I/O UTIL.
*
* COMPUTE I/O UNITS = NO. ALLOCATIONS * K2 * RUN_TIME (LEAVE IN WD)
*
         M     WC,=F'84'           MULT TOTAL ALOC. BY K2 (K2=.084)
         MR    WC,R1               MULT BY RUNTIME
         AH    WD,=H'500'          HALF ADJUST
         D     WC,=F'1000'         SCALE TO THREE FRACT. DEC PLACES
         CVD   WD,WORKAREA         CONVERT I/O UNITS TO DECIMAL
         MVC   ACTIOUNT,WORKAREA+4 MOVE TO ACCTNG. RECORD
*
* UPDATE I/O_UNIT ACCUMULATOR
*
         L     WC,TOTIOUNT         LOAD ACCUMULATED I/O_UNITS
         AR    WC,WD               ADD I/O_UNITS FROM THIS STEP
         ST    WC,TOTIOUNT         STORE UPDATED TOTAL
*
* DETERMINE IF THE PART'N SIZE IS AN EXACT MULTIPLE OF A UNIT PART'N.
*  IF IT IS NOT, THEN IT IS ASSUMED THAT THE JOB IS NOT RUNNING UNDER
*  HASP, AND REQUESTED SIZE = MAX( PART'N_SIZE , REQ SIZE )
*
         LH    WF,REGANDDS         RETRIEVE PART'N SIZE
         CVD   WF,WORKAREA+8       CONVERT IT TO DECIMAL FOR LATER
         SR    WE,WE               ZEROISE HI-ORDER BITS OF 64-BIT FLD
         D     WE,UNITPART         DIVIDE BY UNIT PART'N SIZE
         LTR   WE,WE               TEST FOR RENAINDER
         BZ    REGNEND             IF NONE, ASSUME HASP IN CONTROL
         PACK  WORKAREA,ACTREGJC   PACK REQUESTED PART'N SIZE
         CP    WORKAREA,WORKAREA+8 COMPARE REQUESTED WITH ACTUAL SIZE
         BNL   REGNEND             BRANCH UNLESS ACTUAL LARGER
         UNPK  ACTREGJC,WORKAREA+8 MOVE ACTUAL SIZE TO REQUESTED
         OI    ACTREGJC+3,X'F0'    'OR' SIGN TO HEX 'F'
REGNEND  EQU   *                   END OF ROUTINE
*
* DETERMINE REGION SIZE = MAX( CORE_USED , REGION_REQUESTED )
*
         PACK  WORKAREA,ACTREGJC   PACK REQUESTED PART'N SIZE
         CVB   WF,WORKAREA         CONVERT TO BINARY
         CH    WF,HWMSTEP          IS REQUESTED GREATER THAN CORE USED
         BH    REGNSET             YES - USED REQUESTED REGION
         LH    WF,HWMSTEP          NO  - USE CORE_USED FOR REGION SIZE
REGNSET  CVD   WF,WORKAREA         CONVERT IT TO DECIMAL
         MVC   ACTREGNR,WORKAREA+5 MOVE REGION SIZE TO ACCOUNTING REC.
* CONVERT MAX ( CORE_REQUESTED, CORE_USED ) INTO TERMS OF 'UNIT'
*  PARTITIONS, WHERE 1 UNIT-PARTITION = '64K'
         SR    WE,WE               ZEROISE HI-OREDER BITS OF 64-BIT NO.
         D     WE,UNITPART         DIVIDE BY 'UNIT'-PART'N SIZE
         LTR   WE,WE               TEST FOR REMAINDER
         BZ    *+8                 BRANCH IF NONE
         LA    WF,1(,WF)           INCREMENT QUOTIENT IF REMAINDER
         M     WE,UP52K            RECREATE MULTIPLE OF 52K UNIT-PARTN
*                                  SO CHARGES ARE SAME AS 370/145.
         STH   WF,REGNSAVE         SAVE FOR LATER USE
*
* COMPUTE OCCUPANCY UNITS = K1 * REGION * (.90 + .0013 * REGION)
*                              * (RUN_TIME + SCHEDULER_TIME)
*                                               (LEAVE IN WF)
         MH    WF,=H'13'           REGION * .0013
         AH    WF,=H'9000'           + .90
         MH    WF,REGNSAVE             * REGION
         M     WE,=F'93'                 * K1 ( = .0093)
         A     WF,=F'5000'                 HALF ADJUST
         D     WE,=F'10000'                  SCALE TO 4 DEC PLACES
         A     R1,=F'190'           RUN_TIME + SCHEDULER_TIME (=.19)
         MR    WE,R1
         A     WF,=F'5000'         HALF ADJUST
         D     WE,=F'10000'        SCALE OCCUPANCY_UNITS TO 3 DEC POS.
         CVD   WF,WORKAREA         CONVERT OCCUPANCY_UNITS TO DECIMAL
         MVC   ACTOCPYU,WORKAREA+4 MOVE TO ACCTNG. RECORD
*
* UPDATE OCCUPANCY UNITS ACCUMMULATOR
*
         L     WE,TOTOCPYU         LOAD ACCUMULATED OCCUPANCY UNITS
         AR    WE,WF               ADD IN OCCUPANCY_UNITS THIS STEP
         ST    WE,TOTOCPYU         STORE UPDATED TOTAL OCCUPANCY UNITS
*
* COMPUTE MACHINE_UNITS = OCCUPANCY_UNITS + I/O_UNITS
*
         AR    WD,WF               I/O_UNITS + OCCUPANCY_UNITS
         CVD   WD,WORKAREA         CONVERT MACHINE_UNITS TO DECIMAL
         MVC   ACTMCHUN,WORKAREA+4 MOVE TO ACCOUNTING RECORD
*
* UPDATE MACHINE_UNITS ACCUMULATOR
*
         ST    WD,TEMPMCHU         SAVE MACHINE UNITS IN CASE BACKOUT
         A     WD,TOTMCHUN         ADD ACCUMULATED TO UNITS THIS STEP
         ST    WD,TOTMCHUN         UPDATE ACCUMULATED MACHINE_UNITS
*
* STEP START TIME
* BEFORE D/S ALLOCATION
         L     R0,STEPTIME         LOAD TIME STEP STARTED(BINARY)
         BAL   LINK,BINTMCVT       CONVERT FROM HUND.SEC TO HUND.MIN
         CVD   R1,WORKAREA         CONVERT TO DECIMAL
         MVC   ACTSTIMS,WORKAREA+4 MOVE STEP START TIME TO ACCTNG. REC.
* AT ATTACH (AFTER D/S ALLOCATION)
         L     R0,ISAMSTRT         LOAD TIME TASK ATTACHED
         BAL   LINK,BINTMCVT       CONVERT TO HUND.MIN
         CVD   R1,WORKAREA         CONVERT TO DECIMAL
         MVC   ACTSTIMA,WORKAREA+4 MOVE STEP ATTACH TIME TO ACCTNG. REC
*
* STEP START DATE
*
         MVC   ACTSDATS,STEPDATE   MOVE STEP START DATE TO ACCTNG. REC
*
*  DETERMINE CORE AND I/O UNITS AVAILABLE ON MACHINE AT TIME OF DAY
*   THAT STEP STARTED
*
         LH    WC,=H'704'          CORE AVAILABLE TO MFT ON 370/158
         LH    WD,=H'13'      I/O UNITS AVAILABLE TO MFT ON 370/158
*
* CORE AVAIL IN WC  ---  I/O UNITS AVAIL IN WD
*
*  CALCULATE CORE UTILIZATION
*    ACTCORUT = ( REGION_SIZE / CORE_AVAIL ) * ELAPSED_TIME
*
RAVALSET L     R1,ELAPSTM2         LOAD STEP ELAPSED TIME(INCL.DS.ALOC)
         M     R0,=F'10'           FACTOR UP TO 3 DECIMAL PLACES(FROM2)
         MH    R1,REGANDDS         MULTIPLY ELAPSED BY REGION
*                                   OBTAINED(RATHER THAN REG REQUESTED)
         DR    R0,WC               CORE UTILIZATION IN R1(TO .001 MIN)
         CVD   R1,WORKAREA         CONVERT CORE UTIL. TO DECIMAL
         MVC   ACTCORUT,WORKAREA+4 MOVE CORE UTIL. TO ACCT. RECORD
*
*  UPDATE CORE UTILIZATION ACCUMULATOR
*
         A     R1,TOTCORUT         ADD IN ACCUMULATED TOTAL
         ST    R1,TOTCORUT         UPDATE TOTAL
*
*  CALCULATE I/O UTILIZATION
*    ACTIOUTL = ( DATA_SETS_USED/DATA_SETS_AVAIL) * ELAPSED_TIME
*
         L     R1,ELAPSTM2         LOAD STEP ELAPSED TIME(INCL.DS.ALOC)
         M     R0,=F'10'           FACTOR UP TO 3 DECIMAL PLACES(FROM2)
         LH    WE,TALOCS           LOAD NUMBER OF DATA SETS USED
         MR    R0,WE               MULT. ELAPSED TIME BY NO. DATA SETS
         DR    R0,WD               I/O UTILIZATION IN R1 (TO .001 MIN)
         CVD   R1,WORKAREA         CONVERT I/O UTIL. TO DECIMAL
         MVC   ACTIOUTL,WORKAREA+4 MOVE I/O UTIL. TO ACCT. RECORD
*
*  UPDATE I/O UTILIZATION ACCUMULATOR
*
         A     R1,TOTIOUTL         ADD IN ACCUMULATED TOTAL
         ST    R1,TOTIOUTL         UPDATE TOTAL
*
* GET JOB CLASS AND PRIORITY
*
         BAL   LINK,GETENVIR       MOVE CLASS & PRIO TO ACCTNG. REC
*
* CALCULATE STEP COST
*
         CLI   ACTJCLAS,C'M'       IS THIS A CLASS 'M' JOB
         BNE   NOTCLSM             NO  - SKIP CLASS M CODE
*    MACHINE UNITS FIELD IS ACTUALLY ELAPSED TIME FOR CLASS M
         L     R1,ELAPSTIM         YES - RETRIEVE STEP ELAPSED TIME
         M     R0,=F'10'           SCALE TO THREE FRACT. POSITIONS
         CVD   R1,WORKAREA         CONVERT TO DECIMAL
         MVC   ACTMCHUN,WORKAREA+4 MOVE TO ACCOUNTING RECORD
*                                   CLASS M JOBS ARE COSTED BASED ON
*                                   ELAPSED TIME
         L     R0,TOTMCHUN         LOAD MACHINE UNITS TOTAL
         S     R0,TEMPMCHU         SUBTRACT OUT MACH.U. THIS STEP
         AR    R0,R1               UPDATE WITH ELAPSED TIME
         ST    R0,TOTMCHUN         STORE UPDATED TOTAL
*
*
*   SEARCH FOR JOB CLASS IN COST RATE TABLE
*
NOTCLSM  LA    R0,(RATEND-RATABLE)/6     R0 = NO.OF TABLE ENTRIES
         LA    R1,RATABLE                R1= ADDR OF START OF TABLE
RATSERCH CLC   0(1,R1),ACTJCLAS    DOES JOB CLASS MATCH TABLE ENTRY
         BE    RATEFOND            YES - GO CALCULATE COST
         LA    R1,6(,R1)           NO  - STEP TO NEXT TABLE ENTRY
         BCT   R0,RATSERCH         LOOP UNLESS TO END OF TABLE
         LA    R1,RATABLE          CLASS NOT IN TABLE,ASSUME FIRST RATE
*
*   MAKE COST CALCULATION BASED ON RATE ADDRESSED VIA REG 1
*
RATEFOND ZAP   WORKAREA(8),ACTMCHUN MOVE MACH UNITS TO DOUBLE WORD
         CVB   WD,WORKAREA         CONVERT MACHINE UNITS TO BINARY
         LH    WC,4(,R1)           LOAD RATE FOR THIS CLASS
         CLC   2(2,R1),ACTJPRIO    WAS THRESHOLD PRIORITY EXCEEDED
         BNL   NORMRATE            NO  - USE NORMAL RATE
         AR    WC,WC               YES - DOUBLE THE RATE
NORMRATE MR    WC,WC               MACHINE_UNITS * RATE
         A     WD,=F'500'          HALF ADJUST
         D     WC,=F'1000'         SCALE TO 2 FRACT. DEC POS.
         CVD   WD,WORKAREA         CONVERT STEP COST TO DECIMAL
         MVC   ACTCOST,WORKAREA+4  MOVE TO ACCOUNTING RECORD
*
* UPDATE TOTAL JOB COST
*
         A     WD,TOTCOST          ADD ACCUMULATED COST TO STEP COST
         ST    WD,TOTCOST          UPDATE TOTAL JOB COST
*
* STEP ACCOUNTING RECORD IS NOW COMPLETE - WRITE IT
*
         OI    JOBFLAGS,BIT6       INDICATE STEP RECORD WRITTEN
*
         BAL   LINK,ACCTGWTR       GO WRITE THE ACCOUNTING RECORD
***********************************************************************
*
* PRINT THE SMB STEP ACCOUNTING BOX
*
*    LINE 0
*
         MVI   SMBWRITE,C' '       PUT SPACE AT START OF LINE ...
         MVC   SMBWRITE+1(L'SMBWRITE-1),SMBWRITE ... & PROPAGATE
         LA    WC,SMBWRITE         LOAD ADDR OF LINE 1
         ST    WC,MSGADDR(,LCT)    PUT ADDR IN THE LCT
         LA    WC,L'SMBWRITE       LOAD LENGTH OF ACCTNG. BOX SMB
         STH   WC,MSGLEN(,LCT)     PUT LENGTH IN LCT
         L     R15,=V(IEFYS)       LOAD ADDR OF SMB WRITER
         BALR  LINK,R15            BRANCH TO SMB WRITER
*
*  LINE 1
*
         MVI   SMBWRITE,C'*'       MOVE FILL CHARACTER TO LINE 1
         MVC   SMBWRITE+1(L'SMBWRITE-1),SMBWRITE PROPAGATE FILL CHAR
         MVC   SMBWRITE+((L'SMBWRITE-L'ACCTGHDR)/2)(L'ACCTGHDR),ACCTGHDX
               R                   MOVE MISD NAME TO LINE 1
         L     R15,=V(IEFYS)       LOAD ADDR OF SMB WRITER
         BALR  LINK,R15            PRINT THE LINE
*
*  LINE 2
*
         MVI   SMBWRITE+1,C' '     CLEAR THE LINE LEAVING AN ASTERISK..
         MVC   SMBWRITE+2(L'SMBWRITE-3),SMBWRITE+1 ... AT EACH END
*
*  MOVE ACCOUNTING STATISTICS TO SMB PRINT LINE
         L     R0,STEPTIME         GET START TIME IN BINARY
         BAL   LINK,DECTMCVT       CONVERT START TIME TO DECIMAL
         ST    WD,WORKAREA         STORE IN 0HHMMSSF FORM
         MVC   STPLDPTA+11(L'TIMEEDWD),TIMEEDWD LOAD EDIT MASK
         ED    STPLDPTA+11(L'TIMEEDWD),WORKAREA EDIT IT TO HH.MM.SS
*
         LH    WD,REGANDDS         GET PART'N SIZE
         CVD   WD,WORKAREA         CONVERT TO DECIMAL
         MVC   STPLDPTB+09(L'REGNEDWD),REGNEDWD LOAD EDIT MASK
         ED    STPLDPTB+09(L'REGNEDWD),WORKAREA+5 EDIT PART'N SIZE
         MVI   STPLDPTB+15,C'K'    MOVE 'K' BEHIND REGION SIZE
*
         ZAP   WORKAREA,ACTIOTIM   GET I/O TIME
         MP    WORKAREA,=P'+10'    SCALE TO 3 FRACTIONAL POSITIONS
         MVC   STPLDPTC+10(L'P3EDITWD),P3EDITWD LOAD EDIT MASK
         ED    STPLDPTC+10(L'P3EDITWD),WORKAREA+5 EDIT I/O TIME
*
         L     R1,RUNTIME          LOAD STEP RUN TIME
         CVD   R1,WORKAREA         CONVERT RUN TIME TO DECIMAL
         MVC   STPLDPTD+14(L'P4EDITWD),P4EDITWD LOAD EDIT MASK
         ED    STPLDPTD+14(L'P4EDITWD),WORKAREA+4 EDIT RUN TIME
*
         TM    OPTIONS,NOCOSTS     TEST IF COSTS TO BE PRINTED
         BO    *+26                BRANCH IF NOT
         MVC   STPLDPTE+16(L'COSTEDWD),COSTEDWD LOAD EDIT MASK
         LA    R1,STPLDPTE+23 POINT TO LOCATION OF SIGNIF. START + 1
         EDMK  STPLDPTE+16(L'COSTEDWD),ACTCOST EDIT STEP COST
         BCTR  R1,0                REDUCE LOCATION OF $ BY 1
         MVI   0(R1),C'$'          MOVE IN FLOATING DOLLAR SIGN
*  OVERLAY STATISTIC LABELS ON THIS LINE
*
         MVC   STPLDPTA(12),=C'TIME STARTED'
         MVC   STPLDPTB(11),=C'PART''N SIZE'
         MVC   STPLDPTC(8),=C'I/O TIME'
         MVC   STPLDPTD(8),=C'RUN TIME'
         TM    OPTIONS,NOCOSTS     TEST IF COSTS TO BE PRINTED
         BO    *+10                BRANCH IF NOT
         MVC   STPLDPTE(9),=C'STEP COST'
*
*  WRITE THE COMPLETE LINE 2
*
         L     R15,=V(IEFYS)       LOAD ADDRESS OF SMB WRITER
         BALR  LINK,R15            BRANCH TO WRITER
*
*  LINE 3  - CLEAR IT
*
         MVI   SMBWRITE+1,C' '     CLEAR THE LINE LEAVING AN ASTERISK..
         MVC   SMBWRITE+2(L'SMBWRITE-3),SMBWRITE+1 ... AT EACH END
*
*  MOVE ACCOUNTING STATISTICS TO SMB PRINT LINE
*
         L     R0,TEMP1            LOAD TIME STEP ENDED (BINARY)
         BAL   LINK,DECTMCVT       CONVERT TIME TO DECIMAL
         ST    WD,WORKAREA         STORE IN 0HHMMSSF FORM
         MVC   STPLDPTA+11(L'TIMEEDWD),TIMEEDWD LOAD EDIT MASK
         ED    STPLDPTA+11(L'TIMEEDWD),WORKAREA EDIT IT TO HH.MM.SS
*
         MVC   STPLDPTB+9(L'REGNEDWD),REGNEDWD LOAD EDIT MASK
         ED    STPLDPTB+9(L'REGNEDWD),ACTHIWTR EDIT CORE USED
         MVI   STPLDPTB+15,C'K'    MOVE 'K' BEHIND CORE USED
*
         MVC   STPLDPTC+8(L'P4EDITWD),P4EDITWD LOAD EDIT MASK
         ED    STPLDPTC+8(L'P4EDITWD),ACTCOMPU EDIT FACTORED CPU TIME
*
         MVC   STPLDPTD+14(L'P4EDITWD),P4EDITWD MOVE IN EDIT MASK
         ED    STPLDPTD+14(L'P4EDITWD),ACTIOUNT EDIT I/O UNITS
*
         MVC   STPLDPTE+17(L'P4EDITWD),P4EDITWD MOVE IN EDIT MASK
         ED    STPLDPTE+17(L'P4EDITWD),ACTMCHUN EDIT MACHINE UNITS
*
*    OVERLAY STATISTIC LABELS ON THIS LINE
*
         MVC   STPLDPTA(10),=C'TIME ENDED'
         MVC   STPLDPTB(9),=C'CORE USED'
         MVC   STPLDPTC(8),=C'CPU TIME'
         MVC   STPLDPTD(9),=C'I/O UNITS'
         MVC   STPLDPTE(13),=C'MACHINE UNITS'
*
*  WRITE THE COMPLETE LINE 3
*
         L     R15,=V(IEFYS)       LOAD ADDRESS OF SMB WRITER
         BALR  LINK,R15            BRANCH TO WRITER
*
*   LINE 4
*
         MVI   SMBWRITE+1,C' '     CLEAR THE LINE LEAVING AN ASTERISK..
         MVC   SMBWRITE+2(L'SMBWRITE-3),SMBWRITE+1 ... AT EACH END
*
*    MOVE ACCOUNTING STATISTICS TO SMB PRINT LINE
*
         MVC   STPLDPTA+17(L'ACTABEND),ACTABEND MOVE IN ABEND CODE
         CLI   STPLDPTA+17,C'S'    TEST FOR USER ABEND
         BE    *+8                 BRANCH IF SYSTEM ABEND
         MVI   STPLDPTA+16,C'U'    TELL OF USER ABEND CODD
*
         MVC   STPLDPTB+11(L'ACTREGJC),ACTREGJC  REQUESTED PART''N SIZE
         MVI   STPLDPTB+15,C'K' MOVE 'K' BEHIND REQUESTED SIZE
*
         MVC   STPLDPTC+8(L'P4EDITWD),P4EDITWD MOVE IN EDIT MASK
         ED    STPLDPTC+8(L'P4EDITWD),ACTISAM  EDIT ISAM TIME
*
         MVC   STPLDPTD+14(L'P4EDITWD),P4EDITWD MOVE IN EDIT MASK
         ED    STPLDPTD+14(L'P4EDITWD),ACTOCPYU EDIT OCCUPANCY UNITS
*
         MVC   STPLDPTE+10(16),ACTJDAT2 MOVE I.D. TO LINE
*
*    OVERLAY ACCOUNTING STATISTIC LABELS ON LINE
*
         MVC   STPLDPTA(15),=C'STEP ABEND CODE'
         MVC   STPLDPTB(9),=C'REQUESTED'
         MVC   STPLDPTC(9),=C'ISAM TIME'
         MVC   STPLDPTD(9),=C'OCCUPANCY'
         MVC   STPLDPTE(4),=C'I.D.'
*
*
*  WRITE THE COMPLETE LINE 4
*
         L     R15,=V(IEFYS)       LOAD ADDRESS OF SMB WRITER
         BALR  LINK,R15            BRANCH TO WRITER
*
*    LINE 5
*
         MVI   SMBWRITE+1,C' '     CLEAR THE LINE LEAVING AN ASTERISK .
         MVC   SMBWRITE+2(L'SMBWRITE-3),SMBWRITE+1 .. AT EACH END
*
*    MOVE ACCOUNTING STATISTICS TO SMB PRINT LINE
*
         TM    OPTIONS,NOCOND      TEST IF COND CODE TO BR PRINTED
         BO    *+24                BRANCH IF NOT
         LH    WA,STEPCOND         LOAD STEP COND CODE INTO WA
         CVD   WA,WORKAREA         CONVERT COND TO DECIMAL
         MVC   STPLDPTA+15(L'CONDEDWD),CONDEDWD LOAD EDIT WORD
         ED    STPLDPTA+15(L'CONDEDWD),WORKAREA+5 EDIT COND CODE
*
         L     WA,HWMBYTES         GET HIGH WATER MARK IN BYTES
         CVD   WA,WORKAREA         CONDERT TO DECIMAL
         MVC   STPLDPTB+6(L'HWMBEDWD),HWMBEDWD LOAD EDIT WORD
         ED    STPLDPTB+6(L'HWMBEDWD),WORKAREA+4 EDIT HWM
*
         SR    WA,WA               CLEAR WORK REGISTER
         IC    WA,REGANDDS+2       GET TAPES ALLOCATED
         CVD   WA,WORKAREA         CONVERT TO DECIMAL
         UNPK  STPLDPTC+15(2),WORKAREA+6(2) UNPACK TAPE COUNT
         OI    STPLDPTC+16,X'F0'   FORCE SIGN TO 'F'
*
         SR    WA,WA               CLEAR WORK REGISTER
         IC    WA,REGANDDS+3       GET DISKS ALLOCATED
         CVD   WA,WORKAREA         CONVERT TO DECIMAL
         UNPK  STPLDPTD+21(2),WORKAREA+6(2) UNPACK DISK COUNT
         OI    STPLDPTD+22,X'F0' FORCE SIGN TO 'F'
*
         LH    WA,TALOCS           GET TOTAL DATA SETS ALLOCATED
         CVD   WA,WORKAREA         CONVERT TO DECIMAL
         UNPK  STPLDPTE+24(2),WORKAREA+6(2) UNPACK TOTAL COUNT
         OI    STPLDPTE+25,X'F0' FORCE SIGN TO 'F'
*
*    OVERLAY STATISTICS LABELS ON LINE
*
         TM    OPTIONS,NOCOND      TEST IF COND CODE TO BE PRINTED
         BO    *+10                BRANCH IF NOT
         MVC   STPLDPTA(14),=C'CONDITION CODE'
         MVC   STPLDPTB(7),=C'(BYTES)'
         MVC   STPLDPTC(9),=C'TAPE D.S.'
         MVC   STPLDPTD(9),=C'DISK D.S.'
         MVC   STPLDPTE(19),=C'TOTAL D/S ALLOCATED'
*
*    WRITE THE COMPLETE LINE 5
*
         L     R15,=V(IEFYS)       LOAD ADDR OF SMB WRITER
         BALR  LINK,R15            BRANCH TO SMB WRITER
*
*  SETUP FINAL LINE OF ACCOUNTING BOX ( LINE 6 )
*
         MVC   SMBWRITE(L'MISD),MISD MOVE IN '****MISD****370/158'
         MVC   SMBWRITE+L'MISD(L'SMBWRITE-L'MISD-6),SMBWRITE PROPAGATE
         MVC   SMBWRITE+126(6),ARVERSN IDENTIFY VERSION OF ACCT. ROUT.
*
*  WRITE THE COMPLETE LINE 6
*
         L     R15,=V(IEFYS)       LOAD ADDRESS OF SMB WRITER
         BALR  LINK,R15            BRANCH TO WRITER
*
*    LINE 7
*
         MVI   SMBWRITE,C' '       INSERT SPACE AT START OF THE LINE ..
         MVC   SMBWRITE+1(L'SMBWRITE-1),SMBWRITE ... & PROPAGATE
         L     R15,=V(IEFYS)       LOAD ADDR OF SMB WRITER
         BALR  LINK,R15            BRANCH TO SMB WRITER
*
*
* STORE UPDATED TOTALS AND FLAGS IN THE RESIDENT ACCOUNTING SVC
*
         LA    R15,STEPENDB        SETUP ENTRANCE CODE
         LA    R1,JOBFLAGS         LOAD ADDRESS OF ACCOUNTING DATA
         SVC   ACCTG               GO TO SVC
*
* STEP TERMINATION PROCESSING COMPLETE
*
         B     RETURN              GO SETUP FOR RETURN TO OS
*
*
*
***********************************************************************
         PRINT OFF
         TITLE 'MONSANTO OS/MFT ACCOUNTING ROUTINE - IEFACTRT - JOB TERX
               MINATION'
         PRINT ON
         EJECT
***********************************************************************
*   A JOB ACCOUNTING RECORD WILL BE WRITTEN TO THE ACCOUNTING DATA
*    SET DURING JOB-END PROCESSING. THE RECORD IS COMPLETED FROM DATA
*    GATHERED AT STEP-START, TOTALS UPDATED DURING STEP-END PROCESSING,
*    AND DATA NORMALLY FURNISHED BY THE SYSTEM UPON ENTRY TO THE
*    ACCOUNTING ROUTINE. A JOB SMB ACCOUNTING BOX IS WRITTEN GIVING
*    CERTAIN TOTALS AND JOB ENVIRONMENT.
*
*
*
* RETRIEVE ACCOUNTING INFORMATION STORED IN THE RESIDENT ACCOUNTING
*  SVC DURING STEP START AND STEP END PROCESSING.
*
JOBTERM  LA    R15,JOBEND          SET SVC ENTRANCE CODE
         LA    R1,JOBFLAGS         LOAD ADDRESS FOR RETURNING DATA
         SVC   ACCTG               RETRIEVE THE DATA
*
* DETERMINE IF ANY STEP ACCOUNTING RECORDS WERE WRITTEN
*
         TM    JOBFLAGS,BIT6       WERE ANY STEP RECORDS WRITTEN
         BZ    RETURN              NO - DO NOT WRITE A JOB RECORD
*                                  YES - CONTINUE PROCESSING
*
* SET POINTERS TO THE JOB ACCOUNTING PARAMETERS
*
         LM    WC,WD,APLJTIME      LOAD ADDRESSES OF JOB ACCTNG. PARMS
*
* INITIALIZE ACCOUNTING RECORD
*
         BAL   LINK,SETEMUP        BRANCH TO INITIALIZE SUBROUTINE
*
* BLANK-OUT NON-NUMERIC FIELDS NOT USED IN JOB RECORD
*
         MVI   ACTSNAME,C' '       BLANKOUT STEPNAME
         MVC   ACTSNAME+1(L'ACTSNAME-1),ACTSNAME PROPAGATE BLANKS
*
         MVI   ACTSPGM,C' '        BLANKOUT PROGRAM NAME
         MVC   ACTSPGM+1(L'ACTSPGM-1),ACTSPGM PROPAGATE BLANKS
*
* ZERO-OUT NUMERIC FIELDS NOT USED IN JOB RECORD
*
         ZAP   ACTREGNR,ZEROPACK
         XC    ACTRADDR,ACTRADDR
         XC    ACTCOMPL,ACTCOMPL
*
* SET STEP NUMBER TO INDICATE THIS IS A JOB RECORD (THIS IS THE WAY
*   JOB RECORDS ARE IDENTIFIED FROM STEP RECORDS )
*
         MVC   ACTSNUM,=C'99'      SET STEP NUMBER TO 99
*
* PUT TIMES IN ACCOUNTING RECORD
*
         L     R0,JOBTIMEB         LOAD TIME JOB STARTED (BINARY)
         BAL   LINK,BINTMCVT       CONVERT FROM HUND.SEC TO HUND.MIN
         CVD   R1,WORKAREA         CONVERT JOB START TIME TO DECIMAL
         MVC   ACTSTIMS,WORKAREA+4 MOVE JOB START TIME TO ACCTNG. REC.
*
* GET CURRENT TIME FOR JOB END TIME
*
         TIME  BIN                 RETURNS BINARY TIME IN R0
         ST    R0,TEMP1            SAVE TIME FOR LATER USE
         BAL   LINK,BINTMCVT       CONVERT FROM HUND.SEC TO HUND.MIN
         CVD   R1,WORKAREA         CONVERT JOB END TIME TO DECIMAL
         MVC   ACTSTIME,WORKAREA+4 MOVE JOB END TIME TO ACCTNG. REC
*
* MOVE JOB START DATE TO JOB RECORD
*
         MVC   ACTSDATS,JOBDATE    MOVE IN JOB START DATE
*
* MOVE JOB TOTALS TO THE JOB ACCOUNTING RECORD
*
         LM    WC,WF,TOTMCHUN      LOAD MACHINE UNITS, COMPUTE UNITS,
*                                   I/O TIME, AND ISAM TIME
         CVD   WC,WORKAREA
         MVC   ACTMCHUN,WORKAREA+4 MOVE MACHINE UNITS TO ACCTNG. REC
*
         CVD   WD,WORKAREA
         MVC   ACTCOMPU,WORKAREA+4 MOVE IN COMPUTE UNITS
*
         CVD   WE,WORKAREA
         MVC   ACTIOTIM,WORKAREA+5 MOVE IN I/O TIME
*
         CVD   WF,WORKAREA
         MVC   ACTISAM,WORKAREA+4  MOVE IN ISAM TIME
*
         LM    WC,WF,TOTCPU        LOAD CPU TIME, COST, OCCUPANCY, & IO
*
         CVD   WC,WORKAREA
         MVC   ACTCPUTM,WORKAREA+5 MOVE IN CPU TIME
*
         CVD   WD,WORKAREA
         MVC   ACTCOST,WORKAREA+4  MOVE IN TOTAL COST
*
         CVD   WE,WORKAREA
         MVC   ACTOCPYU,WORKAREA+4 MOVE IN OCCUPANCY UNITS
*
         CVD   WF,WORKAREA
         MVC   ACTIOUNT,WORKAREA+4 MOVE IN I/O UNITS
*
         LM    WC,WD,TOTCORUT      LOAD CORE & I/O UTILIZATION
*
         CVD   WC,WORKAREA
         MVC   ACTCORUT,WORKAREA+4 MOVE IN CORE UTILIZATION
*
         CVD   WD,WORKAREA
         MVC   ACTIOUTL,WORKAREA+4 MOVE IN I/O UTILIZATION
*
         LH    WC,TOTTAPEU         LOAD TAPE ALLOCATIONS
         CVD   WC,WORKAREA
         MVC   ACTTAPEU,WORKAREA+6 MOVE IN TAPE ALLOCATIONS
*
         LH    WC,TOTDISKU         LOAD DISK ALLOCATIONS
         CVD   WC,WORKAREA
         MVC   ACTDISKU,WORKAREA+6 MOVE IN DISK ALLOCATIONS
*
* JOB HIGH WATER MARK ( MAX CORE USED )
*
         LH    WC,HWMJOB           LOAD JOB HIGH WATER MARK
         CVD   WC,WORKAREA         CONVERT TO DECIMAL
         MVC   ACTHIWTR,WORKAREA+5 MOVE JOB HIGH WATER MARK TO ACT. REC
*
* GET JOB CLASS AND PRIORITY
*
         BAL   LINK,GETENVIR       MOVE CLASS & PRIO ACCTNG. REC
*
* SET CLASS CODE TO '99' FOR ANY JOB, OTHER THAN A TEST, THAT ABENDED
*
         L     WA,LCTJCTAD(,LCT)   LOAD ADDRESS OF JOB CONTROL TABLE
         TM    JCTSTAT(WA),4       DOES JCT STATUS BYTE SHOW JOB ABEND
         BZ    NOCLSET             NO  - SKIP '99' CODE SET
         MVC   ACTJCODE,=C'99'     NO  - CHANGE CLASS CODE TO '99'
*
***********************************************************************
*
* JOB ACCOUNTING RECORD IS NOW COMPLETE - WRITE IT
*
*
NOCLSET  BAL   LINK,ACCTGWTR       GO WRITE THE ACCOUNTING RECORD
*
***********************************************************************
*
* PRINT THE SMB JOB ACCOUNTING BOX
*
*    LINE 0
*
         MVI   SMBWRITE,C' '       MOVE SPACE TO LINE
         MVC   SMBWRITE+1(L'SMBWRITE-1),SMBWRITE  AND PROPAGATE
         LA    WC,SMBWRITE         LOAD ADDRESS OF LINE
         ST    WC,MSGADDR(,LCT)    PUT ADDRESS IN THE LCT
         LA    WC,L'SMBWRITE       LOAD LENGTH OF SMB LINE
         STH   WC,MSGLEN(,LCT)     PUT LENGTH IN LCT
         L     R15,=V(IEFYS)       LOAD ADDRESS OF SMB WRITER
         BALR  LINK,R15            PRINT THE LINE
*
*   LINE 1
*
         MVI   SMBWRITE,C'*'       MOVE FILL CHARACTER TO LINE
         MVC   SMBWRITE+1(L'SMBWRITE-1),SMBWRITE PROPAGATE FILL CHAR
         MVC   SMBWRITE+((L'SMBWRITE-L'ACCTGHDR)/2)(L'ACCTGHDR),ACCTGHDX
               R                   MOVE MISD NAME TO LINE
         L     R15,=V(IEFYS)       LOAD ADDR OF SMB WRITER
         BALR  LINK,R15            BRANCH TO SMB WRITER
*
*   LINE 2
*
         MVI   SMBWRITE+1,C' '     CLEAR THE LINE LEAVING AN ASTERISK..
         MVC   SMBWRITE+2(L'SMBWRITE-3),SMBWRITE+1 ... AT EACH END
*
*    MOVE ACCOUNTING STATISTICS TO LINE
*
         TM    OPTIONS,NOCOSTS     TEST IF COSTS TO BE PRINTED
         BO    *+34                BRANCH IF NOT
         L     WC,TOTCOST          LOAD ACCUMULATED JOB COST
         CVD   WC,WORKAREA         CONVERT TO DECIMAL
         MVC   JOBLDPTA+15(L'COSTEDWD),COSTEDWD LOAD EDIT MASK
         LA    R1,JOBLDPTA+22      POINT TO SIGNIFICANCE START + 1
         EDMK  JOBLDPTA+15(L'COSTEDWD),WORKAREA+4 EDIT STEP COST
         BCTR  R1,0                REDUCE LOCATION OF $ BY 1
         MVI   0(R1),C'$'          MOVE FLOATING DOLLAR SIGN
*
         MVC   JOBLDPTB+18(L'ACTCHGCD),ACTCHGCD CHARGE CODE
*
         MVC   JOBLDPTC+19(L'ACTCATCD),ACTCATCD CATEGORY CODE
*
         CLC   ACTMAJCC(5),=CL5' ' TEST IF COST CENTER SUPPLIED
         BE    *+20                BRANCH IF NOT
         MVC   JOBLDPTD+19(2),ACTMINCC MINOR COST CENTRE
         MVC   JOBLDPTD+15(3),ACTMAJCC MAJOR COST CENTRE
         MVI   JOBLDPTD+18,C'.'    INSERT PUNCTUATION
*
*    OVERLAY STATISTIC LABELS ON LINE
*
         TM    OPTIONS,NOCOSTS     TEST IF COSTS TO BE PRINTED
         BO    *+10                BRANCH IF NOT
         MVC   JOBLDPTA(14),=C'COST (DOLLARS)'
         MVC   JOBLDPTB(11),=C'CHARGE CODE'
         MVC   JOBLDPTC(13),=C'CATEGORY CODE'
         MVC   JOBLDPTD(11),=C'COST CENTRE'
*
*    WRITE THE LINE
*
         L     R15,=V(IEFYS)       LOAD ADDRESS OF SMB WRITER
         BALR  LINK,R15            BRANCH TO WRITER
*
*   LINE 3
*
         MVI   SMBWRITE+1,C' '     CLEAR THE LINE LEAVING AN ASTERISK..
         MVC   SMBWRITE+2(L'SMBWRITE-3),SMBWRITE+1 ... AT EACH END
*
*
         MVC   JOBLDPTB+21(L'ACTJCLAS),ACTJCLAS JOB CLASS
         MVC   JOBLDPTC+19(L'ACTJPRIO),ACTJPRIO JOB PRIORITY
*
         L     WA,JOBFLAGS         LOAD DATE STARTED(IN LOWORDER 3 BYT)
         LA    WE,JOBLDPTD+6       LOAD ADDR WHERE DATE IS TO BE PUT
         BAL   LINK,DATECNVT       GET DATE IN 'NNNN DD MMMM YY' FORM
*
*
*    OVERLAY STATISTIC LABELS ON LINE
*
         MVC   JOBLDPTB(9),=C'JOB CLASS'
         MVC   JOBLDPTC(12),=C'JOB PRIORITY'
         MVC   JOBLDPTD(4),=C'DATE'
*    WRITE THE LINE
*
         L     R15,=V(IEFYS)       LOAD ADDRESS OF SMB WRITER
         BALR  LINK,R15            BRANCH TO WRITER
*
*   LINE 4
*
         MVI   SMBWRITE+1,C' '     CLEAR THE LINE LEAVING AN ASTERISK .
         MVC   SMBWRITE+2(L'SMBWRITE-3),SMBWRITE+1 ...AT EACH END
*
         MVC   JOBLDPTA+15(L'TIMEEDWD),TIMEEDWD LOAD EDIT MASK
         ED    JOBLDPTA+15(L'TIMEEDWD),JOBTIMED EDIT JOB START TIME
*
*
         L     R0,TEMP1            LOAD TIME JOB ENDED
         BAL   LINK,DECTMCVT       CONVERT TO DECIMAL FORM (0HHMMSS+)
         ST    WD,WORKAREA         STORE TIME IN WORK AREA
         MVC   JOBLDPTB+12(L'TIMEEDWD),TIMEEDWD MOVE IN EDIT MASK
         ED    JOBLDPTB+12(L'TIMEEDWD),WORKAREA EDIT TIME JOB ENDED
*
         MVC   JOBLDPTC+12(L'P4EDITWD),P4EDITWD LOAD EDIT MASK
         ED    JOBLDPTC+12(L'P4EDITWD),ACTMCHUN EDIT MACHINE UNITS
*
         L     WC,TOTRUN           LOAD TOTAL RUNTIME
         CVD   WC,WORKAREA         CONVERT RUNTIME TO DECIMAL
         MVC   JOBLDPTD+12(L'P4EDITWD),P4EDITWD MOVE IN EDIT MASK
         ED    JOBLDPTD+12(L'P4EDITWD),WORKAREA+4 EDIT RUNTIME
*
* OVERLAY STATISTICS LABELS ON LINE
*
         MVC   JOBLDPTA(12),=C'TIME STARTED'
         MVC   JOBLDPTB(10),=C'TIME ENDED'
         MVC   JOBLDPTC(13),=C'MACHINE UNITS'
         MVC   JOBLDPTD(8),=C'RUN TIME'
*
* WRITE THE LINE
*
         L     R15,=V(IEFYS)       LOAD ADDR OF SMB WRITER
         BALR  LINK,R15            BRANCH TO THE WRITER
*
* LINE 5
*
         MVC   SMBWRITE(L'MISD),MISD MOVE IN '****MISD****370/158'
         MVC   SMBWRITE+L'MISD(L'SMBWRITE-L'MISD-6),SMBWRITE PROPAGATE
         MVC   SMBWRITE+126(6),ARVERSN IDENTIFY VERSION OF ACCT. ROUT.
*
*   WRITE THE LINE
*
         L     R15,=V(IEFYS)       LOAD ADDRESS OF SMB WRITER
         BALR  LINK,R15            BRANCH TO WRITER
*
* STEP TERMINATION NOW COMPLETE
*
         B     RETURN              GO SETUP RETURN TO OS
*
*
***********************************************************************
         TITLE 'MFT ACCOUNTING ROUTINE - IEFACTRT - SUBROUTINES'
***********************************************************************
*  SUBROUTINE TO SETUP ACCOUNTING RECORD
*
*    THIS ROUTINE INITIALIZES THE ACCOUNTING RECORD WITH DATA THAT IS
*     COMMON TO BOTH JOB AND STEP RECORDS. REGISTER WC MUST CONTAIN
*     THE ADDRESS OF THE COMBINED JOB TIME AND NUMBER OF ACCOUNTING
*     PARMS FIELD, REGISTER WD MUST CONTAIN THE ADDRESS OF THE
*     ACCOUNTING PARMS DATA FIELDS, UPON ENTRY TO THIS ROUTINE.
*     REGISTERS WC & WD ARE LATER USED, ALONG WITH WE AS WORK REGISTERS
*     THE ADDRESS OF THE STEP NAME IS RETURNED IN WD.
*
*
SETEMUP  EQU   *
*
         SPACE 5
*
* MOVE ACCOUNTING PARAMETERS TO ACCOUNTING RECORD
*
         ST    LINK,SETEMUPL       PRESERVE RETURN ADDRESS
         SR    WE,WE               CLEAR WORK REGISTER
         MVC   ACTREGJC,=C'  64'   SET UP DEFAULT PART''N SIZE
         MVC   ACTMAJCC,=CL5' '    SET DEFAULT
         MVC   ACTMINCC,=CL5' '     COST CENTRE
         MVC   ACTFORMS,=CL5' '     FORMS TYPE
         MVC   ACTCOPYS,=CL5' '     & NO. OF COPIES
         IC    WE,3(,WC)           RETRIEVE SUB-PARM COUNT
         BAL   LINK,RIGHTADJ       RETRIEVE CHARGE CODE
         MVC   ACTCHGCD,ICMDATA    MOVE IN CHARGE CODE
         BAL   LINK,RIGHTADJ       RETRIEVE CATEGORY CODE
         MVC   ACTCATCD,ICMDATA+2  MOVE IN CATEGORT CODE
         BAL   LINK,RIGHTADJ       RETRIEVE MAJOR COST CENTRE
         MVC   ACTMAJCC,ICMDATA+1  MOVE IN MAJOR COST CENTRE
         BAL   LINK,RIGHTADJ       RETRIEVE MINOR COST CENTRE
         MVC   ACTMINCC,ICMDATA+2  MOVE IN MINOR COST CENTRE
         BAL   LINK,RIGHTADJ       RETRIEVE REGION SIZE
         CLC   ICMDATA,REGMASK     TEST IF OVER-RIDING REQUEST SUPPLIED
         BE    *+10                NO - THEN BYPASS LOADING FIELD
         MVC   ACTREGJC,ICMDATA    MOVE IN REGION SPECIFICATION
         BAL   LINK,RIGHTADJ       RETRIEVE FORMS SPECIFICATION
         MVC   ACTFORMS,ICMDATA    MOVE IN SPECIAL FORMS
         BAL   LINK,RIGHTADJ       RETRIEVE NO. OF COPIES REQUESTED
         MVC   ACTCOPYS,ICMDATA+2  MOVE IN COPIES REQUESTED
*
*   MACHINE ID
*
MOVEID   MVC   ACTID,MOD145ID      MOVE IN 145 MACHINE ID
         MVC   ACTSECID,=CL3'158'  MOVE SECONDARY M/C ID.
*
*    RECORD ID
*
         MVI   ACTID2,X'FE'        ESTABLISH SECONDARY ID
*
*
*   JOB DATES
*
MOVDATES UNPK  ACTJDATS,JOBDATE    MOVE IN JOB START DATE
         MVC   ACTJDAT2,ACTJDATS   MOVE DATE TO ALTERNATE POSITION
*
*   JOB START TIME
*
         UNPK  ACTJTIMS,JOBTIMED   MOVE IN JOB START TIME
*
*   INTERNAL JOB NUMBER
*
         LH    WD,JOBNUMBR         LOAD INTERNAL NUMBER OF JOB (BINARY)
         CVD   WD,WORKAREA
         UNPK  ACTJNUM,WORKAREA+6(2) MOVE IN JOB NUMBER
         OI    ACTJNUM+2,X'F0'       GIVE IT A VALID SIGN
*
*   STEP NUMBER
*
         L     WE,APLFLSNO         LOAD ADDRESS OF STEP NUMBER
         SR    WD,WD               ZERO WORK REGISTER
         IC    WD,1(,WE)           LOAD STEP NUMBER
         CVD   WD,WORKAREA         CONVERT THE NUMBER TO DECIMAL
         UNPK  ACTSNUM,WORKAREA+6(2) MOVE IN STEP NUMBER
         OI    ACTSNUM+1,X'F0'     GIVE IT A VALID SIGN
*
*   JOB NAME
*
         LM    WC,WE,APLJNAME      LOAD ADDRESSES OF JOB,STEP, AND
*                                   PROGRAMMER(USER) NAMES
         MVC   ACTJNAME,0(WC)      MOVE IN JOB NAME
*
*   PROGRAMMER ( OR USER ) NAME
*
         MVC   ACTJUSER,0(WE)      MOVE IN USER NAME
*
*   ABEND CODE
*
         TM    ABENDCOD+1,X'01'    TEST IF IT WAS A USER DUMP
         BZ    USERABND            YES - THEN OCNVERT IT
         UNPK  ACTABEND,ABENDCOD   MOVE IN ABEND CODE
         OI    ACTABEND+3,X'F0'    FORCE SIGN TO HEX 'F'
         TR    ACTABEND,TRANSTBL   TRANSLATE IT TO HEX CHARACTERS
         MVI   ACTABEND,C'S'       IMPLY A SYSTEM DUMP
         B     STEPCC              CONVERT STEP ABNED CODE
USERABND LH    WD,ABENDCOD         RETRIEVE 'AAAE'
         SLL   WD,16               SHIFT OUT ERRONEOUS SIGN BITS
         SRL   WD,20               SHIFT OUT 'E' TO LEAVE '00000UUU'
         CVD   WD,WORKAREA         CONVERT TO DECIMAL
         UNPK  WORKAREA+8(5),WORKAREA+5(3) UNPACK USER CODE
         MVC   ACTABEND,WORKAREA+9 MOVE USER CODE TO RECORD
         OI    ACTABEND+3,X'F0'    FORCE SIGN TO 'F'
*
*    STEP CONDITION CODE
*
STEPCC   LH    WD,STEPCOND         LOAD BINARY STEP CONDITION CODE
         CVD   WD,WORKAREA         CONVERT THE NUMBER TO DECIMAL
         UNPK  WORKAREA+8(5),WORKAREA+5(3) UNPACK COND CODE
         MVC   ACTCOMPL,WORKAREA+9 MOVE COMP CODE TO RECORD
         OI    ACTCOMPL+3,X'F0'    FORCE SIGN TO 'F'
*
* RETURN TO CALLER LEAVING STEP NAME ADDRESS IN WD
*
         L     LINK,SETEMUPL       RETRIEVE THE RETURN ADDRESS
         L     WD,APLSNAME         LOAD STEP-NAME ADDRESS
         BR    LINK                RETURN TO CALLER
         EJECT
* THIS NESTED SUB-ROUTINE RETRIEVES THE ACCT'G SUB-PARMS FROM
*  THE ACCOUNTING FIELD, AND PLACES THE SUB-PARM IN ICMDATA
*  RIGHT-ADJUSTED.
*
* ON ENTRY, WE CONTAINS THE NUMBER OF SUB-PARMS YET TO BE PROCESSED,
*  WD POINTS AT THE COUNT FIELD OF THE CURRENT SUB-PARM.
*
RIGHTADJ MVC   ICMDATA,REGMASK     BLANK OUT RECEIVING FIELD
         LTR   WE,WE               TEST COUNT FOR ANY PARMS REMAINING
         BC    NONPLUS,MOVEID      EXIT FROM ACCT'G PARM CODING IF NOT
         CLI   0(WD),0             TEST FOR 0 LINGTH
         BE    EXITADJ             RETURN TO THE CALLER
         MVC   ICMMASK(1),0(WD)    MOVE LENGTH TO ICM INSTRUCYION
         TR    ICMMASK(1),ICMTABLE CONVERT LENGTH TO ICM MASK
         SR    WC,WC               CLEAR RECEIVING REGISTER
ICMMASK  EQU   *+1                 MASK FIELD IN ICM INSTRUCTION
         ICM   WC,0,1(WD)          LOAD PARM INTO REG WC
         O     WC,REGMASK          CONVERT LOW-VALUES TO BLANKS
         ST    WC,ICMDATA          MOVE PARM TO HOLD AREA
EXITADJ  BCTR  WE,0                DECREMENT SUB-PARM COUNT
         SR    WC,WC               CLEAR WORK REGISTER
         IC    WC,0(,WD)           RETRIEVE SUB-PARM LENGTH COUNT
         LA    WD,1(WC,WD)         INCREMENT TO NEXT COUNT FIELD
         BR    LINK                RETURN TO CALLER
         SPACE 5
ICMTABLE EQU   *                   TRANSLATE TABLE TO CONVERT
         DC    X'40'                SUB-PARM COUNT FIELD TO AN
         DC    X'41'                ICM-TYPE MASK.
         DC    X'43'               THE FORMAT OF AN ICM MASK
         DC    X'47'                IS REG,MASK - REG IS SET
         DC    X'4F'                TO REG WC.
         SPACE 1
ICMDATA  DS    F                   HOLD AREA FOR RIGHT-ADJUSTED PARM
SETEMUPL DS    F                   SAVE AREA FOR RETURN ADDRESS
REGMASK  DC    X'40404040'         MASK TO ALTER LEADING '00' TO '40'
*
*
*
*
***********************************************************************
         EJECT
***********************************************************************
*  SUBROUTINE TO WRITE THE ACCOUNTING RECORD
*
*   THIS ROUTINE WRITES THE ACCOUNTING RECORD TO THE SYS1.ACCT DATA
*    SET. THE ACCOUNTING DATA SET WRITER (IEFWAD) IS USED TO DO THIS.
*    UPON RETURN FROM THE WRITER, R0 CONTAINS THE NUMBER OF TRACKS
*    REMAINING IN THE DATA SET AND R15 CONTAINS A RETURN CODE. IF THE
*    RETURN CODE IS NORMAL, THEN R0 IS CHECKED TO SEE WHETHER THE
*    TRACKS REMAINING IS APPROACHING THE MINIMUM. IF IT IS, A WARNING
*    MESSAGE IS ISSUED TO THE OPERATOR. IF THE RETURN CODE IS NOT
*    NORMAL, THEN FOR ALL CODES EXCEPT I/O ERROR, THE OPERATOR IS
*    INSTRUCTED TO SHUTDOWN THE SYSTEM. IN THE CASE OF I/O ERRORS,
*    THE WRITE IS ATTEMPTED TWO MORE TIMES AND IF STILL UNSUCCESSFUL,
*    THE SAME PROCEDURE IS FOLLOWED AS WAS TAKEN FOR THE OTHER ERRORS.
*
*
ACCTGWTR LR    WE,LINK             SAVE CALLERS RETURN ADDRESS
         LA    WD,2                INIT RETRY COUNT IN CASE OF I/O ERR
IOERROR  MVC   ACTRCDLN,=AL2(ACTEND-ACTID) PUT LENGTH OF ACCOUNTING
*                                  RECORD INTO IEFWAD CONTROL AREA
         LA    R1,ACCTGRCD         LOAD ADDRESS OF ACCTNG CONTROL AREA
         L     R15,=V(IEFWAD)      LOAD ADDR OF ACTNG DATA SET WRITER
         BALR  LINK,R15            WRITE THE RECORD
         C     R15,=A(LISTEND-LISTSTRT) IS RETURN CODE VALID
         BL    LISTSTRT(15)        YES - ACCESS BRANCH LIST
*                                  NO  - TREAT AS UNRECOVERABLE ERROR
*
* UNRECOVERABLE ERROR HAS OCCURRED - TELL OPERATOR TO SHUTDOWN SYSTEM
*
DISASTER MVC   WTOMSG(L'MESSAGEB),MESSAGEB MOVE IN SHUTDOWN MESSAGE
         MVC   WTOLEN,=AL2(L'MESSAGEB+4,X'8000') SET LENGTH & MCS FLAGS
         MVC   WTOMSG+L'MESSAGEB(4),=X'40008000' SET ROUTE=1 DESC=2
         ST    R15,WORKAREA        PUT CONTENTS...
         MVI   WORKAREA+4,4             ... OF REG 15...
         UNPK  WTOMSG+8(9),WORKAREA(5)  ... IN ...
         TR    WTOMSG+8(8),TRANSTBL     ... SHUTDOWN MESSAGE
         L     WD,CVTPTR           LOAD ADDRESS OF CVT
         L     WD,CVTJOB(,WD)      LOAD ADDRESS OF NWA
         MVC   WORKAREA(3),NWATTR(WD) GET TTR OF END OF FILE MARKER
         MVI   WORKAREA+3,4        PUT TTR ...
         UNPK  WTOMSG+17(7),WORKAREA(4) ... IN ...
         TR    WTOMSG+17(6),TRANSTBL    ... SHUTDOWN MESSAGE
         LA    R1,WTOLEN           LOAD ADDRESS OF SHUTDOWN MSG
         WTO   MF=(E,(1))          ISSUE MESSAGE
         BR    WE                  RETURN TO CALLER
*
* NORMAL RETURN FROM IEFWAD - CHECK SPACE LEFT ON DATA SET
*
LEAVE    CH    R0,=H'4'            IS THE NO. OF TRACKS REMAINING LOW
         BH    WTRXIT              NO  - WARNING NOT NECESSARY
*                                  YES - SETUP WARNING MESSAGE
* SPACE REMAINING ON ACCOUNTING DATA SET IS LOW. ISSUE WARNING TO
*  OPERATOR TO DUMP THE DATA SET
*
         MVC   WTOMSG(L'MESSAGEC),MESSAGEC MOVE IN WARNING MESSAGE
         MVC   WTOLEN,=AL2(L'MESSAGEC+4,X'8000') SET LENGTH & MCS FLAGS
         MVC   WTOMSG+L'MESSAGEC(4),=X'40008000' SET ROUTE=1 DESC=2
         LA    R1,WTOLEN           LOAD ADDRESS OF MESSAGE
         WTO   MF=(E,(1))          ISSUE WARNING MESSAGE
WTRXIT   BR    WE                  RETURN TO CALLER
*
* BRANCH LIST FOR PROCESSING RETURN CODES FROM THE ACCOUNTING WRITER
*
LISTSTRT B     LEAVE               NORMAL RETURN
         B     DISASTER            THE RECORD WAS TOO LONG TO FIT TRACK
         B     DISASTER            NO SPACE LEFT IN DATA SET
         B     DISASTER            DATA SET NOT FOUND(NOT IN VTOC)
         BCT   WD,IOERROR          I/O ERROR - RETRY TWICE
         B     DISASTER            END OF FILE MARKER NOT FOUND
         B     DISASTER            UNIT NOT FOUND
LISTEND  EQU   *                   END OF LIST
***********************************************************************
         EJECT
***********************************************************************
*               ACCOUNTING PARM VALIDITY CHECK SUBROUTINE
*
* CHECKS THE ACCOUNTING PARMS IN THE 'JOB' AND 'EXEC' STATEMENTS
* ACCORDING TO THE FOLLOWING RULES -
*
* (1) THERE MUST BE AT LEAST 2 ENTRIES CONSISTING OF T( CHARGE
*     CODE, AND CATEGORY CODE IN THAT ORDER.  THE NEXT 2
*     SUB-FIELDS, IF USED, MUST CONTAIN THE MAJOR AND MINOR COST
*     CENTRE NUMBERS TO BE USED INSTEAD OF THE DEFAULT THAT
*     IS ASSOCIATED WITH THE CHARGE CODE.
*
* (2) THE CHARGE CODE MUST BE PRESENT, AND MUST CONSIST OF
*     FOUR NUMERIC DIGITS.
*
* (3) THE CATEGORY CODE MUST BE PRESENT, AND MAY CONSIST OF UP
*     TO FOUR CHARACTERS, BUT IT MUST BE NUMERIC.
*
* (4) THE MAJOR COST CENTRE IS OPTIONAL, BUT IF PRESENT MUST
*     CONSIST OF THREE NUMERIC CHARACTERS.
*
* (5) THE MINOR COST CENTRE IS OPTIONAL, BUT IF PRESENT MEST
*     CONSIST OF TWO NUMERIC CHARACTERS.
*
*
* IF ANY OF THESE CONDITIONS ARE NOT MET, A SKELETON ERROR MESSAGE IS
* SET UP AND INITIALIZED AND THE SUBROUTINE RETURNS TO THE CALLER AT
* THE RETURN ADDRESS PLUS FOUR BYTES. OTHERWISE, NORMAL EXIT IS TO THE
* RETURN ADDRESS.
*
* UPON ENTRY, 'WA' MUST CONTAIN THE ADDRESS OF THE COMBINATION TIME AND
* PARAMETER COUNT FIELD AND 'WB' THE ADDRESS OF THE ACCOUNTING ENTRIES.
* 'WC' IS USED AS A WORK REGISTER.
*
*
CKPARMS  CLI   3(WA),2             ARE THERE AT LEAST 2 PARMS
         BL    BADPARM             NO  - INVALID
*
* CHECK FIRST PARM - CHARGE CODE
*
         CLI   0(WB),4             YES - IS CHARGE CODE 4 DIGITS
         BNE   BADPARM             IF NOT, INVALID
         BAL   WD,NUMERIC          CHECK PARM IS NUMERIC
*
* CHECK SECOND PARM - CATEGORY CODE
*
         CLI   0(WB),4             IS PROJECT NO. NOT LONGER THAN 4 DIG
         BH    BADPARM             NO  - TOO LONG - INVALID
         BAL   WD,NUMERIC          CHECK PARM IS NUMERIC
*
* CHECK THIRD PARM - MAJOR COST CENTRE
*
         CLI   3(WA),3             TEST IF THIRD PARM EXISTS
         BCR   LOW,LINK            RETURN TO CALLER IF NOT
         CLI   0(WB),0             TEST IF SUB-PARM HS 0 LENGTH
         BNE   *+12                BRANCH IF NOT
         LA    WB,1(,WB)           INCREMENT TO NEXT COUNT FIELD
         B     *+16                PROCESS NEXT SUB-PARM
         CLI   0(WB),3             TEST IF SUB-PARM IS LENGTH 3
         BNE   BADPARM             NO - INVALID
         BAL   WD,NUMERIC          VERIFY SUB-PARM IS NUMERIC
*
* CHECK FOURTH PARM
*
         CLI   0(WA),4             TEST IF FOURTH PARM EWITTS
         BCR   LOW,LINK            RETURN TO CALLER IF NOT
         CLI   0(WB),0             TEST IF SUB-PARM HAS 0 LENGHT
         BCR   EQUAL,LINK          RETURN TO CALLER IF YES
         CLI   0(WB),2             TEST IF PARM HAS LENGTH 2
         BNE   BADPARM             NO - INVALID PARM
         BAL   WD,NUMERIC          CHECK PARM IS NUMERIC
         SPACE 1
         BR    LINK                NO  - PARMS ARE OK - RETURN TO CALLR
         SPACE 5
*
* AN INVALID ACCOUNTING PARM HAS BEEN DETECTED. SETUP ERROR MESSAGE.
*
BADPARM  MVC   SMBWRITE(L'MESSAGEA),MESSAGEA MOVE IN SKELETON MESSAGE
         LA    WC,SMBWRITE         LOAD ADDRESS OF MESSAGE
         ST    WC,MSGADDR(,LCT)    STORE ADDRESS IN LCT FOR SMB WRITER
         L     R15,=V(IEFYS)       LOAD ADDRESS OF SMB WRITER
         B     4(,LINK)            MAKE ERROR RETURN TO CALLER
         SPACE 5
*
* THIS NESTED SUB-ROUTINE DETERMINES WHETHER AN ACCOUNTING
*  SUB-PARM IS NUMERIC.
* ON ENTRY, WB POINTS AT THE SUB-PARM TO BE VALIDATED.
* ON EXIT, WB POINTS AT THE COUNT FIELD OF THE NEXT SUB-PARM.
* IF A FIELD IS NON-NUMERIC, CONTROL IS PASSED TO 'BADPARM'.
*
NUMERIC  SR    WC,WC               CLEAR WORK REGISTER
         IC    WC,0(WB)            GET DATA LENGTH
         CLI   1(WB),C'0'          TEST IF LESS THAN 0
         BL    BADPARM             YES - INVALID
         CLI   1(WB),C'9'          TEST IF GREATER THAN 9
         BH    BADPARM             YES - INVALID
         LA    WB,1(,WB)           INCREMENT TO NEXT DATA BYTE
         BCT   WC,*-20             TEST NEXT BYTE
         LA    WB,1(,WB)           INCREMENT TO NEXT COUNT FIELD
         BR    WD                  RETURN TO THE CALLER
*
***********************************************************************
         EJECT
***********************************************************************
*  DATE CONVERSION SUBROUTINE
*
*   THIS ROUTINE CONVERTS THE JULIAN DATE IN PACKED FORM (00YYDDD+)
*    INTO THE FORM ( NNNN DD MMMM YY ) EXAMPLE  'THUR 25 JULY 72'.
*    UPON ENTRY, THE CALLER MUST HAVE SUPPLIED THE DATE TO BE CONVERTED
*    IN WA AND THE ADDRESS OF THE HIGH ORDER BYTE WHERE THE RESULT
*    IS TO BE PLACED IN WE.  R0,R1,WA, AND WB ARE USED AS WORK
*    REGISTERS. BOTH INPUT REGISTERS ARE ALTERED DURING CONVERSION.
*     (ROUTINE IS VALID ONLY FOR A DATE IN THE TWENTIETH CENTURY)
*
*
DATECNVT LA    WA,0(,WA)           CLEAR HIGH ORDER BYTE OF PACKED DATE
         XC    WORKAREA(16),WORKAREA CLEAR A WORKAREA
         STH   WA,WORKAREA+14      DAY OF YEAR TO SECOND DOUBLE WORD
         SRL   WA,12               SHIFT OUT DD+ FROM 00YYDDD+
         STH   WA,WORKAREA+6       PUT 0YYD INTO FIRST DOUBLE WORD
         OI    WORKAREA+7,15       GIVE 0YYD A VALID SIGN ( 0YYF )
         CVB   WB,WORKAREA         CONVERT YEAR TO BINARY
         STC   WB,WORKAREA         STORE THE EIGHT BIT BINARY VALUE
         LA    WA,DATABLE1         LOAD ADDR OF NON-LEAPYEAR MONTH TABL
         TM    WORKAREA,3          IS THE YEAR A LEAP YEAR
         BNZ   NOTLPYR             NO  - SKIP LEAP YEAR SETUP
         LA    WA,DATABLE2         YES - LOAD ADDR OF LEAPYEAR MON TABL
NOTLPYR  CP    WORKAREA+14(2),24(2,WA) IS DAY VALID ( LE 365 OR 366 )
         BNH   DATEGOON                YES - SKIP INVALID DATE CODE
         MVC   8(L'INVALID,WE),INVALID NO - INDICATE INVALID RESULT
         BR    LINK                    RETURN TO CALLER
DATEGOON UNPK  13(2,WE),WORKAREA+6(2)  PLACE YEAR IN RESULT AREA
         SR    R1,R1                   INIT. MONTH NAME TABLE INDEX
DATECOMP CP    WORKAREA+14(2),2(2,WA)  DOES DAY OCCUR IN THIS MONTH
         BNH   DATFOUND                YES - MONTH FOUND
         LA    R1,5(,R1)               NO  - BUMP MONTH NAME TABLE INDX
         LA    WA,2(,WA)               BUMP MONTH DETERMINATION TAB ADR
         B     DATECOMP                SEARCH FOR MONTH
DATFOUND SP    WORKAREA+14(2),0(2,WA)  CALCULATE DAY OF MONTH
         CH    R1,=H'10'               IS MONTH JAN OR FEB
         BNL   DONTADJ                 NO  - NO ADJUSTMENT
         BCTR  WB,0                    REDUCE YEAR FOR DAY OF WEEK CALC
DONTADJ  LA    WA,DATABLE3(R1)     INDEX MONTH NAME AND SHIFT FACTOR
         MVC   8(4,WE),1(WA)       MOVE MONTH NAME TO USER AREA
         CLI   8(WE),C' '          DOES MONTH NAME HAVE FOUR CHARACTERS
         BNE   ISFOUR              YES - SKIP ADJUST
         LA    WE,1(,WE)           NO  - RIGHT ADJUST
ISFOUR   UNPK  5(2,WE),WORKAREA+14(2) MOVE IN DAY OF THE MONTH
         OI    6(WE),X'F0'         MAKE IT UNSIGNED
         CLI   5(WE),X'F0'         DOES DAY HAVE LEAD ZERO
         BNE   NOZERO              NO  - SKIP BLANK OUT
         MVI   5(WE),C' '          YES - BLANK OUT ZERO
         LA    WE,1(,WE)           RIGHT ADJUST
NOZERO   CVB   R0,WORKAREA+8       LOAD DAY OF MONTH
         IC    R1,0(,WA)           GET SHIFT FACTOR THIS MONTH
         AR    R1,R0               ADD DAY OF MONTH TO SHIFT FACTOR
         LA    WA,3
         NR    WA,WB               WA = NO. OF YEARS SINCE LAST LEAP YR
         AR    R1,WA               ADD YEARS TO SHIFT FACTOR
         SRL   WB,2                WB = NO. OF LEAP YR SOFAR IN CENTURY
         LA    WB,3(,WB)           ADD NO. OF CENTURIES MODULUS FOUR
         MH    WB,=H'5'            EACH FACTOR IN WB CAUSES SHIFT 5 DAY
         AR    WB,R1               WB = TOTAL SHIFT FACTOR + DAY MONTH
         SR    WA,WA               ZERO FOR DIVIDE
         D     WA,=F'7'            REMAINDER IS DAY OF WEEK(0=SUN 6=SAT
         SLL   WA,2                MULTIPLY REMAINDER BY FOUR
         LA    WB,DATABLE4(WA)     GET ADDRESS OF DAY NAME
         MVC   0(4,WE),0(WB)       MOVE DAY NAME TO RESULT AREA
         BR    LINK                RETURN TO CALLER
*
***********************************************************************
         EJECT
***********************************************************************
*  TIME CONVERSION SUBROUTINES
*
*   CONVERTS BINARY TIME IN HUNDREDTHS OF A SECOND TO PACKED DECIMAL
*    IN THE FORM HHMMSS. R0 CONTAINS THE TIME TO BE CONVERTED. R1,WC,
*    WD, AND WE ARE USED AS WORKREGISTERS. THE RESULT WILL BE IN WD
*    IN THE FORM 0HHMMSSF WITH BITS 0-3 ALL ZEROES AND BITS 28-31 ALL
*    ONES. THE INPUT TIME IN R0 IS DESTROYED IN THE PROCESS OF
*    CONVERSION.
*
DECTMCVT C     R0,=F'50'           IS TIME TOO CLOSE TO MIDNIGHT
         BNL   NOTMIDNT            NO  - SKIP MIDNIGHT CODE
         L     WD,=F'37748751'     YES - MAKE IT MIDNIGHT
*                                        (37748751 = X'0240000F')
         BR    LINK                RETURN
NOTMIDNT LR    R1,R0               LOAD TIME INTO R1
         SR    R0,R0               ZERO REGISTER
         A     R1,=F'50'           HALF ADJUST
         D     R0,=F'100'          CONVERT HUNDREDTHS SEC TO SECONDS
         LA    WE,28               INITIALIZE LOOP COUNTER
         XC    WORKAREA(4),WORKAREA INITIALIZE DIVISOR...
         MVI   WORKAREA+3,10       ..TO 10
DIVIDEIT SR    R0,R0               ZERO FOR DIVIDE
         D     R0,WORKAREA         DIVIDE TIME REMAINDER
         LR    WC,R0               MOVE REMAINDER TO WC
         SRDL  WC,4                SHIFT DIGIT INTO WD
         SH    WE,*-2              DECREMENT COUNT BY FOUR (USE SHIFT
*                                   COUNT IN PREV. INSTRUCTION AS DEC.)
         LTR   R1,R1               IS THE QUOTIENT ZERO
         BZ    ALLDONE             YES - CONVERSION COMPLETE
         XI    WORKAREA+3,12       NO  - ALTERNATE DIVISOR BETWEEN 10
*                                   AND 6.(10 GOES TO 6; 6 GOES TO 10)
         B     DIVIDEIT            DEVELOP NEXT DIGIT
ALLDONE  SRL   WD,0(WE)            SHIFT DIGITS THE REST OF WAY
         MVI   WORKAREA+3,15       SETUP 'F' SIGN DIGIT
         O     WD,WORKAREA         MOVE SIGN TO CONVERTED TIME
         BR    LINK                RETURN TO CALLER
*
         EJECT
***********************************************************************
*
*   CONVERT BINARY TIME IN HUNDREDTHS OF A SECOND TO BINARY TIME IN
*    HUNDREDTHS OF A MINUTE. R0 CONTAINS THE TIME TO BE CONVERTED AND
*    R1 WILL CONTAIN THE RESULT. R0 WILL BE DESTROYED.
*
BINTMCVT C     R0,=F'30'           IS TIME TOO CLOSE TO MIDNIGHT
         BNL   BINGOON             NO  - CONVERT
         L     R1,=A(24*60*100)    YES - SET TO MIDNIGHT
         BR    LINK                RETURN TO CALLER
BINGOON  LR    R1,R0               MOVE TIME TO R1
         SR    R0,R0               ZERO REG 0 FOR DIVIDE
         A     R1,=F'30'           HALF ADJUST
         D     R0,=F'60'           CONVERT HUNDREDTHS-SEC TO HUNTH-MIN
         BR    LINK                RETURN TO CALLER
*
***********************************************************************
         EJECT
***********************************************************************
*  SUBROUTINE TO RETRIEVE JOB CLASS AND PRIORITY
*
*   THIS SUBROUTINE PROVIDES AN INTERFACE WITH HASP VIA A DUMMY WTO.
*    THE ADDRESS OF THE STEP'S ACCOUNTING RECORD IS PASSED
*    TO HASP ALONG WITH AN IDENTIFIER DENOTING THAT IS A DUMMY WTO.
*    HASP INTERCEPTS THE DUMMY WTO, GETS THE DATA IT NEEDS FROM THE
*    ACCOUNTING RECORD, PUTS THE JOBS CLASS AND PRIORITY IN R0, AND
*    MARKS THE WTO COMPLETE. IF HASP IS NOT IN THE SYSTEM, THE DUMMY
*    WTO WILL ACT AS A REAL WTO PRINTING A BLANK LINE. THE CLASS AND
*    PRIORITY WILL NOT BE OBTAINED IN THAT CASE.
*
*
GETENVIR L     R0,=C'ACTG'         IDENTIFY REQUEST TO HASP
         LA    R15,ACTID           PASS ADDRESS OF ACCOUNTING RECORD
         LA    R1,HASPWTO          LOAD ADDRESS OF DUMMY WTO LIST
         SVC   WTO                 ISSUE DUMMY WTO FOR HASP INTERCEPT
         ST    R0,WORKAREA         STORE RETURNED CLASS AND PRIORITY
         CLC   WORKAREA,=C'ACTG'   TEST IF HASP PRESENT
         BE    *+16                NO - THEN BYPASS SAVIND 'ACTG'
         MVC   ACTJPRIO,WORKAREA+2 MOVE JOB PRIORITY TO ACCTNG. REC
         MVC   ACTJCLAS,WORKAREA+1 MOVE JOB CLASS TO ACCTNG. REC
         BR    LINK                RETURN TO CALLER
*
*
***********************************************************************
         PRINT OFF
         TITLE 'MFT ACCOUNTING ROUTINE - IEFACTRT - EQUATES, DSECTS, ANX
               D CONSTANTS'
         PRINT ON
         EJECT
***********************************************************************
*  REGISTER ASSIGNMENTS...
*                   .....USE.....
R0       EQU   0    SVC COMMUNICATIONS AND WORK REGISTER
R1       EQU   1    SVC COMMUNICATIONS AND WORK REGISTER
WA       EQU   2    WORK REGISTER
WB       EQU   3    WORK REGISTER
WC       EQU   4    WORK REGISTER
WD       EQU   5    WORK REGISTER
WE       EQU   6    WORK REGISTER
WF       EQU   7    WORK REGISTER
APL      EQU   8    ADDRESS OF ACCOUNTING PARAMETER LIST PASSED FROM OS
WRK      EQU   9    ADDRESS OF WORKAREA OBTAINED VIA GETMAIN
BASEA    EQU   10   BASE REGISTER
BASEB    EQU   11   BASE REGISTER
LCT      EQU   12   ADDRESS OF LINKAGE CONTROL TABLE
SAVE     EQU   13   ADDRESS OF REGISTER SAVE AREA
LINK     EQU   14   REGISTER FOR SUBROUTINE LINKAGE
R15      EQU   15   REGISTER FOR SUBROUTINE LINKAGE
*
***********************************************************************
         EJECT
***********************************************************************
*  DISPLACEMENTS...
*
CVTPTR   EQU   16   ABSOLUTE CORE LOCATION OF COMMUNICATIONS VECTOR
*                    TABLE
TCBPKF   EQU   28   OFFSET TO STORAGE PROTECT KEY IN TCB
TCBPIB   EQU   124  OFFSET TO PIB SW & ADDR IN TCB
PIBPKF   EQU   24   OFFSET TO PROTECT KEY IN PIB
MSGADDR  EQU   36   OFFSET TO SMB MESSAGE ADDRESS FIELD IN LCT
MSGLEN   EQU   42   OFFSET TO SMB LENGTH FIELD IN LCT
LCTSCTAD EQU   20   OFFSET TO SCT ADDRESS IN LCT
SCTHZRSZ EQU   88   OFFSET TO HIER. 0 REGION SIZE REQUESTED   IN SCT
CVTJOB   EQU   12   OFFSET TO ADDR OF WORK BLOCKS USED BY THE SCHEDULER
NWATTR   EQU   4    OFFSET TO TRACK AND RECORD NO. FOR END OF FILE
SCTSTYPE EQU   67   OFFSET TO STEP TYPE INDICATORS IN SCT
SCTPGMNM EQU   108  OFFSET TO PGM NAME IN SCT
JCTSTAT  EQU   5                   OFFSET TO STATUS BYTE IN JCT
LCTJCTAD EQU   16                  OFFSET TO JCT ADDRESS IN JCT
***********************************************************************
*  ACCOUNTING SVC ENTRANCE CODES
*
JOBSTART EQU   0
STEPSTRT EQU   1
STEPENDA EQU   2
STEPENDB EQU   3
JOBEND   EQU   4
***********************************************************************
*  BIT SETTINGS
*
BIT7     EQU   X'01'
BIT5     EQU   X'04'
BIT6     EQU   X'02'
***********************************************************************
*  GENERAL EQUATES
*
NOCOSTS  EQU   X'80'               DO NOT PRINT COSTS
NOCOND   EQU   X'40'               DO NOT PRINT COMPLETION CODE
WTOR     EQU   35                  WTOR SVC CALL
WTO      EQU   35                  WTO SVC CALL
ACCTG    EQU   254
LOW      EQU   4                   LOWER THAN
EQUAL    EQU   8                   EQUAL TO
NONPLUS  EQU   13                  LESS THAN OR EQUAL TO ZERO
         EJECT
***********************************************************************
*  CONSTANTS
*
         LTORG *                   LITERAL POOL
MESSAGEA DC    C'****** INVALID ACCOUNTING PARM IN THE '
JPARMERR DC    C'JOB CARD - JOB WILL BE FAILED'
SPARMERR DC    C'EXEC CARD - JOB ACCOUNTING CODES WILL BE USED'
MESSAGEB DC    C'IEFACTB R15RETCD NWATTR SYSTEM ERROR. INITIATE SHUTDOWX
               N PROCEDURE IMMEDIATELY AND NOTIFY SYSTEMS PROGRAMMING.'
MESSAGEC DC    C'IEFACTC ***WARNING*** ACCTG DATA SET IS FULL. DRAIN SYX
               STEM AND EXECUTE JOB COST01 IMMEDIATELY.'
         DS    0H                  ALIGN HASPWTO ON HALFWORD BOUNDARY
HASPWTO  DC    AL2(5,0),C' '       DUMMY WTO FOR HASP COMMUNICATIONS
TRANSTBL EQU   *-240
         DC    C'0123456789ABCDEF'
ACCTGHDR DC    C'MONSANTO COMPANY - MANAGEMENT INFORMATION AND SYSTEMS C
               DEPARTMENT - EUROPEAN COMPUTER CENTRE'
INVALID  DC    C'INVALID'
MOD145ID DC    C'145'
ZEROPACK DC    PL1'+0'             ZERO PACKED VALUE CONSTANT
UNITPART DC    F'64'               SIZE OF UNIT PARTITION
UP52K    DC    F'52'               UNIT PARTION ON 370/145
FACTOR   DC    H'36'               CPU FACTOR X 10 CONVERT 370/158-145
         EJECT
*  JOB COST RATE TABLE
*
*   THIS TABLE ASSOCIATES A JOB CLASS AND PRIORITY WITH ITS CHARGE RATE
*    EACH ENTRY CONTAINS...
*
*        A) THE JOB CLASS
*        B) THE JOB PRIORITY 'THRESHOLD' - ANY JOB HAVING A PRIORITY
*            ABOVE THE THRESHOLD PRIORITY WILL BE CHARGED AT DOUBLE
*            THE NORMAL RATE
*        C) THE JOB COST RATE - THIS IS THE COST IN DOLLARS PER
*                                MACHINE UNIT
*
RATABLE  DS    0F                  START OF TABLE
         DC    CL2'Q',CL2'07',H'360' UNKNOWN CLASS
         DC    CL2'A',CL2'15',H'360' SCHEDULED PRODUCTION
         DC    CL2'B',CL2'11',H'360' UNSCHEDULED PRODUCTION
         DC    CL2'R',CL2'15',H'360' OPERATOR'S UTILITY CLASS
         DC    CL2'T',CL2'11',H'360' TESTING
         DC    CL2'P',CL2'15',H'360' PRIORITY BATCH/BALANCING
         DC    CL2'O',CL2'15',H'360' COMPUTER SERVICES EMERGENCY
         DC    CL2'I',CL2'11',H'180' IF OTHERWISE IDLE
         DC    CL2'M',CL2'15',H'720' WHOLE MACHINE
         DC    CL2'N',CL2'11',H'360' TESTING. NO DISK OR TAPE MOUNTS.
         DC    CL2'Q',CL2'07',H'360' SPARE ( FOR ZAPPING )
         DC    CL2'Q',CL2'07',H'360' SPARE ( FOR ZAPPING )
         DC    CL2'Q',CL2'07',H'360' SPARE ( FOR ZAPPING )
         DC    CL2'Q',CL2'07',H'360' SPARE ( FOR ZAPPING )
         DC    CL2'Q',CL2'07',H'360' SPARE ( FOR ZAPPING )
         DC    CL2'Q',CL2'07',H'360' SPARE ( FOR ZAPPING )
RATEND   DS    0F                  END OF TABLE
*
*
         SPACE 5
*
OPTIONS  DC    X'80'               OPTION SWITCHES
*                                  BIT 0 = 1 - DO NOT PRINT COSTS
*                                  BIT 1 = 1 - DO NOT PRINT COND CODE
*
COSTEDWD DC    X'4020206B2020214B2020' EDIT MASK FOR DOLLAR COST
P3EDITWD DC    X'4020214B202020'   EDIT MASK FOR PACKED DATA (LENGTH 3)
P4EDITWD DC    X'40202020214B202020' MASK FOR PACKED DATA    (LENGTH 4)
REGNEDWD DC    X'402020202020'
TIMEEDWD DC    X'402020214B20204B2020'
CONDEDWD DC    X'402020202120'     EDIT WORD FOR STEP COND CODE
HWMBEDWD DC    X'40206B2020206B202120' EDIT WORD FOR BYTE HWM
MISD     DC    C'****MISD**VM370/145'
ARVERSN  DC    C'****1*'           ACCTNG. ROUTINE VERSION 0 ID
*
         EJECT
*                        DATE CONVERSION TABLES
         SPACE
* THIS TABLE IS FOR DETERMINING THE MONTH OF THE YEAR - NORMAL YEARS
DATABLE1 DC    PL2'0,31,59,90,120,151,181,212,243,273,304,334,365'
         SPACE
* THIS TABLE IS FOR DETERMINING THE MONTH OF THE YEAR - LEAP YEARS
DATABLE2 DC    PL2'0,31,60,91,121,152,182,213,244,274,305,335,366'
         SPACE
* TABLE OF MONTHS AND THEIR DAY OF THE WEEK SHIFT FACTORS
DATABLE3 DC    AL1(0),C' JAN'
         DC    AL1(3),C' FEB'
         DC    AL1(2),C' MAR'
         DC    AL1(5),C' APR'
         DC    AL1(0),C' MAY'
         DC    AL1(3),C'JUNE'
         DC    AL1(5),C'JULY'
         DC    AL1(1),C' AUG'
         DC    AL1(4),C'SEPT'
         DC    AL1(6),C' OCT'
         DC    AL1(2),C' NOV'
         DC    AL1(4),C' DEC'
         SPACE
* TABLE OF DAYS OF THE WEEK
DATABLE4 DC    C' SUN MONTUES WEDTHUR FRI SAT'
*
         EJECT
*              GENERATE THE DECIMAL LENGTH OF THIS ROUTINE
         SPACE
$L       EQU   *-IEFACTRT     COMPUTE INTERMEDIATE VALUES
$L1      EQU   $L/100000*100000
$L2      EQU   ($L-$L1)/10000*10000
$L3      EQU   ($L-$L1-$L2)/1000*1000
$L4      EQU   ($L-$L1-$L2-$L3)/100*100
$L5      EQU   ($L-$L1-$L2-$L3-$L4)/10*10
$L6      EQU   $L-$L1-$L2-$L3-$L4-$L5
$LENGTH  EQU   $L1/100000*1048576+$L2/10000*65536+$L3/1000*4096+$L4/100C
               *256+$L5/10*16+$L6  THIS IS THE DECIMAL LENGTH
         EJECT
***********************************************************************
*  DEFINITIONS OF ACCOUNTING PARAMETER LIST PASSED BY OS
*
*                   .... ADDRESS OF ....
APLDSECT DSECT
APLJNAME DS    F    JOB NAME
APLSNAME DS    F    STEP NAME
         DS    F    PROGRAMMER(USER) NAME
APLJTIME DS    F    JOB TIME AND NO. OF ACCOUNTING PARMS
APLJACTF DS    F    JOB ACCOUNTING DATA FIELDS
APLSTIME DS    F    STEP TIME AND NO. OF STEP ACCOUNTING PARMS
         DS    F    STEP ACCOUNTING DATA FIELDS
APLFLSNO DS    F    JOB FAIL FLAG BYTE AND STEP NUMBER
*
*
***********************************************************************
         EJECT
***********************************************************************
* WORKING STORAGE AREA OBTAINED VIA GETMAIN
*
*
WRKDSECT DSECT
SAVEAREA DS    36F                 REGISTER SAVE AREA
R13SAVE  DS    F                   ADDR OF SAVEAREA FROM IEFACTLK
WORKAREA DS    D                   UTILITY AREA ON DOUBLEWORD BOUNDARY
         DS    D                   CONTINUATION OF WORKAREA
SMBWRITE DS    CL132               SMB WRITE MESSAGE AREA
STPLDPTA EQU   SMBWRITE+6     *                                *
STPLDPTB EQU   SMBWRITE+31    * THESE EQUATES DEFINE STARTING  *
STPLDPTC EQU   SMBWRITE+51    * POSITIONS OF TEXT TO BE        *
STPLDPTD EQU   SMBWRITE+72    * INSERTED IN SMBWRITE TO CREATE *
STPLDPTE EQU   SMBWRITE+99    * JOB AND STEP ACCOUNTING BOXES. *
JOBLDPTA EQU   SMBWRITE+6     * THEY ARE IN AFFECT TAB         *
JOBLDPTB EQU   SMBWRITE+38    *  POSITIONS.                    *
JOBLDPTC EQU   SMBWRITE+72    *                                *
JOBLDPTD EQU   SMBWRITE+105   *                                *
*
         ORG   SMBWRITE  OVERLAY LIST FORM OF WTOR ON SMB AREA****
REPLYDES DS    F         BYTE 1   - REPLY LENGTH                 *
*                        BYTE 2-4 - REPLY ADDRESS                *
ECBADDR  DS    F                    ADDRESS OF ECB               *
WTOLEN   DS    F         BYTE 1-2 - MESSAGE LENGTH               *
*                        BYTE 3-4 - MCS FLAGS FIELD              *
WTOMSG   EQU   *                    TEXT OF WTO MESSAGE          *
         ORG   SMBWRITE+120        SKIP PAST TEXT & ROUTE & DESC *
REPLYAR  DS    CL6                 REPLY AREA FOR WTOR           *
REPLYBLK DS    CL6                 AREA FOR BLANKS               *
         ORG
TEMP1    DS    F                   TEMPORY HOLD AREA
ELAPSTIM DS    F                   STEP ELAPSED TIME(EXCLUDE D.S. ALOC)
ELAPSTM2 DS    F                   STEP ELAPSED TIME(INCLUDE DS ALOCTM)
RUNTIME  DS    F                   CALCULATED RUNTIME THIS STEP
TEMPMCHU DS    F                   MACHINE UNITS THIS STEP
REGNSAVE DS    H                   REGION SIZE THIS STEP
TALOCS   DS    H                   TOTAL ALLOCATIONS THIS STEP
*
         EJECT
* THE FOLLOWING PORTION OF THIS DSECT, DOWN TO THE ACCOUNTING RECORD,
*  DEFINES ONE SEGMENT OF THE ACCOUNTING TABLE STORED IN THE RESIDENT
*  ACCOUNTING SVC. THERE IS ONE SEGMENT FOR EACH JOB IN EXECUTION,
*  INDEXED VIA THE JOBS UNIQUE PROTECT KEY.
*
*
         DS    0F                  FORCE ALIGNMENT
JOBFLAGS DS    C                   JOBFLAGS - BIT ON INDICATES...
*
*                   BIT 01234567
*                       V    VVV
*                       V    VV. USE JOB ACCOUNTING PARMS INSTEAD OF
*                       V    VV     STEP ACCOUNTING PARMS(SET DURING
*                       V    VV     STEP INITIATION)
*                       V    V.. STEP ACCOUNTING RECORD HAS BEEN WRITEN
*                       V    V    (SET DURING STEP TERMINATION)
*                       V    ... ISAM DATA SET OPENED DURING THIS STEP
*                       V         (SET BY ACCOUNTING SVC)
*                       ........ STEP HAS STARTED, HIGH WATER MARK
*                                 ROUTINE MAY OPERATE (SET BY ACCOUNTNG
*                                  SVC ATTACHA ENTRY)
JOBDATE  DS    CL3                 DATE JOB STARTED (YYDDDF)
JOBTIMEB DS    F                   TIME JOB STARTED (BINARY TO .01 SEC)
JOBTIMED DS    F                   TIME JOB STARTED (0HHMMSSF)
         DS    0F                  FORCE ALIGNMENT
MODELNO  DS    C                   MACHINE MODEL NUMBER (BINARY)
STEPDATE DS    CL3                 DATE STEP STARTED (YYDDDF)
STEPTIME DS    F                   TIME STEP STARTED(BINARY TO .01 SEC)
REGANDDS DS    F                   BYTES 1-2 REGION SIZE(BINARY TO 2K)
*                                  BYTE    3 NO. OF TAPE ALOCATIONS(BIN
*                                  BYTE    4 NO. OF DISK ALOC. (BINARY)
JOBNUMBR DS    H                   INTERNAL JOB NUMBER GENERATED BY...
*                                  .ACCOUTING ROUTINE (BINARY)
ABENDCOD DS    H                   SYSTEM ABEND CODE (AAAF)
TOTMCHUN DS    F        JOB TOTALS - MACHINE UNITS
TOTCOMPU DS    F                   - COMPUTE UNITS(BASE 155 CPU TIME)
TOTIOTIM DS    F                   - I/O TIME
TOTISAM  DS    F                   - ISAM TIME
TOTCPU   DS    F                   - CPU TIME (ACTUAL)
TOTCOST  DS    F                   - COST TO .01 DOLLARS
TOTOCPYU DS    F                   - OCCUPANCY UNITS
TOTIOUNT DS    F                   - I/O UNITS
TOTRUN   DS    F                   - RUN TIME
TOTCORUT DS    F                   - CORE UTILIZATION
TOTIOUTL DS    F                   - I/O UTILIZATION
TOTTAPEU DS    H                   - TAPE D.S. ALLOCATIONS
TOTDISKU DS    H                   - DISK D.S. ALLOCATIONS
         DS    6F                  UNUSED
         DS    H                   UNUSED
STEPCOND DS    H                   CONDITION CODE RETURNED BY THE JOB
HWMBYTES DS    F                   HIGH WATER MARK FOR STEP IN BYTES
HWMSTEP  DS    H                   HIGH WATER MARK FOR STEP
*                                    ( FROM IEAQGM )
HWMJOB   DS    H                   HIGH WATER MARK FOR JOB
*                                    ( FROM IEAQGM )
REGNADDR DS    F                   REGION STARTING ADDRESS FROM
*                                    IEAQGM.  BIT 0 IS SET BY STEP
*                                    START CODE IN IGC254 IF THIS
*                                    IS FIRST STEP SINCE IPL.
ISAMSTRT DS    F                   TIME STAMP TAKEN AT ATTACHA ENTRY
*                                   IN IGC254 FOR ELAPSED TIME CALCS
IONTCHGD DS    F                   I/O TIME NOT YET CHARGED...
*                                  .ACCUMULATED IN IGC254 IOS EXIT AND
*                                  .DEDUCTED IN IEAQNU (TIMER UNITS)
IOCHRGD  DS    F                   I/O TIME CHARGED...
*                                  .THE TIME SUBTRACTED OUT BY IEAQNU
*                                  .IN THIS STEP (TIMER UNITS)
* END OF NUCLEUS WORKAREA DEFINITION
***********************************************************************
         EJECT
***********************************************************************
*  FOLLOWING IN A CONTROL AREA REQUIRED BY THE ACCOUNTING WRITER. IT
*   MUST IMMEDIATELY PRECEED THE ACCOUNTING RECORD.
*
ACCTGRCD DS    3H                  WRITER WORK SPACE
ACTRCDLN DS    H                   LENGTH OF ACCTNG RECORD
*
*******  MACHINE ACCOUNTING RECORD    ********************************
*
*
* NAME   ORGAN.     .----  IN STEP RECORD                   DATA ORIGIN
*                    .---  IN JOB  RECORD
*                     .--  TOTALED IN JOB RECORD       * = THIS ROUTINE
*                                                      . = SYSTEM PARMS
*                             DESCRIPTION
*------- ---------- ---  ---------------------------------- -----------
*
ACTID    DS CL3     **   COST CENTER OF MACHINE USED         IGC254 SVC
ACTJDATS DS CL5     **   JULIAN DATE(YYDDD) JOB STARTED     *
ACTCHGCD DS    CL4  **   PROJECT CHARGE CODE                .JOB/STEP
ACTCATCD DS    CL2  **   JOB CATEGORY CODE                  .JOB/STEP
ACTMAJCC DS    CL3  **   MAJOR COST CENTRE NUMBER           .JOB/STEP
ACTMINCC DS    CL2  **   MINOR COST CENTRE NUMBER           .JOB/STEP
         DS    CL2       UNUSED
ACTREGJC DS    CL4   *   REGION SIZE REQUESTED IN ACCT'G    .JOB
ACTFORMS DS    CL4   *   FORMS QUEUE RESUEST FROM JOB CARD  .JOB
ACTCOPYS DS    CL2   *   COPIES REQUEST FROM JOB CARD    D  .JOB
ACTJCLAS DS CL1     **   HASP CLASS DURING EXECUTION         HASPVIAWTO
ACTSECID DS CL3     **   SECONDARY MACHINE IDENTIFICATION.
ACTJDAT2 DS CL5     **   JULIAN DATE(YYDDD) JOB STARTED     *
ACTJTIMS DS CL6     **   TIME JOB STARTED(HHMMSS)           *
ACTJNUM  DS CL3     **   JOB NUMBER SINCE IPL OR RECYCLE     IGC254 SVC
ACTSNUM  DS CL2     **   STEP NUMBER IN JOB('99' IN JOB REC).STEP START
ACTJNAME DS CL8     **   JOB NAME FROM JOB CARD             .JOB START
ACTSNAME DS CL8     *    STEP NAME FROM EXEC CARD           .STEP START
ACTJPRIO DS CL2     **   HASP PRIORITY IN EXEC PROCESSOR     HASPVIAWTO
ACTJCODE DS CL1     **   JOB CLASS AT EXECUTION             .JOB/STEP
ACTID2   DS    CL1       RECORD TYPE IDENTIFIER ( X'FE' )
ACTSPGM  DS CL8     *    PROGRAM NAME FROM EXEC CARD        .STEP
ACTJUSER DS CL6     **   NAME OF USER(PROGRAMMER)           .JOB/STEP
ACTSDATS DS PL3     *    JULIAN DATE(YYDDD+) STEP STARTED   *
ACTSTIMS DS PL4     *    TIME STEP STARTED(MINUTES-2 DECPOS)*
ACTSTIME DS PL4     *    TIME STEP ENDED(MINUTES-2 DEC POS) *
ACTREGNR DS PL3     *    REGION SIZE(K BYTES) REQUESTED      IEFSD263
ACTHIWTR DS PL3     **   MAX CORE USED DURING STEP(HIWATRMK) IEAQGM
ACTCPUTM DS PL3     ***  ACTUAL CPU TIME ( 2 DECIMAL POS)   .
ACTMCHUN DS PL4     ***  MACHINE UNITS(OCCUPANY + I/O UNITS)*  FORMULA
*                         (ELAPSED TIME FOR CLASS M)(3 DEC POS)
ACTCOST  DS PL4     ***  $ COST OF JOB OR STEP(2 DEC POS)   *  FORMULA
ACTTAPEU DS PL2     ***  TOTAL TAPE ALLOCATIONS              IEFSD263
ACTDISKU DS PL2     ***  TOTAL DISK ALLOCATIONS              IEFSD263
ACTCOMPU DS PL4     ***  COMPUTE UNITS( 3 DEC POS )         *  FORMULA
ACTOCPYU DS PL4     ***  OCCUPANCY UNITS CHARGED(3 DEC POS) *  FORMULA
ACTIOUNT DS PL4     ***  I/O UNITS CHARGED(3 DECIMAL POS)   *  FORMULA
ACTCORUT DS PL4     ***  CORE UTILIZATION(3 DEC POSITIONS)  *  FORMULA
ACTIOUTL DS PL4     ***  I/O  UTILIZATION(3 DEC POSITIONS)  *  FORMULA
ACTIOTIM DS PL3     ***  I/O TIME CHARGED(2 DEC POS)         IGC254
ACTABEND DS CL4     *    SYSTEM STEP ABEND CODE              IEFSD263
*                         SYSTEM CODE IN THE FORM 'SNNN'
*                         USER CODE IN THE FORM 'NNNN'
ACTISAM  DS PL4     ***  TIME ADDED TO BRING ISAM CHARGE
*                         TO 45 PERCENT ELAPSED(3 DEC POS)  *
ACTRADDR DS CL4     *    BYTE 1   - BIT 0 SET IF THIS IS     IGC254
*                                    FIRST STEP SINCE IPL
*                        BYTES 2-4 - ADDRESS OF START OF     IEAQGM
*                                     REGION
ACTCOMPL DS    CL4  *    CONDITION CODE RETURNED BY STEP    .IEFSD515
ACTSTIMA DS PL4     *    STEP ATTACH TIME (MINS 2-DECPOS)   *
*
* RECORD LENGTH = 160 BYTES
*
*********************************************************************
*
ACTEND   DS    0C                  END OF ACCOUNTING RECORD
WRKEND   DS    0D                  END OF WORK DSECT
         END
/*
//LKED.SYSLMOD DD DSN=TESTLIB,DISP=SHR
//LKED.SYSIN   DD   *
 NAME IEFACTRT(R)
/*
