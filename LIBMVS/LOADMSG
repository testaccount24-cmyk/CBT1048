         MACRO
&LABEL   LOADMSG &DATA=,&LENGTH=70,&PRFX=20,&SUBPOOL=0,&TYPE=D,        X
               &DESC=(4,8,9),&ROUTCDE=
         LCLB  &B(16),&C(16)       ACCUMULATOR FOR BIT SETTINGS
         LCLA  &I,&IB              GENERAL PURPOSE INDEX
         AIF   ('&LENGTH'(1,1) NE '(').NOLENR
&LABEL   LA    0,&PRFX&LENGTH      LOAD LENGTH FOR GETMAIN
         AGO   .CONT1
.NOLENR  ANOP
&LABEL   LA    0,&PRFX+&LENGTH     LOAD LENGTH FOR GETMAIN
.CONT1   ANOP
         LA    15,&SUBPOOL         LOAD SUBPOOL ID
         SLL   15,24               MOVE TO HIGH ORDER BYTE
         OR    0,15                LOAD INTO PARAMETER REGISTER
         GETMAIN R,LV=(0)          GETMAIN THE CORE
         XC    0(4,1),0(1)         CLEAR CHAINING FIELDS
         ST    0,4(1)              SAVE DETAILS FOR FREEMAIN
         MVI   4(1),&SUBPOOL       SAVE SUBPOOL ID FOR FREEMAIN
         XC    10(2,1),10(1)       CLEAR MCS FLAGS
         OI    10(1),X'C0'         SIGNAL USE OF DESCR CODES ETC
         OI    11(1),X'40'         SIGNAL MULTIPLE LINE WTO
         AIF   ('&LENGTH'(1,1) NE '(').NOLENR2
         LA    15,0&LENGTH         LOAD LENGTH OF MESSAGE
         AGO   .CONT2
.NOLENR2 LA    15,&LENGTH          LOAD LENGTH OF MESSAGE
.CONT2   BCT   15,*+10             SUBTRACT 1 FOR EXECUTE
         AIF   ('&DATA'(1,1) NE '(').NODATR
         MVC   12(0,1),0&DATA      MOVE DATA TO BUFFER
         AGO   .CONT3
.NODATR  MVC   12(0,1),&DATA       MOVE DATA TO BUFFER
.CONT3   EX    15,*-6              EXECUTE THE MOVE
         LA    15,5(15)            RESET LENGTH TO INCLUDE WTO PARM
         STH   15,8(1)             STORE INTO PARM LIST
         LA    15,8(15,1)          LOAD ADDRESS OF END OF TEXT
.*
.*       SET DESCRIPTOR CODES
.*
&I       SETA  1                   SET INDEX TO FIRST OPERAND
.DESLOOP ANOP
         AIF   (&I GT N'&DESC).DESCEND
&IB      SETA  &DESC(&I)           PICK UP DESCRIPTOR CODE
&B(&IB)  SETB  1                   TURN ON THIS BIT
&I       SETA  &I+1                INCREMENT OPERAND INDEX
         AGO   .DESLOOP            LOOP FOR ALL OPERAND VALUES
.DESCEND MVI   0(15),B'&B(1)&B(2)&B(3)&B(4)&B(5)&B(6)&B(7)&B(8)'
         MVI   1(15),B'&B(9)&B(10)&B(11)&B(12)&B(13)&B(14)&B(15)&B(16)'
.*
.*       SET ROUTCODE FLAGS
.*
&I       SETA  1                   SET INDEX TO START OF OPERANDS
.RTCLOOP AIF   (&I GT N'&ROUTCDE).RTCEND
&IB      SETA  &ROUTCDE(&I)        PICK UP THE ROUTE CODE
&C(&IB)  SETB  1                   TURN ON THIS BIT
&I       SETA  &I+1                STEP UP TO NEXT OPERAND
         AGO   .RTCLOOP            LOOP FOR ALL VALUES CODED
.RTCEND  MVI   2(15),B'&C(1)&C(2)&C(3)&C(4)&C(5)&C(6)&C(7)&C(8)'
         MVI   3(15),B'&C(9)&C(10)&C(11)&C(12)&C(13)&C(14)&C(15)&C(16)'
.*
.*       SET MESSAGE TYPE AND AREA ID
.*
         XC    4(2,15),4(15)       CLEAR LINE TYPE FLAGS
         AIF   ('&TYPE' NE 'C').XX2
         OI    4(15),X'80'         SIGNAL CONTROL LINE TYPE
         AGO   .XXEND
.XX2     AIF   ('&TYPE' NE 'L').XX3
         OI    4(15),X'40'         SIGNAL LABEL LINE TYPE
         AGO   .XXEND
.XX3     AIF   ('&TYPE' NE 'D').XX4
         OI    4(15),X'20'         SIGNAL DATA LINE TYPE
         AGO   .XXEND
.XX4     AIF   ('&TYPE' NE 'E').XX5
         OI    4(15),X'30'         SIGNAL END LINE TYPE
         AGO   .XXEND
.XX5     MNOTE *,'INVALID LINE TYPE - &TYPE'
.XXEND   ANOP
         MVI   6(15),C'A'          STORE AREA ID
         MVI   7(15),1             STORE NUMBER OF LINES
         MEND
