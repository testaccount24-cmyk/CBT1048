RED      TITLE 'VM/370 SYSTEM MONITOR DATA REDUCTION'
         MACRO
&LABEL   SORT  &PTR=0,&KEY=4,&KEYLEN=4,&FIRST=,&RWK1=5,&ROUT=4,&RIN1=2,X
               &RIN2=3,&SAVE=(2,5),&QUALIFY=,&AREAS=,&SEQ=
.*
.*             SORT--LINKED LIST SORT MACRO
.*
.*             THIS MACRO GENERATES IN-LINE CODE FOR A LINKED-LIST
.*             SORT.
.*
.*             THE OPERANDS ARE AS FOLLOWS:
.*
.*       &PTR  OFFSET OF THE LINK FIELD WITHIN EACH RECORD
.*       &KEY  SUBLIST CONSISTING OF THE OFFSETS OF THE KEYS WITHIN
.*             THE RECORDS.  THE KEYS ARE SPECIFIED IN MAJOR-TO-MINOR
.*             ORDER.
.*       &KEYLEN=  THE LENGTHS OF THE KEYS WITH THE OBVIOUS
.*             CORRESPONDENCE TO THE &KEY= OPERANDS
.*       &FIRST A FULLWORD POINTING TO THE FIRST RECORD OF THE LINKED
.*             LIST.  THIS FIELD WILL BE UPDATED AT THE CONCLUSION
.*             OF THE SORT.
.*       &RXXX= THESE ARE THE WORT WORK REGISTER EQUATES WHICH
.*             SHOULD BE ALLOWED TO DEFAULT.
.*       &SAVE THIS IS THE RANGE OF REGISTERS TO BE SAVED UPON
.*             ENTRY TO THE SORT, AND TO BE RESTORED UPON EXIT FROM
.*             THE SORT.  IT SHOULD BE ALLOWED TO DEFAULT.
.*       &QUALIFY=  THIS IS A QUALIFIER WHICH MAY BE USED TO ENSURE
.*             UNIQUE LABELS WITHIN THE SORT.  THE DEFAULT VALUE IS
.*             &SYSNDX.  THUS, IT SHOULD BE ALLOWED TO DEFAULT.
.*       &AREAS= THIS IS A SUBLIST OF FULLWORD WORK AREAS USED BY THE
.*             SORT.
.*       &SEQ= THIS IS A SUBLIST CONTAINING A'S OR D'S INDICATING
.*             WHETHER THE CORRESPONDING KEY FIELD SHOULD BE SORTED
.*             IN ASCENDING OR DESCENDING ORDER.  A SINGLE ARGUMENT
.*             MAY BE PROVIDED IN WHICH CASE IT WILL BE USED FOR ALL
.*             OF THE KEY FIELDS.  NOTE ALSO THAT A LIST MAY CONTAIN
.*             ANY COMBINATION OF A'S AND D'S.
.*
         LCLA  &I
         LCLC  &Q,&OUT1S,&OUT2S,&OUT2P
.*             ROBERT YOUNG
.*             MAY 17, 1972
.*             REVISED AUGUST 1972
.*             MODIFIED FOR MY NEEDS SEPTEMBER 1973
.*
&Q       SETC  '&QUALIFY'
         AIF   ('&Q' NE '').A3
&Q       SETC  'A&SYSNDX'
.A3      ANOP
&OUT1S   SETC  '&AREAS(1)'
&OUT2S   SETC  '&AREAS(2)'
&OUT2P   SETC  '&AREAS(3)'
&I       SETA  ((&SAVE(1)-(&SAVE(1)+2)/16*16)*4+20)
&LABEL   STM   &SAVE(1),&SAVE(2),&I.(13)
         AIF   ('&OUT1S' NE '').A1OK
&OUT1S   SETC  '&Q.1S'
.A1OK    AIF   ('&OUT2S' NE '').A2OK
&OUT2S   SETC  '&Q.2S'
.A2OK    AIF   ('&OUT2P' NE '').A3OK
&OUT2P   SETC  '&Q.2P'
.A3OK    ANOP
         L     &RIN1,&FIRST
         ST    &RIN1,&OUT1S
         LTR   &RIN1,&RIN1
         BNP   &Q.END
         LA    &RWK1,&OUT2S-(&PTR)
         ST    &RWK1,&OUT2P
         LA    &ROUT,&OUT1S-(&PTR)
         SR    &RWK1,&RWK1
         ST    &RWK1,&OUT2S
         B     &Q.DR1
&Q.EOF   L     &RWK1,&OUT2S
         LTR   &RWK1,&RWK1
         BNP   &Q.END
         SR    &RWK1,&RWK1
         ST    &RWK1,&PTR.(&ROUT)
         L     &ROUT,&OUT2P
         ST    &RWK1,&PTR.(&ROUT)
         L     &RIN1,&OUT1S
         L     &RIN2,&OUT2S
         LA    &RWK1,&OUT2S-(&PTR)
         ST    &RWK1,&OUT2P
         LA    &ROUT,&OUT1S-(&PTR)
         SR    &RWK1,&RWK1
         ST    &RWK1,&OUT1S
         ST    &RWK1,&OUT2S
         SORTC &RIN1,&RIN2,&Q.IN1,&Q.IN1,&Q.IN2,KEY=&KEY,KEYLEN=&KEYLENX
               ,SEQ=&SEQ
&Q.A2    SORTC &RIN1,&RIN2,&Q.A3,&Q.A3,&Q.A4,NEXT=&Q.A4,KEY=&KEY,KEYLENX
               =&KEYLEN,SEQ=&SEQ
&Q.A4    SORTC &RIN2,&ROUT,&Q.A5,&Q.IN2,&Q.IN2,NEXT=&Q.A5,KEY=&KEY,KEYLX
               EN=&KEYLEN,SEQ=&SEQ
&Q.A5    SORTC &RIN1,&ROUT,&Q.A6,&Q.IN1,&Q.IN1,NEXT=&Q.A6,KEY=&KEY,KEYLX
               EN=&KEYLEN,SEQ=&SEQ
&Q.A6    LR    &RWK1,&ROUT
         L     &ROUT,&OUT2P
         ST    &RWK1,&OUT2P
         B     &Q.IN2
&Q.A3    SORTC &RIN1,&ROUT,&Q.A7,&Q.IN1,&Q.IN1,NEXT=&Q.A7,KEY=&KEY,KEYLX
               EN=&KEYLEN,SEQ=&SEQ
&Q.A7    SORTC &RIN2,&ROUT,&Q.A8,&Q.IN2,&Q.IN2,NEXT=&Q.A8,KEY=&KEY,KEYLX
               EN=&KEYLEN,SEQ=&SEQ
&Q.A8    LR    &RWK1,&ROUT
         L     &ROUT,&OUT2P
         ST    &RWK1,&OUT2P
&Q.IN1   ST    &RIN1,&PTR.(&ROUT)
         LR    &ROUT,&RIN1
         L     &RIN1,&PTR.(&RIN1)
         LTR   &RIN1,&RIN1
         BNZ   &Q.A2
         LR    &RIN1,&RIN2
         B     &Q.DRN
&Q.IN2   ST    &RIN2,&PTR.(&ROUT)
         LR    &ROUT,&RIN2
         L     &RIN2,&PTR.(&RIN2)
         LTR   &RIN2,&RIN2
         BNZ   &Q.A2
&Q.DRN   SORTC &RIN1,&ROUT,&Q.DR2,&Q.DR1,&Q.DR1,NEXT=&Q.DR2,KEY=&KEY,KEX
               YLEN=&KEYLEN,SEQ=&SEQ
&Q.DR2   LR    &RWK1,&ROUT
         L     &ROUT,&OUT2P
         ST    &RWK1,&OUT2P
&Q.DR1   ST    &RIN1,&PTR.(&ROUT)
         LR    &ROUT,&RIN1
         L     &RIN1,&PTR.(&RIN1)
         LTR   &RIN1,&RIN1
         BNZ   &Q.DRN
         B     &Q.EOF
         AIF   ('&OUT1S' EQ '&AREAS(1)').B1OK
&OUT1S   DS    A
.B1OK    AIF   ('&OUT2S' EQ '&AREAS(2)').B2OK
&OUT2S   DS    A
.B2OK    AIF   ('&OUT2P' EQ '&AREAS(3)').B3OK
&OUT2P   DS    A
.B3OK    ANOP
&Q.END   MVC   &FIRST.(4),&OUT1S
         LM    &SAVE(1),&SAVE(2),&I.(13)
         MEND
         MACRO
&LABEL   SORTC &R1A,&R2A,&LOW,&EQ,&HI,&KEY=,&KEYLEN=,&NEXT=,&SEQ=
.*
.*             THIS IS THE COMPARE/BRANCH MACRO FOR THE LINKED LIST
.*             SORT MACRO.  IT IS CALLED WHENEVER IT IS DESIRED TO
.*             GENERATE A COMPARE/BRANCH SEQUENCE IN THE GENERATION OF
.*             THE SORT ROUTINE.  THIS MACRO HANDLES ALL OF THE
.*             COMPLICATIONS RESULTING FROM ASCENDING/DESCENDING SORTS,
.*             AND THE USE OF MULTIPLE KEY FIELDS WITHIN THE SAME
.*             SORT
.*
.*             THE PARAMETERS ARE:
.*
.*       &R1A  REGISTER OF THE S1 FIELD OF THE COMPARE
.*       &R2A  REGISTER OF THE S2 FIELD OF THE COMPARE
.*       &LOW  BRANCH ADDRESS FOR A LOW COMPARE
.*       &EQ   BRANCH ADDRESS FOR AN EQUAL COMPARE
.*       &HI   BRANCH ADDRESS FOR A HIGH COMPARE
.*       &KEY= KEY PARAMETER AS SUPPLIED TO THE SORT MACRO.  THIS IS A
.*             SUBLIST CONSISTING OF THE OFFSETS OF THE KEYS WITHIN THE
.*             RECORD.  THE SUBOPERANDS ARE IN MAJOR-TO-MINOR ORDER.
.*       &KEYLEN=  THESE ARE THEN LENGTHS OF THE KEYS.  THIS IS A
.*             SUBLIST WHERE EACH SUBOPERAND CORRESPONDS TO THE
.*             SUBLIST WHERE THE CORRESPONDENCE BETWEEN ITS SUBOPERANDS
.*             AND THOSE OF THE KEY= PARAMETER IS THE OBVIOUS ONE.
.*       &SEQ= THIS IS A SUBLIST CONSISTING OF EITHER A'S OR D'S
.*             CORRESPONDING TO EACH ENTRY IN THE &KEY= SUBLIST.
.*             AN A WILL CAUSE AN ASCENDING SORT FOR THIS FIELD, A
.*             D WILL CAUSE A DESCENDING SORT.  OPTIONALLY, THIS
.*             OPERAND MAY BE A SINGLE OPERAND IN WHICH CASE THE A OR D
.*             SPECIFIED WILL BE IN EFFECT FOR ALL OF THE FIELDS.
.*       &NEXT= THIS IS THE LABEL OF THE NEXT INSTRUCTION FOLLOWING
.*             THE SORT.  IT IS USED TO OPTIMIZE BRANCHING.
.*
         LCLA  &I,&N
         LCLC  &L
         LCLC  &LO
         LCLC  &R1,&R2
&LO      SETC  '&LOW'
&N       SETA  N'&KEY
&L       SETC  '&LABEL'
&I       SETA  1
.A1      ANOP
&R1      SETC  '&R1A'
&R2      SETC  '&R2A'
         AIF   (N'&SEQ EQ 1 AND '&SEQ' EQ 'D').A1B  ALL DESC
         AIF   ('&SEQ(&I)' NE 'D').A1A
.*             REVERSE COMPARE FOR DESCENDING SORT
.A1B     ANOP
&R1      SETC  '&R2A'
&R2      SETC  '&R1A'
.A1A     AIF   (&I GE &N).A2
.*  GENERATE A REGULAR COMARE
&L       CLC   &KEY(&I).(&KEYLEN(&I),&R1),&KEY(&I).(&R2)
         BL    &LOW
         BH    &HI
.A3      ANOP
&L       SETC  ''
&I       SETA  &I+1
         AGO   .A1
.*             GENERATE THE FINAL COMPARE
.A2      ANOP
&L       CLC   &KEY(&I).(&KEYLEN(&I),&R1),&KEY(&I).(&R2)
         AIF   ('&LOW' EQ '&NEXT').BNL1
         AIF   ('&HI' EQ '&NEXT').BNH1
         BL    &LOW
         BH    &HI
         AIF   ('&EQ' EQ '&NEXT').MEXIT
         B     &EQ
.MEXIT   MEXIT
.BNL1    AIF   ('&EQ' EQ '&NEXT').BH
         AIF   ('&EQ' EQ '&HI').BNL
         BH    &HI
         BE    &EQ
         MEXIT
.BNL     BNL   &HI
         MEXIT
.BH      BH    &HI
         MEXIT
.BNH1    AIF   ('&EQ' EQ '&NEXT').BL
         AIF   ('&EQ' EQ '&LO').BNH
         BL    &LO
         BE    &EQ
         MEXIT
.BNH     BNH   &LO
         MEXIT
.BL      BL    &LO
         MEXIT
         MEND
         MACRO
         EQUREGS
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         MEND
*
*              GENWK MACRO
*
         MACRO
&L       GENWK &ID,&TITLE,&TYPE,&SIZE,&LAST=NO
         GBLA  &WKNUM
         LCLB  &FLAGC,&FLAGS,&FLAGT,&FLAGHW
WK&ID    DS    0F
WKREC&WKNUM DS    0F
&WKNUM   SETA  &WKNUM+1
         AIF   ('&LAST' EQ 'YES').A1
         DC    A(WKREC&WKNUM) WKLINK
         AGO   .A2
.A1      DC    A(0)           WKLINK
.A2      ANOP  ,
         DC    CL3'&ID'       WKID
&FLAGC   SETB  ('&TYPE'(1,1) EQ 'C')
&FLAGS   SETB  ('&TYPE'(1,1) EQ 'S')
&FLAGT   SETB  ('&TYPE'(1,1) EQ 'T')
&FLAGHW  SETB  ('&SIZE.Q'(1,1) EQ 'H')
         DC    AL1(&FLAGC*WKCTR+&FLAGS*WKSAMP+&FLAGT*WKTIME+&FLAGHW*WKHX
               W)
         DS    2F             WKSUM
         DS    2F             WKLAST
         DS    F              WKNOM
         DS    F              WKMIN
         DS    F              KKMAX
         DS    F              WKDUR
         DC    A(MN000&ID-MN000)  WKOFF
         DC    CL32&TITLE
         MEND
*
*              PROGRAM INITIALIZATION
*
         PRINT NOGEN
CPDATA2  CSECT                     MAIN LINE SECTION
         PGMIN USING=(R13,R12,R11) MONSANTO ENTRY MACRO
         OPEN  (SYSUT1,,SYSPRINT,OUTPUT)
         XC    SUSPENDC,SUSPENDC  RESET SUSPENSION COUNT
         XC    DURATION,DURATION  RESET DURATION
         XC    RECCNT,RECCNT  RESET RECORD COUNT
         XC    CNT000,CNT000
         XC    CNT400,CNT400
         XC    CNT500,CNT500
         XC    USRHEAD,USRHEAD
         XC    CNT600,CNT600
         XC    RIOHEAD,RIOHEAD
*
*              SKIP FOR TYPE 97 RECORD
*
AASKIP   GET   SYSUT1         READ A RECORD
         LR    R10,R1         SAVE ADDR THEROF
         USING MNHDR,R10      ADDRESS ON HEADER
         CLI   MNHCODE+1,97   HEADER RECORD?
         BNE   AASKIP         NO--SKIP UNTIL IT IS FOUND
         XC    BASETOD,BASETOD
         MVC   BASETOD+1(5),MNHTOD  GET RUN'S BASE TOD VALUE
         MVC   LASTTOD,BASETOD  GET LAST TOD CLOCK VALUE
         LA    R10,MNHDR+MNHDRLEN  GET ADDR OF MN097 PART
         USING MN097,R10
         GETMAIN R,LV=MN097LEN  GET SOMEPLACE TO TOPY IT
         MVC   0(MN097LEN,R1),MN097  SAVE IT
         ST    R1,PTR97       SAVE PTR TO IT
         MVI   FLAG,0         RESET SYSTEM STATUS FLAG
*
*              READ A RECORD
*
AGET     GET   SYSUT1         READ A RECORD
         LR    R10,R1         SAVE ADDR OF IT
         USING MNHDR,R10      ADDRESS ON HEADER PORTION
         L     R0,RECCNT
         A     R0,=F'1'       INCREMETN TOTAL RECORD COUNT
         ST    R0,RECCNT
         XC    CURRTOD,CURRTOD
         MVC   CURRTOD+1(5),MNHTOD  GET CURRENT TOD IN OUR FORM
         IC    R0,LASTTOD     GET HO BYTE OF LAST TOD VALUE
         CLC   CURRTOD+1(5),LASTTOD+1  DID WE OVERFLOW?
         BNL   *+8            NO--EVERYTHING'S FINE
         AL    R0,=F'1'       INCREMENT HO BYTE
         STC   R0,CURRTOD     SET HO BYTE IN CURR TOD
         MVC   LASTTOD,CURRTOD
         MVC   CLASS,MNHCLASS GET MC CLASS
         MVC   CODE,MNHCODE   GET MC CODE
         LA    R10,MNHDR+MNHDRLEN  GET ADDR OF DATA PORTION
         CLI   CLASS,0        CLASS ZERO?
         BE    ACLASS0        YES--GO PROCESS IT
         CLI   CLASS,4        CLASS FOUR?
         BE    ACLASS4        YES--GO PROCESS IT
         CLI   CLASS,6
         BE    ACLASS6        CLASS SIZ
         CLI   CLASS,5             INSTRUCTION SIMULATION RECORD?
         BNE   *+4+4               NO,SKIP THE BRANCH OUT
         BAL   R4,ACLASS5          GO PROCESS CLASS 5 RECORD
         B     AGET           ALL OTHER CLASSES NOT SUPPORTED
*
*              PROCESS CLASS ZERO RECORD
*
ACLASS0  DS    0H
         CLI   CODE+1,0       TYPE 000?
         BE    AMN000         YES--GO PROCESS IT
         CLI   CODE+1,99      SUSPENSION RECORD?
         BE    ASUSPND        YES--GO PROCESS
         B     AGET           ALL OTHER TYPES UNSUPPORTED
*
*              SUSPENSION RECORD (099)
*
         USING MN099,R10      ADDRESSABILITY
ASUSPND  L     R0,SUSPENDC    GET SUSPEND COUNT
         MVC   DW,MN099CNT
         A     R0,DW          INCREMENT
         ST    R0,SUSPENDC
         B     AGET           NEXT RECORD
*
*              TYPE 000 RECORD
*
         USING MN000,R10
AMN000   DS    0H
         TM    FLAG,WKINIT    HAVE WKRECS BEEN INITED?
         BNZ   ABUPD          YES--START UPDATING THEM
*
*              INITIALIZE WKRECS
*
         L     R9,WKHEAD
         USING WKREC,R9
ABLOOP1  LTR   R9,R9          ANY MORE WKRECS?
         BNP   ABDONE1        NO--STOP
         XC    WKSUM,WKSUM
         L     R2,WKOFF
         LA    R2,MN000(R2)   ADDR OF DATA VALUE
         MVC   WKLAST,0(R2)   INIT CTR VALUE
         XC    WKMAX,WKMAX    INIT MAX
         XC    WKMIN,WKMIN
         XC    WKDUR,WKDUR    INIT DURATION
         L     R9,WKLINK      GET NEXT WKREC
         B     ABLOOP1        CONTINUE SCAN
ABDONE1  DS    0H
         MVC   LTOD000,CURRTOD
         OI    FLAG,WKINIT    HAVE BEEN INITIALIZED
         B     AGET           NEXT RECORD PLEASE
*
*              UPDATE TYPE 000 RECORD
*
ABUPD    DS    0H
         L     R0,CNT000
         A     R0,=F'1'       INCR COUNT OF TYPE 000 RECORDS
         ST    R0,CNT000
         LM    R0,R1,CURRTOD
         SL    R1,LTOD000+4   COMPUTE INTERVAL LENGTH
         BC    11,*+8
         SL    R0,=F'1'
         SL    R0,LTOD000
         SRDL  R0,12          TONVERT TO USEC
         D     R0,=F'10000'   CONVERT TO .01 SEC
         ST    R1,INTVL
*
*              UPDATE WKRECS
*
         L     R9,WKHEAD
         USING WKREC,R9
ABLOOP2  LTR   R9,R9          ANY MORE?
         BNP   ABDONE2        NO--STOP
         L     R2,WKOFF
         LA    R2,MN000(R2)   ADDR OF DATA VALUE
         L     R0,WKDUR
         A     R0,INTVL       INCREMENT RUN DURATION
         ST    R0,WKDUR
         TM    WKFLAG,WKTIME  TYPE TIME?
         BO    ABTOD          YES--HANDLE SEPARATELY
         LH    R0,0(R2)       GET HW DATA VALUE
         TM    WKFLAG,WKHW    WAS IT HW?
         BO    *+8            YES
         L     R0,0(R2)       OTHERWISE GET FW VALUE
         TM    WKFLAG,WKSAMP  SAMPLED VALUE?
         BO    ABSAMP         YES--GO PROCESS
*
*              UPDATE COUNTER-TYPE WKREC
*
         LH    R15,WKLAST     GET HW LAST VAL
         TM    WKFLAG,WKHW    RIGHT?
         BO    *+8            Y-YESS--USE IT
         L     R15,WKLAST     GET FW LAST VAL
         SR    R0,R15         COMPUTE CHANGE OVER INTERVAL
         BNM   *+6            OK IF POSITIVE
         SR    R0,R0          OTHERWISE SET TO ZERO
         LM    R14,R15,WKSUM  GET TOTAL
         ALR   R15,R0         INCREMENT
         BC    12,*+8
         AL    R14,=F'1'      CARRY
         STM   R14,R15,WKSUM  STORE DP INTEGER VAL
         LR    R1,R0          GET INCREMENT
         M     R0,=F'10000'
         D     R0,INTVL       COMPUTE RATE IN .01 UNITS/SEC
         MVC   WKLAST,0(R2)   UPDATE WKLAST
*
*              UPDATE MIN/MAX FOR ALL TYPES
*
ABMINMAX DS    0H
         CLC   WKMAX,=F'0'    HAVE THEY BEEN UPDATED?
         BNE   *+8            YES--OK
         ST    R1,WKMIN       INIT MIN VALUE TO SOMETHING LARGE
         C     R1,WKMIN       NEW MIN
         BNL   *+8
         ST    R1,WKMIN       SET NEW MIN
         C     R1,WKMAX
         BNH   *+8
         ST    R1,WKMAX       SET NEW MAX VALUE
         B     ABNEXT2        NEXG WKREC
*
*              UPDATE SAMPLE-TYPE WKREC
*
ABSAMP   DS    0H
         LR    R15,R0         SAVE CURRENT VALUE
         M     R14,INTVL      INTEGRATE OVER LAST INTERVAL
         AL    R15,WKSUM+4    INCREMENT INTEGRATED QUANTITY
         BC    12,*+8
         AL    R14,=F'1'      CARRY
         AL    R14,WKSUM
         STM   R14,R15,WKSUM
         LR    R1,R0          GET CURRENT VALUE IN R1
         M     R0,=F'100'     ADJUST FOR MIN/MAX
         B     ABMINMAX       UPDATE MIN/MAX
*
*              UPDATE TOD-TYPE WKREC
*
ABTOD    DS    0H
         LM    R0,R1,WKLAST
         SL    R1,4(R2)       COMPUTE DIFFERENCE OVER INTERVAL
         BC    11,*+8
         SL    R0,=F'1'
         SL    R0,0(R2)
         SRDA  R0,12          CONVERT TO USEC
         LR    R14,R0         SAVE IN R14/R15
         LR    R15,R1
         D     R0,INTVL       COMPUTE .01% VALUE FOR MIN/MAX
         D     R14,=F'10000'  CONVERT TO .01 SEC
         SR    R14,R14
         AL    R15,WKSUM+4    SUM TOTAL TIME
         BC    12,*+8
         AL    R14,=F'1'
         AL    R14,WKSUM
         STM   R14,R15,WKSUM  TOTAL IN .01 SEC UNITS
         MVC   WKLAST,0(R2)   UPDATE WKLAST
         B     ABMINMAX       UPDATE MIN/MAX
ABNEXT2  L     R9,WKLINK      NEXT WKREC
         B     ABLOOP2        CONTINUE SCAN
ABDONE2  DS    0H             HERE WHEN OUT OF WKRECS
         MVC   LTOD000,CURRTOD  SAVE CURRENT TOD AS LAST
         B     AGET           GET NEXT RECORD
*
*              PROCESS CLASS 4 DATA
*
ACLASS4  DS    0H
         CLI   CODE+1,0       CODE ZERO?
         BNE   AGET           NO--NOT SUPPORTED
         USING MN400,R10      ADDRESS ON TYPE 400 RECORD
         L     R0,CNT400
         A     R0,=F'1'
         ST    R0,CNT400
*
*              SEARCH FOR USER
*
         L     R9,USRHEAD
         LA    R2,USRHEAD     LAGGING PTR
         USING USRREC,R9
AELOOP1  LTR   R9,R9          ANY MORE USRRECS?
         BNP   AEDONE1        NO--MUST NOT BE FOUND
         CLC   USRNAME,MN400UID  USERID MATCH?
         BE    AEFOUND1       FOUND IT
AENEXT1  LA    R2,USRLINK     LAGGING PTR MUST LAG
         L     R9,USRLINK     NEXT USRREC
         B     AELOOP1
AEDONE1  DS    0H             HERE IF NOT FOUND
*
*              BUILD NEW USRREC
*
         GETMAIN R,LV=USRLEN
         LR    R9,R1          GET ADDR OF NEW USRREC
         XC    USRREC(USRLEN),USRREC  CLEAR IT
         ST    R9,0(R2)       ADD TO END OF LIST
         LH    R0,MN400RES    GET RES PAGES
         MH    R0,=H'100'     CONVERT FOR LATER FMT
         ST    R0,USRRESMN    MIN RES PAGES
         ST    R0,USRRESMX    ALSO MAX FOR TIME BEING
*
*              UPDATE LAST FIELDS IN USRREC ON START/RESTART
*
AEUPDLST DS    0H
         MVC   USRNAME,MN400UID
         MVC   USRLTTIM,MN400TTI
         MVC   USRLVTIM,MN400VTI
         MVC   USRLSIO,MN400IOC
         MVC   USRLTOD,CURRTOD
         L     R0,MN400PGR
         A     R0,MN400PGW
         ST    R0,USRLPGIO
         NI    USRFLAG,255-USRGONE  TURN OFF GONE FLAG
         OI    USRFLAG,USRON2 WAS ON THIS CYCLE
         B     AGET           NEXT RECORD
*
*              UPDATE USRREC
*
AEFOUND1 DS    0H
         TM    USRFLAG,USRGONE  WAS USER MISSING LAST CYCLE?
         BO    AEUPDLST       YES--RESET LAST FIELDS AND RESTART
         OI    USRFLAG,USRON2 INDICATE HE IS ON
         CLC   MN400TTI,USRLTTIM  IS SUPVR TIME DECREMENTING?
         BH    AEUPDLST       NO--OPERATOR MUST HAVE ISSUED ACNT CMND
         LM    R0,R1,CURRTOD  GET CURRENT TOD
         SL    R1,USRLTOD+4   COMPUTE INTERVAL SIZE
         BC    11,*+8
         SL    R0,=F'1'
         SL    R0,USRLTOD
         SRDA  R0,12
         AL    R1,=F'500'
         BC    12,*+8
         AL    R0,=F'1'       ROUND
         D     R0,=F'1000'    CONVERT TO MSEC
         ST    R1,INTVL
         L     R0,USRON
         A     R0,INTVL       INCREMENT LOGGED ON TIME
         ST    R0,USRON
         LM    R0,R1,USRLTTIM  GET LAST TTIME
         SL    R1,MN400TTI+4
         BC    11,*+8
         SL    R0,=F'1'
         SL    R0,MN400TTI
         SRDA  R0,12
         AL    R1,=F'500'
         BC    12,*+8
         AL    R0,=F'1'       ROUND
         D     R0,=F'1000'    CONVERT TO MSEC
         A     R1,USRTTIME
         ST    R1,USRTTIME    .01 SEC TTIME
         MVC   USRLTTIM,MN400TTI  SET LAST TTIME VALUE
         LM    R0,R1,MN400VTI  THIS ONE INCREMENTS
         SL    R1,USRLVTIM+4
         BC    11,*+8
         SL    R0,=F'1'
         SL    R0,USRLVTIM
         SRDA  R0,12
         AL    R1,=F'500'
         BC    12,*+8
         AL    R0,=F'1'
         D     R0,=F'1000'
         A     R1,USRVTIME
         ST    R1,USRVTIME
         MVC   USRLVTIM,MN400VTI
         LH    R1,MN400RES
         M     R0,INTVL       INTEGRATE
         A     R1,USRRES
         ST    R1,USRRES
         LH    R1,MN400RES
         M     R0,=F'100'
         LR    R0,R1          PUT IT IN R0
         C     R0,USRRESMN
         BNL   *+8
         ST    R0,USRRESMN
         C     R0,USRRESMX    NEW MAX RES PAGES?
         BNH   *+8
         ST    R0,USRRESMX    IF SO SET IT
         LH    R1,MN400WSS
         M     R0,INTVL
         A     R1,USRWSS
         ST    R1,USRWSS
         L     R0,USRCFW
         A     R0,INTVL       INCR IN CASE IN CF WAIT
         TM    MN400RST,VMCFWAIT
         BZ    *+8            NOT IN CF WAIT
         ST    R0,USRCFW
         L     R0,USRPGW
         A     R0,INTVL
         TM    MN400RST,VMPGWAIT
         BZ    *+8
         ST    R0,USRPGW
         L     R0,USRIOW
         A     R0,INTVL
         TM    MN400RST,VMIOWAIT
         BZ    *+8
         ST    R0,USRIOW
         L     R0,USRPSW
         A     R0,INTVL
         TM    MN400RST,VMPSWAIT
         BZ    *+8
         ST    R0,USRPSW
         L     R0,USREXW
         A     R0,INTVL
         TM    MN400RST,VMEXWAIT
         BZ    *+8
         ST    R0,USREXW
         LA    R2,USRQ1       ASSUME IN QUEUE
         TM    MN400DST,VMINQ  RIGHT?
         BNZ   *+8            YES
         LA    R2,USRE1       THEN ASSUME ELIGIBLE
         TM    MN400QLV,VMQ1  QUEUE 1?
         BNZ   *+8            YES
         LA    R2,USRQ2-USRQ1(R2)  BUMP TO QUEUE 2 SLOT
         L     R0,0(R2)
         A     R0,INTVL
         TM    MN400DST,VMINQ+VMELIG  IN QUEUE OR ELIGIBLE?
         BZ    *+8            NO--DON'T INCR ANY COUNTER
         ST    R0,0(R2)       STORE INCREMENTED COUNTER
         L     R0,MN400IOC
         S     R0,USRLSIO     INCR THIS INTVL
         A     R0,USRSIO
         ST    R0,USRSIO
         MVC   USRLSIO,MN400IOC
         MVC   USRLTOD,CURRTOD
         OI    USRFLAG,USRON2
         NI    USRFLAG,255-USRGONE
         L     R0,MN400PGR    PAGE READS
         A     R0,MN400PGW    PLUS PAGE WRITES = PAGING IO
         LR    R1,R0
         S     R0,USRLPGIO
         A     R0,USRPGIO
         ST    R0,USRPGIO     INCRMNT COUNTER
         ST    R1,USRLPGIO    LAST PAGING IO COUNT
         CLC   MN400UID,=CL8'SYSTEM'  IS THIS SYSTEM ENTRY?
         BNE   AGET           NO--GET NEXT RECORD
*
*              EXTRA PROCESSING FOR SYSTEM VMBLOK
*
         ST    R9,ASYSUSR     SAVE ADDR
         L     R9,USRHEAD     START TO RESCAN
AELOOP2  LTR   R9,R9          ANY MORE USRRECS?
         BNP   AEDONE2        NO--STOP
         TM    USRFLAG,USRON2  USER ON THIS LAST CYCLE?
         BO    *+8            YES
         OI    USRFLAG,USRGONE
         NI    USRFLAG,255-USRON2  RESET FLAG TO CHK NEXT CYCLE
AENEXT2  L     R9,USRLINK
         B     AELOOP2
AEDONE2  DS    0H
         B     AGET           GO GET NEXT RECORD
         EJECT
***********************************************************************
*        HERE PROCESS CLASS 5 RECORDS- INSTRUCTION SIMULATION         *
***********************************************************************
         SPACE 3
ACLASS5  SUBIN SAVE=(R1,R2,R4,R5)  SUBROUTINE ENTRY
         USING MN500,R10           ESTABLISH RECORD ADDRESSABILITY
         CLC   MN500UID,OPERATOR   IS IT FOR THE RIGHT GUY?
         BNE   ACLASS5X            NO,IGNORE IT
         ICM   R5,15,CNT500        GET TYPE 5 RECORD COUNT
         BZ    ACLASS5F            SKIP IF FIRST RECORD
         LA    R5,1(,R5)           ADD THIS RECORD
         ST    R5,CNT500           SAVE NEW RECORD COUNT
         LH    R1,MN500INS         PICK UP INSTRUCTION TO MEASURE
         BAL   R4,OPCODER          FIND ITS INDEX IN THE TABLES
         LTR   R5,R1               SAVE INDEX VALUE
         BNP   ACLASS5X            EXIT IF NOT INTERESTED
         BAL   R4,TIMEIT           CALCULATE ELAPSED MICROSECONDS
         SLL   R5,2                MULTIPLY BY INDEX BY 4
         LA    R4,INSTTIME(R5)     POINT TO TABLE ENTRY THIS INSTR.
         A     R1,0(,R4)           ADD TIME THIS EXECUTION OF INST.
         ST    R1,0(,R4)           AND SAVE ANSWER
         L     R4,INSCOUNT(R5)     PICK UP OCCURRENCE COUNT
         LA    R4,1(,R4)           INCLUDE THE ONE WE JUST DID
         ST    R4,INSCOUNT(R5)     SAVE ANSWER IN TABLE
         MVC   PREVTIME,MN500OVH   MOVE CURRENT VALUE TO PREVIOUS VALUE
ACLASS5X SUBOUT RESTORE=(R1,R2,R4,R5) RETURN TO MAIN LINE
         SPACE 2
ACLASS5F DS    0H                  PROCESS FIRST CLASS 5 RECORD
         MVC   FIRSTIME,MN500OVH   SAVE FIRST SIMULATION TOTAL
         MVC   PREVTIME,MN500OVH   AND PREVIOUS TOTAL
         LA    R5,1(,R5)           INCREMENT RECORD COUNT
         ST    R5,CNT500           SAVE IT
         B     ACLASS5X            THEN JUST EXIT
         EJECT
***********************************************************************
*        TIMEIT - INSTRUCTION TIME CALCULATION ROUTINE                *
*        ON EXIT                   R1 = INSTRUCTION SIMULATION TIME   *
*        NOTE: THE TOTAL COUNTER MAY OVERFLOW AFTER ABOUT 37 MINUTES  *
*        OF SIMULATION TIME,SO DO NOT RUN THE MONITOR MORE THAN 1 HR. *
***********************************************************************
TIMEIT   SUBIN SAVE=(R4,R5)        CONVERSION SUB-ROUTINE ENTRY
         LM    R4,R5,PREVTIME      PICK UP START TIME
         SL    R5,MN500OVH+4       SUBTRACT ONE TO MEASURE
         BC    11,*+8
         SL    R4,=F'1'
         SL    R4,MN500OVH
         SRDA  R4,12
         LR    R1,R5               GET ANSWER IN R1
         A     R5,TOTALTIM         ADD THIS ONE TO TOTAL
         ST    R5,TOTALTIM         AND SAVE ANSWER
TIMEITEX SUBOUT RESTORE=(R4,R5)    SUB-ROUTINE EXIT
         SPACE 3
***********************************************************************
*        OPCODER - GENERATE INDEX FOR OP-CODE TABLES.                 *
*        ON ENTRY                  R1 = HALFWORD OP-CODE              *
*        ON EXIT                   R1 = INDEX FOR OP-CODE TABLES      *
***********************************************************************
         SPACE 2
OPCODER  SUBIN SAVE=(R2,R4)        SUB-ROUTINE ENTRY
         SR    R4,R4               CLEAR A WORK REGISTER
         SR    R2,R2               AND ANSWER REGISTER
         STH   R1,OPCODE           SAVE OP-CODE
         TRT   OPCODE(1),OPTABLE   TRANSLATE FIRST BYTE
         CH    R2,=H'13'           IS IT A ONE-BYTE OP-CODE?
         BNH   OPCODED             YES, SKIP THE INDEX ON.
         IC    R4,OPCODE+1         PICK UP THE SECOND BYTE
OPCODED  DS    0H                  GET COMBINED INDEX
         LA    R1,0(R2,R4)         ADD BASE INDEX AND OFFSET
         BCTR  R1,0                DECREMENT BY ONE FOR TABLES' START
         SPACE 1
OPCODEX  DS    0H                  RETURN TO CALLER
         SUBOUT RESTORE=(R2,R4)    SUB-ROUTINE EXIT
         SPACE 1
         DROP  R10                 END TYPE 5 RECORD ADDRESSABILITY
         EJECT
*
*              PROCESS CLASS SIX (DASTAP) DATA
*
ACLASS6  CLI   CODE+1,0       TYPE 600?
         BE    AMN600         YES--WE CAN DO IT
         CLI   CODE+1,1       601?
         BE    AMN600         YES--WE CAN DO IT
         B     AGET           OTHERWISE IGNORE INVALID CODE 60X RECORD
*
*              PROCESS 60X RECORDS
*
AMN600   DS    0H
         USING MN600HDR,R10   ADDRESS HEADER
         LH    R8,MN600NUM    GET DEVICE COUNT
         LTR   R8,R8          IS IT POSITIVE?
         BNP   AGET           NO--IGNORE
         LA    R10,MN600HDR+MN600HLN  GET         DATA ADDR
         USING MN600DEV,R10   ADDRESS DEVICE PORTION
         L     R9,RIOHEAD     GET RIOBLOK ADDR
         LTR   R9,R9          ARE THERE ANY?
         BP    AHUPD          YES--GO UPDATE THEM
*
*              BUILD RIO BLOCKS
*
AHBLD    LA    R2,RIOHEAD     LAGGING PTR FOR LINKING
AHLOOP1  DS    0H
         GETMAIN R,LV=RIOLEN  GET STORAGE FOR ONE
         LR    R9,R1          GET ADDR IN CONVENIENT PLACE
         USING RIOBLOK,R9
         XC    RIOBLOK(RIOLEN),RIOBLOK  CLEAR IT THE EASY WAY
         ST    R9,0(R2)       ADD TO LIST
         LA    R2,RIOLINK     UPDATE LAGGING PTR
         MVC   RIOADDR,MN600ADD  DEVICE ADRESS
         MVC   RIOTYPE,MN600TY  DEVICE CLASS/TYPE
         MVC   RIOVOL,MN600SER
         MVC   RIOLSIO,MN600CNT  SIO COUNT
         MVI   RIOLSIO,0      CLEAR STATUS FROM H/O BYTE
         LA    R10,MN600DEV+MN600DLN  NEXT DEVICE ENTRY
         BCT   R8,AHLOOP1     CONTINUE THROUGH ALL DEVICES
         MVC   LTOD600,CURRTOD
         B     AGET           NEXT REC AFTER SAVING TOD
*
*              UPDATE THE RIOBLOKS
*
AHUPD    LM    R0,R1,CURRTOD
         SL    R1,LTOD600+4   COMPUTE LENGTH OF INTERVAL
         BC    11,*+8
         SL    R0,=F'1'
         SL    R0,LTOD600
         SRDA  R0,12
         D     R0,=F'1000'    CONVERT TO USEC
         A     R1,=F'5'       ROUND
         SR    R0,R0
         D     R0,=F'10'      CONVERT TO .01 SEC
         ST    R1,INTVL       INTERVAL LENGTH
         L     R0,CNT600
         A     R0,=F'1'       INCREMENT RECORD COUNTER
         ST    R0,CNT600
         MVC   LTOD600,CURRTOD
         L     R9,RIOHEAD     START SCANNING RIOBLOKS
         USING RIOBLOK,R9
AHLOOP2  LTR   R9,R9          RUN OUT OF RIOBLOKS?
         BNP   AHERR1         YES--ERROR IN DATA
         CLC   RIOADDR,MN600ADD  DO ADDRES MATCH?
         BNE   AHERR1         NO--ERROR
         MVC   RIOVOL,MN600SER
         MVC   DW(4),MN600CNT GET CURRENT SIO COUNT
         L     R1,DW
         LA    R1,0(R1)       REMOVE STATUS FROM H/O BYTE
         S     R1,RIOLSIO     COMPUTE SIOS THIS INTERVAL
         BP    *+6            IF POS
         SR    R1,R1          DON'T LET GET NEGATIVE
         LR    R0,R1          SAVE IN R1 AND USE IN R0
         A     R0,RIOSIO      INCR TOTAL SIO COUNT
         ST    R0,RIOSIO
         MVC   RIOLSIO,MN600CNT  UPDATE LAST SIO COUNTER VALUE
         MVI   RIOLSIO,0      CLEAR HO BYTE
         M     R0,=F'10000'   ADJUST SIOS FOR .01 SEC AND .01 ACCURACY
         D     R0,INTVL       COMPUTE RATE THIS INTERVAL
         C     R1,RIOMXSIO    MAX RATE FOR RUN?
         BNH   *+8            NO--LEAVE ALONE
         ST    R1,RIOMXSIO    NEW MAX RATE
         L     R0,RIODUR      RUN DURATION FOR THIS DEVICE
         A     R0,INTVL
         ST    R0,RIODUR
         L     R0,RIOFREE
         A     R0,INTVL
         TM    MN600CNT,RDEVBUSY+RDEVSCED+RDEVDISA  FREE?
         BNZ   *+8            NO--THEN DON'T UPDATE
         ST    R0,RIOFREE
         L     R0,RIOBUSY
         A     R0,INTVL
         TM    MN600CNT,RDEVBUSY
         BZ    *+8            IF NOT BUSY
         ST    R0,RIOBUSY     INCREMENT BUSY
         L     R0,RIOSCHED
         A     R0,INTVL
         TM    MN600CNT,RDEVSCED
         BZ    *+8
         ST    R0,RIOSCHED
         L     R9,RIOLINK
         LA    R10,MN600DEV+MN600DLN  NEXT MN REC
         BCT   R8,AHLOOP2     CONTINUE THROUGH MONITOR RECORD
         B     AGET           THEN GET NEXT RECORD
AHERR1   ABEND 601,DUMP       ABEND IF RIOB/MN600 OUT OF SYNC
*
*              SYSUT1 END OF FILE
*
EOFUT1   DS    0H
         CLOSE (SYSUT1)
         FREEPOOL SYSUT1
*
*              INITIALIZE FOR PRINT
*
         ZAP   LINES,=P'0'
         ZAP   PAGENO,=P'0'
*
*              PAGE ONE - MONITOR SUMMARY
*
         AP    PAGENO,=P'1'
         MVC   HDR1+117(4),=X'40202120'
         ED    HDR1+117(4),PAGENO
         L     R10,PTR97      GET MN097 ADDR
         USING MN097,R10
         MVC   HDR1+93(8),MN097DAT
         MVC   HDR1+103(8),MN097TIM
         PUT   SYSPRINT,=X'8B'
         PUT   SYSPRINT,HDR1  MAIN HEADER
         MVI   OUT,X'19'      SET UP HDR2
         MVC   OUT+1(120),=CL120' '
         MVC   OUT+61-L'HDR2A/2(L'HDR2A),HDR2A
         PUT   SYSPRINT,OUT
         ZAP   LINES,=P'54'   LINES LEFT
*
*              RUN START TIME/DATE
*
         L     R10,PTR97      GET MN097 POINTER
         USING MN097,R10
         MVI   OUT,X'11'
         MVC   OUT+1(120),=CL120' '
         MVC   OUT+38(20),=CL20'START DATE'
         MVC   OUT+60(8),MN097DAT  EBCDIC DATE
         PUT   SYSPRINT,OUT
         MVI   OUT,X'11'
         MVC   OUT+1(120),=CL120' '
         MVC   OUT+38(20),=CL20'START TIME'
         MVC   OUT+60(8),MN097TIM  EBCDIC TIME
         PUT   SYSPRINT,OUT
*
*              COMPUTE AND PRINT RUN DURATION
*
         MVI   OUT,X'11'
         MVC   OUT+1(120),=CL120' '
         MVC   OUT+38(20),=CL20'DURATION'
         LM    R0,R1,CURRTOD  GET LAST KNOWN TOD
         SL    R1,BASETOD+4   COMPUTE RUN DURATION
         BC    11,*+8
         SL    R0,=F'1'
         SL    R0,BASETOD
         SRDA  R0,12          CONVERT TO USEC
         D     R0,=A(1000*1000*60/100)  CONVERT TO .01 MIN
         CVD   R1,DW
         ST    R1,DURATION    SAVE FOR LATER USE
         MVC   OUT+59(9),=X'4020202020214B2020'
         ED    OUT+59(9),DW+4
         MVC   OUT+69(7),=C'MINUTES'
         PUT   SYSPRINT,OUT
*
*              VM SYSTEM LEVEL
*
         MVI   OUT,X'11'
         MVC   OUT+1(120),=CL120' '
         MVC   OUT+38(20),=CL20'VM/370 RELEASE'
         MVC   OUT+56(12),=C'XX.XX PLC XX'
         MVC   OUT+56(2),MN097LEV
         MVC   OUT+59(2),MN097LEV+2
         MVC   OUT+66(2),MN097LEV+6
         PUT   SYSPRINT,OUT
*
*              PRINT CONTROL REGISTER 8 VALUE
*
         MVI   OUT,X'11'
         MVC   OUT+1(120),=CL120' '
         MVC   OUT+38(20),=CL20'CONTROL REG 8'
         UNPK  OUT+60(9),MN097CR8(5)
         MVI   OUT+68,C' '    TAKE CARE OF GARBAGE BYTE
         NC    OUT+60(8),=8X'0F'
         TR    OUT+60(8),=C'0123456789ABCDEF'
         PUT   SYSPRINT,OUT
*
*              TOTAL RECORD COUNT
*
         MVI   OUT,X'11'
         MVC   OUT+1(120),=CL120' '
         MVC   OUT+38(20),=CL20'TOTAL RECORDS'
         L     R0,RECCNT
         CVD   R0,DW
         MVC   OUT+62(6),=X'402020202120'
         ED    OUT+62(6),DW+5
         PUT   SYSPRINT,OUT
*
*              SUSPENSION COUNT
*
         L     R0,SUSPENDC
         CVD   R0,DW
         MVI   OUT,X'11'
         MVC   OUT+1(120),=CL120' '
         MVC   OUT+38(20),=CL20'SUSPENSIONS'
         MVC   OUT+62(6),=X'402020202120'
         ED    OUT+62(6),DW+5
         PUT   SYSPRINT,OUT
*
*              TYPE 000 RECORD COUNT
*
         L     R0,CNT000
         CVD   R0,DW
         MVI   OUT,X'11'
         MVC   OUT+1(120),=CL120' '
         MVC   OUT+38(20),=CL20'TYPE 000 RECORDS'
         MVC   OUT+62(6),=X'402020202120'
         ED    OUT+62(6),DW+5
         PUT   SYSPRINT,OUT
*
*              TYPE 400 RECORD COUNT'
*
         L     R0,CNT400
         CVD   R0,DW
         MVI   OUT,X'11'
         MVC   OUT+1(120),=CL120' '
         MVC   OUT+38(20),=CL20'TYPE 400 RECORDS'
         MVC   OUT+62(6),=X'402020202120'
         ED    OUT+62(6),DW+5
         PUT   SYSPRINT,OUT
*
*              TYPE 500 RECORD COUNT'
*
         L     R0,CNT500
         CVD   R0,DW
         MVI   OUT,X'11'
         MVC   OUT+1(120),=CL120' '
         MVC   OUT+38(20),=CL20'TYPE 500 RECORDS'
         MVC   OUT+62(6),=X'402020202120'
         ED    OUT+62(6),DW+5
         PUT   SYSPRINT,OUT
*
*              TYPE 60X RECORD COUNT
*
         L     R0,CNT600
         CVD   R0,DW
         MVI   OUT,X'11'
         MVC   OUT+1(120),=CL120' '
         MVC   OUT+38(20),=CL20'TYPE 60X RECORDS'
         MVC   OUT+62(6),=X'402020202120'
         ED    OUT+62(6),DW+5
         PUT   SYSPRINT,OUT
*
*              INITIALIZE FOR WKREC LISTING
*
         ZAP   LINES,=P'0'    FORCE NEW PAGE
         L     R9,WKHEAD      START SCANNING WKRECS
         USING WKREC,R9
BALOOP1  DS    0H
         LTR   R9,R9
         BNP   BADONE1        NO MORE WKRECS
         ICM   R0,15,WKDUR         TEST VALUE OF WKDUR
         BZ    BACOM2              ZERO,SKIP PROCESSING
         CP    LINES,=P'1'    ROOM ON PAGE?
         BNL   BASMPG         NO
         PUT   SYSPRINT,=X'8B'
         AP    PAGENO,=P'1'
         MVC   HDR1+117(4),=X'40202120'
         ED    HDR1+117(4),PAGENO
         PUT   SYSPRINT,HDR1
         MVI   OUT,X'19'      BUILD HDR3 IN OUT
         MVC   OUT+1(120),=CL120' '
         MVC   OUT+61-L'HDR3A/2(L'HDR3A),HDR3A
         PUT   SYSPRINT,OUT
         PUT   SYSPRINT,HDR4
         ZAP   LINES,=P'52'
BASMPG   DS    0H             HERE IF GOES ON SAME PAGE
*
*              FORMAT WKRECS
*
         MVI   OUT,X'11'
         MVI   OUT,X'09'      SINGLE SPACE FOR TEST
         MVC   OUT+1(120),=CL120' '
         MVC   OUTAID,WKID    DATA ITEM IDENTIFIER
         MVC   OUTANAME,WKTITLE  TITLE
         TM    WKFLAG,WKSAMP  SAMPLED DATA ITEM?
         BO    BASAMP1        YES--GO HANDLE
         TM    WKFLAG,WKCNT   HW ABOUT COUNTER TYPE?
         BO    BACNT1         YES--GO TO DO IT
*
*              CONVERT TIMER-TYPE VALUE
*
         LM    R0,R1,WKSUM    GET TOTAL TIME
         D     R0,=F'60'      CONVERT .01 SEC TO .01 MIN
         CVD   R1,DW
         MVC   OUTASUM,PAT1   GET THE NNN.NN PATTERN
         ED    OUTASUM,DW+3
         MVC   OUTASUM+12(7),=C'MINUTES'  UNITS
         LM    R0,R1,WKSUM    GET TOTAL TIME IN .01 SEC
         M     R0,=F'10000'
         D     R0,WKDUR       COMPUTE .01% OF TOTAL RUN
         ST    R1,WKNOM       NOMINAL VALUE
         B     BACOM1         GO TO COMMON CODE
*
*              CONVERT COUNTER VALUE
*
BACNT1   LM    R0,R1,WKSUM    GET TOTAL COUNTER CHANGE
         CVD   R1,DW
         MVC   OUTASUM,PAT2
         ED    OUTASUM,DW+3
         M     R0,=F'10000'
         D     R0,WKDUR       COMPUTE NOMINAL RATE IN .01 UNITS/SEC
         ST    R1,WKNOM       NOMINAL VALUE
         B     BACOM1         COMMON CODE
*
*              CONVERT SAMPLED TYPE
*
BASAMP1  LM    R0,R1,WKSUM    INTEGRATED VALUE (DON'T PRINT)
         M     R0,=F'100'
         D     R0,WKDUR       COMPUTE NOMINAL (TIME-WEIGHTED) VALUE
         ST    R1,WKNOM       STORE NOMINAL VALUE
*
*              COMMON CODE DRIVER
*
BACOM1   DS    0H
         L     R0,WKNOM       GET NOMINAL VALUE
         LA    R1,OUTANOM     WHERE IT GOES
         BAL   R14,BAFMT      FORMAT IT
         L     R0,WKMIN       SAME FOR MIN
         LA    R1,OUTAMIN
         BAL   R14,BAFMT
         L     R0,WKMAX
         LA    R1,OUTAMAX
         BAL   R14,BAFMT
         PUT   SYSPRINT,OUT
         SP    LINES,=P'2'
         AP    LINES,=P'1'
BACOM2   L     R9,WKLINK      NEXT WKREC
         B     BALOOP1        CONTINUE
*
*              BAFMT FORMATTING ROUTINE
*
BAFMT    DS    0H
         CVD   R0,DW
         MVC   0(11,R1),PAT1  GET NNN.NN EDIT PATTERN
         ED    0(11,R1),DW+3
         TM    WKFLAG,WKTIME  TIMER VALUE?
         BZ    *+8            NO
         MVI   11(R1),C'%'    INDICATE % OF INTERVAL
         TM    WKFLAG,WKCNT   COUNTER VALUE?
         BZ    *+10
         MVC   11(4,R1),=C'/SEC'  INDICATE IS UNITS/SECOND
         BR    R14            RETURN TO CALLER
*
*              END OF TYPE 000 PRINT
*
BADONE1  DS    0H
*
*              PRODUCE USER STATISTICS REPORT
*
         SORT  KEY=(USRNAME-USRREC),                                   X
               KEYLEN=(L'USRNAME),                                     X
               PTR=USRLINK-USRREC,                                     X
               FIRST=USRHEAD
         ZAP   LINES,=P'0'
         L     R9,USRHEAD
         USING USRREC,R9
BELOOP1  LTR   R9,R9
         BNP   BEDONE1
         CP    LINES,=P'1'
         BNL   BEGO1          NO NEW PAGE
         PUT   SYSPRINT,=X'8B'
         AP    PAGENO,=P'1'
         MVC   HDR1+117(4),=X'40202120'
         ED    HDR1+117(4),PAGENO
         PUT   SYSPRINT,HDR1
         MVI   OUT,X'19'
         MVC   OUT+1(120),=CL120' '
         MVC   OUT+61-L'HDR5A/2(L'HDR5A),HDR5A
         PUT   SYSPRINT,OUT
         PUT   SYSPRINT,HDR6
         ZAP   LINES,=P'52'
BEGO1    DS    0H
         LA    R8,OUT
         USING BEOUT,R8
         MVI   OUT,X'09'
         MVC   OUT+1(120),=CL120' '
         MVC   BEOUSR,USRNAME
         L     R1,ASYSUSR
         L     R15,USRON-USRREC(R1)  GET APPROX RUN DURATION
         L     R1,USRON
         M     R0,=F'10000'
         A     R1,=F'5000'
         DR    R0,R15
         C     R1,=F'9900'
         BL    *+8
         NOP   0
         CVD   R1,DW
         MVC   BEOON,=X'402020214B2020'
         ED    BEOON,DW+5
         MVI   BEOON+7,C'%'
         LA    R7,BETBL1      START SCANNING TABLE
BELOOP2  CLC   0(2,R7),=H'-1'  END OF TABLE?
         BE    BEDONE2        YES--STOP
         LH    R2,0(R7)       OFFSET OF FIELD IN USRREC
         LA    R2,USRREC(R2)  ADDR OF FIELD
         L     R1,0(R2)
         L     R15,=F'100000'
         CLI   4(R7),C'%'     TIME QUANTITY?
         BNE   *+8            NO--USE WHAT WE HAVE
         L     R15,=F'10000'  CONVERT RATIO TO .01%
         CLI   4(R7),C' '     SAMPLED QUANTITL?
         BNE   *+8            NO--USE 10000
         L     R15,=F'100'    NEW
         MR    R0,R15         MULTIPLY
         L     R15,USRON
         SRA   R15,1
         ALR   R1,R15         ROUND
         BC    12,*+8
         AL    R0,=F'1'
         D     R0,USRON
         LA    R0,BETBL1A     PAST UPDATE POINT?
         CR    R7,R0          HUH?
         BL    *+8            NO--USE CALC VALUE
         L     R1,0(R2)       USE VALUE FROM TABLE
         CVD   R1,DW
         LH    R2,2(R7)       OUTPUT AREA OFFSET
         LA    R2,BEOUT(R2)
         MVC   0(7,R2),=X'402020214B2020'
         ED    0(7,R2),DW+5
         MVC   7(4,R2),4(R7)
         LA    R7,8(R7)
         B     BELOOP2        CONTINUE TABLE SCAN
BEDONE2  DS    0H
         PUT   SYSPRINT,OUT
         SP    LINES,=P'1'
         L     R9,USRLINK     NEXT USR
         B     BELOOP1
*
*              USER STATISTICS OUTPUT FORMATTING TABLE
*
BETBL1   DS    0A
         DC    AL2(USRTTIME-USRREC,BEOTTIME-BEOUT),CL4'%   '
         DC    AL2(USRVTIME-USRREC,BEOVTIME-BEOUT),CL4'%   '
         DC    AL2(USRPGIO-USRREC,BEOPGIO-BEOUT),CL4'/SEC'
         DC    AL2(USRSIO-USRREC,BEOSIO-BEOUT),CL4'/SEC'
         DC    AL2(USRRES-USRREC,BEORES-BEOUT),CL4'    '
         DC    AL2(USRWSS-USRREC,BEOWSS-BEOUT),CL4'    '
BETBL1A  DC    AL2(USRRESMN-USRREC,BEORESMN-BEOUT),CL4'    '
         DC    AL2(USRRESMX-USRREC,BEORESMX-BEOUT),CL4'    '
         DC    H'-1'
BEDONE1  DS    0H
*
*              SAMPLED USER STATUS REPORT
*
         ZAP   LINES,=P'0'
         L     R9,USRHEAD
         USING USRREC,R9
BELOOP3  LTR   R9,R9
         BNP   BEDONE3
         CP    LINES,=P'1'
         BNL   BEGO3
         PUT   SYSPRINT,=X'8B'
         AP    PAGENO,=P'1'
         MVC   HDR1+117(4),=X'40202120'
         ED    HDR1+117(4),PAGENO
         PUT   SYSPRINT,HDR1
         MVI   OUT,X'19'
         MVC   OUT+1(120),=CL120' '
         MVC   OUT+61-L'HDR7A/2(L'HDR7A),HDR7A
         PUT   SYSPRINT,OUT
         PUT   SYSPRINT,HDR8
         ZAP   LINES,=P'52'
BEGO3    DS    0H
         MVI   OUT,X'09'
         MVC   OUT+1(120),=CL120' '
         LA    R8,OUT
         USING BEOUT2,R8
         MVC   BEOUSR2,USRNAME
         LA    R7,BETBL3
         LA    R3,BEOCFW
BELOOP4  CLC   0(2,R7),=H'-1'  END OF TABLE?
         BE    BEDONE4        YES
         LH    R2,0(R7)       OFFSET OF DATA ITEM
         LA    R2,USRREC(R2)  ADDR THEROF
         L     R1,0(R2)       GET ITEM
         M     R0,=F'10000'
         L     R15,USRON
         SRA   R15,1
         ALR   R1,R15
         BC    12,*+8
         AL    R0,=F'1'
         D     R0,USRON
         CVD   R1,DW
         MVC   0(7,R3),=X'402020214B2020'
         ED    0(7,R3),DW+5
         MVI   7(R3),C'%'
         LA    R3,BEOPGW-BEOCFW(R3)  INCR U OUTPUT
         LA    R7,2(R7)       NEXT TABLE ENTRY
         B     BELOOP4
BEDONE4  DS    0H
         PUT   SYSPRINT,OUT
         SP    LINES,=P'1'
         L     R9,USRLINK     NEXT USRREC
         B     BELOOP3        CONTINUE PROCESSING
*
*              USER STATUS SUMMARY SCANNING TABLE
*
BETBL3   DS    0A
         DC    AL2(USRCFW-USRREC)
         DC    AL2(USRPGW-USRREC)
         DC    AL2(USRIOW-USRREC)
         DC    AL2(USRPSW-USRREC)
         DC    AL2(USREXW-USRREC)
         DC    AL2(USRQ1-USRREC)
         DC    AL2(USRQ2-USRREC)
         DC    AL2(USRE1-USRREC)
         DC    AL2(USRE2-USRREC)
         DC    H'-1'
BEDONE3  DS    0H
*
*              PRINT REAL DEVICE STATUS REPORT
*
         ZAP   LINES,=P'0'    FORCE NEW PAGE
         L     R9,RIOHEAD
         USING RIOBLOK,R9
BHLOOP1  LTR   R9,R9          ANY MORE RIOBLOKS?
         BNP   BHDONE1        NO
         CP    LINES,=P'1'    ROOM ON THIS AGE
         BNL   BHGO           YES--DO IT
         PUT   SYSPRINT,=X'8B'
         AP    PAGENO,=P'1'
         MVC   HDR1+117(4),=X'40202120'
         ED    HDR1+117(4),PAGENO
         PUT   SYSPRINT,HDR1
         MVI   OUT,X'19'
         MVC   OUT+1(120),=CL120' '
         MVC   OUT+61-L'HDR9A/2(L'HDR9A),HDR9A
         PUT   SYSPRINT,OUT
         PUT   SYSPRINT,HDR10
         ZAP   LINES,=P'52'
BHGO     DS    0H
         LA    R8,OUT
         USING BHOUT,R8
         MVI   OUT,X'09'
         MVC   OUT+1(120),=CL120' '
         UNPK  BHOADDR(4),RIOADDR(3)  GET 3 BYTES + GARBAGE
         MVI   BHOADDR+3,C' '
         NC    BHOADDR,=3X'0F'  REMOVE ZONES
         TR    BHOADDR,=C'0123456789ABCDEF'
         LA    R2,DEVTYPES    SCAN DEVTYPES TABLE
BHLOOP2  CLI   0(R2),0        END OF TABLE?
         BE    BHDONE2        YES--STOP
         CLC   0(2,R2),RIOTYPE  DEVTYPE MATCH?
         BNE   *+10           NO--LEAVE OUT AREA ALONE
         MVC   BHOTYPE,2(R2)  INDICATE DEV TYPE
         LA    R2,6(R2)       BUMP TABLE PTR
         B     BHLOOP2
BHDONE2  DS    0H
         MVC   BHOVOL,RIOVOL  VOLSER
         MVC   BHOSIOC,=X'4020202020202120'
         L     R1,RIOSIO
         CVD   R1,DW
         ED    BHOSIOC,DW+4   SIO COUNT
         M     R0,=F'10000'   ADJUST FOR .01 SEC AND .01 ACCURACTY
         D     R0,RIODUR      COMPUTE SIO RATE
         CVD   R1,DW
         MVC   BHOSIOR,=X'402020214B2020'
         ED    BHOSIOR,DW+5
         MVC   BHOSIOR+L'BHOSIOR(4),=C'/SEC'
         L     R0,RIOMXSIO    MAX SIO RATE
         CVD   R0,DW
         MVC   BHOMXSIO,=X'402020214B2020'
         ED    BHOMXSIO,DW+5
         MVC   BHOMXSIO+L'BHOMXSIO(4),=C'/SEC'
         LA    R1,BHOFREE
         L     R0,RIOFREE
         BAL   R14,BHFMT1
         LA    R1,BHOBUSY
         L     R0,RIOBUSY
         BAL   R14,BHFMT1
         LA    R1,BHOSCHED
         L     R0,RIOSCHED
         BAL   R14,BHFMT1
         PUT   SYSPRINT,OUT
         SP    LINES,=P'1'    ADJUST I LINES COUNT
         L     R9,RIOLINK     NEXT RIOBLOK
         B     BHLOOP1        CONTINUE FORMATTING RIOBLOKS
*
*              BHFMT1 SUBROUTINE
*
BHFMT1   MVC   0(7,R1),=X'402020214B2020'
         LR    R15,R1
         LR    R1,R0
         M     R0,=F'10000'  FOR .01%
         D     R0,RIODUR      COMPUTE PERCENT OF TIME
         CVD   R1,DW
         LR    R1,R15
         ED    0(7,R1),DW+5
         MVI   7(R1),C'%'
         BR    R14            RETURN TO CALLER
*
*              DEVTYPES TABLE
*
DEVTYPES DC    AL1(CLASDASD,TYP2311),C'2311'
         DC    AL1(CLASDASD,TYP2314),C'2314'
         DC    AL1(CLASDASD,TYP3330),C'3330'
         DC    AL1(CLASDASD,TYP2305),C'2305'
         DC    AL1(CLASDASD,TYP3340),C'3340'
         DC    AL1(CLASTAPE,TYP2401),C'2401'
         DC    AL1(CLASTAPE,TYP2420),C'2420'
         DC    AL1(CLASTAPE,TYP3420),C'3420'
         DC    AL1(CLASTAPE,TYP3410),C'3410'
         DC    X'00'          MARK END OF TABLE
         EJECT
***********************************************************************
*        PRINT INSTRUCTION SIMULATION REPORT                          *
***********************************************************************
         SPACE 3
BHDONE1  DS    0H             HERE WHEN DONE PRINTING
         OC    CNT500,CNT500       TEST IF ANY CLASS 5 RECORDS
         BZ    PGMEND              NO,FINISH
         PUT   SYSPRINT,=X'8B'     GO TO TOP OF FORM
         AP    PAGENO,=P'1'        INCREMENT PAGE NUMBER
         MVC   HDR1+117(4),=X'40202120' SET PAGE EDIT MASK
         ED    HDR1+117(4),PAGENO  AND EDIT PAGE NO. INTO IT
         PUT   SYSPRINT,HDR1       PRINT NEW HEADING
         PUT   SYSPRINT,HDR11      AND SUB-HEADING
         SR    R2,R2               CLEAR INDEX REGISTER
         LA    R6,OPCODENO-1       SET LOOP COUNTER
INSTLOOP DS    0H                  PRINT INSTRUCTION DETAILS
         LA    R7,0(R6,R6)         DOUBLE THE VALUE - TWO BYTE ENTRIES
         LA    R7,OPCODES(R7)      POINT TO LIST OF OP-CODES
         MVC   INSTLINE,INSFRAME   SET UP SKELETAL PRINT LINE
         LH    R1,0(,R7)           GET OPERATION CODE
         BAL   R4,OPCODER          GO GET ITS INDEX
         LTR   R7,R1               SAVE INDEX VALUE
         BNP   INSPRINT            SKIP IT IF NOT INTERESTED
         SLL   R7,2                MULTIPLY BY 4 FOR INDEX
         LA    R4,PRIVOPS(R7)      POINT TO OPERATION MNEMONIC
         MVC   INSTLOPC,0(R4)      MOVE OPERATION TO OUTPUT
         LA    R4,INSCOUNT(R7)     POINT TO COUNT VALUE
         ICM   R5,15,0(R4)         PICK UP INSTRUCTION COUNT
         BZ    INSPRINT            DON'T BOTHER WITH NULL ENTRIES
         CVD   R5,DBLWORK          GET IT IN PACKED FORMAT
         ED    INSTLCNT,DBLWORK    PUT THE COUNT IN PRINT LINE
         SR    R4,R4               CLEAR EVEN REGISTER
         LR    R0,R5               SAVE COUNT
         M     R4,=F'10000'        MULTIPLY FOR TWO SIG. FIGS.
         D     R4,CNT500           GET COUNT PERCENTAGE
         A     R5,=F'5'            ROUND TO ONE DIGIT
         CVD   R5,DBLWORK          CONVERT ANSWER
         ED    INSTLPCN,DBLWORK+5  PUT IT IN ANSWER LINE
         LR    R5,R0               RETRIEVE COUNT
         L     R3,INSTTIME(R7)     GET INSTRUCTION SIMULATION TIME
         LR    R4,R3               SAVE TIME VALUE
         CVD   R3,DBLWORK          CONVERT IT
         ED    INSTLTIM,DBLWORK    PRINT TOTAL SECONDS
         SR    R2,R2               CLEAR EVEN REGISTER
         M     R2,=F'10'           MULTIPLY FOR TWO DIGITS
         DR    R2,R5               CALCULATE AVERAGE
         A     R3,=F'5'            ROUND
         CVD   R3,DBLWORK          CONVERT AVERAGE
         ED    INSTLAVG,DBLWORK    PRINT AVERAGE
         SR    R2,R2               CLEAR EVEN REGISTER AGAIN
         LR    R3,R4               RETRIEVE SIMULATION TIME
         M     R2,=F'10000'        MULTIPLY FOR SIGNIFICANCE
         D     R2,TOTALTIM         FIND PERCENTAGE
         A     R3,=F'5'            ROUND
         CVD   R3,DBLWORK          CONVERT PERCENTAGE
         ED    INSTLPCT,DBLWORK+5  SHOW IT ON REPORT
         PUT   SYSPRINT,INSTLINE   OUTPUT RESULTS
INSPRINT DS    0H                  END OF INSTRUCTION PROCESSING
         BCT   R6,INSTLOOP         THEN GO ROUND AGAIN
         SPACE 1
INSTEND  DS    0H                  END OF SIMULATION DETAILS
         MVI   OUT,X'13'           SPACE TWO LINES
         PUT   SYSPRINT,OUT        SKIP THE PRINTER UP 2
         L     R3,TOTALTIM         GET TOTAL TIME
         CVD   R3,DBLWORK          CONVERT IT
         ED    INSTOTAL,DBLWORK    PRINT THE TOTAL SIMULATION TIME
         PUT   SYSPRINT,INSTLAST   ON THE REPORT
         EJECT
*
*              PROGRAM TERMINATION
*
         SPACE 2
PGMEND   DS    0H                  END OF PROGRAM
         SPACE 1
         CLOSE (SYSPRINT)
         FREEPOOL SYSPRINT
         L     R2,PTR97
         FREEMAIN R,LV=MN097LEN,A=(R2)
         PGMOUT ,                  MONSANTO PROGRAM TERMINATION
         EJECT
*
*              MISCELLANEOUS AREAS
*
OUT      DS    CL121
SUSPENDC DS    F              SUSPENSION COUNT
DURATION DS    F              RUN DURATION
RECCNT   DS    F              RECORD COUNT
CNT000   DS    F              TYPE 000 COUNTER
CNT600   DS    F              TYPE 600 COUNTER
PAGENO   DS    PL2
LINES    DS    PL2
WKHEAD   DC    A(WKREC0)      START OF WKRECS
CODE     DS    XL2            MONITOR CODE
CLASS    DS    XL1            MONITOR CLASS
FLAG     DS    XL1            FLAG
WKINIT   EQU   X'80'          WKRECS HAVE BEEN INITIALIZED
PTR97    DS    A              POINTER TO SAVED MN097 RECORD
LASTTOD  DS    D
CURRTOD  DS    D              CURRENT TOD
BASETOD  DS    D              TOD AT START OF RUN
LTOD000  DS    D              LAST TOD FOR TYPE 000 RECORDS
LTOD600  DS    D              LAST TOD FOR TYPE 60X RECORDS
INTVL    DS    F              INTERVAL LENGTH (.01 SECONDS)
PAT1     DC    X'40202020202020214B2020'
PAT2     DC    X'4040202020202020202120'
DW       DS    D
DW2      DS    D
ASYSUSR  DS    A              ADDR OF SYSTEMUSERREC
CNT400   DS    F
USRHEAD  DS    A              HEAD OF USRRECS
RIOHEAD  DS    A              HEAD OF RIOBLOK LIST
HDR1     DC    X'19',CL112'VM/370 SYSTEM MONITOR - KANSAS STATE UNIVERSX
               ITY',CL8'PAGE'
HDR2A    DC    C'MONITOR STATISTICS'
HDR3A    DC    C'SYSTEM STATISTICS'
HDR4     DC    X'11'
         DC    CL12' '
         DC    CL42'ID'
         DC    CL18'TOTAL'
         DC    CL15'NOMINAL'
         DC    CL14'MINIMUM'
         DC    CL19'MAXIMUM'
HDR5A    DC    C'USER STATISTICS'
HDR7A    DC    C'USER STATUS SUMMARY'
HDR9A    DC    C'REAL DEVICE STATUS'
HDR6     DC    X'11',CL10' '
         DC    CL13'USER'
         DC    CL8'ON'
         DC    CL10'TTIME'
         DC    CL9'VTIME'
         DC    CL15'PAGING'
         DC    CL10'SIO'
         DC    CL10'NOM RES'
         DC    CL10'MIN RES'
         DC    CL12'MAX RES'
         DC    CL13'WSS'
HDR8     DC    X'11',CL12' '
         DC    CL12'USER'
         DC    CL10'CFW'
         DC    CL10'PGW'
         DC    CL10'IOW'
         DC    CL10'PSW'
         DC    CL10'EXW'
         DC    CL10'Q1'
         DC    CL10'Q2'
         DC    CL10'E1'
         DC    CL10'E2'
         DC    CL6' '
HDR10    DC    X'11',CL14' '
         DC    CL8'ADDR'
         DC    CL8'TYPE'
         DC    CL12'VOLSER'
         DC    CL8'SIO'
         DC    CL13'SIO RATE'
         DC    CL13'MAX SIO'
         DC    CL12'FREE'
         DC    CL12'BUSY'
         DC    CL20'SCHED'
*
*              DATA CONTROL BLOCKS
*
SYSUT1   DCB   DDNAME=SYSUT1,                                          X
               DSORG=PS,                                               X
               MACRF=GL,                                               X
               BLKSIZE=4096,                                           X
               LRECL=4092,                                             X
               RECFM=VB,                                               X
               EODAD=EOFUT1
SYSPRINT DCB   DDNAME=SYSPRINT,                                        X
               DSORG=PS,                                               X
               MACRF=PM,                                               X
               BLKSIZE=121,                                            X
               LRECL=121,                                              X
               RECFM=FBM
*
*              OUTPUT AREA REDEFINITION
*
         ORG   OUT+13
OUTAID   DS    CL3            DATA ITEM IDENTIFIER
         ORG   OUT+20
OUTANAME DS    CL32           DATA NAME
         ORG   OUT+49
OUTASUM  DS    CL11
         ORG   OUT+68
OUTANOM  DS    CL11
         ORG   OUT+83
OUTAMIN  DS    CL11
         ORG   OUT+98
OUTAMAX  DS    CL11
         ORG   ,
*
*              USER STATISTICS SUMMARY OUTPUT
*
BEOUT    DSECT
         DS    CL1,CL8
BEOUSR   DS    CL8,CL2
BEOON    DS    CL7,CL3
BEOTTIME DS    CL7,CL3
BEOVTIME DS    CL7,CL3
BEOPGIO  DS    CL7,CL7
BEOSIO   DS    CL7,CL5
BEORES   DS    CL7,CL3
BEORESMN DS    CL7,CL3
BEORESMX DS    CL7,CL3
BEOWSS   DS    CL7,CL3
*
*              USER STATUS OUTPUT
*
BEOUT2   DSECT
         DS    CL1,CL10
BEOUSR2  DS    CL8,CL2
BEOCFW   DS    CL7,CL3
BEOPGW   DS    CL7,CL3
BEOIOW   DS    CL7,CL3
BEOPSW   DS    CL7,CL3
BEOEXW   DS    CL7,CL3
BEOQ1    DS    CL7,CL3
BEOQ2    DS    CL7,CL3
BEOE1    DS    CL7,CL3
BEOE2    DS    CL7,CL3
*
*              REAL DEVICE STATUS OUTPUT
*
BHOUT    DSECT
         DS    CL1,CL15
BHOADDR  DS    CL3,CL4
BHOTYPE  DS    CL4,CL4
BHOVOL   DS    CL6,CL2
BHOSIOC  DS    CL8,CL3
BHOSIOR  DS    CL7,CL5
BHOMXSIO DS    CL7,CL5
BHOFREE  DS    CL7,CL5
BHOBUSY  DS    CL7,CL5
BHOSCHED DS    CL7,CL5
*
*              WKREC DSECT
*
WKREC    DSECT ,
WKLINK   DS    A              LINK TO NEXT WKREC
WKID     DS    CL3            IDENTIFIER
WKFLAG   DS    X
WKTIME   EQU   X'80'          TIMER-TYPE RECORD
WKSAMP   EQU   X'40'          SAMPELD DATA
WKCTR    EQU   X'20'          COUNTER TYPE OF DATA
WKCNT    EQU   WKCTR
WKHW     EQU   X'10'          HW DATA ITEM
         DS    0F             ALIGN
WKSUM    DS    XL8            DOUBLE PRECISION INTEGER SUM
WKLAST   DS    XL8            LAST DATA VALUE
WKNOM    DS    F
WKMIN    DS    F
WKMAX    DS    F
WKDUR    DS    F
WKOFF    DS    F
WKTITLE  DS    CL32
WKLEN    EQU   *-WKREC
*
*              USRREC
*
USRREC   DSECT
USRLINK  DS    A
USRNAME  DS    CL8
USRON    DS    F
USRTTIME DS    F
USRVTIME DS    F
USRLTTIM DS    D
USRLVTIM DS    D
USRRES   DS    F
USRRESMN DS    F
USRRESMX DS    F
USRWSS   DS    F
USRCFW   DS    F
USRPGW   DS    F
USRIOW   DS    F
USRPSW   DS    F
USREXW   DS    F
USRQ1    DS    F
USRQ2    DS    F
USRE1    DS    F
USRE2    DS    F
USRSIO   DS    F
USRLSIO  DS    F
USRPGIO  DS    F
USRLPGIO DS    F
USRFLAG  DS    X
USRON2   EQU   X'80'          USER ON DURING THIS CYCLE
USRGONE  EQU   X'40'          USER NOT ON DURING LAST CYCLE
USRLTOD  DS    D
         DS    0D
USRLEN   EQU   *-USRREC       LENGTH FOR GETMAIN
*
*              RIOBLOK
*
RIOBLOK  DSECT
RIOLINK  DS    A              LINK TO NEXT RIOBLOK
RIOADDR  DS    H              DEVICE ADDRESS
RIOTYPE  DS    XL2            DEVICE TYPE
RIOVOL   DS    CL6            VOLSER
RIOSIO   DS    F              SIO COUNT
RIOLSIO  DS    F              LAST SIO COUNTER VALUE
RIOMXSIO DS    F              MAX SIO RATE
RIOFREE  DS    F              DEVICE FREE TIME
RIOBUSY  DS    F              DEVICE BUSY
RIOSCHED DS    F
RIODUR   DS    F              DURATION OF RUN FOR THIS DEV
RIOLEN   EQU   *-RIOBLOK
*
*              LITERALS
*
CPDATA2  CSECT                     BACK TO PROGRAM
         LTORG
*
*              GENERATE WKRECS
*
WKCSECT  CSECT ,              SEPARATE CSECT
         GENWK WID,'IDLE WAIT',T
         GENWK WPG,'PAGE WAIT',T
         GENWK WIO,'I/O WAIT',T
         GENWK PRB,'PROBLEM STATE',T
         GENWK PSI,'PAGING SIOS',C
         GENWK PRD,'PAGE READS',C
         GENWK PWR,'PAGE WRITES',C
         GENWK CPA,'DMKPAG CALLS',C
         GENWK PRC,'RECLAIMED FRAMES',C
         GENWK FLF,'EMPTY FREE LIST FOUND',C
         GENWK CPT,'DMKPTRFR CALLS',C
         GENWK SS,'IN-QUEUE PAGE STEALS',C
         GENWK PFF,'SWAPS FROM FLUSH LIST',C
         GENWK PRF,'PAGES EXAMINED DURING STEAL',C
         GENWK PCS,'FULL SCANS DURING STEAL',C
         GENWK NPP,'PAGEABLE FRAMES',S
         GENWK NFL,'FREE PAGE FRAMES',S
         GENWK PSN,'IN-TRANSIT FRAMES',S
         GENWK RPC,'RESERVED PAGES',S
         GENWK SPC,'SHARED PAGES',S
         GENWK SWS,'SUM OF ACTIVE WK SETS',S
         GENWK Q1N,'Q1 USERS',S
         GENWK Q2N,'Q2 USERS',S
         GENWK Q1E,'Q1 ELIGIBLE LIST',S,HW
         GENWK Q2E,'Q2 ELIGIBLE LIST',S,HW
         GENWK PPA,'CYLS ALLOC ON PAGE DEV',S,HW
         GENWK PPC,'TOTAL CYLS ON PAGE DEV',S,HW
         GENWK NDU,'DIALED USERS',S
         GENWK NAU,'LOGGED ON USERS',S
         GENWK NXR,'REAL EXT IRPTS',C
         GENWK CPG,'REAL PROG IRPTS',C
         GENWK CIO,'REAL I/O IRPTS',C
         GENWK CDS,'DMKDSP CALLS',C
         GENWK CDA,'FAST REFLECT DSP CALLS',C
         GENWK CDB,'NEW PSW DISPATCH COUNT',C
         GENWK CSC,'DMKSCHDL CALLS',C
         GENWK CPR,'DMKPRVLG CALLS',C
         GENWK CVI,'DMKVIOEX CALLS',C
         GENWK CCW,'DMKCCW CALLS FROM DMKVIO',C
         GENWK HDI,'HVC DISK I/O COUNT',C
         GENWK ITI,'VIRT INT TIMER IRPTS',C
         GENWK PTI,'VIRT CPU TIMER IRPTS',C
         GENWK CKI,'VIRT CLOCK COMP IRPTS',C
         GENWK CSV,'VIRT SVC IRPTS',C
         GENWK EK,'SSK COUNT',C
         GENWK IK,'ISK COUNT',C
         GENWK MS,'SSM COUNT',C
         GENWK LP,'LPSW COUNT',C
         GENWK DI,'HVC COUNT',C
         GENWK SI,'SIO COUNT',C
         GENWK SF,'SIOF COUNT',C
         GENWK TI,'TIO COUNT',C
         GENWK CI,'CLRIO COUNT',C
         GENWK HI,'HIO COUNT',C
         GENWK HD,'HDV COUNT',C
         GENWK TC,'TCH COUNT',C
         GENWK MN,'STNSM COUNT',C
         GENWK MO,'STOSM COUNT',C
         GENWK LR,'LRA COUNT',C
         GENWK CP,'STIDP COUNT',C
         GENWK CH,'STIDC COUNT',C
         GENWK TE,'SCK COUNT',C
         GENWK CE,'SCKC COUNT',C
         GENWK CT,'STCKC COUNT',C
         GENWK PE,'SPT COUNT',C
         GENWK PT,'STPT COUNT',C
         GENWK EP,'SPKA COUNT',C
         GENWK IP,'IPK COUNT',C
         GENWK PB,'PTLB COUNT',C
         GENWK RR,'RRB COUNT',C
         GENWK TCL,'STCTL COUNT',C
         GENWK LCL,'LCTL COUNT',C
         GENWK CS,'CS COUNT',C
         GENWK CD,'CDS COUNT',C
         GENWK INT,'MONITOR INTERVAL',S,HW,LAST=YES
         EJECT
CPDATA2  CSECT                     BACK TO MAIN PROGRAM
         SPACE 2
***********************************************************************
*        INSTRUCTION SIMULATION DATA AREAS                            *
***********************************************************************
         SPACE 3
OPCODE   DC    XL2'0000'           WORK AREA FOR SAVING OP-CODE
CNT500   DC    F'0'                COUNT OF TYPE 5 RECORDS
TOTALTIM DC    F'0'                ACCUMULATED TOTAL SIMULATION TIME
DBLWORK  DC    D'0'                DOUBLE WORD WORK AREA
FIRSTIME DC    D'0'                SIMULATION TIME AT START OF RUN
PREVTIME DC    D'0'                PREVIOUS SIMULATION TIME
         EJECT
***********************************************************************
*        INSTRUCTION SIMULATION PRINT AREAS                           *
***********************************************************************
         SPACE 2
HDR11    DS    0CL121              PAGE SUB-HEADING
         DC    XL1'19'             PRINT AND SKIP 3
         DC    CL120'   INSTRUCTION        COUNT          % COUNT      C
                       TIME                 AV. TIME     % TOTAL TIME'
         SPACE 1
INSTLINE DS    0CL121              PRINT LINE AREA
         DS    XL1                 CARRIAGE CONTROL
         DS    CL7
INSTLOPC DS    CL4                 OP-CODE MNEMONIC
INSTLCNT DS    XL16'40202020202020202020202020202120' OCCURRENCIES
         DS    CL10
INSTLPCN DS    XL6'402021204B20'   PERCENTAGE OCURRENCIES
         DS    CL2
INSTLTIM DS    XL17'402020202020202021204B202020202020' TOTAL TIME
         DS    CL9
INSTLAVG DS    XL16'4020202020202021204B202020202020' AVERAGE TIME
         DS    CL10
INSTLPCT DS    XL6'402021204B20'   PERCENTAGE
         DS    CL17
         SPACE 1
INSFRAME DS    0CL121              PRINT LINE AREA SKELETON
         DC    XL1'09'             CARRIAGE CONTROL
         DC    CL7' '
         DC    CL4' '              OP-CODE MNEMONIC
         DC    XL16'40202020202020202020202020202120' OCCURRENCIES
         DC    CL10' '
         DC    XL6'402021204B20'   COUNT PERCENTAGE
         DC    CL2' '
         DC    XL17'402020202020202021204B202020202020' TOTAL TIME
         DC    CL9' '
         DC    XL16'4020202020202021204B202020202020' AVERAGE TIME
         DC    CL10' '
         DC    XL6'402021204B20'   PERCENTAGE
         DC    CL17' '
         SPACE 1
INSTLAST DS    0CL121              FINAL INSTRUCTION SIMULATION LINE
         DC    XL1'09'             SPACE 1
         DC    CL20' '
         DC    CL44'TOTAL SIMULATION TIME IN SECONDS FOR USERID'
OPERATOR DC    CL8'OPERATOR'       USERID OF SIMULATION TIME ANALYSIS
         DC    CL3' = '
INSTOTAL DC    XL17'40202020202020202021204B202020202020' TOTAL TIME
         DC    CL28' '
         EJECT
***********************************************************************
*        INSTRUCTION SIMULATION TABLE AREAS.                          *
*        THE MAIN TABLE IS OPTABLE, A TRANSLATION TABLE FOR           *
*        THE FIRST BYTE OF THE OP-CODE.THE ENTRY IN THIS TABLE        *
*        THUS OBTAINED IS THE RELATIVE NUMBER OF THE ENTRY IN         *
*        ALL THE OTHER TABLES FOR THAT OP-CODE.                       *
*        FOR TWO-BYTE OPCODES THE VALUE OF THE SECOND BYTE IS         *
*        USED TO INDEX ON FROM THE BASIC INDEX VALUE.                 *
***********************************************************************
         SPACE 2
OPTABLE  DS    0XL256              INSTRUCTION TRANSLATE TABLE
*                000102030405060708090A0B0C0D0E0F
         DC    X'00000000000000000102000000000000'        0
         DC    X'00000000000000000000000000000000'        1
         DC    X'00000000000000000000000000000000'        2
         DC    X'00000000000000000000000000000000'        3
         DC    X'00000000000000000000000000000000'        4
         DC    X'00000000000000000000000000000000'        5
         DC    X'00000000000000000000000000000000'        6
         DC    X'00000000000000000000000000000000'        7
         DC    X'03000405060700000000000000000000'        8
         DC    X'0000000000000000000000000E101214'        9
         DC    X'00000000000000000000000008090A00'        A
         DC    X'000B150000000C0D0000000000000000'        B
         DC    X'00000000000000000000000000000000'        C
         DC    X'00000000000000000000000000000000'        D
         DC    X'00000000000000000000000000000000'        E
         DC    X'00000000000000000000000000000000'        F
*                000102030405060708090A0B0C0D0E0F
         SPACE 2
OPCODES  EQU   *                   INSTRUCTION OPERATION CODES
         DC    XL2'0000'           DUMMY ENTRY FOR BCT LOOP
         DC    XL2'0800'
         DC    XL2'0900'
         DC    XL2'8000'
         DC    XL2'8200'
         DC    XL2'8300'
         DC    XL2'8400'
         DC    XL2'8500'
         DC    XL2'AC00'
         DC    XL2'AD00'
         DC    XL2'AE00'
         DC    XL2'B100'
         DC    XL2'B600'
         DC    XL2'B700'
         DC    XL2'9C00'
         DC    XL2'9C01'
         DC    XL2'9D00'
         DC    XL2'9D01'
         DC    XL2'9E00'
         DC    XL2'9E01'
         DC    XL2'9F00'
         DC    XL2'B202'
         DC    XL2'B203'
         DC    XL2'B204'
         DC    XL2'B206'
         DC    XL2'B207'
         DC    XL2'B208'
         DC    XL2'B209'
         DC    XL2'B20A'
         DC    XL2'B20B'
         DC    XL2'B20D'
         DC    XL2'B210'
         DC    XL2'B211'
         DC    XL2'B212'
         DC    XL2'B213'
OPCODELN EQU   *-OPCODES           LENGTH OF OP-CODE TABLE
OPCODENO EQU   OPCODELN/2          NUMBER OF ENTRIES
         SPACE 2
PRIVOPS  EQU   *                   INSTRUCTION MNEMONICS
         DC    CL4'SSK'            OP-CODE X'08'
         DC    CL4'ISK'                    X'09'
         DC    CL4'SSM'                    X'80'
         DC    CL4'LPSW'                   X'82'
         DC    CL4'DIAG'                   X'83'
         DC    CL4'WRD'                    X'84'
         DC    CL4'RDD'                    X'85'
         DC    CL4'SNSM'                   X'AC'
         DC    CL4'SOSM'                   X'AD'
         DC    CL4'SIGP'                   X'AE'
         DC    CL4'LRA'                    X'B1'
         DC    CL4'STCL'                   X'B6'
         DC    CL4'LCTL'                   X'B7'
         DC    CL4'SIO'                    X'9C00'
         DC    CL4'SIOF'                   X'9C01'
         DC    CL4'TIO'                    X'9D00'
         DC    CL4'CLIO'                   X'9D01'
         DC    CL4'HIO'                    X'9E00'
         DC    CL4'HDV'                    X'9E01'
         DC    CL4'TCH'                    X'9F00'
         DC    CL4'SIDP'                   X'B202'
         DC    CL4'SIDC'                   X'B203'
         DC    CL4'SCK'                    X'B204'
         DC    CL4'SCKC'                   X'B206'
         DC    CL4'SCKC'                   X'B207'
         DC    CL4'SPT'                    X'B208'
         DC    CL4'STPT'                   X'B209'
         DC    CL4'SPKA'                   X'B20A'
         DC    CL4'IPK'                    X'B20B'
         DC    CL4'PTLB'                   X'B20D'
         DC    CL4'SPX'                    X'B210'
         DC    CL4'STPX'                   X'B211'
         DC    CL4'STAP'                   X'B212'
         DC    CL4'RRB'                    X'B213'
         SPACE 2
INSTTIME DC    50F'0'              INSTRUCTION TIME TABLE
         SPACE 2
INSCOUNT DC    50F'0'              COUNT OF INSTRUCTION OCCURRENCIES
         EJECT
*
*              MONITOR BLOCKS
*
         PRINT OFF
MONCOM   DSECT
         SPACE
***                 MONCOM - VM MONITOR COMMUNICATIONS AREA
*
*          0   +-----------------------+-----+-----+-----------+
*              |        MONARDB        | M*1 | M*2 |  MONDVNUM |
*          8   +-----------------------+-----+-----+-----------+
*              |        MONDVLST       |        MONRSV1        |
*         10   +-----------------------+-----------------------+
*              |        MONAIOB        |        MONATRB        |
*         18   +-----------------------+-----------------------+
*              |                    MONCLOCK                   |
*         20   +-----------------------+-----------------------+
*              |                    MONSUSCK                   |
*         28   +-----------------------+-----------------------+
*              |        MONSUSCT       |        MONRSVD1       |
*         30   +-----------------------+-----------------------+
*              |        MONCTEB1       |        MONCTEB2       |
*         38   +-----------------------+-----------------------+
*              |                                               |
*              =                    MONSAVE                    =
*              |                                               |
*         78   +-----------------------------------------------+
*              |                    MONUSER                    |
*         80   +-----------------------------------------------+
*
***                 MONCOM - VM MONITOR COMMUNICATIONS AREA
         SPACE
MONARDB  DS    1F             ADDRESS OF MONITOR TAPE REAL DEVICE BLK
MONFLAG1 DS    1X        M*1  MONITOR FLAGS
MONFLAG2 DS    1X        M*2  WORK BYTE
MONDVNUM DS    1H             NUMBER OF ENTRIES IN REAL DEVICE LIST
MONDVLST DS    1F             ADDRESS OF THE REAL DEVICE LIST
MONRSV1  DS    1F             RESERVED
MONAIOB  DS    1F             ADDRESS OF MONITOR TAPE I/O BLOCK
MONATRB  DS    1F             ADDRESS OF MONITOR TIMER REQUEST BLOCK
MONCLOCK DS    1D             TOD CLOCK STAMP FOR EACH RECORD
MONSUSCK DS    1D             TOD CLOCK OF LAST SUSPENSION
MONSUSCT DS    1F             SYSPENSION COUNT
MONRSVD1 DS    1F             RESERVED
MONCTEB1 DS    1F             CORETABLE ENTRY FOR BUFFER PAGE 1
MONCTEB2 DS    1F             CORETABLE ENTRY FOR BUFFER PAGE 2
MONSAVE  DS    16F            MONITOR INTERNAL SAVE AREA
MONUSER  DS    8C             USER STARTING/STOPPING THE MONITOR
MONSIZE  EQU   (*-MONCOM)/8   SIZE OF DSECT IN DOUBLE WORDS
         SPACE 1
*        BITS DEFINED IN MONFLAG1
TBUSY    EQU   X'80'          TAPE IS BUSY
SUSPEND  EQU   X'40'          MONITORING SUSPENDED
CFSTOP   EQU   X'20'          MONITOR STOP COMMAND HAS BEEN ISSUED
TRUN     EQU   X'10'          TAPE REWIND-UNLOAD CCW HAS BEEN SCHEDULED
ERROR    EQU   X'08'          TAPE ERROR HAS OCCURRED, STOP MONITOR
MONTIINT EQU   X'04'          HANDLING TIMER INTERRUPT
         EJECT
*
*        THIRD BYTE OF CR8:
*
PERFCL   EQU   X'80'          SAMPLE HARDWARE/SOFTWARE UTILIZATIONS
RESPCL   EQU   X'40'          TRACE RESPONSE CLASS
SCHEDCL  EQU   X'20'          TRACE SCHEDULER ACTIVITY CLASS
TIMECL   EQU   X'10'          EXECUTION TIMING CLASS
USERCL   EQU   X'08'          SAMPLE USER RESOURCE USAGE CLASS
PRIVCL   EQU   X'04'          PRIVOPS CLASS
DASDCL   EQU   X'02'          SAMPLE DASDS UTILIZATIONS CLASS
SEEKCL   EQU   X'01'          TRACE DASD SEEK ACTIVITY
         SPACE
*
*        FOURTH BYTE OF CR8
*
SPROFCL  EQU   X'80'          TRACE SYSTEM PROFILE CLASS
         EJECT
MNHDR    DSECT                HEADER RECORD, PRECEEDS EVERY TAPE RECORD
         SPACE
***                 MNHDR - VM MONITOR RECORD HEADER
*
*          0   +-----------+-----------+-----+-----------+-----+
*              | MNHRECSZ  |  RESERVED | M*1 |  MNHCODE  |     |
*          8   +-----------+-----------+-----+-----------+-----+
*              |   MNHTOD              |
*          C   +-----------------------+
*
***                 MNHDR - VM MONITOR RECORD HEADER
         SPACE
MNBHDLEN EQU   4              LENGTH OF THE BLOCK HEADER (VB FORMAT)
         SPACE
MNHRECSZ DS    1H             RECORD SIZE
         DS    1H             RESERVED
MNHCLASS DS    1X        M*1  MONITOR CLASS
MNHCODE  DS    XL2            MONITOR CODE
MNHTOD   DS    XL5            CURRENT TOD CLOCK VALUE
MNHDRLEN EQU   *-MNHDR        LENGTH OF THE RECORD HEADER
         SPACE 5
MN097    DSECT                TAPE HEADER, FIRST RECORD OF TAPE FILE
         SPACE
***                 MN097 - VM MONITOR TAPE HEADER RECORD
*
*          0   +-----------------------------------------------+
*              |                   MN097CPU                    |
*          8   +-----------------------------------------------+
*              |                   MN097LEV                    |
*         10   +-----------------------------------------------+
*              |                   MN097DAT                    |
*         18   +-----------------------------------------------+
*              |                   MN097TIM                    |
*         20   +-----------------------------------------------+
*              |                   MN097UID                    |
*         28   +-----------------------+-----------------------+
*              |       MN097CR8        |
*         2C   +-----------------------+
*
***                 MN097 - VM MONITOR TAPE HEADER RECORD
         SPACE
MN097CPU DS    XL8            CPU SERIAL / MODEL NUMBER
MN097LEV DS    CL8            SYSTEM LEVEL
MN097DAT DS    CL8            CURRENT DATE
MN097TIM DS    CL8            CURRENT TIME
MN097UID DS    CL8            USER STARTING THE MONITOR
MN097CR8 DS    1F             VALUE OF CR8
MN097LEN EQU   *-MN097        LENGTH OF THE TAPE HEADER RECORD
         EJECT
MN098    DSECT                TAPE TRAILER, LAST RECORD OF TAPE FILE
         SPACE
***                 MN098 - VM MONITOR TAPE TRAILER RECORD
*
*          0   +-----------------------------------------------+
*              |                   MN098UID                    |
*          8   +-----------------------------------------------+
*
***                 MN098 - VM MONITOR TAPE TRAILER RECORD
         SPACE
MN098UID DS    CL8            USER STOPPING THE MONITOR
MN098LEN EQU   *-MN098        LENGTH OF THE TAPE TRAILER RECORD
         SPACE 5
MN099    DSECT
         SPACE
***                 MN099 - VM MONITOR SUSPENSION RECORD
*
*          0   +-----------------------------+-----------------+
*              |          MN099TOD           |        MN099CNT |
*          8   +-----+-----------------------+-----------------+
*              |     |
*          9   +-----+
*
***                 MN099 - VM MONITOR SUSPENSION RECORD
         SPACE
MN099TOD DS    XL5            TOD CLOCK AT SUSPENSION
MN099CNT DS    XL4            COUNT OF SUSPENSIONS
MN099LEN EQU   *-MN099        LENGTH OF THE SUSPENSION RECORD
         EJECT
MN000    DSECT
         SPACE
***                 MN000 - VM MONITOR PERFORM CLASS RECORD
*
*          0   +-----------------------------------------------+
*              |                   MN000WID                    |
*          8   +-----------------------------------------------+
*              |                   MN000WPG                    |
*         10   +-----------------------------------------------+
*              |                   MN000WIO                    |
*         18   +-----------------------------------------------+
*              |                   MN000PRB                    |
*         20   +-----------------------+-----------------------+
*              |       MN000PSI        |       MN000CPA        |
*         28   +-----------------------+-----------------------+
*              |       MN000NFL        |       MN000PSN        |
*         30   +-----------------------+-----------------------+
*              |       MN000PRC        |       MN000RPC        |
*         38   +-----------------------+-----------------------+
*              |       MN000SPC        |       MN000FLF        |
*         40   +-----------------------+-----------------------+
*              |       MN000CPT        |       MN000SS         |
*         48   +-----------------------+-----------------------+
*              |       MN000PFF        |       MN000PRF        |
*         50   +-----------------------+-----------------------+
*              |       MN000PCS        |       MN000NXR        |
*         58   +-----------------------+-----------------------+
*              |       MN000CPR        |       MN000CVI        |
*         60   +-----------------------+-----------------------+
*              |       MN000CCW        |       MN000ITI        |
*         68   +-----------------------+-----------------------+
*              |       MN000PTI        |       MN000CKI        |
*         70   +-----------------------+-----------------------+
*              |       MN000CSV        |       MN000CPG        |
*         78   +-----------------------+-----------------------+
*              |       MN000CIO        |       MN000CDS        |
*         80   +-----------------------+-----------------------+
*              |       MN000CDA        |       MN000CDB        |
*         88   +-----------------------+-----------------------+
*              |       MN000CSC        |       MN000EK         |
*         90   +-----------------------+-----------------------+
*              |       MN000IK         |       MN000MS         |
*         98   +-----------------------+-----------------------+
*              |       MN000LP         |       MN000DI         |
*         A0   +-----------------------+-----------------------+
*              |       MN000SI         |       MN000SF         |
*         A8   +-----------------------+-----------------------+
*              |       MN000TI         |       MN000CI         |
*         B0   +-----------------------+-----------------------+
*              |       MN000HI         |       MN000HD         |
*         B8   +-----------------------+-----------------------+
*              |       MN000TC         |       MN000MN         |
*         C0   +-----------------------+-----------------------+
*              |       MN000MO         |       MN000LR         |
*         C8   +-----------------------+-----------------------+
*              |       MN000CP         |       MN000CH         |
*         D0   +-----------------------+-----------------------+
*              |       MN000TE         |       MN000CE         |
*         D8   +-----------------------+-----------------------+
*              |       MN000CT         |       MN000PE         |
*         E0   +-----------------------+-----------------------+
*              |       MN000PT         |       MN000EP         |
*         E8   +-----------------------+-----------------------+
*              |       MN000IP         |       MN000PB         |
*         F0   +-----------------------+-----------------------+
*              |       MN000RR         |       MN000TCL        |
*         F8   +-----------------------+-----------------------+
*              |       MN000LCL        |       MN000CS         |
*        100   +-----------------------+-----------------------+
*              |       MN000CD         |       MN000HDI        |
*        108   +-----------------------+-----------------------+
*              |       MN000NDU        |       MN000NAU        |
*        110   +-----------------------+-----------------------+
*              |       MN000PRD        |       MN000PWR        |
*        118   +-----------------------+-----------------------+
*              |       MN000NPP        |       MN000SWS        |
*        120   +-----------------------+-----------------------+
*              |       MN000Q1N        |       MN000Q2N        |
*        128   +-----------+-----------+-----------+-----------+
*              |  MN000Q1E |  MN000Q2E |  MN000INT |  MN000PPA |
*        130   +-----------+-----------+-----------+-----------+
*              |  MN000PPC |
*        132   +-----------+
*
***                 MN000 - VM MONITOR PERFORM RECORD
         SPACE
MN000WID DS    XL8            TOTAL SYSTEM IDLE WAIT TIME
MN000WPG DS    XL8            TOTAL SYSTEM PAGE WAIT TIME
MN000WIO DS    XL8            TOTAL SYSTEM I/O  WAIT TIME
MN000PRB DS    XL8            TOTAL SYSTEM PROBLEM STATE TIME
MN000PSI DS    1F             NO. PAGING SIO'S
MN000CPA DS    1F             NO. CALLS TO DMKPAG
MN000NFL DS    1F             NO. OF PAGE FRAMES CURRENTLY ON FREE LIST
MN000PSN DS    1F             NO. OF PAGES CURRENTLY BEING SWAPPED
MN000PRC DS    1F             NO. OF PAGES FLUSHED BUT RECLAIMED
MN000RPC DS    1F             NO. OF RESERVED PAGES
MN000SPC DS    1F             NO. OF SHARED SYSTEM PAGES
MN000FLF DS    1F             NO. OF TIMES THE FREE LIST WAS EMPTY
MN000CPT DS    1F             NO. OF CALLS TO DMKPTRFR
MN000SS  DS    1F             NO. OF PAGES STOLEN FROM IN Q USERS
MN000PFF DS    1F             NO. OF PAGES SWAPPED FROM THE FLUSH LIST
MN000PRF DS    1F             NO. OF PAGES EXAMINED IN STEALING A PAGE
MN000PCS DS    1F             NO. OF FULL SCANS DONE IN STEALING PAGES
MN000NXR DS    1F             NO. OF REAL EXTERNAL INTERRUPTS
MN000CPR DS    1F             NO. OF CALLS TO DMKPRVLG
MN000CVI DS    1F             NO. OF CALLS TO DMKVIOEX
MN000CCW DS    1F             NO. OF CALLS TO DMKCCW FROM DMKVIO
MN000ITI DS    1F             NO. OF INTERVAL TIMER INT. REFLECTED
MN000PTI DS    1F             NO. OF CPU TIMER INT. REFLECTED
MN000CKI DS    1F             NO. OF CLOCK COMP INT. REFLECTED
MN000CSV DS    1F             NO. OF SVC INT. REFLECTED
MN000CPG DS    1F             NO. OF PROGRAM INT. HANDLED
MN000CIO DS    1F             NO. OF I/O INTERRUPTS HANDLED
MN000CDS DS    1F             NO. OF CALLS TO DMKDSP (MAIN ENTRY)
MN000CDA DS    1F             NO. OF FAST REFLECTS IN DMKDSP
MN000CDB DS    1F             NO. OF DISPATCHES FOR NEW PSW'S
MN000CSC DS    1F             NO. OF CALLS TO DMKSCHDL
MN000EK  DS    1F             INST COUNT FOR X'08'   SSK
MN000IK  DS    1F             INST COUNT FOR X'09'   ISK
MN000MS  DS    1F             INST COUNT FOR X'80'   SSM
MN000LP  DS    1F             INST COUNT FOR X'82'   LPSW
MN000DI  DS    1F             INST COUNT FOR X'83'   DIAG
MN000SI  DS    1F             INST COUNT FOR X'9CX0' SIO
MN000SF  DS    1F             INST COUNT FOR X'9CX1' SIOF
MN000TI  DS    1F             INST COUNT FOR X'9DX0' TIO
MN000CI  DS    1F             INST COUNT FOR X'9DX1' CLRIO
MN000HI  DS    1F             INST COUNT FOR X'9EX0' HIO
MN000HD  DS    1F             INST COUNT FOR X'9EX1' HDV
MN000TC  DS    1F             INST COUNT FOR X'9F'   TCH
MN000MN  DS    1F             INST COUNT FOR X'AC'   STNSM
MN000MO  DS    1F             INST COUNT FOR X'AD'   STOSM
MN000LR  DS    1F             INST COUNT FOR X'B1'   LRA
MN000CP  DS    1F             INST COUNT FOR X'B202' STIDP
MN000CH  DS    1F             INST COUNT FOR X'B203' STIDC
MN000TE  DS    1F             INST COUNT FOR X'B204' SCK
MN000CE  DS    1F             INST COUNT FOR X'B206' SCKC
MN000CT  DS    1F             INST COUNT FOR X'B207' STCKC
MN000PE  DS    1F             INST COUNT FOR X'B208' SPT
MN000PT  DS    1F             INST COUNT FOR X'B209' STPT
MN000EP  DS    1F             INST COUNT FOR X'B20A' SPKA
MN000IP  DS    1F             INST COUNT FOR X'B20B' IPK
MN000PB  DS    1F             INST COUNT FOR X'B20D' PTLB
MN000RR  DS    1F             INST COUNT FOR X'B213' RRB
MN000TCL DS    1F             INST COUNT FOR X'B6'   STCTL
MN000LCL DS    1F             INST COUNT FOR X'B7'   LCTL
MN000CS  DS    1F             INST COUNT FOR X'BA'   CS
MN000CD  DS    1F             INST COUNT FOR X'BB'   CDS
MN000HDI DS    1F             DIAGNOSE DISK I/O SIMULATION COUNT
MN000NDU DS    1F             NO. OF USERS DIALED TO A VIRT MACH
MN000NAU DS    1F             NO. OF USERS LOGGED ON
MN000PRD DS    1F             NO. OF PAGE READS
MN000PWR DS    1F             NO. OF PAGE WRITES
MN000NPP DS    1F             NO. OF SYSTEM PAGABLE PAGES
MN000SWS DS    1F             SUM OF WORKING SETS OF IN-Q USERS
MN000Q1N DS    1F             NO. OF USERS IN Q1
MN000Q2N DS    1F             NO. OF USERS IN Q2
MN000Q1E DS    1H             NO. OF USERS ELIG FOR Q1
MN000Q2E DS    1H             NO. OF USERS ELIG FOR Q2
MN000INT DS    1H             MONITOR SAMPLING INTERVAL (SECS)
MN000PPA DS    1H             NO. OF ALLOC. PAGE+SPOOL PSEUDO CYLINDERS
MN000PPC DS    1H             NO. OF USED PAGE+SPOOL PSUEDO CYLINDERS
MN000LEN EQU   *-MN000        RECORD LENGTH IN BYTES
         EJECT
MN10X    DSECT
         SPACE
***                 MN10X - VM MONITOR RESPONSE CLASS RECORDS
*
*          0   +-----------------------------------------------+
*              |                   MN10XUID                    |
*          8   +-----------+-----+-----------------------------+
*              |  MN10XADD | M*1 |           MN10YIO           =
*              +-----------+-----+-----------------------------+
*
***                 MN10X - VM MONITOR RESPONSE CLASS RECORDS
         SPACE
MN10XUID DS    CL8            USERID
MN10XADD DS    1H             TERMINAL LINE ADDRESS
MN10XLEN EQU   *-MN10X        SHORT RECORD LENGTH
         SPACE
MN10YCNT DS    1X        M*1  BYTE COUNT FOR THE FOLLOWING LINE
MN10YLEN EQU   *-MN10X        LONG RECORD, HEADER LENGTH
MN10YIO  EQU   *              INPUT/OUTPUT LINE STARTS HERE
         EJECT
MN20X    DSECT
         SPACE
***                 MN20X - VM MONITOR SCHEDULE CLASS RECORDS
*
*          0   +-----------------------------------------------+
*              |                   MN20XUID                    |
*          8   +-----------------------+-----------------------+
*              |       MN20XNPP        |       MN20XSWS        |
*         10   +-----------------------+-----------------------+
*              |       MN20XQ1N        |       MN20XQ2N        |
*         18   +-----------+-----------+-----------+-----+-----+
*              |  MN20XQ1E |  MN20XQ2E |  MN20XWSS | M*1 | M*2 |
*         20   +-----------+-----------+-----------+-----+-----+
*              |                   MN20YTTI                    |
*         28   +-----------------------+-----------------------+
*              |                   MN20YVTI                    |
*         30   +-----------+-----------+-----------+-----------+
*              |  MN202PRI |  MN202PRG |  MN202APR |  MN202REF |
*         38   +-----------+-----------+-----------+-----------+
*              |  MN202RES |  MN202PST |       MN202IOC        |
*         40   +-----------+-----------+-----------------------+
*              |       MN202PNC        |       MN202LIN        |
*         48   +-----------------------+-----------------------+
*              |       MN202CRD        |
*         4C   +-----------------------+
*
***                 MN20X - VM MONITOR SCHEDULE CLASS RECORDS
         SPACE
MN20XUID DS    CL8            USERID BEING ADDED / DROPPED FROM QUEUE
MN20XNPP DS    1F             NO. OF SYSTEM PAGABLE PAGES
MN20XSWS DS    1F             SUM OF WORKING SETS OF IN-Q USERS
MN20XQ1N DS    1F             NO. OF USERS IN Q1
MN20XQ2N DS    1F             NO. OF USERS IN Q2
MN20XQ1E DS    1H             NO. OF USERS ELIGABLE FOR Q1
MN20XQ2E DS    1H             NO. OF USERS ELIGABLE FOR Q2
MN20XWSS DS    1H             USERS NEW PROJECTED WORKING SET SIZE
MN20XQNM DS    1X        M*1  QUEUE BEING ADDED / DROPPED  TO / FROM
MN2RSV1  DS    1X        M*2  RESERVED
MN203LEN EQU   *-MN20X        LENGTH OF CL 2 CODE 3 RECORD (ADD Q)
         EJECT
MN20YTTI DS    XL8            CURRENT VMTTIME (CP SIMULATION TIME)
MN20YVTI DS    XL8            CURRENT VMVTIME (USER VIRTUAL TIME)
MN204PRI DS    1F             ELIGABLE LIST PRIORITY
MN204LEN EQU   *-MN20X        LENGTH OF CL 2 CODE 4 RECORD (DROP Q)
         SPACE
         ORG   MN204PRI       BACK-UP TO PRIORITY FIELD
MN202PRI DS    1H             DISPATCH PRIORITY
MN202PGR DS    1H             PAGES READ WHILE IN QUEUE
MN202APR DS    1H             AVE. NO. OF PAGES RES. AT EACH PAGE READ
MN202REF DS    1H             NO. OF PAGES REFERENCED WHILE IN Q
MN202RES DS    1H             CURRENT NUMBER OF PAGES RESIDENT
MN202PST DS    1H             NO. OF PAGES STOLEN WHILE IN Q
MN202IOC DS    1F             VIRTUAL NON SPOOL SIO COUNT
MN202PNC DS    1F             VIRTUAL CARDS PUNCHED
MN202LIN DS    1F             VIRTUAL LINES PRINTED
MN202CRD DS    1F             VIRTUAL CARDS READ
MN202LEN EQU   *-MN20X        LEN OF CL 2 CODE 2 REC (ADD ELIG LIST)
         EJECT
MN400    DSECT
         SPACE
***                 MN400 - VM MONITOR USER CLASS RECORD
*
*          0   +-----------------------------------------------+
*              |                   MN400UID                    |
*          8   +-----------------------------------------------+
*              |                   MN400TTI                    |
*         10   +-----------------------------------------------+
*              |                   MN400VTI                    |
*         18   +-----------------------+-----------------------+
*              |       MN400PGR        |       MN400PGW        |
*         20   +-----------------------+-----------------------+
*              |       MN400IOC        |       MN400PNC        |
*         28   +-----------------------+-----------------------+
*              |       MN400LIN        |       MN400CRD        |
*         30   +-----+-----+-----+-----+-----+-----+-----+-----+
*              | M*1 | M*2 | M*3 | M*4 | M*5 | M*6 | M*7 | M*8 |
*         38   +-----+-----+-----+-----+-----+-----+-----+-----+
*              | M*9 | M*10| M*11| M*12| M*13| M*14|  MN400RES |
*         40   +-----+-----+-----+-----+-----+-----+-----------+
*              |  MN400WSS |  MN400PDR |  MN400PDK |  MN400INT |
*         48   +-----------+-----------+-----------+-----------+
*
***                 MN400 - VM MONITOR USER CLASS RECORD
         SPACE
MN400UID DS    CL8            USERID
MN400TTI DS    XL8            CURRENT VMTTIME (CP SIMULATION TIME)
MN400VTI DS    XL8            CURRENT VMVTIME (USER VIRTUAL TIME)
MN400PGR DS    1F             TOTAL PAGE READS - THIS USER
MN400PGW DS    1F             TOTAL PAGE WRITES - THIS USER
MN400IOC DS    1F             VIRTUAL NON SPOOLED SIO COUNT
MN400PNC DS    1F             VIRTUAL CARDS PUNCHED
MN400LIN DS    1F             VIRTUAL LINES PRINTED
MN400CRD DS    1F             VIRTUAL CARDS READ
MN400RST DS    1X        M*1  USER RUNNING STATUS
MN400DST DS    1X        M*2  USER DISPATCH STATUS
MN400OST DS    1X        M*3  USER OPERATING STATUS
MN400QST DS    1X        M*4  USER QUEUING STATUS
MN400PST DS    1X        M*5  USER PROCESSING STATUS
MN400EST DS    1X        M*6  USER EXECUTION STATUS
MN400TST DS    1X        M*7  USER TRACING CONTROL STATUS
MN400MLV DS    1X        M*8  USER MESSAGE LEVEL
MN400QLV DS    1X        M*9  USER QUEUE LEVEL
MN400CLV DS    1X        M*10 USER COMMAND LEVEL
MN400TLV DS    1X        M*11 USER TIMER LEVEL
MN400PND DS    1X        M*12 INTERRUPT PENDING STATUS
MN400UPR DS    1X        M*13 DIRECTORY OR 'SET' PRIORITY
MN4RSV1  DS    1X        M*14 RESERVED
MN400RES DS    1H             NO. OF PAGES RESIDENT
MN400WSS DS    1H             ESTIMATED WORKING SET SIZE
MN400PDR DS    1H             DRUM ALLOCATED PAGE FRAMES
MN400PDK DS    1H             DISK ALLOCATED PAGE FRAMES
MN400INT DS    1H             MONITOR SAMPLING INTERVAL (SECS)
MN400LEN EQU   *-MN400        LENGTH OF CL 4 CODE 0 RECORD
         EJECT
MN500    DSECT
         SPACE
***                 MN500 - VM MONITOR INSTSIM CLASS RECORD
*
*          0   +-----------------------------------------------+
*              |                   MN500UID                    |
*          8   +-----------------------+-----------------------+
*              |       MN500INS        |       MN500VAD        |
*         10   +-----------------------+-----------------------+
*              |                   MN500OVH                    |
*         18   +-----------------------------------------------+
*
***                 MN500 - VM MONITOR INSTSIM CLASS RECORD
         SPACE
MN500UID DS    CL8            USERID
MN500INS DS    1F             PRIVLGED INSTRUCTION
MN500VAD DS    1F             VIRTUAL STORAGE ADDR OF THE INSTRUCTION
MN500OVH DS    XL8            CURRENT TOTAL OF CP SIMULATION TIME
MN500LEN EQU   *-MN500        LENGTH OF CL 4 CODE 0 RECORD
         SPACE 5
MN600HDR DSECT                HEADER PORTION, PRECEEDS DEVICE PKGS
MN600NUM DS    1H             NUMBER OF DEVICE DATA PKGS WHICH FOLLOW
MN600HLN EQU   *-MN600HDR     LENGTH OF THE HEADER
         SPACE 2
MN600DEV DSECT                DEVICE PACKAGE, ONE FOR EACH DEVICE
         SPACE
***                 MN600DEV - VM MONITOR DASTAP CLASS DEVICE PORTION
*
*          0   +-----------+-----------+-----------------------+
*              |  MN600ADD |  MN600TY  |           MN600SER    |
*          8   +-----------+-----------+-----------+-----------+
*              |           |       MN600CNT        |
*          E   +-----------+-----------------------+
*
***                 MN600DEV - VM MONITOR DASTAP CLASS DEVICE PORTION
         SPACE
MN600ADD DS    1H             DEVICE ADDRESS
MN600TY  DS    1H             VM/370 DEVICE TYPE/CODES
MN600SER DS    CL6            VOLUME SERIAL NUMBER
MN600CNT DS    XL4            DEVICE ACCUMULATED I/O COUNT
MN600DLN EQU   *-MN600DEV     LENTH OF EACH DATA RECORD
         SPACE
MN600MAX EQU   (4096-MNBHDLEN-MNHDRLEN-MN600HLN)/MN600DLN MAX DEV COUNT
         EJECT
MN700    DSECT
         SPACE
***                 MN700 - VM MONITOR SEEKS CLASS RECORD
*
*          0   +-----------------------------------------------+
*              |                   MN700UID                    |
*          8   +-----------+-----------+-----------+-----+-----+
*              |  MN700ADD |  MN700CYL |  MN700CCY | M*1 | M*2 |
*         10   +-----+-----+-----------+-----------+-----+-----+
*              | M*3 | M*4 |
*         12   +-----+-----+
*
***                 MN700 - VM MONITOR SEEKS CLASS RECORD
         SPACE
MN700UID DS    CL8            USERID
MN700ADD DS    1H             DEVICE ADDRESS
MN700CYL DS    1H             CYLINDER SEEKING TO
MN700CCY DS    1H             CYLINDER CURRENTLY POSITIONED UPON
MN700QDV DS    1X        M*1  I/O TASKS QUEUED ON THE DEVICE
MN700QCU DS    1X        M*2  I/O TASKS QUEUED ON THE CONTROL UNIT
MN700QCH DS    1X        M*3  I/O TASKS QUEUED ON THE CHANNEL
MN700DIR DS    1X        M*4  SEEK DIRECTION 00 = LOWER, 01 = HIGHER
MN700LEN EQU   *-MN700        LENGTH OF CL 7 CODE 0 RECORD
         EJECT
MN802DEV DSECT                HEADER PORTION, PRECEEDS COUNTER PORTION
MN802NUM DS    1H             NO. OF DEVICE BLOCK COUNTERS WHICH FOLLOW
MN802DLN EQU   *-MN802DEV     LENGTH OF THE HEADER
MN802CNT DS    XL4            DEVICE I/O COUNT
         SPACE 2
MN802CTR DSECT                COUNTER PORTION
         SPACE
***                 MN802DEV - VM MONITOR SYSPROF CLASS COUNTER PORTION
*
*          0   +-----------------------+-----------------------+
*              |       MN802NAU        |       MN802PGR        |
*          8   +-----------------------+-----------------------+
*              |       MN802PGW        |       MN802NPP        |
*         10   +-----------------------+-----------------------+
*              |                   MN802WID                    |
*         18   +-----------------------------------------------+
*              |                   MN802WPG                    |
*         20   +-----------------------------------------------+
*              |                   MN802WIO                    |
*         28   +-----------------------------------------------+
*              |                   MN802PRB                    |
*         30   +-----------------------------------------------+
*
***                 MN802DEV - VM MONITOR SYSPROF CLASS COUNTER PORTION
         SPACE
MN802NAU DS    1F             NO. OF LOGGED ON USERS
MN802PGR DS    1F             TOTAL SYSTEM PAGE READS
MN802PGW DS    1F             TOTAL SYSTEM PAGE WRITES
MN802NPP DS    1F             NO. OF SYSTEM PAGABLE PAGES
MN802WID DS    XL8            TOTAL SYSTEM IDLE WAIT TIME
MN802WPG DS    XL8            TOTAL SYSTEM PAGE WAIT TIME
MN802WIO DS    XL8            TOTAL SYSTEM I/O WAIT TIME
MN802PRB DS    XL8            TOTAL SYSTEM PROBLEM TIME
MN802CLN EQU   *-MN802CTR     LENGTH OF EACH DATA ENTRY
         PUSH  PRINT
         PRINT OFF,NOGEN
.VMB01   ANOP
VMBLOK   DSECT
         SPACE 1
***                  VMBLOK  -  VIRTUAL MACHINE CONTROL BLOCK
*
*          0   +-----------------------+-----------------------+
*              |        VMQFPNT        |        VMQBPNT        |
*          8   +-----------------------+-----------------------+
*              |        VMPNT          |        VMECEXT        |
*         10   +-----------------------+-----------------------+
*              |        VMSEG          |        VMSIZE         |
*         18   +-----------------------+-----------------------+
*              |        VMCHSTRT       |        VMCUSTRT       |
*         20   +-----------------------+-----------------------+
*              |        VMDVSTRT       |        VMTERM         |
*         28   +-----------+-----------+-----+-----+-----+-----+
*              |  VMVTERM  |  VMTRMID  | V*1 | V*2 | V*3 | V*4 |
*         30   +-----------+-----------+-----+-----+-----+-----+
*              |  VMCHCNT  |  VMCUCNT  |  VMDVCNT  |  VMIOACTV |
*         38   +-----------+-----------+-----------+-----------+
*              |                                               |
*              =                    VMCHTBL                    =
*              |                                               |
*         58   +-----+-----+-----+-----+-----+-----+-----+-----+
*              | V*5 | V*6 | V*7 | V*8 | V*9 | V*10| V*11| V*12|
*         60   +-----+-----+-----+-----+-----+-----+-----+-----+
*              | V*13| V*14| V*15| V*16|  VMSLOCK  |  VMLLOCK  |
*         68   +-----+-----+-----+-----+-----------+-----------+
*              | V*19| V*20|  VMIOINT  |        VMTIMER        |
*         70   +-----------+-----------+-----------------------+
*              |                    VMVTIME                    |
*         78   +-----------------------------------------------+
*              |                    VMTMOUTQ                   |
*         80   +-----------------------------------------------+
*              |                    VMTTIME                    |
*         88   +-----------------------------------------------+
*              |                    VMTMINQ                    |
*         90   +-----------------------------------------------+
*              |                    VMTODINQ                   |
*         98   +-----------------------------------+-----+-----+
*              |              VMINST               | V*17| V*18|
*         A0   +-----------------------+-----------+-----+-----+
*              |        VMTREXT        |        VMADSTOP       |
*         A8   +-----------------------+-----------------------+
*              |                     VMPSW                     |
*         B0   +-----------------------------------------------+
*              |                    (CONT)                     |
         EJECT
*              |                    (CONT)                     |
*         B0   +-----------------------------------------------+
*              |                                               |
*              =                    VMGPRS                     =
*              |                                               |
*         F0   +-----------------------------------------------+
*              |                                               |
*              =                    VMFPRS                     =
*              |                                               |
*        110   +-----------------------------------------------+
*              |                    VMUSER                     |
*        118   +-----------------------------------------------+
*              |                    VMACNT                     |
*        120   +-----------------------------------------------+
*              |                    VMDIST                     |
*        128   +-----------------------+-----------------------+
*              |        VMPGREAD       |        VMPGWRIT       |
*        130   +-----------+-----------+-----------------------+
*              |  VMWCNT   |  VMSEGDSP |        VMSTOR         |
*        138   +-----------+-----------+-----------------------+
*              |        VMIOCNT        |        VMPNCH         |
*        140   +-----------------------+-----------------------+
*              |        VMLINS         |        VMCRDS         |
*        148   +-----------------------+-----------------------+
*              |                    VMCOMND                    |
*        150   +-----------+-----------+-----------+-----------+
*              |  VMPDRUM  |  VMPDISK  |  VMPAGES  |  VMPRGIL  |
*        158   +-----------+-----------+-----------+-----------+
*              |  VMDEDCH  |  VMQPRIOR |  VMWSPROJ |  VMSTEALS |
*        160   +-----------+-----------+-----------+-----------+
*              |        VMTIMEON       |        VMTRQBLK       |
*        168   +-----------------------+-----------------------+
*              |        VMACOUNT       |        VMRDINQ        |
*        170   +-----------------------+-----------------------+
*              |        VMPGRINQ       |        VMEPRIOR       |
*        178   +-----------------------+-----------------------+
*              |        VMSTKO         |        VMMICRO        |
*        180   +-----------------------+-----------------------+
*              |        VMPFUNC        |        VMPXINT        |
*        188   +-----------------------+-----------------------+
*              |        VMDELAY        |        VMRPRIOR       |
*        190   +-----------------------+-----------------------+
*              |        VMPGPNT        |  VMNDCNT  |  VMSHRSYS |
*        198   +-----------------------+-----------------------+
*              | V*21 |    VMRSVW4     |        VMASSIST       |
*        1A0   +-----------------------+-----------------------+
*              |        VMRSVW1        |        VMRSVW2        |
*        1A8   +-----------------------+-----------------------+
*              |        VMRSVW3        |        VMRSVW5        |
*        1B0   +-----------------------+-----------------------+
*              |        VMUSER1        |        VMUSER2        |
*        1B8   +-----------------------+-----------------------+
*              |        VMUSER3        |        VMUSER4        |
*        1C0   +-----------------------+-----------------------+
*
***                  VMBLOK  -  VIRTUAL MACHINE CONTROL BLOCK
         EJECT
         SPACE 1
VMQFPNT  DS    1F             POINTER TO NEXT VMBLOK IN QUEUE
VMQBPNT  DS    1F             POINTER TO PREVIOUS VMBLOK IN QUEUE
VMPNT    DS    1F             POINTER (CYCLIC) TO NEXT VMBLOK
VMECEXT  DS    1F             VMBLOK EXTENDED CONTROL POINTER - ECBLOK
VMVCR0   EQU   VMECEXT        VIRTUAL C-REG 0 FOR NON-EC MACHINE
VMSEG    DS    1F             POINTER TO VMSEGTBL
VMSIZE   DS    1F             TEMPORARY STORAGE SIZE (BYTES)
VMCHSTRT DS    1F             POINTER TO VCHBLOK TABLE
VMCUSTRT DS    1F             POINTER TO VCUBLOK TABLE
VMDVSTRT DS    1F             POINTER TO VDEVBLOK TABLE
VMTERM   DS    1F             POINTER TO RDEVBLOK FOR USER TERMINAL
VMVTERM  DS    1H             DISPLACEMENT TO VIRTUAL CONSOLE VDEVBLOK
VMTRMID  DS    1H             RESOURCE ID OF REAL TERMINAL IF 370X
VMTLEND  DS    1C        V*1  TERMINAL LINE END CHARACTER
VMTLDEL  DS    1C        V*2  TERMINAL LINE DELETE CHARACTER
VMTCDEL  DS    1C        V*3  TERMINAL CHARACTER DELETE CHARACTER
VMTESCP  DS    1C        V*4  TERMINAL ESCAPE CHARACTER
VMCHCNT  DS    1H             VIRTUAL CHANNEL COUNT
VMCUCNT  DS    1H             VIRTUAL CONTROL UNIT COUNT
VMDVCNT  DS    1H             VIRTUAL DEVICE COUNT
VMIOACTV DS    1H             ACTIVE CHANNEL MASK
VMCHTBL  DS    16H            CHANNELS ATTACHED - VMCHSTRT INDEX
VMRSTAT  DS    1X        V*5  VIRTUAL MACHINE RUNNING STATUS
VMDSTAT  DS    1X        V*6  VIRTUAL MACHINE DISPATCHING STATUS
VMOSTAT  DS    1X        V*7  VIRTUAL MACHINE OPERATING STATUS
VMQSTAT  DS    1X        V*8  VIRTUAL MACHINE QUEUEING STATUS
VMPSTAT  DS    1X        V*9  VIRTUAL MACHINE PROCESSING STATUS
VMESTAT  DS    1X        V*10 VIRTUAL MACHINE CONTROL STATUS
VMTRCTL  DS    1X        V*11 VIRTUAL MACHINE TRACING CONTROL
VMMLEVEL DS    1X        V*12 MESSAGE LEVEL
VMQLEVEL DS    1X        V*13 QUEUE LEVEL
VMCLEVEL DS    1X        V*14 COMMAND LEVEL
VMTLEVEL DS    1X        V*15 TIMER LEVEL
VMPEND   DS    1X        V*16 INTERRUPT PENDING SUMMARY FLAG
VMSLOCK  DS    1H             SHORT LOCK - RESERVED FOR FUTURE USE
VMLLOCK  DS    1H             LONG LOCK  - RESERVED FOR FUTURE USE
VMFSTAT  DS    1X        V*19 VIRTUAL MACHINE FEATURE STATUS
VMMLVL2  DS    1X        V*20 MORE MSG HANDLING INFO
VMIOINT  DS    1H             I/O INTERRUPT PENDING FLAGS
VMTIMER  DS    1F             VIRTUAL TIMER VALUE - X'50'
VMVTIME  DS    1D             VIRTUAL CPU TIME USED - 2'S COMPLEMENT
VMTMOUTQ DS    1D             TIME REMAINING IN QUEUE 1 - QUEUE 2
VMTTIME  DS    1D             TOTAL TIME WHILE IN SUPERVISOR STATE
VMTMINQ  DS    1D             VMTTIME VALUE AT ENTRY TO Q
VMTODINQ DS    1D             TOD CLOCK TIME STAMP AT QUEUE ENTRY
VMINST   DS    1F                 VM PRIVILEGED OR TRACING INSTRUCTION
VMACTDEV DS    1H                 VDEV ADDRESS FOR LAST VIRT SIO
VMUPRIOR DS    1X        V*17 USER PRIORITY FROM DIRECTORY
VMPSWDCT DS    1X        V*18 INVALID 'LINK' PASSWORD COUNT
VMTREXT  DS    1F             ADDRESS OF EXTENDED TRACE CONTROL BLOK
VMADSTOP DS    1F             ADDRESS OF ADDRESS STOP CONTRON BLOK
VMPSW    DS    1D             VIRTUAL MACHINE PSW
VMGPRS   DS    16F            VIRTUAL MACHINE GEN. PURP. REGISTERS
VMFPRS   DS    4D             VIRTUAL MACHINE FLT. PT. REGISTERS
VMUSER   DS    CL8            VIRTUAL MACHINE IDENTIFICATION
VMACNT   DS    CL8            VIRTUAL MACHINE ACCOUNTING NUMBER
VMDIST   DS    CL8            VIRTUAL MACHINE DISTRIBUTION CODE
VMPGREAD DS    1F             TOTAL PAGE READS
VMPGWRIT DS    1F             TOTAL PAGE WRITES
VMWCNT   DS    1H             PAGE WAIT COUNT
VMSEGDSP DS    1H             DISP. OF VM SEGTABLE FROM START OF BLOK
VMSTOR   DS    1F             PERMANENT STORAGE SIZE (BYTES)
VMIOCNT  DS    1F             VIRTUAL SIO COUNT FOR NON-SPOOLED IO
VMPNCH   DS    1F             VIRTUAL CARD COUNT - SPOOLED PUNCH
VMLINS   DS    1F             VIRTUAL LINE COUNT - SPOOLED PRINTER
VMCRDS   DS    1F             VIRTUAL CARD COUNT - SPOOLED READER
VMCOMND  DS    CL8            LAST CP COMMAND EXECUTED
VMPDRUM  DS    1H             RESERVED
VMPDISK  DS    1H             RESERVED
VMPAGES  DS    1H             NUMBER OF CURRENTLY RESIDENT REAL PAGES
VMPRGIL  DS    1H             ILC FOR LATEST PROGRAM INTERRUPT
VMDEDCH  DS    1H             MASK FOR DEDICATED CHANNELS
VMQPRIOR DS    1H             PRIORITY IN DISPATCHING QUEUE
VMWSPROJ DS    1H             PROJECTED WORKING SET SIZE
VMSTEALS DS    1H             NUMBER OF WAITS FOR STOLEN PAGES
VMTIMEON DS    1F             LOGON TIME - TOD CLOCK WORD ZERO
VMTRQBLK DS    1F             ADDRESS OF TRQBLOK FOR REAL TIMER
VMACOUNT DS    1F             ADDRESS OF USER ACCTBLOK
VMRDINQ  DS    1F             PAGE READ TOTAL (VMPGREAD) @ Q ENTRY
VMPGRINQ DS    1F             SUM OF VMPAGES COUNT @ EACH PAGE READ
VMEPRIOR DS    1F             ELIGIBLE LIST PRIORITY
VMSTKO   DS    1F             CONSOLE FUNCTION OUTPUT STACK
VMMICRO  DS    1F             VM ASSIST - REAL CNTRL REG 6
VMPFUNC  DS    1F             PFNN FUNCTION TABLE
VMPXINT  DS    1F             EXTENDED EXTERNAL INTERRUPT STACK
VMDELAY  DS    1F             TRQBLOK FOR DELAYED SLEEP OR LOGOFF
VMRPRIOR DS    1F             RUNLIST DISPATCHING PRIORITY
VMPGPNT  DS    1F             POINTER TO LIST OF PGBLOKS
VMNDCNT  DS    1H             NON-DEFERED PAGE READ COUNT
VMSHRSYS DS    1H             NUMBER OF SHARED NAMED SYSTEMS
VMRBSC   DS    1X        V*21 3270 REMOTE DISPLAY LINE COUNT
VMRSVW4  DS    3X             RESERVED
VMASSIST DS    1F             POINTER TO LIST OF VMABLOKS
VMRSVW1  DS    1F             RESERVED FOR IBM USE
VMRSVW2  DS    1F             RESERVED FOR IBM USE
VMRSVW3  DS    1F             RESERVED FOR IBM USE
VMRSVW5  DS    1F             RESERVED FOR IBM USE
VMUSER1  DS    1F             RESERVED FOR INSTALLATION USE
VMUSER2  DS    1F             RESERVED FOR INSTALLATION USE
VMUSER3  DS    1F             RESERVED FOR INSTALLATION USE
VMUSER4  DS    1F             RESERVED FOR INSTALLATION USE
         SPACE 1
VMBSIZE  EQU   (*-VMBLOK)/8   VMBLOK SIZE IN DOUBLE WORDS
         SPACE 1
         ORG   VMMICRO        DEFINITION FOR VMMICRO:
VMMCR6   DS    1X             CR 6 - HARDWARE FLAG BYTE
VMMADDR  DS    3X             CR 6 - ADDR OF V. MACH PTR LIST
         EJECT
*        BITS DEFINED IN VMRSTAT
VMCFWAIT EQU   X'80'          WAITING - EXECUTING CONSOLE FUNCTION
VMPGWAIT EQU   X'40'          WAITING - PAGING OPERATION(S)
VMIOWAIT EQU   X'20'          WAITING - SCHEDULED IOBLOK START
VMPSWAIT EQU   X'10'          WAITING - VIRTUAL PSW WAIT STATE
VMEXWAIT EQU   X'08'          WAITING - INSTRUCTION SIMULATION
VMLOGON  EQU   X'04'          USER NOT YET LOGGED ON
VMLOGOFF EQU   X'02'          USER LOGGING OFF
VMIDLE   EQU   X'01'          VIRTUAL MACHINE IN IDLE WAIT STATE
VMCPWAIT EQU   VMCFWAIT+VMPGWAIT+VMIOWAIT+VMEXWAIT+VMLOGOFF+VMLOGON
VMNORUN  EQU   VMCPWAIT+VMPSWAIT
VMLONGWT EQU   VMCFWAIT+VMLOGON+VMLOGOFF+VMIDLE
         SPACE 1
*        BITS DEFINED IN VMDSTAT
VMDSP    EQU   X'80'          VIRTUAL MACHINE IS DISPATCHED RUNUSER
VMTSEND  EQU   X'40'          VIRTUAL MACHINE HAS GONE COMPUTE BOUND
VMQSEND  EQU   X'20'          VIRTUAL MACHINE IN-QUEUE TIME SLICE END
VMTIO    EQU   X'10'          VIRTUAL MACHINE IS IN TIO BUSY LOOP
VMRUN    EQU   X'08'          VIRTUAL MACHINE RUNNABLE
VMINQ    EQU   X'04'          VIRTUAL MACHINE IN A Q
VMELIG   EQU   X'02'          RESERVED
VMDSPCH  EQU   X'01'          USE DISPATCH PATH 'DMKDSPCH'
         SPACE 1
*        BITS DEFINED IN VMOSTAT
VMSYSOP  EQU   X'80'          VIRTUAL MACHINE IS SYSTEM OPERATOR
VMSHR    EQU   X'40'          VIRTUAL MACHINE RUNNING SHARED SYSTEM
VMSLEEP  EQU   X'20'          VIRTUAL MACHINE IN SLEEP STATE
VMDISC   EQU   X'10'          VIRTUAL MACHINE CONSOLE DISCONNECTED
VMCFRUN  EQU   X'08'          VIRTUAL MACHINE RUNNING IN CF MODE
VMVIRCF  EQU   X'04'          VIRTUAL MACHINE EXECUTING VIRTUAL CF
VMCF     EQU   X'02'          VIRTUAL MACHINE EXECUTING CF
VMKILL   EQU   X'01'          VIRTUAL MACHINE TO BE LOGGED OFF
         SPACE 1
*        BITS DEFINED IN VMQSTAT
VMPRIDSP EQU   X'80'          VIRTUAL MACHINE ELIGIBLE FOR Q1
VMAUTLOG EQU   X'40'          AUTOLOGGED USER IN DISCONNECT MODE
VMWSERNG EQU   X'20'          LAST WORKING SET ERROR WAS NEGATIVE
*                             KEEP IN Q1 FOR TERMINAL OUTPUT
VMWSCHG  EQU   X'08'          FORCE NEW WORKING SET ON QUEUE ENTRY
VMCFREAD EQU   X'02'          VIRTUAL MACHINE WITH CF READ UP  @VA01989
VMPA2APL EQU   X'01'          REFLECT EXTERNAL INTERRUPT TO MACHINE
         SPACE 1
*        BITS DEFINED IN VMPSTAT
VMISAM   EQU   X'80'          VIRTUAL MACHINE HAS ISAM CCW CHECKING
VMV370R  EQU   X'40'          VIRTUAL MACHINE CAN USE EXTENDED FORMAT
VMRPAGE  EQU   X'20'          VIRTUAL MACHINE MAY RESERVE PAGES
VMREAL   EQU   X'10'          VIRTUAL MACHINE HAS VIRT=REAL OPTION
VMNOTRAN EQU   X'08'          NO CCW TRANSLATION FOR VIRT=REAL USER
VMNSHR   EQU   X'04'          RUNNING NON-SHARED NAMED SAVED SYSTEM
VMACCOUN EQU   X'02'          VIRTUAL MACHINE MAY PUNCH ACCOUNT CARD
VMPAGEX  EQU   X'01'          VIRT. MACH. RECEIVING PSEUDO PAGE FAULTS
         SPACE 1
*        BITS DEFINED IN VMESTAT
VMSHADT  EQU   X'80'          SHADOW TABLES ARE PRESENT
VMPERCM  EQU   X'40'          VRT/CP PER ACTIVE
VMBADCR0 EQU   X'20'          VIRTUAL C-REG ZERO IN INVALID
VMMICSVC EQU   X'10'          USER WANTS SVCS DONE BY VM ASSIST
VMEXTCM  EQU   X'08'          VIRTUAL MACHINE IN EXTENDED CONTROL MODE
VMNEWCR0 EQU   X'04'          VIRTUAL C-REG 0 HAS CHANGED
VMINVSEG EQU   X'02'          ALL SHADOW TABLES INVALID
VMINVPAG EQU   X'01'          SHADOW PAGE TABLES INVALID
VMECZAP  EQU   255-VMMICSVC   ALL BITS EXCEPT VMMICSVC
         SPACE
*        BITS DEFINED IN VMTRCTL
VMTRPER  EQU   X'80'          VIRTUAL PER TRACING ACTIVE
VMTRSVC  EQU   X'40'          TRACE USER SVC INSTRUCTIONS
VMTRPRG  EQU   X'20'          TRACE VIRTUAL PROGRAM INTERRUPTS
VMTRIO   EQU   X'10'          TRACE VIRTUAL I/O INTERRUPTS
VMTREX   EQU   X'08'          TRACE EXTERNAL INTERRUPTS
VMTRPRV  EQU   X'04'          TRACE USER PRIVILEGED INSTRUCTIONS
VMTRSIO  EQU   X'02'          TRACE VIRTUAL I/O INSTRUCTIONS
VMTRBRIN EQU   X'01'          TRACE SUCCESSFUL BRANCHES OR ALL INSTR.
VMTRINT  EQU   VMTRSVC+VMTRPRG+VMTRIO+VMTREX  TRACE ALL USER INTERRUPTS
         SPACE 1
*        BITS DEFINED IN VMMLEVEL
VMMSGON  EQU   X'80'          RECEIVING MESSAGES
VMWNGON  EQU   X'40'          RECEIVING WARNINGS
VMMCODE  EQU   X'20'          RECEIVING ERROR MESSAGE CODES
VMMTEXT  EQU   X'10'          RECEIVING TEXTS OF ERROR MESSAGES
VMMLINED EQU   X'08'          LINE EDITING ON
VMMACCON EQU   X'04'          RECEIVING ACCOUNTING INFORMATION
VMMCPENV EQU   X'02'          TERMINAL ENVIROMENT IN CP MODE
VMMSTMP  EQU   X'01'          TIME STAMP DESIRED ON CONSOLE OUTPUT
         SPACE 1
*        BITS DEFINED IN VMMLVL2
VMMIMSG  EQU   X'80'          RECEIVING ALL INFORMATIONAL MSGS
         SPACE
*        BITS DEFINED IN VMQLEVEL
VMQ1     EQU   X'80'          VIRTUAL MACHINE IS INTERACTIVE
VMCOMP   EQU   X'40'          VIRTUAL MACHINE IS COMPUTE BOUND
VMHIPRI  EQU   X'20'          VIRTUAL MACHINE IS HIGHEST PRIORITY
VMLOPRI  EQU   X'10'          VIRTUAL MACHINE IS LOWEST PRIORITY
VMAEX    EQU   X'08'          VIRTUAL MACHINE IS ASSURED EXECUTION
VMAEXP   EQU   X'04'          VIRTUAL MACHINE IS ASSURED PERCETAGE
VMDROP1  EQU   X'02'          VIRTUAL MACHINE JUST DROPPED FROM Q1
         SPACE 1
*        BITS DEFINED IN VMCLEVEL
VMCLASSA EQU   X'80'          CLASS A FUNCTIONS
VMCLASSB EQU   X'40'          CLASS B FUNCTIONS
VMCLASSC EQU   X'20'          CLASS C FUNCTIONS
VMCLASSD EQU   X'10'          CLASS D FUNCTIONS
VMCLASSE EQU   X'08'          CLASS E FUNCTIONS
VMCLASSF EQU   X'04'          CLASS F FUNCTIONS
VMCLASSG EQU   X'02'          CLASS G FUNCTIONS
VMCLASSH EQU   X'01'          RESERVED - IBM USE ONLY
         SPACE 1
*        BITS DEFINED IN VMTLEVEL
VMTON    EQU   X'80'          VIRTUAL TIMER RUNNING
VMRON    EQU   X'40'          VIRTUAL REAL TIMER RUNNING
VMCPUTMR EQU   X'20'          VIRTUAL CPU TIMER IN REAL CPU TIMER
VMSTMPI  EQU   X'08'          VIRTUAL INTERVAL TIMER REQUEST QUEUED
VMSTMPT  EQU   X'04'          VIRTUAL CPU TIMER REQUEST QUEUED
VMTMRINT EQU   X'01'          INTERRUPT FROM REAL CPU TIMER PENDING
         EJECT
*
*        BITS RE-DEFINED FOR SYSTEM VMBLOK
*
VMTIDLE  EQU   VMTON          CPU TIMER CONTAINS IDLE WAIT STATE TIME
VMTPAGE  EQU   VMRON          CPU TIMER CONTAINS SYSTEM PAGE WAIT TIME
VMTIONT  EQU   VMSTMPI        CPU TIMER CONTAINS I/O WAIT STATE TIME
         SPACE 1
*        BITS DEFINED IN VMPEND
VMPERPND EQU   X'40'          VIRTUAL PER INTERRUPT PENDING
VMPRGPND EQU   X'20'          VIRTUAL PROGRAM INTERRUPT DEFERRED
VMSVCPND EQU   X'10'          VIRTUAL SVC INTERRUPT DEFERRED
VMPGPND  EQU   X'08'          VIRTUAL PSEUDO PAGE FAULT PENDING
VMIOPND  EQU   X'02'          VIRTUAL I/O INTERRUPT PENDING
VMEXTPND EQU   X'01'          VIRTUAL EXTERNAL INTERRUPT PENDING
         SPACE 1
*        BITS DEFINED IN VMFSTAT
VMFBMX   EQU   X'80'          VIRTUAL BLOCK MULTIPLEXER CHANNELS
         SPACE 1
*        BITS DEFINED IN VMMCR6:
VMMFE    EQU   X'80'          VM ASSIST FEATURE ENABLED
VMMPROB  EQU   X'40'          VIRTUAL MACHINE IN PROBLEM STATE
VMMNOSK  EQU   X'20'          VM ASSIST DOESN'T HANDLE SSK,ISK
VMM360   EQU   X'10'          360 OPS ONLY-NO ECMODE OPS ALLOWD
VMMSVC   EQU   X'08'          VM ASSIST DOES NOT HANDLE SVCS
VMMSHADT EQU   X'04'          SHADOW TABLES PRESENT-EC, TRANS
* THE LAST TWO BITS OF THIS BYTE MUST ALWAYS BE 0.
         EJECT
ECBLOK   DSECT
         SPACE 1
***              ECBLOK  -  VMBLOK EXTENSION FOR VIRTUAL 370R
*
*          0   +-----------------------+-----------------------+
*              |        EXTCR0         |        EXTCR1         |
*          8   +-----------------------+-----------------------+
*              |        EXTCR2         |        EXTCR3         |
*         10   +-----------------------+-----------------------+
*              |        EXTCR4         |        EXTCR5         |
*         18   +-----------------------+-----------------------+
*              |        EXTCR6         |        EXTCR7         |
*         20   +-----------------------+-----------------------+
*              |        EXTCR8         |        EXTCR9         |
*         28   +-----------------------+-----------------------+
*              |        EXTCR10        |        EXTCR11        |
*         30   +-----------------------+-----------------------+
*              |        EXTCR12        |        EXTCR13        |
*         38   +-----------------------+-----------------------+
*              |        EXTCR14        |        EXTCR15        |
*         40   +-----------------------+-----------------------+
*              |        EXTSHCR0       |        EXTSHCR1       |
*         48   +-----------+-----------+-----------------------+
*              |  EXTSHLEN |  EXTVSEGS |        EXTSTOLD       |
*         50   +-----------+-----------+-----------+-----------+
*              |        EXTSHSEG       |  EXTSEGLN |  EXTARCH  |
*         58   +-----------------------+-----------+-----------+
*              |        EXTPERAD       |  EXTPERCD |  EXTCOPY  |
*         60   +-----------------------+-----------+-----------+
*              |                    EXTCPTMR                   |
*         68   +-----------------------+-----------------------+
*              |        EXTCPTRQ       |        EXTCCTRQ       |
*         70   +-----------------------+-----------------------+
*
***              ECBLOK  -  VMBLOK EXTENSION FOR VIRTUAL 370R
         SPACE 1
EXTCR0   DS    1F             VIRTUAL C-REG 0; ARCHITECTURE CONTROLS
EXTCR1   DS    1F             VIRTUAL C-REG 1; SEGMENT TABLE POINTER
EXTCR2   DS    1F                VIRTUAL CONTROL REGISTER 2
EXTCR3   DS    1F             ...THRU REGISTER 15
EXTCR4   DS    1F
EXTCR5   DS    1F
EXTCR6   DS    1F
EXTCR7   DS    1F
EXTCR8   DS    1F
EXTCR9   DS    1F
EXTCR10  DS    1F
EXTCR11  DS    1F
EXTCR12  DS    1F
EXTCR13  DS    1F
EXTCR14  DS    1F
EXTCR15  DS    1F
EXTSHCR0 DS    1F             SHADOW CONTROL REGISTER 0
EXTSHCR1 DS    1F             SHADOW CONTROL REGISTER 1
EXTSHLEN DS    1H             LENGTH OF SHADOW SEGTABLE IN BYTES
EXTVSEGS DS    1H             LENGTH OF VIRTUAL SEGTABLE IN BYTES
EXTSTOLD DS    1F             C-REG 1 VALUE CORRESPONDING TO TABLES
EXTSHSEG DS    1F             REAL ADDRESS OF SHADOW SEGTABLE
EXTSEGLN DS    1H             LENGTH OF SHADOW SEGTABLE IN DBL WORDS
EXTARCH  DS    1H             ARCHITECTURE CONTROL INDEX
EXTPERAD DS    1F             ADDRESS OF INSTRUCTION CAUSING PER INT.
EXTPERCD DS    1H             PER CODE TO BE REFLECTED
EXTCOPY  DS    1H             LENGTH CODE FROM ACTIVE SEGTABLE ENTRY
EXTCPTMR DS    1D             VIRTUAL CPU TIMER
EXTCPTRQ DS    1F             ADDRESS OF TRQBLOK FOR CPU TIMER
EXTCCTRQ DS    1F             ADDRESS OF TRQBLOK FOR CLOCK COMPARATOR
         SPACE 1
EXTSIZE  EQU   (*-ECBLOK)/8 ECBLOK SIZE IN DOUBLE WORDS
         EJECT
         POP   PRINT
         SPACE
         PUSH  PRINT
         PRINT OFF,NOGEN
*
***      CP370 DEVICE CLASSES, TYPES, MODELS, AND FEATURES
*
         SPACE 2
CLASTERM EQU   X'80'          TERMINAL DEVICE CLASS
         SPACE
TYP2700  EQU   X'40'          2700 BISYNC LINE
TYP2955  EQU   TYP2700        2955 COMMUNICATIONS LINE
TYPTELE2 EQU   X'20'          TELEGRAPH TERMINAL CONTROL TYPE II
TYPTTY   EQU   X'20'          TELETYPE TERMINAL
TYPIBM1  EQU   X'10'          IBM TERMINAL CONTROL TYPE I
TYP2741  EQU   X'18'          2741 COMMUNICATIONS TERMINAL
TYP1050  EQU   X'14'          1050 COMMUNICATIONS TERMINAL
TYPUNDEF EQU   X'1C'          TERMINAL DEVICE TYPE IS UNDEFINED
TYPBSC   EQU   X'80'          BISYNC LINE FOR 3270 REMOTE STATIONS
TYP3210  EQU   X'00'          3210 CONSOLE
TYP3215  EQU   TYP3210        3215 CONSOLE
TYP2150  EQU   TYP3210        2150 CONSOLE
TYP1052  EQU   TYP3210        1052 CONSOLE
         SPACE 2
CLASGRAF EQU   X'40'          GRAPHICS DEVICE CLASS
         SPACE
TYP2250  EQU   X'80'          2250 DISPLAY UNIT
TYP2260  EQU   X'40'          2260 DISPLAY STATION
TYP2265  EQU   X'20'          2265 DISPLAY STATION
TYP3066  EQU   X'10'          3066 CONSOLE
TYP1053  EQU   X'08'          1053 PRINTER
TYP3277  EQU   X'04'          3277 DISPLAY STATION
TYP3284  EQU   X'02'          3284 PRINTER
TYP3286  EQU   TYP3284        3286 PRINTER
TYP3158  EQU   TYP3277        3158 CONSOLE                     @VA02100
TYP3288  EQU   TYP3284        3288 PRINTER
         SPACE
FTROPRDR EQU   X'80'          OPERATOR ID CARD READER
         SPACE 2
CLASURI  EQU   X'20'          UNIT RECORD INPUT DEVICE CLASS
         SPACE
TYPRDR   EQU   X'80'          CARD READER DEVICE
TYP2501  EQU   X'81'          2501 CARD READER
TYP2540R EQU   X'82'          2540 CARD READER
TYP3505  EQU   X'84'          3505 CARD READER
TYP1442R EQU   X'88'          1442 CARD READER/PUNCH
TYP2520R EQU   X'90'          2520 CARD READER/PUNCH
TYPTIMER EQU   X'40'          TIMER DEVICE
TYPTR    EQU   X'20'          TAPE READER DEVICE
TYP2495  EQU   X'21'          2495 MAGNETIC TAPE CARTRIDGE READER
TYP2671  EQU   X'22'          2671 PAPER TAPE READER
TYP1017  EQU   X'24'          1017 PAPER TAPE READER
         SPACE 2
CLASURO  EQU   X'10'          UNIT RECORD OUTPUT DEVICE CLASS
         SPACE
TYPPUN   EQU   X'80'          CARD PUNCH DEVICE
TYP2540P EQU   X'82'          2540 CARD PUNCH
TYP3525  EQU   X'84'          3525 CARD PUNCH
TYP1442P EQU   X'88'          1442 CARD PUNCH
TYP2520P EQU   X'90'          2520 CARD PUNCH
TYPPRT   EQU   X'40'          PRINTER TYPE DEVICE
TYP1403  EQU   X'41'          1403 PRINTER
TYP3211  EQU   X'42'          3211 PRINTER
TYP1443  EQU   X'44'          1443 PRINTER
TYPTP    EQU   X'20'          TAPE PUNCH DEVICE
TYP1018  EQU   X'24'          1018 PAPER TAPE PUNCH
         SPACE
FTRUCS   EQU   X'01'          UCS FEATURE
         SPACE 2
CLASTAPE EQU   X'08'          MAGNETIC TAPE DEVICE CLASS
         SPACE
TYP2401  EQU   X'80'          2401 TAPE DRIVE
TYP2415  EQU   X'40'          2415 TAPE DRIVE
TYP2420  EQU   X'20'          2420 TAPE DRIVE
TYP3420  EQU   X'10'          3420 TAPE DRIVE
TYP3410  EQU   X'08'          3410 TAPE DRIVE
TYP3411  EQU   TYP3410        3411 TAPE DRIVE
         SPACE
FTR7TRK  EQU   X'80'          7-TRACK FEATURE
FTRDLDNS EQU   X'40'          DUAL DENSITY FEATURE
FTRTRANS EQU   X'20'          TRANSLATE FEATURE
FTRDCONV EQU   X'10'          DATA CONVERSION FEATURE
         SPACE 2
CLASDASD EQU   X'04'          DIRECT ACCESS STORAGE DEVICE CLASS
         SPACE
TYP2311  EQU   X'80'          2311 DISK STORAGE DRIVE
TYP2314  EQU   X'40'          2314 DISK STORAGE FACILITY
TYP2319  EQU   TYP2314        2319 DISK STORAGE FACILITY
TYP2321  EQU   TYP2311        2321 DATA CELL DRIVE
TYP3330  EQU   X'10'          3330 DISK STORAGE FACILITY
TYP3333  EQU   TYP3330        3333 DISK STORAGE FACILITY
TYP3350  EQU   X'08'          3350 DISK STORAGE FACILITY
TYP2301  EQU   TYP2311        3201 PARALLEL DRUM
TYP2303  EQU   TYP2311        2303 SERIAL DRUM
TYP2305  EQU   X'02'          2305 FIXED HEAD STORAGE DEVICE
TYP3340  EQU   X'01'          3340 DISK STORAGE FACITITY
         SPACE
FTRRPS   EQU   X'80'          ROTATIONAL POSITIONAL SENSING (RPS)
FTREXTSN EQU   X'40'          EXTENDED SENSE BYTES (24 BYTES)
         SPACE
FTR2311T EQU   X'20'  (= VDEV231T)  TOP HALF OF 2314 USED AS 2311
FTR2311B EQU   X'10'  (= VDEV231B)  BOTTOM HALF OF 2314 USED AS 2311
FTR35MB  EQU   X'08'          35 MB DATA MODULE MOUNTED (3340)
FTR70MB  EQU   X'04'          70 MB DATA MODULE MOUNTED (3340)
FTRRSRL  EQU   X'02'          RESERVE/RELEASE ARE VALID CCW OP CODES
         SPACE 2
CLASSPEC EQU   X'02'          SPECIAL DEVICE CLASS
         SPACE
TYPCTCA  EQU   X'80'          CHANNEL TO CHANNEL ADAPTER
TYP3704  EQU   X'40'          3704 PROGRAMMABLE COMM. CTL UNIT
TYP3705  EQU   TYP3704        3705 PROGRAMMABLE COMM. CTL UNIT
TYPRSV1  EQU   X'02'          RESERVED
TYPUNSUP EQU   X'01'          DEVICE UNSUPPORTED BY VM/370
         SPACE
FTRTYP1  EQU   X'10'          TYPE ONE CHANNEL ADAPTER   (3704/5)
FTRTYP2  EQU   X'20'          TYPE TWO CHANNEL ADAPTER   (3704/5)
         EJECT
         POP   PRINT
         SPACE
         PUSH  PRINT
         PRINT OFF,NOGEN
RCHBLOK  DSECT
         SPACE 1
***                  RCHBLOK  -  REAL CHANNEL BLOCK
*
*          0   +-----------+-----------+-----+-----+-----------+
*              |  RCHADD   |  RCHLOCK  | R*1 | R*2 |  RCHQCNT  |
*          8   +-----------+-----------+-----+-----+-----------+
*              |        RCHFIOB        |        RCHLIOB        |
*         10   +-----+-----+-----+-----+-----------------------+
*              | R*3 | R*4 | R*5 | R*6 |        RCHRSV2        |
*         18   +-----+-----+-----+-----+-----------------------+
*              |        RCHQUED        |        RCHOPER        |
*         20   +-----------------------+-----------------------+
*              |                                               |
*              =                    RCHCUTBL                   =
*              |                                               |
*         60   +-----------------------------------------------+
*
***                  RCHBLOK  -  REAL CHANNEL BLOCK
         SPACE 1
RCHADD   DS    1H             CHANNEL ADDRESS
RCHLOCK  DS    1H             CHANNEL LOCK
RCHSTAT  DS    1X         R*1 CHANNEL STATUS
RCHTYPE  DS    1X         R*2 CHANNEL TYPE
RCHQCNT  DS    1H             NO. IOBLOKS QUEUED OFF CHANNEL
RCHFIOB  DS    1F             POINTER TO FIRST IOBLOK QUEUED
RCHLIOB  DS    1F             POINTER TO LAST IOBLOK QUEUED
RCHDTCK  DS    1X         R*3 CHANNEL DATA CHECK COUNT
RCHCCCK  DS    1X         R*4 CHANNEL CONTROL CHECK COUNT
RCHIFCC  DS    1X         R*5 INTERFACE CONTROL CHECK COUNT
RCHCHCK  DS    1X         R*6 CHANNEL CHAINING CHECK COUNT
RCHRSV2  DS    1F             RESERVED FOR FUTURE USE
RCHQUED  DS    1F             IOBLOK QUEUED ON CHANNEL TIME
RCHOPER  DS    1F             IOBLOK OPERATIONAL ON CHANNEL TIME
RCHCUTBL DS    32H            CONTROL UNITS ATTACHED - RCUSTART INDEX
         SPACE 1
RCHSIZE  EQU   (*-RCHBLOK)/8  RCHBLOK SIZE IN DOUBLE WORDS
         SPACE 1
*        BITS DEFINED IN RCHSTAT
RCHBUSY  EQU   X'80'          CHANNEL BUSY
RCHSCED  EQU   X'40'          IOB SCHEDULED ON CHANNEL
RCHDISA  EQU   X'20'          CHANNEL DISABLED
RCHDED   EQU   X'01'          CHANNEL DEDICATED
         SPACE 1
*        BITS DEFINED IN RCHTYPE
RCHSEL   EQU   X'80'          SELECTOR CHANNEL
RCHBMX   EQU   X'40'          BLOCK-MULTIPLEXER CHANNEL
RCHMPX   EQU   X'20'          BYTE-MULTIPLEXER CHANNEL
RCH370   EQU   X'01'          370 TYPE CHANNEL (370 I/O INST SUPPORT)
         EJECT
RCUBLOK  DSECT
         SPACE 1
***                  RCUBLOK  -  REAL CONTROL UNIT BLOCK
*
*          0   +-----------+-----------+-----+-----+-----------+
*              |  RCUADD   |  RCULOCK  | R*1 | R*2 |  RCUQCNT  |
*          8   +-----------+-----------+-----+-----+-----------+
*              |        RCUFIOB        |        RCULIOB        |
*         10   +-----------------------+-----------------------+
*              |        RCUCHA         |        RCUCHB         |
*         18   +-----------------------+-----------------------+
*              |        RCUQUED        |        RCUOPER        |
*         20   +-----------------------+-----------------------+
*              |                                               |
*              =                    RCUDVTBL                   =
*              |                                               |
*         40   +-----------------------------------------------+
*
***                  RCUBLOK  -  REAL CONTROL UNIT BLOCK
         SPACE 1
RCUADD   DS    1H             CONTROL UNIT ADDRESS
RCULOCK  DS    1H             CONTROL UNIT LOCK
RCUSTAT  DS    1X         R*1 CONTROL UNIT STATUS
RCUTYPE  DS    1X         R*2 CONTROL UNIT TYPE
RCUQCNT  DS    1H             NO. IOBLOKS QUEUED OFF C.U.
RCUFIOB  DS    1F             POINTER TO FIRST IOBLOK QUEUED
RCULIOB  DS    1F             POINTER TO LAST IOBLOK QUEUED
RCUCHA   DS    1F             POINTER TO RCHBLOK - INTERFACE A
RCUCHB   DS    1F             POINTER TO RCHBLOK - INTERFACE B
RCUQUED  DS    1F             IOBLOK QUEUED ON CONTROL UNIT TIME
RCUOPER  DS    1F             IOBLOK OPERATIONAL ON CONTROL UNIT TIME
RCUDVTBL DS    16H            DEVICES ATTACHED - RDVSTART INDEX
         SPACE 1
RCUSIZE  EQU   (*-RCUBLOK)/8  RCUBLOK SIZE IN DOUBLE WORDS
         SPACE 1
         ORG   RCUCHA
RCUPRIME DS    1F             POINTER TO THE PRIMEARY CONTROL UNIT
         SPACE 1
*        BITS DEFINED IN RCUSTAT
RCUBUSY  EQU   X'80'          CONTROL UNIT BUSY
RCUSCED  EQU   X'40'          IOB SCHEDULED ON CONTROL UNIT
RCUDISA  EQU   X'20'          CONTROL UNIT DISABLED
RCUDED   EQU   X'01'          CONTROL UNIT DEDICATED
         SPACE 1
*        BITS DEFINED IN RCUTYPE
RCUSHRD  EQU   X'80'          THIS CU MAY ATTACH TO ONLY 1 SUBCHANNEL
RCU2701  EQU   X'01'          TCU IS A 2701
RCUSUB   EQU   X'40'          THIS IS A SUBORDINATE CONTROL UNIT
RCU2702  EQU   X'02'          TCU IS A 2702
RCU2703  EQU   X'03'          TCU IS A 2703
         EJECT
RDEVBLOK DSECT
         SPACE 1
***                  RDEVBLOK  -  REAL DEVICE BLOCK
*
*          0   +-----------+-----------+-----+-----+-----+-----+
*              |  RDEVADD  |  RDEVLOCK | R*1 | R*2 | R*3 | R*4 |
*          8   +-----------+-----------+-----+-----+-----+-----+
*              |        RDEVFIOB       |        RDEVLIOB       |
*         10   +-----------------------+-----------------------+
*              |        RDEVCUA        |        RDEVCUB        |
*         18   +-----------------------+-----------------------+
*              |                    RDEVQUED                   |
*         20   +-----------------------+-----------------------+
*              |        RDEVIOCT       |        RDEVAIOB       |
*         28   +-----------------------+-----------+-----------+
*              |        RDEVUSER       |  RDEVATT  |  RDEVCYL  |
*         30   +-----------------------+-----------+-----------+
*              |                RDEVSER            |  RDEVLNKS |
*         38   +-----+-----+-----+-----+-----+-----+-----+-----+
*              |  R  |  D  |  E  |  V  |  T  |  C  |  T  |  L  |
*         40   +-----+-----+-----+-----+-----+-----+-----+-----+
*              |        RDEVTMAT       | R*5 | R*6 | R*7 | R*8 |
*         48   +-----------------------+-----+-----+-----+-----+
*              |        RDEVIOER       |        RDEVCTRS       |
*              +-----------+-----------+-----------------------+
*              | RDEVNAME  | RDEVRSV1  |        RDEVRSV2       |
*         58   +-----------+-----------+-----------------------+
*
***                  RDEVBLOK  -  REAL DEVICE BLOCK
         SPACE 1
RDEVADD  DS    1H             DEVICE ADDRESS
RDEVLOCK DS    1H             DEVICE LOCK
RDEVSTAT DS    1X         R*1 DEVICE STATUS
RDEVFLAG DS    1X         R*2 DEVICE FLAGS, DEVICE DEPENDENT
RDEVTYPC DS    1X         R*3 DEVICE TYPE CLASS
RDEVTYPE DS    1X         R*4 DEVICE TYPE
RDEVFIOB DS    1F             POINTER TO FIRST IOBLOK QUEUED
RDEVLIOB DS    1F             POINTER TO LAST IOBLOK QUEUED
RDEVCUA  DS    1F             POINTER TO RCUBLOK - INTERFACE A
RDEVCUB  DS    1F             POINTER TO RCUBLOK - INTERFACE B
RDEVQUED DS    1D             IOBLOK QUEUED TIME - TOD CLOCK UNITS
RDEVIOCT DS    1F             DEVICE IO COUNT
RDEVAIOB DS    1F             ACTIVE IOBLOK
RDEVUSER DS    1F             POINTER TO VMBLOK OF DEDICATED USER
RDEVATT  DS    1H             ATTACHED VIRTUAL ADDRESS
RDEVCYL  DS    1H             DASD - CURRENT CYLINDER LOCATION
RDEVSER  DS    CL6            DEVICE VOLUME SERIAL NUMBER
RDEVLNKS DS    1H             DASD - NUMBER OF LINKS TO THIS DISK
RDEVTCTL DS    8X             TERMINAL CONTROL BYTES
RDEVTMAT DS    1F             DEVICE ATTACHED TIME - TOD CLOCK WORD 0
RDEVQCNT DS    1X         R*5 NUMBER OF QUEUED IOBLOK'S
RDEVSTA2 DS    1X         R*6 DEVICE STATUS (2ND BYTE)
RDEVMDL  DS    1X         R*7 DEVICE MODEL NUMBER
RDEVFTR  DS    1X         R*8 DEVICE FEATURE CODE
RDEVIOER DS    1F             POINTER TO IOERBLOK FOR LAST CP ERROR
RDEVCTRS DS    1F             POINTER TO ERROR COUNTER CONTROL BLOK
RDEVNAME DS    1H             REAL DEVICE NAME
RDEVRSV1 DS    1H             RESERVED FOR IBM USE
RDEVRSV2 DS    1F             RESERVE FOR IBM USE
         SPACE 1
RDEVSIZE EQU   (*-RDEVBLOK)/8 RDEVBLOK SIZE IN DOUBLE WORDS
         SPACE
*        FOR CP OWNED DEVICES
         ORG   RDEVUSER
RDEVALLN DS    1F             ANCHOR FOR ALOCBLOK CHAIN FOR THIS DEVICE
RDEVCODE DS    1H             DEVICE CODE - SYSOWNED INDEX
         ORG   RDEVTCTL
RDEVPAGE DS    1F             ANCHOR FOR RECBLOK CHAIN FOR PAGING
RDEVRECS DS    1F             ANCHOR FOR RECBLOK CHAIN FOR SPOOLING
RDEVPNT  DS    1F             POINTER TO NEXT RDEVBLOK FOR ALLOCATION
         SPACE
*        FOR SLOTTED 2301 PAGING DRUMS
         ORG   RDEVRECS
RDEVDCTL DS    1F             POINTER TO DRUMTABL CONTROL BLOK
         SPACE 1
*        FOR GRAPHIC DEVICES
         ORG   RDEVCYL
RDEVCORD DS    1H             CURRENT LINE CORRDINATES
         SPACE 1
*        FOR SPOOLING UNIT RECORD DEVICES
         ORG   RDEVQUED
RDEVSPL  DS    1F             POINTER TO ACTIVE RSPLCTL BLOCK
RDEVCLAS DS    4C             DEVICE CLASS(ES)
         SPACE 1
*        FOR TERMINAL DEVICES
         ORG   RDEVQUED
RDEVCON  DS    1F             POINTER TO CONTASK LIST
RDEVAIRA DS    1F             ATTENTION INTERRUPT RETURN ADDRESS
         ORG   RDEVTCTL
RDEVRCNT DS    1H             START-STOP LINE RETRY COUNT
RDEVTFLG DS    1X             ADDITIONAL TERMINAL FLAGS
RDEVRSV3 DS    1X             RESERVED FOR FUTURE USE
RDEVLLEN DS    1X             DEVICE LINE LENGTH
RDEVATNC DS    1X             DEVICE ATTENTION COUNT
RDEVBASE DS    1H             370X BASE ADDRESS FOR EMULATOR LINE
         ORG   RDEVMDL
RDEVTMCD DS    1X             TERMINAL CODE
RDEVSADN DS    1X             TERMINAL SET-ADDRESS NUMBER
         SPACE
*        FOR REAL 3705 COMMUNICATIONS CONTROLLER
         ORG   RDEVAIRA
RDEVEPDV DS    1F             START OF FREE RDEVBLOK LIST FOR EP LINES
         ORG   RDEVCYL
RDEVMAX  DS    1H             HIGHEST VALID NCP RESOURCE NAME
RDEVNCP  DS    CL8            REFERENCE NAME OF ACTIVE 3705 NCP
RDEVNICL DS    1F             POINTER TO NETWORK CONTROL LIST
RDEVCKPT DS    1F             POINTER TO CKPBLOK FOR RE-ENABLE
         SPACE 1
*        FOR 3270 REMOTE SUPPORT
         ORG   RDEVNCP
RDEVBSC  DS    1F             PTR. TO BINARY SYNCHRONOUS CONTROL BLOCK
RDEVPDLY DS    1F             POLL DELAY TIMER INTERVAL
         EJECT
*        BITS DEFINED IN RDEVTMCD
RDEVPTTC EQU   X'00'          PTTC/EBCD
RDEVCORR EQU   X'04'          CORRESPONDENCE
RDEVAPLP EQU   X'08'          APL PTTC/EBCD
RDEVAPLC EQU   X'0C'          APL CORRESPONDENCE
RDEVUSC8 EQU   X'10'          UASCII-8 LEVEL
         SPACE 1
*        BITS DEFINED IN RDEVSTAT
RDEVBUSY EQU   X'80'          DEVICE BUSY
RDEVSCED EQU   X'40'          IOB SCHEDULED ON DEVICE
RDEVDISA EQU   X'20'          DEVICE DISABLED (OFFLINE)
RDEVRSVD EQU   X'10'          DEVICE RESERVED
RDEVIRM  EQU   X'08'          DEVICE IN INTENSIVE ERROR RECORDING MODE
RDEVNRDY EQU   X'04'          DEVICE INTERVENTION REQUIRED
RDEVWAII EQU   X'02'          GRAF - IOBLOK PENDING; QUEUE REQUESTS
RDEVDED  EQU   X'01'          DEDICATED DEVICE (ATTACHED TO A USER)
         SPACE 1
*        BITS DEFINED IN RDEVFLAG
RDEVSKUP EQU   X'80'          DASD - ASCENDING ORDER SEEK QUEUEING
RDEVPREF EQU   X'40'          DASD - VOLUME PREFERRED FOR PAGING
RDEVSYS  EQU   X'20'          DASD - VOLUME ATTACHED TO SYSTEM
RDEVOWN  EQU   X'10'          DASD - CP OWNED VOLUME
RDEVMOUT EQU   X'08'          DASD - VOLUME MOUNTED; NOT ATTACHED
         SPACE
RDEVPSUP EQU   X'80'          CONSOLE - TERMINAL HAS PRINT SUPPRESS
RDEVPREP EQU   X'40'          CONSOLE - TERMINAL EXECUTING PREPARE COMD
RDEVACTV EQU   X'20'          CONSOLE - IOBLOK PENDING; QUEUE REQUEST
RDEVIDNT EQU   X'10'          CONSOLE - 2741 TERMINAL CODE IDENTIFIED
RDEVENAB EQU   X'08'          CONSOLE - DEVICE IS ENABLED
RDEVHIO  EQU   X'04'          CONSOLE - NEXT INTERRUPT FROM A HALT I/O
RDEVDISB EQU   X'02'          CONSOLE - DEVICE IS TO BE DISABLED
RDEVEPMD EQU   X'01'          CONSOLE - 370X NCP RESOURCE IN EP MODE
         SPACE
RDEVDRAN EQU   X'80'          SPOOLING - DEVICE OUTPUT DRAINED
RDEVTERM EQU   X'40'          SPOOLING - DEVICE OUTPUT TERMINATED
RDEVACNT EQU   X'20'          SPOOLING - DEVICE BUSY WITH ACCOUNTING
RDEVSPAC EQU   X'10'          SPOOLING - FORCE PRINTER TO SINGLE SPACE
RDEVRSTR EQU   X'08'          SPOOLING - RESTART CURRENT FILE
RDEVBACK EQU   X'04'          SPOOLING - BACKSPACE THE CURRENT FILE
RDEVSEP  EQU   X'02'          SPOOLING - PRINT/PUNCH JOB SEPARATOR
RDEVLOAD EQU   X'01'          SPOOLING - UCS BUFFER VERIFIED
         SPACE
RDEVLNCP EQU   X'80'          SPECIAL - NETWORK CONTROL PROGRAM ACTIVE
RDEVLCEP EQU   X'40'          SPECIAL - 270X EMULATION PROGRAM ACTIVE
RDEVSLOW EQU   X'20'          SPECIAL - 370X IN BUFFER SLOWDOWN MODE
RDEVAUTO EQU   X'10'          SPECIAL - AUTOMATIC DUMP/LOAD ENABLED
RDEVWAIT EQU   X'08'          SPECIAL - IOBLOK PENDING; QUEUE REQUESTS
RDEVEPLN EQU   X'04'          SPECIAL - EMULATOR LINES IN USE BY SYSTEM
RDEVRCVY EQU   X'02'          SPECIAL - AUTO DUMP/LOAD PROCESS ACTIVE
RDEVTBTU EQU   X'01'          SPECIAL - BTU TRACE REQUESTED
         EJECT
*        BITS DEFINED IN RDEVTFLG
RDEVLOG  EQU   X'80'          TERM - LOGON PROCESS HAS BEEN INITIATED
RDEVREST EQU   X'40'          TERM - TERMINAL IN RESET PROCESS
RDEVATOF EQU   X'20'          TERM - SUPPRESS ATTENTION SIGNAL
         SPACE
*RDEVLOG EQU   X'80'          GRAF - LOGON PROCESS HAS BEEN INITIATED
RDEVMORE EQU   X'40'          GRAF - SCREEN FULL, MORE DATA WAITING
RDEVRUN  EQU   X'20'          GRAF - SCREEN IN RUNNING STATUS
RDEVREAD EQU   X'10'          GRAF - READ PENDING FOR SCREEN INPUT
RDEVCPNA EQU   X'08'          GRAF - LAST INPUT NOT ACCEPTED
RDEVTRQ  EQU   X'04'          GRAF - TIMER REQUEST PENDING
RDEVCTL  EQU   X'02'          GRAF - CONTROL FUNCTION INTERRUPT PENDING
RDEVHOLD EQU   X'01'          GRAF - SCREEN FULL, HOLD STATUS  @VA02228
         SPACE 1
*        BITS DEFINED IN RDEVSTA2
RDEVRACT EQU   X'80'          ACTIVE DEVICE IS BEING RESET
RDEVBUCH EQU   X'40'          DEVICE IS BUSY WITH THE CHANNEL
RDEVCONC EQU   X'20'          CONTINGENT CONNECTION PRESENT
         EJECT
         POP   PRINT
         SPACE
         END
