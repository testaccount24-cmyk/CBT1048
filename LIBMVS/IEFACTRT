         TITLE 'JOB AND JOB STEP TERMINATION - SMF EXIT IEFACTRT'       F0000010
* WRITTEN BY D. R. HURTGEN                                              F0000020
         SPACE 1                                                        F0000030
* MONSANTO COMPANY - GENERAL OFFICES                                    F0000040
         SPACE 1                                                        F0000050
* OCTOBER, 1976                                                         F0000060
         SPACE 1                                                           00070
* MODIFIED IN AUGUST, 1978. BY J.NOLS - TSG BRUSSELS                  +    00080
         SPACE 2                                                        F0000090
* THE PURPOSE OF THIS MODULE IS TO CREATE ACCOUNTING RECORDS AND TO     F0100100
* CAUSE PRINTING OF SELECTED ACCOUNTING INFORMATION FROM THESE RECORDS  F0100110
* WHICH MAY BE OF USE TO THE USER OF THE SYSTEM. ACCOUNTING RECORDS ARE F0100120
* CREATED PRIMARILY FOR PURPOSES OF CALCULATING AND RECORDING THE       F0100130
* COMPUTER FACILITIES THAT WERE USED AND CHARGING THE USER ACCORDINGLY. F0100140
* (EXCEPT, OF COURSE, WHEN THE COST IS EMBARASSINGLY TOO HIGH. IN THAT  F0100150
* CASE, REALITY IS HIDDEN VIA DISCOUNTS AND OTHER DEVIOUS MEANS.)       F0100160
* HOWEVER, THEY CAN BE AND ARE USED FOR OTHER PURPOSES, MOSTLY OF A     F0100170
* STATISTICAL NATURE.                                                   F0100180
         SPACE 2                                                        F0100190
* ENTRY -                                                               F0200200
*        FROM AN UNCONDITIONAL BRANCH IN MODULE IEFTB721                F0200210
         SPACE 2                                                        F0200220
* ATTRIBUTES -                                                          F0200230
*        ENABLED, REENTRANT, REFRESHABLE, PROTECT KEY ZERO, SUPERVISOR  F0200240
*        STATE, PAGEABLE LINK PACK AREA                                 F0200250
         SPACE 2                                                        F0200260
* REGISTERS UPON ENTRY -                                                F0200270
*                             1    ADDRESS OF SMF ADDRESS LIST          F0200280
*                            13    ADDRESS OF CALLERS SAVE AREA         F0200290
*                            14    RETURN ADDRESS                       F0200300
*                            15    ADDRESS OF THIS MODULE               F0200310
         TITLE 'INTERNAL MACROS'                                      +    00320
         MACRO                                                             00330
&NAME    CSID  &NONAME                                                     00340
         LCLC  &NAME1                                                      00350
&NAME1   SETC  '&NAME'                                                     00360
         AIF   ('&NONAME' EQ 'NONAME').A01                                 00370
&NAME1   DC    CL8'&SYSECT'        NAME OF CSECT                           00380
&NAME1   SETC  ' '                                                         00390
.A01           ANOP                                                        00400
&NAME1   DC    CL8'&SYSDATE'       DATE OF ASSEMBLY                        00410
         DC    CL8'&SYSTIME'       TIME OF ASSEMBLY                        00420
         MEND                                                              00430
         EJECT                                                             00440
         MACRO                                                             00450
&NAME TABNTRY  &FIELD                                                      00460
         LCLC  &L                                                          00470
.*                                                                         00480
.*       CREATE TABLE ENTRY THAT IS A DESCRIPTOR OF THE SPECIFIED          00490
.*        FIELD.  THE FORMAT OF THE DESCRIPTOR IS :-                       00500
.*             AL1(EXECUTABLE LENGTH OF FIELD)                             00510
.*             AL3(ADDRESS OF FIELD)                                       00520
.*                                                                         00530
&L       SETC  'L'''                                                       00540
         DC    AL1(&L&FIELD.-1),AL3(&FIELD)                                00550
         MEND                                                              00560
         TITLE 'CONTROL BLOCKS DSECT''S'                              +    00570
*                   ACCOUNTING ROUTINE WORK AREA                        F8000580
         SPACE 3                                                        F8000590
WRKDSECT DSECT                                                          F8000600
SAVEAREA DS    18F                 REGISTER SAVE AREA                   F8000610
WTORECB  DS    F                   ECB FOR WTORS                           00620
WTOWRITE DS    CL120               AREA FOR WTOR PARAMETER LISTS           00630
SMBWRITE DS    CL120               AREA FOR SETTING UP SMB PRINT LINES  F8000640
WORKAREA DS    0D                  WORK AREA                            F8000650
WAFHALF  DS    F                   WORK AREA REDEFINED FOR SUBROUTINE   F8000660
WASHALF  DS    F                     COMMUNICATIONS AND OTHER USES      F8000670
SECONDWA DS    D                   SECONDARY WORK AREA                  F8000680
STIMSAVE DS    F                   FOR SAVING THE JOB/STEP START TOD    F8000690
RUNTIME  DS    F                   STEP RUN TIME (.XX)                  F8000700
IOUNITS  DS    F                   I/O UNITS (.XXX)                     F8000710
SAVEAWB  DS    F                   FOR SAVING THE AWB ADDRESS           F8000720
SPECCONS DS    0H                  SPECIAL CONSIDERATIONS - FROM TABLE  F8000730
SCFLAGS  DS    C                   * FLAGS                              F8000740
SCVALUE  DS    C                   * VALUE TO BE APPLIED                F8000750
SMVTFLAG DS    C                   FLAGS ( SAVED FROM THE MVT )            00760
PACKDCAT DS    PL3                 PACKED CATEGORY CODE                    00770
         EJECT                                                          F8000780
* THE FOLLOWING DEFINES OUR OWN ACCOUNTING RECORD WHICH IS CREATED IN   F8100790
* THIS WORK AREA BY THE ACCOUNTING ROUTINE.                             F8100800
         SPACE 2                                                        F8100810
ACTRECRD DS    0F                                                       F8100820
      $SMFUSER ACT,DSECT=NO,SMFHDR=YES,DOC=YES MAP THE ACCTNG RECORD       00830
         SPACE 2                                                        F8100840
WRKEND   DS    0D                  END OF ENTIRE WORK AREA              F8100850
         EJECT                                                          F8100860
SMFDSECT DSECT                                                          F9000870
         IFASMFR 4                                                      F9000880
         EJECT                                                          F9000890
         ORG   SMFDSECT                                                 F9000900
         IFASMFR 5                                                      F9000910
         EJECT                                                          F9000920
         ORG   SMFDSECT                                                 F9000930
         IFASMFR 34                                                     F9000940
         EJECT                                                          F9000950
         ORG   SMFDSECT                                                 F9000960
         IFASMFR 35                                                     F9000970
         EJECT                                                             00980
         IEFAJCTB                                                          00990
         EJECT                                                             01000
         $MVT                                                              01010
         EJECT                                                          F9001020
        $MCA                                                            F9101030
         EJECT                                                          F9101040
        $MASA                                                           F9101050
         EJECT                                                             01060
         $MAEQU                                                            01070
         TITLE 'JOB AND JOB STEP TERMINATION - SMF EXIT IEFACTRT'          01080
*                             INITIALIZATION                            F0801090
         SPACE 2                                                        F0801100
IEFACTRT CSECT                                                          F0801110
         USING *,BASEA,BASEB       ESTABLISH ADDRESSABILITY             F0801120
         B     28(R15)             BRANCH PAST IDENTIFIER                  01130
         CSID  ,                   IDENTIFY CSECT LEST DUMP                01140
         STM   14,12,12(SAVEPTR)   SAVE REGISTERS                       F0801150
         LR    BASEA,R15           SET UP BASE REGISTERS                F0801160
         LA    BASEB,2048                                               F0801170
         LA    BASEB,2048(BASEA,BASEB)                                  F0801180
         L     WA,FLCCVT           GET ADDRESS OF THE MVT               F0801190
         L     WA,CVTUSER-CVTMAP(,WA) VIA THE CVT                     + F0801200
         LTR   WA,WA               TEST IF THE MVT EXISTS                  01210
         BZR   LINK                FORGET ABOUT PROCESSING IF NOT          01220
         L     WC,0(,WA)           GET ADDRESS OF ACCTG. WORK BLOCK     F0801230
         L     WB,PSAAOLD          GET ADDRESS OF THE CURRENT ASCB      F0801240
         LH    WB,ASCBASID-ASCB(,WB) GET ASID FOR INDEXING INTO       +    01250
         SLL   WB,2                  THE MVT                            F0801260
         L     ASA,0(WA,WB)        NOW SHOULD HAVE THE ASA              F0801270
         LTR   ASA,ASA             Q.-IS THERE ONE                      F0801280
         BNZ   GOON                B.-YES                               F0801290
ENDLIFE  L     R1,FLCCVT           GET ADDRESS OF CVT                      01300
         L     R1,CVTUSER-CVTMAP(,R1) GET ADDRESS OF MVT              +    01310
         USING MVTDSECT,R1         ESTABLISH MVT ADDRESSABILITY            01320
         TM    MVTFLAG1,MVTFDUMP   SHOULD WE DUMP ?                        01330
         BZR   LINK                FORGET ABOUT THE DUMP IF NOT            01340
         DROP  R1                  DROP MVT ADDRESSABILITY                 01350
         LA    R1,ABENDCOD         SET ABEND CODE & ANEND BECAUSE ...      01360
         ABEND (1),,,SYSTEM          A ZERO VALUE SHOULD NEVER OCCUR    F0801370
         USING ASADSECT,ASA                                             F0801380
GOON     LR    APL,R1              SAVE REGISTERS OVER GETMAIN          F0801390
         LR    WA,R0                                                    F0801400
         L     R0,GMSIZE           SET SIZE AND SUB-POOL REQUIRED       F0801410
         GETMAIN R,LV=(0)          GET WORK AREA                           01420
         LR    WRK,R1              NOW HAVE THE WORK AREA NEEDED        F0801430
         USING WRKDSECT,WRK                                             F0801440
         LA    R15,SAVEAREA        GET ADDRESS OF OUR SAVE AREA         F0801450
         ST    R15,8(,SAVEPTR)     SET UP BACKWARD AND                  F0801460
         ST    SAVEPTR,SAVEAREA+4    FORWARD CHAIN                      F0801470
         LR    SAVEPTR,R15                                              F0801480
         ST    WC,SAVEAWB          SAVE POINTER TO AWB                  F0801490
         TFRR  ,                   ESTABLISH ESTAE ENVIRONMENT             01500
         LA    WB,SMBWRITE         INITIALIZE MESSAGE ADDRESS IN THE    F0801510
         ST    WB,LCTPARM1(,LCT)     LCT FOR IEFYS                      F0801520
         L     WB,FLCCVT           GET ADDRESS OF CVT                      01530
         L     WB,CVTUSER-CVTMAP(,WB) GET ADDRESS OF MVT              +    01540
         MVC   SMVTFLAG,MVTFLAG1-MVTDSECT(WB) PRESERVE FLAGS               01550
         LA    WB,12               SET TERMINATION CODE                 F0801560
         SR    WA,WB               Q.-TYPE OF TERMINATION               F0801570
         BP    JOBTERM             B.-JOB TERMINATION                   F0801580
         EJECT                                                          F0901590
*                             STEP TERMINATION                          F1001600
         SPACE 2                                                        F1001610
         L     R15,APLSMFR(,APL)   GET ADDRESS OF SMF RECORD            F1001620
         USING SMFDSECT,R15                                             F1001630
         OC    SMF4H0ST,SMF4H0ST   Q.-IS REGION USED ZERO               F1001640
         BZ    RETURN              B.-YES, THEN STEP NEVER WAS EXECUTED F1001650
         L     WB,APLSTMAP(,APL)   GET ADDRESS OF RUN TIME AND EXEC     F1001660
         L     WA,APLSAP(,APL)       CARD ACCOUNTING PARAMETERS         F1001670
         CLI   3(WB),0             Q.-WERE ANY SUPPLIED                 F1001680
         BE    USEJOBCD            B.-NO                                F1001690
         TM    ASAFLAGS,ASAECAP    Q.-WERE THEY ANY GOOD                F1001700
         BZ    GOINIT              B.-YES, THEN USE THEM                F1001710
         BAL   WE,WRITEBL          WRITE BLANK LINE TO SPACE               01720
         MVC   SMBWRITE(L'MESSAGEA),MESSAGEA SET UP ERROR MESSAGE       F1001730
         MVC   SMBWRITE+L'MESSAGEA(L'MESSAGEC),MESSAGEC                 F1001740
         LA    WA,L'MESSAGEA+L'MESSAGEC                                 F1001750
         STH   WA,LCTPARM2+2(,LCT) PUT LENGTH IN THE LCT                F1001760
         L     R15,=V(IEFYS)       GET ADDRESS OF MESSAGE WRITER        F1001770
         BALR  LINK,R15            WRITE ERROR MESSAGE                  F1001780
         BAL   WE,WRITEPER         WRITE DETAILS OF FIELD IN ERROR         01790
         L     R15,APLSMFR(,APL)   RESTORE R15                          F1001800
         NI    ASAFLAGS,255-ASAECAP     RESET ERROR FLAG                F1001810
USEJOBCD L     WB,APLJTMAP(,APL)   GET ADDRESS OF RUN TIME AND JOB CARD F1001820
         L     WA,APLJAP(,APL)     ACCOUNTING PARAMETERS                F1001830
GOINIT   BAL   LINK,SETEMUP        GO INITIALIZE ACCOUNTING RECORD      F1001840
         L     WC,PSAAOLD          GET ADDRESS OF CURRENT ASCB        +    01850
         L     WD,SAVEAWB          GET ADDRESS OF AWB                 +    01860
         USING CADSECT,WD          ESTABLISH AWB ADDRESSABILITY       +    01870
         L     WB,ASCBJSTL-ASCB(,WC) EXTRACT TIME LIMIT FROM ASCB     +    01880
         M     WA,AWBFACTR         FACTOR UP THE TIME                 +    01890
         A     WB,AWBDPTHA           LIMIT THAT WAS                   +    01900
         D     WA,AWBDECPT             IN THE ASCB                    +    01910
         ST    WB,LCTTSTL4(,LCT)   UPDATE LCT                         +    01920
         L     WA,APLSTMAP(,APL)   GET REAL CPU TIME ADDRESS          +    01930
         SR    WB,WB               ZEROISE                            +    01940
         ICM   WB,7,0(WA)          GET REAL CPU TIME                  +    01950
         MVC   ASASRCPU,0(WA)      SAVE IT FOR STEP TERMINATION       +    01960
         M     WA,AWBFACTR         FACTOR                             +    01970
         A     WB,AWBDPTHA          IT                                +    01980
         D     WA,AWBDECPT           UP                               +    01990
         L     WA,APLSTMAP(,APL)   GET REAL CPU TIME ADDRESS          +    02000
         STCM  WB,7,0(WA)          STORE FACTORED CPU TIME INTO APL   +    02010
         DROP  WD                  DROP AWB ADDRESSABILITY            +    02020
         ST    WB,LCTTSTU4(,LCT)   STORE FACTORED CPU TIME INTO LCT   +    02030
         L     WC,LCTTSTL4(,LCT)   GET TIME LIMIT FROM LCT            +    02040
         SR    WC,WB               SUB CPU TIME FROM TIME LIMIT       +    02050
         BNM   *+6                 BYPASS NEXT INSTR. IF NOT MINUS    +    02060
         SR    WC,WC               MAKE TIME LEFT ZERO                +    02070
         ST    WC,LCTTSTR4(,LCT)   TIME REMAINING (IF ANY) TO LCT     +    02080
         SR    WA,WA                                                    F1002090
         IC    WA,SMF4STN          GET STEP NUMBER                      F1002100
         CVD   WA,WORKAREA           AND                                F1002110
         OI    WORKAREA+7,15           CONVERT TO                       F1002120
         UNPK  ACTSNUM,WORKAREA          CHARACTER FORM                 F1002130
         MVC   ACTSNAME,SMF4STMN   STEP NAME TO THE RECORD              F1002140
         MVC   ACTPGMNM,SMF4PGMN   ALSO PROGRAM NAME                    F1002150
*                                                                       F1102160
         LA    WA,SURCHTBL         BEGIN SEARCHING THE SURCHARGE TABLES F1102170
         LA    WC,10               GET LENGTH OF EACH ENTRY IN THE PGM. F1102180
         LA    WD,PGMTBLEN           SURCHARGE TABLE AND ENDING ADDRESS F1102190
TRYPGM   CLC   ACTPGMNM,2(WA)      Q.-DOES PROGRAM NAME MATCH           F1102200
         BE    FOUNDIT             B.-YES                               F1102210
         BXLE  WA,WC,TRYPGM        TRY AGAIN IF NOT AT END OF TABLE     F1102220
         LA    WC,6                CONTINUE THE SEARCH, THIS TIME       F1102230
         LA    WD,PSUTBLEN           TRYING TO MATCH A PSEUDO CODE      F1102240
TRYPSUDO CLC   ACTCHGCD,2(WA)      Q.-DO THEY                              02250
         BE    FOUNDIT             B.-YES                               F1102260
         BXLE  WA,WC,TRYPSUDO      TRY AGAIN                            F1102270
FOUNDIT  MVC   SPECCONS,0(WA)      PICK UP CONSIDERATIONS TO BE APPLIED F1102280
*                                                                       F1102290
         TM    SMF4STI,X'02'       Q.-DID STEP ABEND                    F1102300
         BZ    NOABEND             B.-NO                                F1102310
         OI    ASAFLAGS,ASAABEND   FLAG ASA THAT ABEND HAS OCCURRED        02320
         XC    ACTCOMPL,ACTCOMPL   ZEROISE IRRELEVANT COND CODE            02330
         MVI   WAFHALF+1,15        CONVERT THE                          F1102340
         MVO   WAFHALF(2),SMF4SCC    ABEND CODE TO                      F1102350
         UNPK  ACTABEND,WAFHALF(2)     CHARACTER FORM FOR               F1102360
         TR    ACTABEND,TRANSTBL         THE ACCTG RECORD               F1102370
         MVI   ACTABEND,C'S'       FLAG AS SYSTEM ABEND CODE               02380
         TM    SMF4SCC,X'80'       Q.-WAS IT A SYSTEM ABEND             F1102390
         BZ    NOABEND             B.-YES, ABEND PROCESSING DONE           02400
         MVC   WAFHALF(2),SMF4SCC  MOVE COMPLETION CODE (ALIGNMENT)        02410
         NI    WAFHALF,X'0F'       SET OFF USER-ABEND INDICATOR (X'F')     02420
         LH    WA,WAFHALF          RETRIEVE USER ABEND CODE                02430
         CVD   WA,WORKAREA         CONVERT USER CODE TO PACKED DECIMAL     02440
         UNPK  ACTABEND,WORKAREA+5(3) UNPACK USER ABEND CODE               02450
         OI    ACTABEND+3,X'F0'    SET SIGN TO X'F'                        02460
*                                                                       F1202470
NOABEND  L     WA,APLSTMAP(,APL)   GET THE RUN TIME - SMF THINKS ITS    F1202480
         MVC   WAFHALF+1(3),0(WA)    CPU TIME BUT WE KNOW BETTER        F1202490
         MVI   WAFHALF,0                                                F1202500
         BAL   LINK,BINGOON        CONVERT TO HUNDREDTHS OF A MINUTE    F1202510
         LTR   WD,WB               SAVE AND TEST SIGNIFICANCE           F1202520
         BNZ   *+8                 B.-VALUE IS NON-ZERO                 F1202530
         LA    WD,1                TAKE A MINIMUM CHARGE                F1202540
         L     WB,ASASTPIO         GET I/O TIME AND                     F1202550
         BAL   LINK,BINGOON+4        CONVERT TO HUNDREDTHS OF A MINUTE  F1202560
*                                                                          02570
*        IF FLAG MVTFTEXT IS ON, THEN APLSTMAP CONTAINS RUN TIME AND       02580
*         NOT CPU TIME.  IN THAT EVENT, CPU TIME MUST BE DERIVED BY        02590
*         SUBTRACTING I/O TIME FROM THE PSEUDO CPU TIME.                   02600
*                                                                          02610
         TM    SMVTFLAG,MVTFTEXT   IS RUN TIME CONCEPT IN USE              02620
         BZ    *+10                BYPASS SUBTRACTION IF NOT RUN TIME      02630
         SR    WD,WB               WD = CPU TIME                        F1202640
         BM    ENDLIFE             MINUS RESULT SHOULD NEVER HAPPEN     F1202650
         ZAP   ACTIOTM,WASHALF     PUT I/O TIME IN THE RECORD           F1202660
         CVD   WD,WORKAREA         CONVERT CPU TIME TO PACKED FORM FOR  F1202670
         ZAP   ACTCPUTM,WASHALF      THE RECORD AND ADD A REQUIRED      F1202680
         SRP   ACTCPUTM,1,0            ADDITIONAL DECIMAL POINT         F1202690
         AR    WB,WD               RECREATE THE RUN TIME FOR CHARGING   F1202700
         ST    WB,RUNTIME            PURPOSES AND SAVE FOR LATER USE    F1202710
*                                                                       F1202720
         LH    WD,SMF4LENN         GET LENGTH OF DEVICE TABLE AND POINT F1202730
         LA    WD,SMF4LENN(WD)       TO THE ACCOUNTING SECTION          F1202740
         MVC   SMF4SETM-SMF4LNTH(L'SMF4SETM,WD),ASASRCPU    RESTORE SMF F1202750
         MVC   WAFHALF+1(L'ASASRCPU),ASASRCPU     GET REAL CPU TIME     F1202760
         BAL   LINK,BINGOON        CONVERT IT TO HUNDREDTHS OF MINUTES  F1202770
         ZAP   ACTRCPUT,WASHALF      AND STORE                          F1202780
         SR    WA,WA               SET UP TO LOOP THROUGH THE DEVICE    F1202790
         SR    WB,WB                 TABLE TO COUNT THE NUMBERS OF DISK F1202800
         LA    WC,SMF4DEVC             AND TAPE DATA SET ALLOCATIONS    F1202810
CKFOREND CR    WC,WD               Q.-AT END OF TABLE                   F1202820
         BE    CNTDONE             B.-YES, COUNT COMPLETED              F1202830
         TM    0(WC),UCB3TAPE      Q.-IS DEVICE TAPE                    F1202840
         BZ    *+8                 B.-NO                                F1202850
         LA    WA,1(,WA)           INCREMENT TAPE COUNT                 F1202860
         TM    0(WC),UCB3DACC      Q.-DIRECT ACCESS DEVICE              F1202870
         BZ    *+8                 B.-NO                                F1202880
         LA    WB,1(,WB)           INCREMENT DISK COUNT                 F1202890
         LA    WC,8(,WC)           POINT TO NEXT ENTRY                  F1202900
         B     CKFOREND            TRY AGAIN                            F1202910
CNTDONE  CVD   WA,WORKAREA         PLACE THE COUNTS IN THE RECORD       F1202920
         ZAP   ACTTAPEU,WASHALF                                         F1202930
         CVD   WB,WORKAREA                                              F1202940
         ZAP   ACTDISKU,WASHALF                                         F1202950
         AR    WB,WA               WB = TAPES + DISKS                   F1202960
         TM    SCFLAGS,IMSMUCHG    Q.-DOES THE STEP GET AN IMS MU BREAK F1202970
         BZ    *+8                 B.-NO                                F1202980
         LA    WB,1(,WA)           FOR CHARGING, MAKE WB = TAPES + 1    F1202990
         TM    SCFLAGS,IGNALLOC    ARE DISK D/S ALLOCATED TO BE IGNORED    03000
         BZ    *+8                 BRANCH IF NOT                           03010
         LA    WB,5(,WA)           SET (T+D) TO (T+5) TO IGNORE DASD       03020
         EJECT                                                             03030
*        CALCULATE I/O UNITS.                                              03040
*        ALGORITHM IS :-                                                   03050
*              .070(T+D)(K(C+I))   T - NO. OF TAPE D/S ALLOCATED           03060
*                                  D - NO. OF DISK D/S ALLOCATED           03070
*                                  K - CONSTANT ( VALUE = 1 )              03080
*                                  C - CPU TIME                            03090
*                                  I - I/O TIME                            03100
*        NOTE THAT THE COMPONENT 'T+D' IS CALCULATED ABOVE, AND IS         03110
*         SUBJECT TO MODIFICATION.  IF THE STEP GETS AN IMS ALLOWANCE,     03120
*         'T+D' IS SET TO 'T+1', WHILE IF THE STEP GETS AN ALLOWANCE       03130
*         FOR THE NUMBER OF DISK DATA SETS ALLOCATED, THEN 'T+D' IS        03140
*         SET TO 'T+5'.  THESE FUNCTIONS ARE CONTROLLED BY FLAGS IN THE    03150
*         SURCHARGE TABLES.                                                03160
*        NOTE THAT THIS IS THE SECOND I/O UNIT ALGORITHM.  THE             03170
*         ORIGINAL, WHICH WAS DISCONTINUED IN JULY 77, WAS:                03180
*              .084(T+D)(K(C+I))                                           03190
         SPACE 1                                                           03200
*                                                                       F1303210
         TM    SMVTFLAG,MVTFOLDA   IS THE OLD ALGORITHM TO BE USED         03220
         BZ    ENDOLDA1            BR IF OLD ALGORITHM NOT TO BE USED      03230
         M     WA,RUNTIME          NOW CALCULATE I/O UNITS WHICH IS     OLD03240
         M     WA,=F'84'             .084(T+D)(K(C+1))                  OLD03250
         M     WA,MUFACTR1         MULTIPLY BY BXL CONVERSION FACTOR    AMU03260
         AL    WB,=F'50000'        GET RID OF EXCESS DECIMAL POINTS     AMU03270
         BC    12,*+8                                                   AMU03280
         LA    WA,1(,WA)                                                AMU03290
         D     WA,=F'100000'         (WAS EIGHT - SHOULD BE THREE)      AMU03300
*        A     WB,=F'50'           GET RID OF EXCESS DECIMAL POINTS     CMU03310
*        D     WA,=F'100'            (WAS FIVE - SHOULD BE THREE)       CMU03320
         CVD   WB,WORKAREA         CONVERT AND PLACE I/O UNITS          OLD03330
         ZAP   ACTIOU,WASHALF        IN THE RECORD                      OLD03340
         B     ENDNEWA1            BYPASS NEW ALGORITHM                    03350
ENDOLDA1 EQU   *                   END OF ORIGINAL ALGORITHM               03360
         SPACE 1                                                           03370
         M     WA,RUNTIME          NOW CALCULATE I/O UNITS WHICH IS     F1303380
         M     WA,=F'70'             .070(T+D)(K(C+1))                  F1303390
         M     WA,MUFACTR1         MULTIPLY BY BXL CONVERSION FACTOR    AMU03400
         AL    WB,=F'50000'        GET RID OF EXCESS DECIMAL POINTS     AMU03410
         BC    12,*+8                                                   AMU03420
         LA    WA,1(,WA)                                                AMU03430
         D     WA,=F'100000'         (WAS EIGHT - SHOULD BE THREE)      AMU03440
*        A     WB,=F'50'           GET RID OF EXCESS DECIMAL POINTS     CMU03450
*        D     WA,=F'100'            (WAS FIVE - SHOULD BE THREE)       CMU03460
         CVD   WB,WORKAREA         CONVERT AND PLACE I/O UNITS          F1303470
         ZAP   ACTIOU,WASHALF        IN THE RECORD                      F1303480
ENDNEWA1 EQU   *                   END OF NEW ALGORITHM                    03490
         ST    WB,IOUNITS          SAVE FOR LATER USE                   F1303500
*                                                                       F1303510
         EJECT                                                             03520
         L     WC,LCTSCTAD(,LCT)   GET ADDRESS OF THE SCT               F1303530
         LH    WA,SCTMSSZE(,WC)    WA = REGION SIZE REQUESTED           F1303540
         CVD   WA,WORKAREA                                              F1303550
         ZAP   ACTREGNR,WASHALF    PUT IT IN THE RECORD                 F1303560
         UNPK  ACTREGN,WASHALF     ALSO PUT IT IN OTHER FIELD              03570
         OI    ACTREGN+3,X'F0'     ENSURE SIGN IS X'F'                     03580
         LH    WB,SMF4H0ST         WB = AMOUNT OF STORAGE USED          F1303590
         CVD   WB,WORKAREA                                              F1303600
         ZAP   ACTREGNU,WASHALF    FILL IN                              F1303610
         CP    ASAMAXRG,ACTREGNU   IS THIS REGION GREATER THAN HIGHEST     03620
         BNL   *+10                BR IF THIS REGION USED IS NOT A RECO    03630
         ZAP   ASAMAXRG,ACTREGNU   SET THIS REG USED AS HIGH WATER MARK    03640
         L     R15,FLCCVT          GET ADDRESS OF CVT                      03650
         L     R15,CVTUSER-CVTMAP(,R15) GET ADDRESS OF MVT            +    03660
         L     R15,MVTMCA-MVTDSECT(,R15) GET ADDRESS OF COMMON AREA        03670
         C     WA,CARSIZE-CADSECT(R15) IS REQUESTED REGION SIZE < LIMIT    03680
         BNH   USEUSED             IF < LIMIT USE CORE USED IN ALGORTHM    03690
         CR    WA,WB               Q.-WAS REQUESTED SIZE GREATER        F1303700
         BNH   *+6                 B.-NO, USE AMOUNT OF STORAGE USED    F1303710
         LR    WB,WA               OTHERWISE, USE THE AMOUNT REQUESTED  F1303720
USEUSED  EQU   *                   CONTINUE PROCESSING                     03730
         EJECT                                                             03740
*        CALCULATE OCCUPANCY UNITS.                                        03750
*        THE ALGORITHM IS:-                                                03760
*              1.0(.40+(.009R))(K(C+I))                                    03770
*                                  R - MAX OF CORE USED|REQUESTED          03780
*                                  K - CONSTANT FACTOR ( VALUE = 1 )       03790
*                                  C - CPU TIME                            03800
*                                  I - I/O TIME                            03810
*                                  S - FACTOR FOR SCHEDULER OVERHEAD       03820
*        NOTE THAT THE CONSTANT OF '1.0' IS IN FACT ONE OF ST.LOUIS'       03830
*         WELL KNOWN VARIABLE CONSTANTS, IN THAT IT IS '1.0' FOR MOST      03840
*         WORK, BUT IS ALTERED TO '0.3' FOR IMS BATCH JOBS.                03850
*        NOTE THAT THE VALUE OF 'R' IS DEFINED AS THE MAXIMUM OF THE       03860
*         CORE USED AND THE CORE REQUESTED.  THIS IS SUBJECT TO            03870
*         MODIFICATION, IN THAT IF THE CORE REQUESTED DOES NOT EXCEED      03880
*         A THESHOLD VALUE ( 'CARSIZE' SET IN THE COMMON AREA AT NIP       03890
*         TIME ), THEN THE CORE USED IS ALWAYS USED FOR THE ALGORITHM.     03900
*         THIS IS TO REWARD PEOPLE WHO WRITE SMALL PROGRAMS BY GIVING      03910
*         THEM A COST BENEFIT TO DO SO.  THIS THRESHOLD VALUE WILL         03920
*         NORMALLY BE THE SAME AS THE DEFAULT REGION SIZE ( CURRENTLY      03930
*         DEFINED AS 64K ).                                                03940
*        NOTE THAT THIS IS THE SECOND OCCUPANCY UNIT ALGORITHM.  THE       03950
*         ORIGINAL, WHICH WAS DISCONTINUED IN JULY 77, WAS :               03960
*              .0093R(.90+.0013R)(K(C+I)+S)                                03970
         SPACE 1                                                           03980
*                                                                       F1403990
         TM    SMVTFLAG,MVTFOLDA   IS THE OLD ALGORITHM TO BE USED         04000
         BZ    ENDOLDA2            BR IF OLD ALGORITHM NOT TO BE USED      04010
         LR    WD,WB               CALCULATE OCCUPANCY UNITS AS -       F1404020
         MH    WD,=H'13'             .0093R(.90+.0013R)((K(C+I))+S)     F1404030
         AH    WD,=H'9000'         WD = (.90+.0013R)                    F1404040
         LA    WC,93                                                    F1404050
         TM    SCFLAGS,IMSMUCHG    Q.-AN IMS BREAK                      F1404060
         BZ    *+8                 B.-NO                                F1404070
         LA    WC,47               CHANGE THE FACTOR                    F1404080
         MR    WA,WC               WB = .0093R OR .0047R IF IMS         F1404090
         MR    WA,WD               WA-WB = EVERYTHING EXCEPT THE TIME   F1404100
         AL    WB,=F'5000'         SCALE DOWN                           F1404110
         BC    12,*+8                FROM EIGHT                         F1404120
         LA    WA,1(,WA)               DECIMAL POINTS                   F1404130
         D     WA,=F'10000'              TO FOUR                        F1404140
         L     WC,RUNTIME                                               F1404150
         LA    WC,9(,WC)           ADD SCHEDULER TIME (.09) TO RUN TIME F1404160
         MR    WA,WC               WA-WB = OCCUPANCY UNITS              F1404170
         M     WA,MUFACTR1         MULTIPLY BY BXL CONVERSION FACTOR    AMU04180
         AL    WB,=F'500000'       SCALE DOWN                           AMU04190
         BC    12,*+8                FROM NINE                          AMU04200
         LA    WA,1(,WA)               DECIMAL POINTS                   AMU04210
         D     WA,=F'1000000'            TO THREE                       AMU04220
*        AL    WB,=F'500'          SCALE DOWN                           CMU04230
*        BC    12,*+8                FROM SIX                           CMU04240
*        LA    WA,1(,WA)               DECIMAL POINTS                   CMU04250
*        D     WA,=F'1000'               TO THREE                       CMU04260
         CVD   WB,WORKAREA                                              F1404270
         ZAP   ACTOCPYU,WASHALF    INSERT OCCUPANCY UNITS               F1404280
         B     ENDNEWA2            BYPASS MARK2 CALCULATION                04290
ENDOLDA2 EQU   *                   END OF ORIGINAL ALGORITHM               04300
         SPACE 1                                                           04310
         MH    WB,=H'9'            CALCULATE OCCUPANCY UNITS AS -          04320
         LA    WB,400(,WB)          1.0(.40+(.009R))(K(C+I))               04330
         LA    WA,10                                                       04340
         TM    SCFLAGS,IMSMUCHG    DO WE GIVE AN IMS ALLOWANCE             04350
         BZ    *+8                 BR IF NOT IMS BATCH                     04360
         LA    WA,3                WA = 1.0 OR .3 IF IMS BATCH             04370
         MR    WA,WA               MULTIPLY W8.40+(.009R)) BY CONSTANT     04380
         M     WA,RUNTIME          WA||WB = OCCUPANCY UNITS                04390
         M     WA,MUFACTR1         MULTIPLY BY BXL CONVERSION FACTOR    AMU04400
         AL    WB,=F'500000'       SCALE DOWN                           AMU04410
         BC    12,*+8               FROM NINE                           AMU04420
         LA    WA,1(,WA)             DECIMAL POINTS                     AMU04430
         D     WA,=F'1000000'         TO THREE                          AMU04440
*        AL    WB,=F'500'          SCALE DOWN                           CMU04450
*        BC    12,*+8               FROM SIX                            CMU04460
*        LA    WA,1(,WA)             DECIMAL POINTS                     CMU04470
*        D     WA,=F'1000'            TO THREE                          CMU04480
         CVD   WB,WORKAREA         CONVERT ANSWER TO DECIMAL               04490
         ZAP   ACTOCPYU,WASHALF    INSERT OCCUPANCY UNITS                  04500
ENDNEWA2 EQU   *                   END OF NEW ALGORITHM                    04510
*                                                                       F1404520
         A     WB,IOUNITS          WB = MACHINE UNITS                   F1404530
         SR    WA,WA               ZEROISE WORK REGISTER FOR MATHS      AMU04540
         M     WA,MUFACTR2         MULTIPLY MU BY BXL CONVERSION FACTOR AMU04550
         AL    WB,=F'500'          SCALE DOWN ...                       AMU04560
         BC    12,*+8               ... FROM SIX                        AMU04570
         LA    WA,1(,WA)            ... DECIMAL POINTS                  AMU04580
         D     WA,=F'1000'          ... TO THREE                        AMU04590
         CVD   WB,WORKAREA                                              F1404600
         ZAP   ACTMCHUN,WASHALF    MACHINE UNITS IN THE RECORD          F1404610
         CLI   SMF4STN,1           Q.-IS THIS THE FIRST STEP IN THE JOB F1404620
         BNE   CALCRATE            B.-NO                                F1404630
         CLI   SMF4RTY,34          Q.-IS THIS A FOREGROUND STEP       * F1404640
         BE    CALCRATE            B.-YES                             * F1404650
         LR    WE,WB               SAVE MACHINE UNITS OVER CALL         F1404660
         ZAP   WAFHALF,ACTDATE     PASS DATE TO BE CONVERTED            F1404670
         BAL   LINK,DATECNVT       CONVERT - NEED TO KNOW DAY OF WEEK   F1404680
         LR    WB,WE               RESTORE WB                           F1504690
         CLI   WAFHALF,0           Q.-COULD THE DATE BE CONVERTED       F1504700
         BNE   CALCRATE            B.-NO, ASSUME THE PRIME TIME RATE    F1504710
         CLI   WAFHALF+1,0         Q.-IS IT SUNDAY                      F1504720
         BE    LOWRATE             B.-YES                               F1504730
         CLI   WAFHALF+1,6         Q.-IS IT SATURDAY                    F1504740
         BE    LOWRATE             B.-YES                               F1504750
         CLC   STIMSAVE,=A(18*60*60*100)     Q.-IS IT 6 P.M. OR LATER   F1504760
         BNL   LOWRATE             B.-YES                               F1504770
         CLC   STIMSAVE,=A(8*60*60*100) Q.-IS IT 8 A. M. OR LATER       F1504780
         BNL   *+8                 B.-YES, IT IS PRIME TIME             F1504790
LOWRATE  OI    ASAFLAGS,ASASRATE   INDICATE USAGE OF SECONDARY RATE     F1504800
CALCRATE LA    WE,RATETBL          WE = ADDRESS OF RATE TABLE           F1504810
         LA    WC,6                WC = SIZE OF EACH ENTRY              F1504820
         LA    WD,RATEEND          WD = ADDRESS OF END OF RATE TABLE    F1504830
TRYAGAIN CLC   ACTHJCLS,0(WE)      Q.-DOES THE CLASS MATCH              F1504840
         BE    *+8                 B.-YES                               F1504850
         BXLE  WE,WC,TRYAGAIN      TRY AGAIN IF NOT AT END OF TABLE     F1504860
         LH    WC,2(,WE)           PICK UP PRIME TIME RATE              F1504870
         TM    ASAFLAGS,ASASRATE   Q.-DOES IT GET THE CHEAPER ONE       F1504880
         BZ    *+8                 B.-NO                                F1504890
         LH    WC,4(,WE)           PICK UP NON-PRIME TIME RATE          F1504900
         MR    WA,WC               CALCULATE BASIC COST                 F1504910
         AL    WB,=F'500'          SCALE DOWN                           F1504920
         BC    12,*+8                FROM FIVE                          F1504930
         LA    WA,1(,WA)               DECIMAL POINTS                   F1504940
         D     WA,=F'1000'               TO TWO                         F1504950
         CVD   WB,WORKAREA                                              F1504960
         ZAP   ACTTCOST,WASHALF    BASIC COST IN THE RECORD             F1504970
*                                                                       F1604980
         SR    WC,WC                                                    F1604990
         IC    WC,SCVALUE          GET SURCHARGE PERCENTAGE             F1605000
         MR    WA,WC               CALCULATE THE SURCHARGE              F1605010
         A     WB,=F'50'           SCALE DOWN FROM FOUR                 F1605020
         D     WA,=F'100'            DECIMAL POINTS TO TWO              F1605030
         TM    SCFLAGS,DISCOUNT    Q.-IS SURCHARGE TO BE A CREDIT       F1605040
         BZ    *+6                 B.-NO                                F1605050
         LCR   WB,WB               MAKE IT A CREDIT                     F1605060
         CVD   WB,WORKAREA                                              F1605070
         ZAP   ACTSURCH,WASHALF    INSERT THE SURCHARGE AND             F1605080
         AP    ACTTCOST,ACTSURCH     ADD TO THE BASIC CHARGE            F1605090
         LA    R1,ACTRECRD         ACCOUNTING RECORD IS COMPLETE        F1605100
         SMFWTM (1)                GO WRITE IT                          F1605110
         BAL   WD,TESTRITE         ENSURE THAT RECORD WAS WRITTEN     +    05120
         OI    ASAFLAGS,ASAACREC   INDICATE THAT IT WAS DONE            F1605130
         DROP  R15                                                      F1605140
*                                                                       F1605150
         MVO   ACTCPUTM,ACTCPUTM(3)     GET RID OF USELESS DECIMAL PT.  F1605160
         AP    ASACPUTM,ACTCPUTM   UPDATE ALL JOB TOTALS - FACTORED CPU F1605170
         AP    ASAIOTM,ACTIOTM     *    FACTORED I/O TIME               F1605180
         AP    ASACOST,ACTTCOST    *    NET COST                        F1605190
         AP    ASASCOST,ACTSURCH   *    SURCHARGES                      F1605200
         AP    ASAOCPNY,ACTOCPYU   *    OCCUPANCY UNITS                 F1605210
         AP    ASAIO,ACTIOU        *    I/O UNITS                       F1605220
         AP    ASARCPUT,ACTRCPUT   *    REAL CPU TIME                   F1605230
*                                                                       F1605240
         MVI   SMBWRITE,C' '       CLEAR THE ENTIRE PRINT AREA          F1605250
         MVC   SMBWRITE+1(L'SMBWRITE-1),SMBWRITE                        F1605260
*        LA    WA,SMBWRITE         PUT ADDRESS OF AREA TO BE            F1605270
*        ST    WA,LCTPARM1(,LCT)     WRITTEN IN THE LCT                 F1605280
         BAL   WE,WRITEBL          WRITE BLANK SMB                         05290
         BAL   WE,WRITETOP         WRITE ACCOUNTING BOX HEADER             05300
*        LA    WA,76                                                    F1605310
*        STH   WA,LCTPARM2+2(,LCT) SET UP LENGTH OF HEADER              F1605320
         MVC   SMBWRITE+30(L'STEPHDG),STEPHDG     SET UP STEP HEADING   F1605330
         MVC   SMBWRITE+54(L'ACTSNAME),ACTSNAME     LINE                F1605340
         LA    WA,SMBWRITE+71      LEFT                                 F1605350
         CLI   0(WA),C' '            ADJUST                             F1605360
         BNE   *+8                     CLOSING                          F1705370
         BCT   WA,*-8                    ASTERISKS                      F1705380
         MVC   2(3,WA),STEPHDG                                          F1705390
         LA    WA,5(,WA)           POINT PAST FLOATING ASTERISKS           05400
         L     WE,LCTJCTAD(,LCT)   GET ADDRESS OF THE JCT                  05410
         LTRR  WE                  PURIFY ADDRESS AND TEST IF PRESENT      05420
         BZ    ADDPGMNM            BYPASS TEST IF NO JCT AVAILABLE         05430
         USING INJMJCT,WE          ESTABLISH JCT ADDRESSABILITY            05440
         CLI   JCTIDENT,JCTID      ENSURE THAT IT IS A JCT                 05450
         BNE   ADDPGMNM            SKIP THE TEST IF IT IS NOT A JCT        05460
         OI    ACTFLAG1,ACTFMSG0   ASSUME MSGLEVEL = 0                     05470
         TM    JCTJMGLV,INCMMGL1+INCMMGL2 TEST IF MSGLEVEL= 1 OR 2         05480
         BZ    NOPGMNM             BR IF MSGLEVEL=0 TO SUPPRESS PGM        05490
         NI    ACTFLAG1,255-ACTFMSG0 SET OF MSGLEVEL=0 FLAG                05500
         DROP  WE                  DROP JCT ADDRESSABILITY                 05510
ADDPGMNM MVC   1(6,WA),=C'( PGM='  ADD ADDITIONAL HEADING                  05520
         MVC   7(8,WA),ACTPGMNM    ADD PROGRAM NAME TO LINE                05530
         LA    WA,15(,WA)          POINT PAST NAME                         05540
         CLI   0(WA),C' '          IS THIS A BLANK                         05550
         BNE   *+8                 BR IF NOT BECAUSE FOUND LAST CHAR.      05560
         BCT   WA,*-8              DECREMENT POINTER AND TRY AGAIN         05570
         MVI   2(WA),C')'          ADD TRZILING BRACKET                    05580
         MVC   4(3,WA),STEPHDG     ADD FINAL TRAILING ASTERISKS            05590
NOPGMNM  MVI   SMBWRITE,C'*'       ADD STARTING ASTERISK                   05600
         MVI   SMBWRITE+115,C'*'   ADD LAST ASTERISK ON LINE               05610
         BAL   WE,PRTSTHDR         GO WRITE IT                          F1705620
         MVI   SMBWRITE,C'*'       SET UP STARTING AND ENDING MARKERS   F1705630
         MVI   SMBWRITE+115,C'*'     FOR ALL REMAINING LINES            F1705640
         LA    WA,116                  AND THEIR LENGTHS                F1705650
         STH   WA,LCTPARM2+2(,LCT)                                      F1705660
*                                                                       F1705670
         TM    SMVTFLAG,MVTFCOST   ARE COSTS TO BE PRINTED                 05680
         BZ    NOCOST1             BYPASS PRINTING IF NOT                  05690
         MVC   SMBWRITE+103(L'COSTEDWD),COSTEDWD  SET UP COST           F1705700
         LA    R1,SMBWRITE+110     GET AROUND FORCED SIGNIFICANCE       F1705710
         SP    ACTTCOST,ACTSURCH   BACK OUT TO GET THE BASIC COST       F1705720
         EDMK  SMBWRITE+103(L'COSTEDWD),ACTTCOST                        F1705730
         BCTR  R1,0                                                     F1705740
         MVI   0(R1),C'$'          INSERT FLOATING DOLLAR SIGN          F1705750
         MVC   SMBWRITE+88(10),=C'BASIC COST'                           F1705760
NOCOST1  EQU   *                   CONTINUE PROCESSING                     05770
         MVC   SMBWRITE+76(L'UNITEDWD),UNITEDWD   SET UP I/O UNITS      F1705780
         ED    SMBWRITE+76(L'UNITEDWD),ACTIOU                           F1705790
         MVC   SMBWRITE+61(9),=C'I/O UNITS'                             F1705800
         MVC   SMBWRITE+49(L'TIMEEDWD),TIMEEDWD   I/O TIME              F1705810
         MVI   ACTIOTM-1,0                                              F1705820
         ED    SMBWRITE+49(L'TIMEEDWD),ACTIOTM-1                        F1705830
         MVC   SMBWRITE+42(8),=C'I/O TIME'                              F1705840
         MVC   SMBWRITE+31(L'REGNEDWD),REGNEDWD   SIZE OF REGION REQ.   F1705850
         ED    SMBWRITE+31(L'REGNEDWD-1),ACTREGNR                       F1705860
         MVC   SMBWRITE+21(11),=C'REGION SIZE'                          F1705870
         MVC   SMBWRITE+8(L'TODEDWD),TODEDWD      TIME OF DAY STARTED   F1705880
         MVC   WAFHALF,STIMSAVE    NEED TO CONVERT                      F1705890
         BAL   LINK,DECTMCVT         TO HHMMSS                          F1705900
         ED    SMBWRITE+8(L'TODEDWD),WASHALF                            F1705910
         MVC   SMBWRITE+2(7),=C'STARTED'                                F1705920
         BAL   WE,WRITESTP         WRITE THE FIRST LINE                 F1705930
*                                                                       F1805940
         TM    SMVTFLAG,MVTFCOST   ARE COSTS TO BE PRINTED                 05950
         BZ    NOCOST2             BYPASS PRINTING IF NOT                  05960
         MVC   SMBWRITE+103(L'COSTEDWD),COSTEDWD  SET UP SURCHARGES     F1805970
         LA    R1,SMBWRITE+110                                          F1805980
         EDMK  SMBWRITE+103(L'COSTEDWD),ACTSURCH                        F1805990
         BCTR  R1,0                                                     F1806000
         MVI   0(R1),C'$'                                               F1806010
         BNZ   *+10                                                     F1806020
         MVC   0(4,R1),=C' -0-'                                         F1806030
         MVC   SMBWRITE+88(14),=C'ADD SURCHARGES'                       F1806040
NOCOST2  EQU   *                   CONTINUE PROCESSING                     06050
         MVC   SMBWRITE+76(L'UNITEDWD),UNITEDWD   OCCUPANCY UNITS       F1806060
         ED    SMBWRITE+76(L'UNITEDWD),ACTOCPYU                         F1806070
         MVC   SMBWRITE+61(15),=C'OCCUPANCY UNITS'                      F1806080
         MVC   SMBWRITE+49(L'TIMEEDWD),TIMEEDWD   CPU TIME              F1806090
         ED    SMBWRITE+49(L'TIMEEDWD),ACTCPUTM                         F1806100
         MVC   SMBWRITE+42(8),=C'CPU TIME'                              F1806110
         MVC   SMBWRITE+31(L'REGNEDWD),REGNEDWD   AMOUNT OF CORE USED   F1806120
         ED    SMBWRITE+31(L'REGNEDWD-1),ACTREGNU                       F1806130
         MVC   SMBWRITE+21(11),=C'AMOUNT USED'                          F1806140
         MVC   SMBWRITE+8(L'TODEDWD),TODEDWD      TIME OF DAY ENDED     F1806150
         L     R15,APLSMFR(,APL)                                        F1806160
         MVC   WAFHALF,SMF4TME-SMFDSECT(R15)                            F1806170
         BAL   LINK,DECTMCVT                                            F1806180
         ED    SMBWRITE+8(L'TODEDWD),WASHALF                            F1806190
         MVC   SMBWRITE+2(5),=C'ENDED'                                  F1806200
         BAL   WE,WRITESTP         WRITE THE SECOND LINE                F1806210
*                                                                       F1806220
         MVC   SMBWRITE+97(ACTJNAME-ACTDAGIN),ACTDAGIN                  F1806230
         MVC   SMBWRITE+88(5),=C'I. D.'           IDENTIFICATION CODE   F1806240
         MVC   SMBWRITE+76(L'UNITEDWD),UNITEDWD   MACHINE UNITS         F1806250
         ED    SMBWRITE+76(L'UNITEDWD),ACTMCHUN                         F1806260
         MVC   SMBWRITE+61(13),=C'MACHINE UNITS'                        F1806270
         MVC   SMBWRITE+49(L'TIMEEDWD),TIMEEDWD   RUN TIME              F1806280
         AP    ACTCPUTM,ACTIOTM                                         F1806290
         ED    SMBWRITE+49(L'TIMEEDWD),ACTCPUTM                         F1806300
         MVC   SMBWRITE+42(8),=C'RUN TIME'                              F1806310
         MVC   SMBWRITE+35(L'DSALEDWD),DSALEDWD   DATA SET ALLOCATIONS  F1806320
         AP    ACTTAPEU,ACTDISKU                                        F1906330
         ED    SMBWRITE+35(L'DSALEDWD),ACTTAPEU                         F1906340
         MVC   SMBWRITE+21(15),=C'D.S. ALLOCATION'                      F1906350
         L     R15,APLSMFR(,APL)                  ABEND CODE            F1906360
         USING SMFDSECT,R15        GET BACK ADDRESSABILITY              F1906370
         MVC   SMBWRITE+2(9),=C'COND CODE' ADD COND CODE HEADING           06380
         MVC   WORKAREA(2),ACTCOMPL RETRIEVE COMPLETION CODE               06390
         LH    R1,WORKAREA         LOAD COMPLETION CODE INTO REGISTER      06400
         CVD   R1,WORKAREA         CONVERT COND CODE INTO DECIMAL          06410
         MVC   SMBWRITE+12(6),=X'402020202120' ADD EDIT MASK               06420
         ED    SMBWRITE+12(6),WORKAREA+5 EDIT COMPLETION CODE              06430
         TM    SMF4STI,X'02'       Q.-DID IT ABEND                      F1906440
         BZ    ENDABEND            B.-NO                                F1906450
         MVC   SMBWRITE+14(L'ACTABEND),ACTABEND ADD ABEND CODE TO LINE     06460
         CLI   ACTABEND,C'S'       WAS IT A SYSTEM ABEND CODE              06470
         BE    *+8                 BR IF SYSTEM ABEND                      06480
         MVI   SMBWRITE+13,C'U'    INDICATE USER ABEND CODE                06490
SETDESC  MVC   SMBWRITE+2(10),=C'ABEND CODE'                            F1906500
ENDABEND EQU   *                   CONTINUE PROCESSING                     06510
         DROP  R15                                                      F1906520
         BAL   WE,WRITESTP         WRITE THE THIRD AND LAST LINE        F1906530
         BAL   WE,WRITEBOT         WRITE BOTTOM OF ACCOUNTING BOX          06540
         BAL   WE,WRITEBL          WRITE BLANK SMB FOR SPACING             06550
*                                                                       F1906560
RETURN   EQU   *                   PREPARE TO RETURN TO INITIATOR          06570
         ESTAE 0                   DISENGAGE INTERACTIVE ESTAE             06580
         L     SAVEPTR,SAVEAREA+4  RESTORE TO ADDR. OF CALLER SAVE AREA F1906590
         L     R0,GMSIZE                                                F1906600
         LR    R1,WRK                                                   F1906610
         FREEMAIN R,LV=(0),A=(1)                                        F1906620
         LM    14,12,12(SAVEPTR)                                        F1906630
         BR    LINK                RETURN TO CALLER (IEFTB721)          F1906640
         EJECT                                                          F1906650
*                                 JOB TERMINATION                       F2006660
         SPACE 2                                                        F2006670
JOBTERM  L     R15,APLSMFR(,APL)   GET ADDRESS OF SMF RECORD            F2006680
         USING SMFDSECT,R15        ESTABLISH ADDRESSABILITY             F2006690
         NI    ASAFLAGS,X'FF'-ASACTIVE SET-OFF ASACTIVE FLAG          +    06700
         TM    ASAFLAGS,ASAJCAP    Q.-WERE THERE BAD ACCOUNTING PARMS   F2006710
         BZ    TESTFAIL            B.-NO                                F2006720
         BAL   WE,WRITEBL          WRITE BLANK LINE TO SPACE               06730
         MVC   SMBWRITE(L'MESSAGEA+L'MESSAGEB),MESSAGEA                 F2006740
         LA    WA,L'MESSAGEA+L'MESSAGEB                                 F2006750
         STH   WA,LCTPARM2+2(,LCT)                                      F2006760
         L     R15,=V(IEFYS)       WRITE EXPLANATORY MESSAGE AS TO WHY  F2006770
         BALR  LINK,R15             USER WAS FLUSHED.                      06780
         BAL   WE,WRITEPER         IDENTIFY FIELD IN ERROR                 06790
         BAL   WD,JOBFAIL          PERFORM OPERATOR-INFORM ROUTINE         06800
         B     RETURN              GO TO EXIT                              06810
*        LA    LINK,RETURN           USER WAS FLUSHED AND THEN GET OUT  F2006820
*        BR    R15                                                      F2006830
TESTFAIL TM    LCTERR(LCT),LCTJFAIL DID JOB FAIL WITH JCL ERROR            06840
         BO    TELLOP              GO TELL THE OPERATOR IF NECESSARY       06850
         TM    ASAFLAGS,ASAABEND   DID ANY OF THE STEPS ABEND              06860
         BZ    TESTMORE            BR IF NO ABEND OCCURRED                 06870
TELLOP   BAL   WD,JOBFAIL          PERFORM OPERATOR-INFORM ROUTINE         06880
TESTMORE TM    ASAFLAGS,ASAACREC   Q.-WERE ANY STEP RECORDS WRITTEN     F2006890
         BZ    RETURN              B.-NO, GET OUT                       F2006900
         L     R15,APLSMFR(,APL)   REFRESH ADDRESS OF SMF RECORD           06910
         L     WA,APLJAP(,APL)     SET PARAMETERS FOR INITIALIZATION    F2006920
         L     WB,APLJTMAP(,APL)     OF THE ACCOUNTING RECORD           F2006930
         BAL   LINK,SETEMUP        GO DO IT                             F2006940
         MVC   ACTSNUM,=C'99'      STEP NUMBER ALWAYS 99                F2006950
         MVI   ACTSNAME,C' '       BLANK OUT STEP NAME, PROGRAM NAME,   F2006960
         MVC   ACTSNAME+1(L'ACTSNAME-1),ACTSNAME  AND ABEND CODE        F2006970
         MVC   ACTPGMNM,ACTSNAME                                        F2006980
*        MVC   ACTABEND,ACTPGMNM                                        F2006990
         MVC   ACTTOTST,SMF4STN    INSERT NUMBER OF STEPS IN THE JOB    F2007000
         XC    ACTCOMPL,ACTCOMPL   ZEROISE COMPLETION CODE                 07010
         TM    ASAFLAGS,ASAABEND   TEST IF JOB CONTAINS ANY ABENDS         07020
         BZ    *+14                BR IF NO ABENDS                         07030
         OI    ACTFLAG1,ACTFJOBA   FLAG THA JOB CONTAINED ABENDS           07040
         MVC   ACTABEND,=CL4'ABND' IDENTIFY THAT JOB ABENDED               07050
         ZAP   ACTREGNR,=P'0'      ZERO OUT PACKED FIELDS FOR WHICH     F2007060
         ZAP   ACTREGNU,=P'0'        TOTALS ARE MEANINGLESS             F2007070
         ZAP   ACTREGN,=P'0'                                               07080
         ZAP   ACTTAPEU,=P'0'                                           F2007090
         ZAP   ACTDISKU,=P'0'                                           F2007100
         ZAP   ACTREGNU,ASAMAXRG   SET MAXIMUM REGION USED ...             07110
         UNPK  ACTREGN,ACTREGNU     .. AND UNPACK INTO OTHER FIELD         07120
         OI    ACTREGN+3,X'F0'      .. AND ENSURE SIGN IS X'F'             07130
         ZAP   ACTRCPUT,ASARCPUT   PUT IN ALL JOB TOTALS THAT ARE KEPT  F2007140
         ZAP   ACTTCOST,ASACOST      IN THE ASA                         F2007150
         ZAP   ACTCPUTM,ASACPUTM                                        F2007160
         SRP   ACTCPUTM,1,0        (ADDING SUPERFLOUS DECIMAL POINT)    F2007170
         ZAP   ACTOCPYU,ASAOCPNY                                        F2007180
         ZAP   ACTIOU,ASAIO                                             F2107190
         ZAP   ACTIOTM,ASAIOTM                                          F2107200
         ZAP   ACTSURCH,ASASCOST                                        F2107210
         ZAP   ACTMCHUN,ACTOCPYU   NOW CREATE THE ONE THAT WAS NOT      F2107220
         AP    ACTMCHUN,ACTIOU                                          F2107230
         LA    R1,ACTRECRD         ACCOUNTING RECORD IS COMPLETE        F2107240
         SMFWTM (1)                GO WRITE IT                          F2107250
         BAL   WD,TESTRITE         ENSURE THAT RECORD AWS WRITTEN     +    07260
         DROP  R15                                                      F2107270
*                                                                       F2107280
         BAL   WE,WRITEBL          WRITE BLANK SMB FOR SPACING             07290
         BAL   WE,WRITETOP         WRITE TOP OF ACCOUNTING BOX             07300
         MVI   SMBWRITE,C' '       CLEAR THE ENTIRE PRINT AREA          F2107310
         MVC   SMBWRITE+1(L'SMBWRITE-1),SMBWRITE                        F2107320
         LA    WA,72                                                    F2107330
         STH   WA,LCTPARM2+2(,LCT) SET UP LENGTH OF HEADER              F2107340
         MVC   SMBWRITE+41(L'JOBHDG),JOBHDG  SET UP JOB HEADING LINE    F2107350
         MVC   SMBWRITE+60(L'ACTJNAME),ACTJNAME                         F2107360
         LA    WA,SMBWRITE+67      LEFT                                 F2107370
         CLI   0(WA),C' '            ADJUST                             F2107380
         BNE   *+8                     CLOSING                          F2107390
         BCT   WA,*-8                    ASTERISKS                      F2107400
         MVC   2(3,WA),JOBHDG                                           F2207410
         MVI   SMBWRITE+4,C'*'     SET UP STARTING AND ENDING MARKERS   F2207420
         MVI   SMBWRITE+110,C'*'     FOR THE REMAINING LINES            F2207430
         LA    WA,111                  AND THEIR LENGTHS                F2207440
         STH   WA,LCTPARM2+2(,LCT)                                      F2207450
         BAL   WE,PRTJBHDR         GO WRITE IT                          F2207460
*                                                                       F2207470
         MVC   SMBWRITE+105(4),ACTCHGCD SET UP THE FOLLOWING -             07480
         MVC   SMBWRITE+90(11),=C'CHARGE CODE'    PSEUDO CODE              07490
         MVC   SMBWRITE+86(L'ACTHJCLS),ACTHJCLS   HASP CLASS CODE       F2207500
         MVC   SMBWRITE+75(9),=C'JOB CLASS'                             F2207510
         AP    ASACPUTM,ASAIOTM                  RUN TIME               F2207520
         MVC   SMBWRITE+63(L'TIMEEDWD),TIMEEDWD                         F2207530
         ED    SMBWRITE+63(L'TIMEEDWD),ASACPUTM                         F2207540
         MVC   SMBWRITE+50(8),=C'RUN TIME'                              F2207550
         ZAP   WAFHALF,ACTDATE                    DATE STARTED          F2207560
         BAL   LINK,DATECNVT       CONVERT DATE                         F2207570
         CLI   WORKAREA,0          Q.-WAS IT CONVERTED                  F2207580
         BNE   NOTCNVTD            B.-NO, THEN LEAVE DATE BLANK         F2207590
         LA    WA,SMBWRITE+32                                           F2207600
         UNPK  13(2,WA),WASHALF+2(2)    PUT IN THE YEAR                 F2207610
         LH    WB,WASHALF          GET INDEX                            F2207620
         SLL   WB,2                  FOR MONTH NAME                     F2207630
         LA    WB,MONNMTBL(WB)     LOCATE IT AND                        F2207640
         MVC   8(4,WA),0(WB)         PUT IT IN                          F2207650
         CLI   8(WA),C' '          IF ONLY THREE                        F2207660
         BNE   *+8                   CHARACTERS                         F2207670
         LA    WA,1(,WA)               FLOAT THE REST OF THE DATE       F2207680
         UNPK  5(2,WA),WAFHALF+2(2)     PUT IN THE DAY OF THE MONTH     F2207690
         CLI   5(WA),C'0'          FLOAT THE                            F2207700
         BNE   *+12                  REST IF THE                        F2207710
         MVI   5(WA),C' '              DAY OF THE                       F2207720
         LA    WA,1(,WA)                 MONTH HAS A LEADING ZERO       F2207730
         LH    WB,WAFHALF          GET INDEX                            F2207740
         SLL   WB,2                  FOR DAY OF THE WEEK                F2207750
         LA    WB,DOWNMTBL(WB)     LOCATE IT AND                        F2207760
         MVC   0(4,WA),0(WB)         PUT IT IN                          F2207770
NOTCNVTD MVC   SMBWRITE+25(4),=C'DATE'                                  F2307780
         MVC   SMBWRITE+12(L'TODEDWD),TODEDWD     TIME STARTED          F2307790
         MVC   WAFHALF,STIMSAVE    NEED TO CONVERT                      F2307800
         BAL   LINK,DECTMCVT         TO HHMMSS                          F2307810
         ED    SMBWRITE+12(L'TODEDWD),WASHALF                           F2307820
         MVC   SMBWRITE+6(7),=C'STARTED'                                F2307830
         BAL   WE,WRITEJOB         WRITE THE FIRST LINE                 F2307840
*                                                                       F2307850
         TM    SMVTFLAG,MVTFCOST   ARE COSTS TO BE PRINTED                 07860
         BZ    NOCOST3             BYPASS PRINTING IF NOT                  07870
         MVC   SMBWRITE+99(L'COSTEDWD-2),COSTEDWD SET UP JOB COST       F2307880
         LA    R1,SMBWRITE+106     GET AROUND FORCED SIGNIFICANCE       F2307890
         EDMK  SMBWRITE+99(L'COSTEDWD-2),ACTTCOST                       F2307900
         BCTR  R1,0                                                     F2307910
         MVI   0(R1),C'$'                                               F2307920
         BNZ   *+10                B.-IF COST NOT ZERO                  F2307930
         MVC   0(4,R1),=C' -0-'                                         F2307940
         MVC   SMBWRITE+90(8),=C'JOB COST'                              F2307950
         LA    WE,RATETBL                         MACHINE UNIT RATE     F2307960
         LA    WC,6                SET UP TO FIND                       F2307970
         LA    WD,RATEEND            OUT WHAT IT WAS                    F2407980
         CLC   ACTHJCLS,0(WE)      Q.-IS THIS IT                        F2407990
         BE    *+8                 B.-YES                               F2408000
         BXLE  WE,WC,*-10          TRY NEXT ENTRY                       F2408010
         LH    WC,2(,WE)           PICK UP PRIME TIME RATE              F2408020
         TM    ASAFLAGS,ASASRATE   Q.-WAS IT GETTING THE CHEAPER RATE   F2408030
         BZ    *+8                 B.-NO                                F2408040
         LH    WC,4(,WE)           GOT A CHEAPER ONE                    F2408050
         CVD   WC,WORKAREA                                              F2408060
         MVC   SMBWRITE+78(L'TIMEEDWD),TIMEEDWD                         F2408070
         ED    SMBWRITE+78(L'TIMEEDWD),WASHALF                          F2408080
         MVI   SMBWRITE+82,C'$'                                         F2408090
         MVC   SMBWRITE+75(4),=C'RATE'                                  F2408100
NOCOST3  EQU   *                   CONTINUE PROCESSING                     08110
         MVC   SMBWRITE+63(L'UNITEDWD),UNITEDWD   MACHINE UNITS         F2408120
         ED    SMBWRITE+63(L'UNITEDWD),ACTMCHUN                         F2408130
         MVC   SMBWRITE+50(13),=C'MACHINE UNITS'                        F2408140
         L     WA,SAVEAWB                         MACHINE USED          F2408150
* INSERTING THE MACHINE NAME NEEDS TO BE DONE LATER                     F2408160
*                                                                       F2408170
         MVC   SMBWRITE+12(L'TODEDWD),TODEDWD     TIME ENDED            F2408180
         L     R15,APLSMFR(,APL)                                        F2408190
         MVC   WAFHALF,SMF5TME-SMFDSECT(R15)                            F2408200
         BAL   LINK,DECTMCVT                                            F2408210
         ED    SMBWRITE+12(L'TODEDWD),WASHALF                           F2408220
         MVC   SMBWRITE+6(5),=C'ENDED'                                  F2408230
         BAL   WE,WRITEJOB         WRITE SECOND AND LAST LINE           F2408240
         BAL   WE,WRITEBOT         WRITE BOTTOM OF ACCOUNTING BOX          08250
         BAL   WE,WRITEBL          WRITE BLANK SMB FOR SPACING             08260
         B     RETURN              GET OUT - ALL DONE                   F2408270
         EJECT                                                          F2908280
*                   INITIALIZE THE ACCOUNTING RECORD                    F4008290
         SPACE 2                                                        F4008300
* THE FUNCTION OF THIS SUBROUTINE IS TO FILL IN ALL FIELDS OF THE       F4008310
* RECORD WHICH ARE COMMON TO BOTH STEP AND JOB TERMINATION. IN          F4008320
* ADDITION, FIELDS WHICH ARE NOT BEING USED ARE FILLED IN WITH BLANKS   F4008330
* OR PACKED ZEROS, WHICHEVER IS APPROPRIATE.                            F4008340
         SPACE 1                                                        F4008350
* UPON ENTRY, REGISTERS MUST BE SET AS FOLLOWS -                        F4008360
*                             WA   ADDRESS OF ACCOUNTING PARAMETERS     F4008370
*                             WB   ADDRESS OF FIELD CONTAINING THE      F4008380
*                                  NUMBER OF THEM                       F4008390
*                             R15  ADDRESS OF THE SMF RECORD            F4008400
         SPACE 2                                                        F4008410
         USING SMFDSECT,R15                                             F4008420
SETEMUP  MVI   ACTCHGCD,C' '       INITIALIZE FOR VARIABLE LENGTH          08430
         MVC   ACTCHGCD+1(ACTDAGIN-ACTCHGCD-1),ACTCHGCD     PARAMETERS     08440
         XR    WE,WE               CLEAR WORK REGISTER                     08450
         XR    WC,WC               CLEAR WORK REGISTER                     08460
         XR    WD,WD               CLEAR WORK REGISTER                     08470
         IC    WD,3(WB)            GET NUMBER OF PARMS                     08480
         XR    R1,R1               CLEAR WORK REGISTER                     08490
         LA    WC,1                SET WC TO BXH INCREMENT                 08500
*                                                                          08510
*        PARM FIELD PROCESSING IS CONTROLLED BY 'BXH'                      08520
*         WD CONTAINS THE NUMBER OF PARM FIELDS                            08530
*         WC CONTAINS THE INCREMENT VALUE                                  08540
*         R1 IS USED AS THE INDEX REGISTER                                 08550
*                                                                          08560
PARM1    BXH   R1,WC,PARMSEX       EXIT IF NO PARMS SUPPLIED               08570
         IC    WE,0(,WA)           GET LENGTH OF 1ST PARM                  08580
         MVC   ACTCHGCD,1(WA)      MOVE CHARGE CODE TO RECORD              08590
         LA    WA,1(WE,WA)         POINT TO NEXT FIELD                     08600
PARM2    BXH   R1,WC,PARMSEX       BR IF PARMS EXHAUSTED                   08610
         IC    WE,0(WA)            GET LENGTH OF  PARM                     08620
         CLI   0(WA),0             TEST IF LENGTH ZERO ( SHOULDN'T BE )    08630
         BE    PARM3               GO TO NEXT PARM IF ZERO                 08640
         CLI   0(WA),4             TEST IF LENGTH IS FOUR                  08650
         BNE   *+14                BR IF NOT                               08660
         MVC   ACTCATCD,3(WA)      MOVE LAST 2 CHARS TO FIELD              08670
         B     PARM3               GO PROCESS NEXT PARM FIELD              08680
         CLI   0(WA),3             TEST IF LENGTH IS THREE                 08690
         BNE   *+14                BR IF NOT                               08700
         MVC   ACTCATCD,2(WA)      MOVE LAST 2 CHARS TO FIELD              08710
         B     PARM3               GO PROCESS NEXT PARM FIELD              08720
         CLI   0(WA),2             TEST IF LENGTH IS TWO                   08730
         BNE   *+14                BR IF NOT                               08740
         MVC   ACTCATCD,1(WA)      MOVE TWO CHARS TO FIELD                 08750
         B     PARM3               GP PROCESS NEXT PARM FIELD              08760
         MVC   ACTCATCD+1(1),1(WA) MOVE 1 CHAR FLD RIGHT ADJUSTED          08770
PARM3    BXH   R1,WC,PARMSEX       EXIT IF PARMS FINISHED                  08780
         LA    WA,1(WE,WA)         INCREMENT TO 3RD PARM                   08790
         IC    WE,0(WA)            GET LENGTH OF 3RD PARM                  08800
         CLI   0(WA),0             TEST IF LENGTH IS ZERO                  08810
         BE    PARM4               GO TO NEXT PARM IF 4                    08820
         MVC   ACTMAJCC,1(WA)      MOVE MAJOR COST CENTRE TO RECORD        08830
PARM4    BXH   R1,WC,PARMSEX       EXIT IF PARMS EXHAUSTED                 08840
         LA    WA,1(WE,WA)         POIUNT AT 4TH PARM                      08850
         IC    WE,0(WA)            GET LENGTH OF 4TH PARM                  08860
         CLI   0(WA),0             TEST IF LENGTH IS ZERO                  08870
         BE    PARM5               BRANCH ID NULL PARM                     08880
         MVC   ACTMINCC,1(WA)      MOVE MINOR COST CENTRE TO RECORD        08890
PARM5    BXH   R1,WC,PARMSEX       EXIT IF PARMS EXHAUSTED                 08900
         LA    WA,1(WE,WA)         POINT AT 5TH PARM                       08910
         IC    WE,0(WA)            GET LENGTH OF PARM                      08920
         CLI   0(WA),0             TEST IF LENGTH IS ZERO                  08930
         BE    PARM6               BR IF NULL PARM                         08940
         CLI   1(WA),C'E'          TEST IF IT IS AN ENTTIY CODE            08950
         BNE   PARM6               BR IF NOT ENTTIY CODE                   08960
         MVC   ACTENT,2(WA)        MOVE ENTITY CODE TO RECORD              08970
PARM6    BXH   R1,WC,PARMSEX       EXIT IF PARMS EXHAUSTED                 08980
         LA    WA,1(WE,WA)         POINT AT 6TH PARM                       08990
         IC    WE,0(WA)            GET LENGTH OF PARM FIELD                09000
         CLI   0(WA),0             TEST IF LENGTH IS ZERO                  09010
         BE    PARM7               BR IF NULL PARM                         09020
         MVC   ACTFORMS,1(WA)      ADD FORMS TO RECORD                     09030
PARM7    BXH   R1,WC,PARMSEX       EXIT IF PARMS EXHAUSTED                 09040
         LA    WA,1(WE,WA)         GET LENGTH OF PARM                      09050
         IC    WE,0(WA)            GET LENGTH OF PARM                      09060
         CLI   0(WA),0             TEST IF PARM LENGTH ZERO                09070
         BE    PARM8               BR IF LENGTH ZERO                       09080
         MVC   ACTCOPYS,1(WA)      MOVE COPIES TO RECORD                   09090
PARM8    BXH   R1,WC,PARMSEX       EXIT IF PARMS EXHAUSTED                 09100
         LA    WA,1(WE,WA)         INCREMENT TO 8TH PARM                   09110
         IC    WE,0(WA)            GET LENGTH OF PARM                      09120
PARMSEX  EQU   *                   FINISHED WITH ACCOUNTING PARMS          09130
         SPACE 1                                                           09140
         MVC   SMFLENTH(4),=Y(ACTEND-SMFLENTH,0)  SET RECORD LENGTH        09150
         MVC   SMFPREAM,SMF4FLG    COPY THE FIRST 38 BYTES OF SMF REC.  F4009160
         OI    SMFRECTP,200        CHANGE REC TYPE FROM 4 TO 204, ETC.  F4009170
         L     WD,SAVEAWB          GET ADDRESS OF THE COMMON AREA       F4009180
         MVC   ACTIDD,AWBCOSTC-AWBSTART(WD)   PUT IN THE COST CENTER     F409190
         MVI   ACTFLAG1,0          NULLIFY FLAG BYTE IN ACCTG RECORD       09200
         TM    LCTERR(LCT),LCTJFAIL TEST IF THE JOB FAILED                 09210
         BZ    *+8                 BRANCH IF JOB DID NOT FAIL              09220
         OI    ACTFLAG1,ACTFJOBF   FLAG THAT THE JOB FAILED                09230
         TM    AWBFLAG1-AWBSTART(WD),AWB1VM TEST IF VM IS PRESENT          09240
         BZ    *+8                 BR IF NO VM                             09250
         OI    ACTFLAG1,ACTFVM     FLAG THAT JOB/STEP RUN ANDER VM         09260
         MVC   ACTMUF1,MUFACTR1+2  PRESERVE MU CONVERSION FACTOR 1      AMU09270
         MVC   ACTMUF2,MUFACTR2+2  PRESERVE MU CONVERSION FACTOR 2      AMU09280
         CLC   MUFACTR1,=F'1000'   IS FACTOR 1 A VALUE OTHER THAN UNITY AMU09290
         BE    *+8                 BR IF FACTOR 1 HAS A VALUE OF 1.000  AMU09300
         OI    ACTFLAG1,ACTFMUF1   FLAG THAT CONVERSION FACTOR 1 APLIED AMU09310
         CLC   MUFACTR2,=F'1000'   IS FACTOR 2 A VALUE OTHER THAN UNITY AMU09320
         BE    *+8                 BR IF FACTOR 1 HAS A VALUE OF 1.000  AMU09330
         OI    ACTFLAG1,ACTFMUF2   FLAG THAT CONVERSION FACTOR 2 APLIED AMU09340
         MVC   ACTJDATE,ASADATE    *    JULIAN DATE,                    F4009350
         MVC   ACTDAGIN(ACTSNUM-ACTDAGIN),ASADATE *    JOB I. D.,       F4009360
         MVC   ACTJNAME,SMF4JBN    *    JOB NAME                        F4009370
         SR    WA,WA               CONVERT THE                          F4009380
*        IC    WA,ASAPRTY            HASP JOB                           F4009390
         IC    WA,SMF4PRTY         GET PRIORITY FROM SMF RECORD            09400
         CVD   WA,WORKAREA             PRIORITY                         F4009410
         OI    WORKAREA+7,15             INTO                           F4009420
         UNPK  ACTJPRIO,WORKAREA           CHARACTER FORM               F4009430
         L     WC,APLPGMR8(,APL)   GET THE PROGRAMMER                 + F4009440
         MVC   ACTUSERN,0(WC)        (USER) NAME FIELD                  F4009450
         LR    R0,LINK             SAVE RETURN ADDRESS OVER SUBROUTINES F4009460
         MVC   WAFHALF,SMF4TME     SET UP JOB/STEP TIME ENDED           F4009470
         BAL   LINK,BINTMCVT       CONVERT TO HUNDREDTHS OF A MINUTE    F4009480
         MVC   ACTETIME,WASHALF    PUT IT IN THE RECORD                 F4009490
         LA    WC,SMF4SIT          WC = ADDRESS OF START TIME AND DATE  F4009500
         CLI   SMF4RTY,6           Q.-JOB/STEP BACKGROUND               F4109510
         BL    *+8                 B.-YES                               F4109520
         LA    WC,TIVONTME         MUST BE FOREGROUND (TSO)             F4109530
         MVC   ACTDATE,5(WC)       MOVE IN THE JOB/STEP START DATE      F4109540
         OI    ACTDATE+2,15                                             F4109550
         MVC   STIMSAVE,0(WC)      SAVE THE TIME STARTED FOR LATER USE  F4109560
         MVC   WAFHALF,0(WC)       GET THE TIME IT STARTED,             F4109570
         BAL   LINK,BINTMCVT         CONVERT IT,                        F4109580
         MVC   ACTSTIME,WASHALF        AND PLACE IT IN THE RECORD       F4109590
         MVC   ACTRDATE,SMF4RSD+1  MOVE IN JOB READ DATE ...               09600
         OI    ACTRDATE+2,15        ... AND ENSURE THAT SIGN IS VALID      09610
         MVC   WAFHALF,SMF4RST     SET JOB READ TIME IN W/A                09620
         BAL   LINK,BINTMCVT       CONVERT IT TO HUNDREDTHS OF A MINUTE    09630
         MVC   ACTRTIME,WASHALF    PLACE IT IN THE RECORD                  09640
         LR    LINK,R0             RESTORE THE RETURN ADDRESS           F4109650
         MVC   ACTHJCLS,ASACLASS   HASP JOB CLASS TO THE RECORD         F4109660
         MVC   ACTJCLAS,ASACLASS   JOB CLASS TO OTHER FIELD                09670
         ZAP   ACTFILLA,=P'0'      FILL IN UNUSED FIELDS                F4109680
*        ZAP   ACTFILLB,=P'0'                                           F4109690
*        MVI   ACTFILLC,C' '                                            F4109700
*        MVC   ACTFILLC+1(L'ACTFILLC-1),ACTFILLC .. AND PROPAGATE          09710
         MVI   ACTFILLD,C' '       BLANK OUT START OF FILLER               09720
         MVC   ACTFILLD+1(L'ACTFILLD-1),ACTFILLD ... AND PROPAGATE         09730
         MVI   ACTTOTST,0          ZEROISE COUNT OF STEPS IN JOB           09740
         MVC   ACTABEND,=C'S000'   INITIALIZE ABEND CODE FIELD             09750
         MVC   ACTCOMPL,SMF4SCC    ADD COMPETION CODE TO RECORD            09760
         MVI   ACTID2,X'FD'        RECORD IDENTIFIER                       09770
         BR    LINK                                                     F4109780
         DROP  R15                                                      F4109790
         SPACE 2                                                        F4109800
MVCA     MVC   ACTCHGCD(0),1(WA)   FOR VARIABLE LENGTH FIELDS              09810
         EJECT                                                          F4109820
*                               SMB WRITE                               F4209830
         SPACE 2                                                        F4209840
* THESE TWO SMALL SUBROUTINES ARE MERELY HERE TO FILL IN SEPARATING     F4209850
* CHARACTERS THAT ARE COMMON TO ALL STEP LINES OF PRINT OR JOB LINES OF F4209860
* PRINT, TO WRITE THE LINE, AND TO THEN CLEAR THEM. THERE ARE TWO       F4209870
* SUBROUTINES. ONE FOR STEP LINES AND THE OTHER FOR JOB LINES.          F4209880
         SPACE 1                                                        F4209890
* BECAUSE OF THE EXTERNAL LINK WITH MODULE IEFYS (ALIAS IEFTB723), THE  F4209900
* STANDARD LINKAGE TO THESE SUBROUTINES MUST NOT BE BY REGISTER LINK,   F4209910
* BUT RATHER BY REGISTER WE. ONLY REGISTERS LINK AND R15 ARE ALTERED    F4209920
* HERE.                                                                 F4209930
         SPACE 2                                                        F4209940
*                              STEP LINES                               F4209950
WRITESTP MVI   SMBWRITE+19,C'*'    PUT IN SEPARATORS                    F4209960
         MVI   SMBWRITE+40,C'*'                                         F4209970
         MVI   SMBWRITE+59,C'*'                                         F4209980
         MVI   SMBWRITE+86,C'*'                                         F4209990
PRTSTHDR L     R15,=V(IEFYS)       ADDRESS OF THE WRITER                F4210000
         BALR  LINK,R15            GO WRITE IT                          F4210010
         MVC   SMBWRITE+2(113),SMBWRITE+1    CLEAR THE LINE             F4210020
         BR    WE                  RETURN                               F4210030
         SPACE 2                                                        F4210040
*                               JOB LINES                               F4210050
WRITEJOB MVI   SMBWRITE+23,C'*'                                         F4210060
         MVI   SMBWRITE+48,C'*'                                         F4210070
         MVI   SMBWRITE+73,C'*'                                         F4210080
         MVI   SMBWRITE+88,C'*'                                         F4210090
PRTJBHDR L     R15,=V(IEFYS)                                            F4210100
         BALR  LINK,R15                                                 F4210110
         MVC   SMBWRITE+6(103),SMBWRITE+5                               F4210120
         BR    WE                                                       F4210130
         EJECT                                                             10140
WRITEBL  MVI   SMBWRITE,C' '       SET BLANK AT START                      10150
         MVC   SMBWRITE+1(L'SMBWRITE-1),SMBWRITE .. AND PROPAGATE          10160
         LA    WA,116              SET SIZE OF LINE                        10170
         STH   WA,LCTPARM2+2(,LCT) STORE LENGTH IN LCT                     10180
         L     R15,=V(IEFYS)       GET WRITE ROUTINE ADDRESS               10190
         BALR  LINK,R15            WRITE THE BLANK LINE                    10200
         BR    WE                  RETURN TO CALLER                        10210
         SPACE 3                                                           10220
WRITETOP MVI   SMBWRITE,C'*'       SET ASTERISK AT START                   10230
         MVC   SMBWRITE+1(L'SMBWRITE-1),SMBWRITE ... AND PROPAGATE         10240
         MVC   SMBWRITE+((116-L'ACCTGH)/2)(L'ACCTGH),ACCTGH                10250
         LA    WA,116              SET LENGTH OF LINE                      10260
         STH   WA,LCTPARM2+2(,LCT) PRESERVER LENGTH IN LCT                 10270
         L     R15,=V(IEFYS)       GET WRITE ROUTINE ADDRESS               10280
         BALR  LINK,R15            WRITE HEADING LINE                      10290
         MVI   SMBWRITE,C' '       INSERT LEADING BLANK                    10300
         MVC   SMBWRITE+1(115),SMBWRITE .. AND PROPAGATE TO CLEAR          10310
         BR    WE                  RETURN TO CALLER                        10320
         SPACE 3                                                           10330
WRITEBOT MVC   SMBWRITE(L'MISD),MISD MOVE IN HEADING                       10340
         MVC   SMBWRITE+L'MISD(3),ACTIDD ADD MACHINE ID TO LINE            10350
         MVC   SMBWRITE+L'MISD+3(L'SMBWRITE-L'MISD-3),SMBWRITE             10360
         TM    ACTFLAG1,ACTFVM     ARE WE RUNNING UNDER VM                 10370
         BZ    *+10                BR IF NO VM                             10380
         MVC   SMBWRITE(2),=C'VM'  INDICATE IN BOX THAT VM IS PRESENT      10390
         LA    WA,116              SET LENGTH OF LINE                      10400
         STH   WA,LCTPARM2+2(,LCT) PRESERVE LENGTH IN LCT                  10410
         L     R15,=V(IEFYS)       GET ROUTINE ADDRESS                     10420
         BALR  LINK,R15            WRITE TRAILING LINE                     10430
         BR    WE                  RETURN TO CALLER                        10440
         EJECT                                                             10450
***********************************************************************    10460
*        INFORM OPERATOR ABOUT PRODUCTION JCL ERRORS                  *    10470
***********************************************************************    10480
         SPACE 1                                                           10490
JOBFAIL  EQU   *                   START OF ROUTINE                        10500
*                                                                          10510
*        DETERMINE IF THE JOB IS A PRODUCTION ONE (I.E. CAT CODE >= 9)     10520
*                                                                          10530
         L     WA,APLJAP(,APL)     GET ADDRESS OF JOB ACCOUNTING PARMS     10540
         L     WB,APLJTMAP(,APL)   GET ADDRESS OF RUN TIME ||PARM COUNT    10550
         CLI   3(WB),2             ENSURE CATEGORY CODE EXISTS             10560
         BL    JOBFAILW            NO CAT CODE: CAN'T BE PRODUCTION        10570
         XR    WB,WB               CLEAR WORK REGISTER                     10580
         IC    WB,0(WA)            GET LENGTH OF CHARGE CODE               10590
         LA    WA,1(WB,WA)         POINT PAST IT AT CAT CODE LENGTH        10600
         IC    WB,0(WA)            RETRIEVE LENGTH OF CATEGORY CODE        10610
         BCTR  WB,0                DECREMENT LENGTH FOR EXECUTE            10620
         EX    WB,PCKCATCD         PACK CATEGORY CODE INTO WORK AREA       10630
         CLC   PACKDCAT,=X'00009F' PLAY SAFE WITH CHAR COMPARE WITH 9      10640
         BL    JOBFAILW            IF LESS THAN 9, JOB NOT PRODUCTION      10650
*                                                                          10660
*        INFORM THE OPERATOR AND ASK HIM WHO HE IS                         10670
*                                                                          10680
         BAL   WE,WRITEBL          WRITE BLANK SMB FOR SPACING             10690
         MVC   SMBWRITE(L'MESSAGEF),MESSAGEF ADD MESSAGE TO LINE           10700
         LA    WA,SMBWRITE+L'MESSAGEF POINT PAST MESSAGE (FOR RESPONSE)    10710
         MVC   WTOWRITE,WTORLST1   MOVE PARAMETER LIST TO WORK AREA        10720
         L     R15,APLSMFR(,APL)   GET ADDRESS OF SMF RECORD               10730
         MVC   WTOWRITE+23(8),SMF4JBN-SMFDSECT(R15) ADD JOB NAME TO WTO    10740
         TM    ASAFLAGS,ASAABEND   ARE WE TELLING HIM ABOUT AN ABEND       10750
         BZ    *+10                BR IF NOT: JCL ERROR MESSAGE IS GOOD    10760
         MVC   WTOWRITE+44(9),=CL9'AN ABEND ' MODIFY MESSAGE TEXT          10770
RETRY1   XC    WTORECB,WTORECB     RESET WTOR'S ECB                        10780
         WTOR  ,(WA),3,WTORECB,MF=(E,WTOWRITE) TELL OP & ASK HIS NAME      10790
         WAIT  ECB=WTORECB,LONG=YES WAIT FOR HIM TO NOTICE            +    10800
         BAL   WC,TESTANS          TEST IF ANSWER IS INVALID               10810
         BE    RETRY1              LOOP BACK IF ANSWER UNACCEPTABLE        10820
         LA    WA,L'MESSAGEF+3     SET LENGTH OF SMB                       10830
         STH   WA,LCTPARM2+2(,LCT) SET LENGTH IN C/B                       10840
         L     R15,=V(IEFYS)       RETRIEVE ADDRESS OF SMB-WRITE RTN       10850
         BALR  LINK,R15            PUT ANSWER ON JOB'S JCL LISTING         10860
         EJECT                                                             10870
***********************************************************************    10880
*        INFORM OPERATOR ABOUT PRODUCTION JCL ERRORS ( CONT'D )       *    10890
***********************************************************************    10900
         SPACE 1                                                           10910
*                                                                          10920
*        ASK THE OPERATOR WHAT HE INTENDS TO DO                            10930
*                                                                          10940
         MVI   SMBWRITE,C' '       MOVE BLANK TO START OF LINE             10950
         MVC   SMBWRITE+1(L'SMBWRITE-1),SMBWRITE ... AND PROPAGATE         10960
         MVC   SMBWRITE(L'MESSAGEG),MESSAGEG ADD BASIC SMB MESSAGE         10970
         LA    WB,L'SMBWRITE-L'MESSAGEG CALCULATE ALLOWABLE RESPONSE LG    10980
         LA    WA,SMBWRITE+L'MESSAGEG POINT AT ADDRESS FOR RESPONSE        10990
         MVC   WTOWRITE,WTORLST2   MOVE WTOR PARAMETER LIST TO WORK ARE    11000
RETRY2   XC    WTORECB,WTORECB     RESET ECB FOR WTOR                      11010
         WTOR  ,(WA),(WB),WTORECB,MF=(E,WTOWRITE) ASK HIM HIS INTENTION    11020
         WAIT  ECB=WTORECB,LONG=YES WAIT WHILE HE THINKS ABOUT IT     +    11030
         BAL   WC,TESTANS          TEST IF ANSWER IS ILLAGAL               11040
         BE    RETRY2              LOOP BACK IF ANSWER UNACCEPTABLE        11050
         LA    WA,L'SMBWRITE       DETERMINE MAXIMUM SMB LENGTH            11060
         STH   WA,LCTPARM2+2(,LCT) SET LENGTH IN C/B                       11070
         L     R15,=V(IEFYS)       RETRIEVE ADDRESS OF SMB-WRITE RTN       11080
         BALR  LINK,R15            WRITE OPERATOR'S RESPONSE TO JCLIST     11090
JOBFAILX BR    WD                  RETURN FROM WHENCE WE CAME              11100
         SPACE 1                                                           11110
JOBFAILW MVC   WTOWRITE,WTOLST1    MOVE WTO PARAMETER LIST TO WORK AREA    11120
         L     R15,APLSMFR(,APL)   GET ADDRESS OF SMF RECORD               11130
         MVC   WTOWRITE+13(8),SMF4JBN-SMFDSECT(R15) ADD JOB NAME           11140
         TM    ASAFLAGS,ASAABEND   TEST IF THIS WAS AN ABEND SITUATION     11150
         NOP   JOBFAILX            OPTIONALLY SKIP TELLING ABOUT ABENDS    11160
         BZ    *+10                BR IF NOT: JCL ERROR MSG SUFFICES       11170
         MVC   WTOWRITE+53(9),=CL9' AN ABEND' MODIFY MESSAGE TEXT          11180
         WTO   MF=(E,WTOWRITE)     EXECUTE WTO TO TELL OPERATOR OF ERRO    11190
         B     JOBFAILX            GO TO ROUTINE EXIT                      11200
         SPACE 5                                                           11210
PCKCATCD PACK  PACKDCAT,1(0,WA) EXECUTED PACK OF CATEGORY CODE             11220
         EJECT                                                             11230
***********************************************************************    11240
*        TEST VALIDITY OF OPERATOR'S RESPONSE                         *    11250
***********************************************************************    11260
         SPACE 1                                                           11270
*        THIS ROUTINE ATTEMPTS TO ENSURE THAT THE OPERATOR IS NOT          11280
*         BLINDLY ANSWERING WITHOUT BOTHERING TO LOOK AT THE QUESTION.     11290
*         IT EXAMINES THE RESPONSE TO THE WTOR, AND REJECTS MEANINGLESS    11300
*         REFLEX ANSWERS.                                                  11310
         SPACE 1                                                           11320
*        UPON ENTRY: WA - ADDRESS OF RESPONSE                              11330
         SPACE 1                                                           11340
*        UPON EXIT, THE COND CODE IS SET IN THE PSW SUCH THAT THE CALLE    11350
*         CAN MAKE THE FOLLOWING CONDITIONAL BRANCHES :-                   11360
*              BE  - RESPONSE IS INVALID: RE-ISSUE QUESTION                11370
*              BNE - RESPONSE IS ( APPARENTLY ) VALID                      11380
         SPACE 1                                                           11390
TESTANS  EQU   *                   ENTER ROUTINE                           11400
         CLC   1(2,WA),=C'  '      ARE BYTES 2 & 3 BLANK                   11410
         BE    TESTANSX            BR IF YES BECAUSE RESPONSE ILLELAGL     11420
*                                                                          11430
*        THE ABOVE TEST REJECTS SUCH TYPICAL REFLEX RESPONSES AS:          11440
*         NULL                                                             11450
*         Y                                                                11460
*         N                                                                11470
*         U                                                                11480
*                                                                          11490
         CLC   0(3,WA),=C'YES'     HAS HE REPLIED 'YES'                    11500
         BE    TESTANSX            REJECT IT IF HE DID                     11510
*                                                                          11520
*        IF WE REACH HERE, THE RESPONSE HAS SATISFIED AS OUR VALIDITY      11530
*         CHECKING, AND THE PSW COND CODE IS UNEQUAL, SO RETURN.           11540
*                                                                          11550
TESTANSX BR    WC                  RETURN TO CALLER INDICATING VALIDITY    11560
         EJECT                                                             11570
***********************************************************************    11580
*        VERIFY THAT SMF RECORD WAS WRITTEN SUCCESSFULLY              *    11590
***********************************************************************    11600
         SPACE 1                                                           11610
*        UPON ENTRY, REG 15 CONTAINS A RETURN CODE FROM 'SMFWTM'           11620
         SPACE 1                                                           11630
TESTRITE EQU   *                   ENTER ROUTINE                           11640
         B     *+4(R15)            BRANCH DEPENDING UPON RETURN CODE       11650
         B     TESTRITX     R15= 0 RECORD WRITTEN WITHOUT ERROR            11660
         B     TESTRIT1     R15= 4 RECORD WOULD NOT FIT INTO DATA SET      11670
         B     TESTRIT1     R15= 8 RECORD LENGTH LESS THAN 18 BYTES        11680
         B     TESTRIT1     R15=12 UNASSIGNED ERROR CODE                   11690
         B     TESTRIT1     R15=16 MAN=NONE SPECIFIED OR D/S FULL          11700
         B     TESTRIT1     R15=20 RECORD SUPPRESSED BY IEFU83 EXIT        11710
         SPACE 1                                                           11720
TESTRIT1 MVC   WTOWRITE,WTOLST2    MOVE SKELETON MESSAGE TO WTO AREA       11730
         IC    R1,SMFERTAB(R15)    RETRIEVE LENGTH OF APPROPRIATE MSG      11740
         L     R15,SMFERTAB(R15)   SET MESSAGE ADDRESS IN REG 15           11750
         EX    R1,MVCSMFER         ADD ERROR MSG TEXT TO SKELETON WTO      11760
         WTO   MF=(E,WTOWRITE)     EXECUTE WTO TO INFORM OPERATOR          11770
TESTRIT2 MVI   SMBWRITE,C' '       INSERT SPACE AT START OF WORK AREA..    11780
         MVC   SMBWRITE+1(L'SMBWRITE-1),SMBWRITE ... AND PROPAGATE         11790
         LA    WB,L'SMBWRITE       SET WB TO LENGTH OF ANSWER AREA         11800
         LA    WA,SMBWRITE         SET WA TO ADDRESS OF ANSWER AREA        11810
         MVC   WTOWRITE,WTORLST3   SET LIST-FORM WTOR IN W/A               11820
         XC    WTORECB,WTORECB     CLEAR ECB FOR RESPONSE                  11830
         WTOR  ,(WA),(WB),WTORECB,MF=(E,WTOWRITE) ISSUE WTOR FOR INITIA    11840
         WAIT  ECB=WTORECB,LONG=YES WAIT FOR HIM TO NOTICE AND ANSWER +    11850
         BAL   WC,TESTANS          VERIFY THAT RESPONSE IS ACCEPTABLE      11860
         BE    TESTRIT2            LOOP BACK TO RE-ISSUE IF NOT            11870
TESTRITX BR    WD                  RETURN TO CALLER                   +    11880
         SPACE 1                                                           11890
MVCSMFER MVC   WTOWRITE+51(0),0(R15) ADD TEXT TO SKELETON MESSAGE     +    11900
         EJECT                                                             11910
***********************************************************************    11920
*        LIST-FORM WTOR PARAMETER LISTS                               *    11930
***********************************************************************    11940
         SPACE 1                                                           11950
WTORLST1 WTOR  'IEFACTRT:- JOBNAMEX FAILED WITH JCL ERROR          REPLY   11960
               Y WITH YOUR INITIALS TO ACKNOWLEDGE',ROUTCDE=1,MF=L         11970
         SPACE 1                                                           11980
WTORLST2 WTOR  'IEFACTRT:- INDICATE YOUR INTENDED ACTION FOR THIS ERROR*   11990
               ',ROUTCDE=1,MF=L                                            12000
         SPACE 1                                                           12010
WTORLST3 WTOR  'IEFACTRT:- TAKE CORRECTIVE ACTION IMMEDIATELY      REPL*   12020
               Y WITH YOUR INITIALS TO ACKNOWLEDGE',ROUTCDE=1,MF=L         12030
         EJECT                                                             12040
***********************************************************************    12050
*        LIST-FORM WTO PARAMETER LISTS                                *    12060
***********************************************************************    12070
         SPACE 1                                                           12080
WTOLST1  WTO   'IEFACTRT JOBNAMEX ( NON-PRODUCTION ) FAILED WITH JCL ER*   12090
               ROR',ROUTCDE=1,MF=L                                         12100
         SPACE 1                                                           12110
WTOLST2  WTO   'IEFACTRT:- ATTEMPT TO WRITE SMF RECORD FAILED:         *   12120
                                                           ',ROUTCDE=1,*   12130
               DESC=2,MF=L                                                 12140
         SPACE 1                                                           12150
         DS    0H                  RE-ALIGN                                12160
         EJECT                                                             12170
***********************************************************************    12180
*        IDENTIFY ACCOUNTING FIELD IN ERROR & TYPE OF ERROR           *    12190
***********************************************************************    12200
         SPACE 1                                                           12210
WRITEPER EQU   *                   ENTER ROUTINE TO IDENTIFY ERROR         12220
         SPACE 1                                                           12230
         MVI   SMBWRITE,C' '       MOVE BLANK TO START OF MESSAGE AREA     12240
         MVC   SMBWRITE+1(L'SMBWRITE-1),SMBWRITE ... AND PROPAGATE         12250
         MVC   SMBWRITE(L'MESSAGED),MESSAGED SET UP 'FIELD IN ERROR'       12260
         XR    R15,R15             CLEAR WORK REGISTER                     12270
         XR    WA,WA               CLEAR WORK REGISTER                     12280
         CLI   ASAPINER,NAMETABN   IS CODE WITHIN TABLE OF NAMES           12290
         BNH   *+8                 BRANCH IF CODE IN TABLE                 12300
         MVI   ASAPINER,0          SET CODE TO ZERO IF OUT OF BOUNDS       12310
         IC    R15,ASAPINER        GET CODE CORRESPONDING TO NAME          12320
         SLL   R15,2               MULTIPLY BY 4 TO CONVERT TO INDEX       12330
         IC    WA,NAMETAB(R15)     GET LENGTH OF NAME FROM TABLE           12340
         L     R15,NAMETAB(R15)    GET ADDRESS OF NAME FROM TABLE          12350
         EX    WA,SETNAME          MOVE FIELD NAME TO MESSAGE AREA         12360
         LA    WA,L'MESSAGED+1(,WA) SET WA TO LENGTH OF COMPOSITE MESSA    12370
         STH   WA,LCTPARM2+2(,LCT) SET LENGHT OF MESSAGE IN LCT            12380
         L     R15,=V(IEFYS)       GET PRINT ROUTINE ADDRESS               12390
         BALR  LINK,R15            WRITE EXPLANATORY MESSAGE               12400
         SPACE 1                                                           12410
         MVI   SMBWRITE,C' '       MOVE BLANK TO START OF MESSAGE AREA     12420
         MVC   SMBWRITE+1(L'SMBWRITE-1),SMBWRITE ... AND PROPAGATE         12430
         MVC   SMBWRITE(L'MESSAGEE),MESSAGEE SET UP 'FIELD IN ERROR'       12440
         XR    R15,R15             CLEAR WORK REGISTER                     12450
         XR    WA,WA               CLEAR WORK REGISTER                     12460
         CLI   ASAPERRF,TYPETABN   IS CODE WITHIN TABLE OF TYPES           12470
         BNH   *+8                 BRANCH IF CODE IN TABLE                 12480
         MVI   ASAPERRF,0          SET CODE TO ZERO IF OUT OF BOUNDS       12490
         IC    R15,ASAPERRF        GET CODE CORRESPONDING TO TYPE          12500
         SLL   R15,2               MULTIPLY BY 4 TO CONVERT TO INDEX       12510
         IC    WA,TYPETAB(R15)     GET LENGTH OF TYPE FROM TABLE           12520
         L     R15,TYPETAB(R15)    GET ADDRESS OF TYPE FROM TABLE          12530
         EX    WA,SETTYPE          MOVE FIELD TYPE TO MESSAGE AREA         12540
         LA    WA,L'MESSAGEE+1(,WA) SET WA TO LENGTH OF COMPOSITE MESSA    12550
         STH   WA,LCTPARM2+2(,LCT) SET LENGHT OF MESSAGE IN LCT            12560
         L     R15,=V(IEFYS)       GET PRINT ROUTINE ADDRESS               12570
         BALR  LINK,R15            WRITE EXPLANATORY MESSAGE               12580
         SPACE 1                                                           12590
         BR    WE                  RETURN TO CALLER                        12600
SETNAME  MVC   SMBWRITE+L'MESSAGED(0),0(R15) EXECUTED MOVE OF NAME         12610
SETTYPE  MVC   SMBWRITE+L'MESSAGEE(0),0(R15) EXECUTED MOVE OF ERROR TYP    12620
         EJECT                                                             12630
NAMEMSGS DS    0CL1                START OF TABLE OF FIELD NAMES           12640
NAMEM0   DC    C'UNKNOWN'                                                  12650
NAMEM1   DC    C'CHARGE CODE ( 1ST PARAMETER )'                            12660
NAMEM2   DC    C'CATEGORY CODE ( 2ND PARAMETER )'                          12670
NAMEM3   DC    C'MAJOR COST CENTRE (3RD PARAMETER )'                       12680
NAMEM4   DC    C'MINOR COST CENTRE ( 4TH PARAMETER )'                      12690
NAMEM5   DC    C'ENTITY CODE ( 5TH PARAMETER )'                            12700
NAMEM6   DC    C'FORMS TYPE ( 6TH PARAMETER )'                             12710
NAMEM7   DC    C'NUMBER OF COPIES ( 7TH PARAMETER )'                       12720
NAMEM8   DC    C'ESTIMATED CPU TIME ( 8TH PARAMETER )'                     12730
NAMEM9   DC    C'ESTIMATED LINES IN 000''S ( 9TH PARAMETER )'              12740
NAMEM10  DC    C'ESTIMATED CARDS ( 10TH PARAMETER )'                       12750
NAMEM11  DC    C'REQUEST FOR JOB LOG SUPPRESSION ( 11TH PARAMETER )'       12760
NAMEM12  DC    C'LINES / PAGE ( 12TH PARAMETER )'                          12770
         SPACE 5                                                           12780
TYPEMSGS DS    0CL1                START OF TABLE OF ERROR TYPES           12790
TYPEM0   DC    C'UNKNOWN ERROR'                                            12800
TYPEM1   DC    C'CHARGE CODE IS NOT ON TABLE OF VALID CHARGE CODES'        12810
TYPEM2   DC    C'PARAMETER IS OF INCORRECT LENGTH'                         12820
TYPEM3   DC    C'PARAMETER IS MANDATORY, BUT WAS OMITTED'                  12830
TYPEM4   DC    C'PARAMETER IS NOT NUMERIC'                                 12840
TYPEM5   DC    C'TOO MANY ACCOUNTING PARAMETERS SUPPLIED'                  12850
TYPEM6   DC    C'UNAUTHORISED USE OF CLASS=P'                              12860
         SPACE 5                                                           12870
NAMETAB  DS    0F                  TABLE OF DESCRIPTORS FOR FIELD NAMES    12880
       TABNTRY NAMEM0                                                      12890
       TABNTRY NAMEM1                                                      12900
       TABNTRY NAMEM2                                                      12910
       TABNTRY NAMEM3                                                      12920
       TABNTRY NAMEM4                                                      12930
       TABNTRY NAMEM5                                                      12940
       TABNTRY NAMEM6                                                      12950
       TABNTRY NAMEM7                                                      12960
       TABNTRY NAMEM8                                                      12970
       TABNTRY NAMEM9                                                      12980
       TABNTRY NAMEM10                                                     12990
       TABNTRY NAMEM11                                                     13000
       TABNTRY NAMEM12                                                     13010
NAMETABN EQU   ((*-NAMETAB)/4)-1   NUMBER OF DESCRIPTORS LESS UNKNOWN      13020
         SPACE 5                                                           13030
TYPETAB  DS    0F                  TABLE OF DESCRIPTORS FOR ERRORS         13040
       TABNTRY TYPEM0                                                      13050
       TABNTRY TYPEM1                                                      13060
       TABNTRY TYPEM2                                                      13070
       TABNTRY TYPEM3                                                      13080
       TABNTRY TYPEM4                                                      13090
       TABNTRY TYPEM5                                                      13100
       TABNTRY TYPEM6                                                      13110
TYPETABN EQU   ((*-TYPETAB)/4)-1   NUMBER OF DESCRIPTORS LESS UNKNOWN      13120
         EJECT                                                             13130
SMFERTAB DS    0F                  TABLE OF ERROR MESSAGE DESCRIPTORS      13140
       TABNTRY SMFERR00            ERROR MESSAGE 00                        13150
       TABNTRY SMFERR04            ERROR MESSAGE 04                        13160
       TABNTRY SMFERR08            ERROR MESSAGE 08                        13170
       TABNTRY SMFERR12            ERROR MESSAGE 12                        13180
       TABNTRY SMFERR16            ERROR MESSAGE 16                        13190
       TABNTRY SMFERR20            ERROR MESSAGE 20                        13200
         SPACE 5                                                           13210
SMFERR00 DC    C'RECORD WRITTEN SUCCESSFULLY'                              13220
SMFERR04 DC    C'RECORD WOULD NOT FIT INTO DATA SET'                       13230
SMFERR08 DC    C'RECORD LENGTH LESS THAN 18 BYTES'                         13240
SMFERR12 DC    C'UNASSIGNED ERROR CODE'                                    13250
SMFERR16 DC    C'''MAN=NONE'' SPECIFIED OR SMF DATA SET FULL <--------'    13260
SMFERR20 DC    C'RECORD SUPPRESSED BY IEFU83 EXIT'                         13270
         SPACE 1                                                           13280
*        NOTE :  MAXIMUN RECORD LENGTH OF MESSAGES IS 51 BYTES.       +    13290
         EJECT                                                          F4313300
*                            TIME CONVERSIONS                           F4413310
         SPACE 2                                                        F4413320
* THIS SUBROUTINE CONVERTS BINARY TIME IN HUNDREDTHS OF A SECOND TO THE F4413330
* PACKED FORM OF 0HHMMSSF. UPON ENTRY, THE CALLER MUST HAVE PLACED THE  F4413340
* VALUE TO BE CONVERTED INTO THE SUBROUTINE COMMON COMMUNICATION AREA.  F4413350
* THE RESULT WILL BE PLACED IN THE ADJACENT FIELD.                      F4413360
         SPACE 1                                                        F4413370
* THE CONTENTS OF REGISTERS WA, WB, WC, WD, AND WE ARE ALTERED AND NOT  F4413380
* SAVED AND RESTORED.                                                   F4413390
         SPACE 2                                                        F4413400
DECTMCVT L     WB,WAFHALF          GET TIME TO BE CONVERTED             F4413410
         C     WB,=F'50'           Q.-IS TIME TOO CLOSE TO MIDNIGHT     F4413420
         BNL   DECGOON             B.-NO                                F4413430
         MVC   WASHALF,=A(X'024000F')  MAKE THE ANSWER REFLECT MIDNIGHT F4413440
         BR    LINK                RETURN                               F4413450
DECGOON  SR    WA,WA                                                    F4413460
         ST    WA,WASHALF          INITIALIZE SUBSEQUENT DIVISOR        F4413470
         A     WB,=F'50'                                                F4413480
         D     WA,=F'100'          CONVERT TIME TO SECONDS              F4413490
         LA    WE,28               INITIALIZE SHIFT FACTOR              F4413500
         MVI   WASHALF+3,10          AND DIVISOR VALUE                  F4413510
DIVIDEIT SR    WA,WA               NOW CREATE HHMMSS IN PACKED FORMAT   F4413520
         D     WA,WASHALF            A HALF-BYTE AT A TIME              F4413530
         LR    WC,WA               OBTAIN REMAINDER                     F4413540
         SRDL  WC,4                  AND SHIFT RIGHT ONE HALF-BYTE      F4413550
         SH    WE,*-2              REDUCE THE SHIFT REMAINING           F4413560
         XI    WASHALF+3,12        CHANGE DIVISOR - 10 TO 6 OR 6 TO 10  F4413570
         LTR   WB,WB               Q.-ANYTHING LEFT TO CONVERT          F4413580
         BNZ   DIVIDEIT            B.-YES                               F4413590
         SRL   WD,0(WE)            SHIFT ANY REMAINING POSITIONS        F4413600
         ST    WD,WASHALF                                               F4413610
         OI    WASHALF+3,15        PUT IN THE SIGN                      F4413620
         BR    LINK                RETURN                               F4413630
         EJECT                                                          F4413640
* THIS SUBROUTINE CONVERTS TIME IN HUNDREDTHS OF A SECOND TO HUNDREDTHS F4413650
* OF A MINUTE. UPON ENTRY, THE CALLER MUST HAVE PLACED THE TIME TO BE   F4413660
* CONVERTED INTO THE COMMON COMMUNICATIONS AREA. THE RESULT WILL BE IN  F4413670
* WB IN BINARY AND THW WORK AREA IN PACKED FORM. THE INPUT IS DESTROYED F4413680
* IN THE PROCESS OF CONVERSION.                                         F4413690
         SPACE 1                                                        F4413700
* THE CONTENTS OF REGISTERS WA AND WB ARE ALTERED AND NOT SAVED AND     F4413710
* RESTORED.                                                             F4413720
         SPACE 2                                                        F4513730
BINTMCVT CLC   WAFHALF,=F'30'      Q.-TIME TOO CLOSE TO MIDNIGHT        F4513740
         BNL   BINGOON             B.-NO                                F4513750
         L     WB,=A(24*60*100)    MAKE IT MIDNIGHT                     F4513760
         B     BINAWDUN                                                 F4513770
BINGOON  L     WB,WAFHALF          GET THE TIME TO BE CONVERTED         F4513780
         SR    WA,WA                                                    F4513790
         A     WB,=F'30'           HALF-ADJUST                          F4513800
         D     WA,=F'60'           CONVERT TO HUNDREDTHS OF MINUTES     F4513810
BINAWDUN CVD   WB,WORKAREA         GIVE IT TO CALLER BOTH WAYS          F4513820
         BR    LINK                RETURN                               F4513830
         EJECT                                                          F4513840
*                            DATE CONVERSION                            F4613850
         SPACE 2                                                        F4613860
* THE PURPOSE OF THIS SUBROUTINE IS TO BREAK DOWN THE DATE IN THE       F4613870
* PACKED FORM OF 00YYDDD+ TO THE FORM OF DAY OF THE WEEK, DAY OF THE    F4613880
* MONTH, MONTH, AND YEAR. UPON ENTRY, THE CALLER MUST HAVE PLACED THE   F4613890
* DATE TO BE CONVERTED INTO THE SUBROUTINE COMMON COMMUNICATIONS AREA.  F4613900
* THE RESULT IS PLACED IN THE SAME AREA THEREBY DESTROYING THE INPUT    F4613910
* SUPPLIED. THE RESULT IS IN THE FOLLOWING FORMAT WITH ALL FIELDS BEING F4613920
* TWO BYTES IN LENGTH AND ALIGNED ON A HALF-WORD BOUNDRY.               F4613930
         SPACE 1                                                        F4613940
* 1) DAY OF THE WEEK - BINARY - 0 IS SUNDAY, 1 IS MONDAY, ETC.          F4613950
* 2) DAY OF THE MONTH - PACKED                                          F4613960
* 3) MONTH - BINARY - 0 IS JANUARY, 1 IS FEBRUARY, ETC.                 F4613970
* 4) YEAR - PACKED                                                      F4613980
         SPACE 1                                                        F4613990
* DURING EXECUTION OF THIS SUBROUTINE, REGISTERS WA, WB, WC, AND WD ARE F4614000
* ALTERED AND NOT SAVED AND RESTORED.                                   F4614010
         SPACE 1                                                        F4614020
* WARNINGS -                                                            F4614030
* 1) THE SUBROUTINE HAS A VERY LIMITED ABILITY TO DETERMINE THE         F4614040
*    VALIDITY OF THE SUPPLIED DATE. THE CALLER SHOULD ALWAYS TEST THE   F4614050
*    FIRST POSITION OF THE RESULT. IF IT IS NON-ZERO, THE DATE WAS      F4614060
*    UNUSABLE AND CONSEQUENTLY, NO CONVERSION COULD OCCUR.              F4614070
* 2) THE CALCULATION OF THE DAY OF THE WEEK WILL ONLY WORK CORRECTLY    F4614080
*    FOR DATES IN THE TWENTIETH CENTURY ALTHOUGH WITH MINOR CHANGES IT  F4614090
*    COULD DETERMINE THE DAY OF THE WEEK FOR ANY DATE FROM 15 OCTOBER   F4614100
*    1582 ON INTO ANY DATE IN THE FUTURE. ANY DATE BEYOND THE YEAR 3249 F4614110
*    COULD BE A PROBLEM THOUGH.                                         F4614120
         SPACE 2                                                        F4614130
DATECNVT LH    WA,WAFHALF+2        SAVE PACKED DAY-OF-YEAR PORTION      F4614140
         OI    WASHALF+3,15                                             F4614150
         MVO   WORKAREA,WAFHALF+1(1)    SHIFT YEAR RIGHT AND LEAR REST  F4614160
         CVB   WB,WORKAREA         CONVERT YEAR FOR LATER USE           F4614170
         STH   WA,WAFHALF+2        RESTORE PACKED DAY-OF-YEAR           F4614180
         STC   WB,WAFHALF          STORE BINARY YEAR FOR TESTING        F4614190
         LA    WA,DAYSTBL          GET ADDR. OF DAYS TABLE FOR NON-LEAP F4614200
         TM    WAFHALF,3           Q.-IS THIS A LEAP YEAR               F4614210
         BNZ   *+8                 B.-NO                                F4614220
         LA    WA,DAYSLPYR         GET ALTERNATE TABLE FOR LEAP YEARS   F4614230
         CP    WAFHALF+2(2),24(2,WA)    Q.-IS DAY WITHIN A VALID RANGE  F4614240
         BHR   LINK                B.-NO, THEREFORE IMMEDIATELY EXIT    F4614250
         SR    WC,WC                                                    F4614260
DATELOOP CP    WAFHALF+2(2),2(2,WA)     Q.-DAY OCCURS IN THIS MONTH     F4614270
         BNH   MONFOUND            B.-YES                               F4614280
         LA    WA,2(,WA)           BUMP DETERMINATION TABLE             F4614290
         LA    WC,1(,WC)             AND MONTH SHIFT FACTOR TABLE       F4614300
         B     DATELOOP            TRY THE NEXT ONE                     F4614310
MONFOUND SP    WAFHALF+2(2),0(2,WA)     CALCULATE DAY-OF-THE-MONTH      F4614320
         OI    WAFHALF+3,15                                             F4614330
         ZAP   SECONDWA,WAFHALF+2(2)                                    F4714340
         CVB   WA,SECONDWA         CONVERT FOR DAY-OF-WEEK CALCULATION  F4714350
         STH   WC,WASHALF          INDEX VALUE FOR MONTH NAME TABLE     F4714360
         CLI   WASHALF+1,1         Q.-IS THE MONTH JANUARY OR FEBRUARY  F4714370
         BH    *+6                 B.-NO                                F4714380
         BCTR  WB,0                MAKE THE YEAR LAST YEAR              F4714390
         SR    WD,WD               START TO CALCULATE DAY-OF-THE-WEEK   F4714400
         IC    WD,SHIFTTBL(WC)     GET MONTH'S SHIFT FACTOR BASE SEVEN  F4714410
         AR    WD,WA               + DAY OF THIS MONTH                  F4714420
         LA    WA,3                                                     F4714430
         NR    WA,WB                                                    F4714440
         AR    WD,WA               + NUMBER OF YEARS SINCE LAST LEAP YR F4714450
         SRL   WB,2                WB = NO. OF LEAP YEARS SO FAR IN     F4714460
         LA    WB,3(,WB)             THIS CENTURY + NO. OF CENTURIES    F4714470
         MH    WB,=H'5'            EACH ONE CAUSES A FIVE DAY SHIFT     F4714480
         AR    WD,WB               WD = TOTAL NO. OF DAYS SHIFTED       F4714490
         SR    WC,WC                                                    F4714500
         LA    WA,7                                                     F4714510
         DR    WC,WA               DIVIDE BY NUMBER OF DAYS IN A WEEK   F4714520
         STH   WC,WAFHALF          REMAINDER IS DAY OF THE WEEK         F4714530
         BR    LINK                RETURN                               F4714540
         EJECT                                                          F4714550
*                        EQUATES USED IN THIS MODULE                    F6014560
         SPACE 3                                                        F6014570
*                                  REGISTERS                            F6114580
         SPACE 1                                                        F6114590
R0       EQU   0                   WORK AND SVC LINKAGE                 F6114600
R1       EQU   1                   WORK AND SVC LINKAGE                 F6114610
WA       EQU   2                   WORK                                 F6114620
WB       EQU   3                   WORK                                 F6114630
WC       EQU   4                   WORK                                 F6114640
WD       EQU   5                   WORK                                 F6114650
WE       EQU   6                   WORK                                 F6114660
WRK      EQU   7                   ADDRESS OF ACQUIRED WORK AREA        F6114670
ASA      EQU   8                   ADDRESS OF ACCOUNTING SERVICE AREA   F6114680
APL      EQU   9                   ACCOUNTING PARAMETER LIST            F6114690
BASEA    EQU   10                  BASE REGISTER                        F6114700
BASEB    EQU   11                  BASE REGISTER                        F6114710
LCT      EQU   12                  ADDRESS OF THE LCT                   F6114720
SAVEPTR  EQU   13                  ADDRESS OF REGISTER SAVE AREA        F6114730
LINK     EQU   14                  LINKAGE                              F6114740
R15      EQU   15                  WORK AND SVC LINKAGE                 F6114750
         SPACE 3                                                        F6114760
*                             MISCELLANEOUS                             F6214770
         SPACE 1                                                        F6214780
ABENDCOD EQU   X'7FE'              ABEND CODE                           F6214790
UCB3TAPE EQU   X'80'               DEVICE IS TAPE                       F6214800
UCB3DACC EQU   X'20'               DEVICE IS DISK                       F6214810
         EJECT                                                          F6914820
*                        CONSTANTS AND WORK AREAS                       F7014830
         SPACE 1                                                        F7014840
         LTORG *                                                        F7014850
GMSIZE   DC    0F'0',AL1(230),AL3(WRKEND-WRKDSECT) SUB POOL AND SIZE    F7114860
TRANSTBL EQU   *-240                                                    F7114870
         DC    C'0123456789ABCDEF' TRANSLATE TABLE                      F7114880
MESSAGEA DC    C'IEFACTRT ***** INVALID ACCOUNTING PARAMETERS IN THE '     14890
MESSAGEB DC    C'JOB CARD - THE JOB WAS FLUSHED *****'                  F7114900
MESSAGEC DC    C'EXEC CARD - THOSE IN THE JOB CARD WERE USED INSTEAD ***F7114910
               ***'                                                     F7114920
MESSAGED DC    C'IEFACTRT ***** ACCOUNTING FIELD IN ERROR IS - '           14930
MESSAGEE DC    C'IEFACTRT ***** TYPE OF ERROR: '                           14940
MESSAGEF DC    C'IEFACTRT - PRODUCTION JOB FAILED WITH JCL ERROR       *   14950
               OPERATOR AT TIME OF ERROR: '                                14960
MESSAGEG DC    C'IEFACTRT - OPERATOR''S INTENDED ACTION: '                 14970
STEPHDG DC     C'*** STATISTICS FOR STEP'                               F7114980
JOBHDG   DC    C'*** TOTALS FOR JOB'                                    F7114990
MISD     DC    C'****MISD****370/' MISD IDENTIFIER                         15000
ACCTGH   DC    C'MONSANTO COMPANY - MANAGEMENT INFORMATION AND SYSTEMS *   15010
               DEPARTMENT - EUROPEAN COMPUTER CENTRE'                      15020
         SPACE 2                                                        F7115030
*                             VARIOUS EDIT WORDS                        F7115040
TODEDWD DC     X'402020214B20204B2020'  TIME OF DAY                     F7115050
COSTEDWD DC    X'4020206B2020214B2020C3D9'   COST                       F7115060
UNITEDWD DC    X'40202020214B202020'    UNITS                           F7115070
TIMEEDWD DC    X'4020202020214B2020'    TIME                            F7115080
REGNEDWD DC    X'4020206B202021D2'      REGION SIZE                     F7115090
DSALEDWD DC    X'40202021'              DATA SET ALLOCATION             F7115100
         SPACE 5                                                           15110
*        THESE FACTORS ARE USED TO CONVERT 'TRUE' OCCUPANCY UNITS,      AMU15120
*         I/O UNITS AND MACHINE UNITS TO THE VALUE REQUIRED FOR         AMU15130
*         A REALISTIC BRUSSELS CHARGE-OUT ( WITHOUT GIVING TOO MUCH     AMU15140
*         AWAY TO THE USERS ).                                          AMU15150
*        MUFACTR1 IS APPLIED TO THE OCCUPANCY UNIT AND I/O UNIT         AMU15160
*         ALGORITHMS, AFTER COMPLETING THE ST.LOUIS CALCULATION, BUT    AMU15170
*         BEFORE PRESERVING THE RESULTANT VALUES.  THIS HAS THE NET     AMU15180
*         EFFECT OF MULTIPLYING OCCUPANCY UNITS, I/O UNITS AND MACHINE  AMU15190
*         UNITS BY THE FACTOR.                                          AMU15200
*        MUFACTR2 IS APPLIED TO MACHINE UNIT AFTER IT HAS BEEN          AMU15210
*         CALCULATED IN THE ST.LOUIS FASHION ( BY ADDING I/O UNITS TO   AMU15220
*         OCCUPANCY UNITS ), AND IS THUS NOT REFLECTED IN THE I/O UNIT  AMU15230
*         AND OCCUPANCY UNIT VALUES.                                    AMU15240
         SPACE 1                                                        AMU15250
MUFACTR1 DC    F'1500'   (NNN.NNN) FACTOR FOR OCCUPANCY & I/O UNITS        15260
MUFACTR2 DC    F'1000'   (NNN.NNN) FACTOR FOR MACHINE UNITS             AMU15270
         EJECT                                                          F7115280
*                           SURCHARGE TABLES                            F7315290
         SPACE 2                                                        F7315300
* THESE TABLES ARE THE MEANS BY WHICH THE ACCOUNTING ROUTINE MAKES      F7315310
* DECISIONS AS TO WHETHER OR NOT SPECIAL CONSIDERATIONS SHOULD BE       F7315320
* APPLIED TO A JOB STEP.                                                F7315330
         SPACE 1                                                        F7315340
* EACH ENTRY IN THE TABLE CONTAINS -                                    F7315350
*   A) A FLAG BYTE DEFINED AS FOLLOWS -                                 F7315360
         SPACE 1                                                        F7315370
DISCOUNT EQU   X'80'               THE VALUE IS A DISCOUNT              F7315380
IMSMUCHG EQU   X'40'               MODIFY THE M. U. CALCULATION         F7315390
IGNALLOC EQU   X'20'               DISREGARD NO. OF DASD D/S ALLOCATED     15400
         SPACE 1                                                        F7315410
*      THE REST ARE CURRENTLY UNUSED.                                   F7315420
*   B) THE VALUE TO BE APPLIED. THESE CURRENTLY ARE ALL PERCENTAGES.    F7315430
*   C) AN IDENTIFIER. THESE ARE EITHER -                                F7315440
*      1) PROGRAM NAMES ALL DEFINED AS EIGHT CHARACTERS IN LENGTH.      F7315450
*      2) PSEUDO CODES ALL DEFINED AS FOUR CHARACTERS IN LENGTH.        F7315460
         SPACE 2                                                        F7315470
*                        PROGRAM SURCHARGE TABLE                        F7315480
SURCHTBL DC    AL1(0,150),CL8'VALUTR'                                   F7315490
         DC    AL1(0,150),CL8'ACP'                                      F7315500
         DC    AL1(0,20),CL8'INFORM'                                    F7315510
         DC    AL1(0,20),CL8'INFSPEC'                                   F7315520
         DC    AL1(0,20),CL8'BISF'                                      F7315530
         DC    AL1(0,20),CL8'SIMPLAN'                                   F7315540
         DC    AL1(0,20),CL8'SIMTEST'                                   F7315550
         DC    AL1(0,25),CL8'DATAPREP'                                  F7315560
         DC    AL1(0,25),CL8'STEPWISE'                                  F7315570
         DC    AL1(0,15),CL8'GPCX'                                      F7315580
         DC    AL1(0,15),CL8'GPCCRD'                                    F7315590
         DC    AL1(0,25),CL8'CONPLOT'                                   F7315600
         DC    AL1(0,25),CL8'NONLIN'                                    F7315610
         DC    AL1(0,25),CL8'SCATPLOT'                                  F7315620
         DC    AL1(0,25),CL8'ANALVAR'                                   F7315630
         DC    AL1(0,25),CL8'TRENDFIT'                                  F7315640
         DC    AL1(0,25),CL8'CONTOURS'                                  F7315650
         DC    AL1(0,25),CL8'SURVEY'                                    F7315660
         DC    AL1(0,25),CL8'STDEYHAT'                                  F7315670
         DC    AL1(0,25),CL8'DESRBLTY'                                  F7315680
         DC    AL1(0,25),CL8'BACKSTEP'                                  F7315690
         DC    AL1(DISCOUNT,100),CL8'B4348'                             F7315700
         DC    AL1(DISCOUNT,100),CL8'COPYMULT'                          F7315710
         DC    AL1(DISCOUNT,100),CL8'TMSSR'                             F7315720
         DC    AL1(DISCOUNT,100),CL8'TMSBINQ'                           F7315730
         DC    AL1(DISCOUNT+IMSMUCHG,50),CL8'BTSRC000'                  F7315740
         DC    AL1(IMSMUCHG,0),CL8'DFSRRC00'                            F7315750
         DC    AL1(0,15),CL8'NASTRAN'                                   F7315760
         DC    AL1(0,15),CL8'MERGE03'                                   F7315770
         DC    AL1(0,15),CL8'WAVE'                                      F7315780
         DC    3CL10' '            SPACE FOR PATCHING IN SOME MORE      F7415790
PGMTBLEN DC    CL10' '             LAST ENTRY IN PROGRAM TABLE          F7415800
         SPACE 2                                                        F7415810
*                      PSEUDO CODE SURCHARGE TABLE                      F7415820
         DC    AL1(0,25),CL4'0000' SPARE ENTRY                             15830
         DC    AL1(0,25),CL4'0000' SPARE ENTRY                             15840
         DC    AL1(0,25),CL4'0000' SPARE ENTRY                             15850
         DC    AL1(0,25),CL4'0000' SPARE ENTRY                             15860
         DC    AL1(0,25),CL4'0000' SPARE ENTRY                             15870
         DC    AL1(0,25),CL4'0000' SPARE ENTRY                             15880
         DC    AL1(0,25),CL4'0000' SPARE ENTRY                             15890
         DC    AL1(0,25),CL4'0000' SPARE ENTRY                             15900
         DC    AL1(0,25),CL4'0000' SPARE ENTRY                             15910
         DC    AL1(0,25),CL4'0000' SPARE ENTRY                             15920
         DC    AL1(0,25),CL4'0000' SPARE ENTRY                             15930
         DC    AL1(0,25),CL4'0000' SPARE ENTRY                             15940
         DC    AL1(0,25),CL4'0000' SPARE ENTRY                             15950
         DC    AL1(0,25),CL4'0000' SPARE ENTRY                             15960
         DC    AL1(0,25),CL4'0000' SPARE ENTRY                             15970
         DC    AL1(0,25),CL4'0000' SPARE ENTRY                             15980
         DC    AL1(0,25),CL4'0000' SPARE ENTRY                             15990
         DC    AL1(0,25),CL4'0000' SPARE ENTRY                             16000
         DC    AL1(0,25),CL4'0000' SPARE ENTRY                             16010
         DC    AL1(0,25),CL4'0000' SPARE ENTRY                             16020
         DC    CL6' '              SPARE ENTRIES                        F7416030
PSUTBLEN DC    CL6' '              LAST ENTRY IN PSEUDO CODE TABLE      F7416040
         DC    AL1(0,0)            DEFAULT VALUE USED IF NO HIT         F7416050
         EJECT                                                          F7416060
*                       COST CALCULATION RATE TABLE                     F7516070
         SPACE 2                                                        F7516080
* THIS TABLE IS USED TO ASSOCIATE A COST RATE WITH THE TYPE OF SERVICES F7516090
* THAT WERE PROVIDED. TO DO THIS, IT ASSIGNS A RATE TO EACH JOB CLASS.  F7516100
         SPACE 1                                                        F7516110
* EACH ENTRY IN THE TABLE CONTAINS -                                    F7516120
*   A) THE JOB CLASS                                                    F7516130
*   B) ONE BYTE CURRENTLY UNUSED                                        F7516140
*   C) PRIMARY COST RATE IN DOLLARS AND CENTS PER MACHINE UNIT TO BE    F7516150
*      APPLIED ONLY BETWEEN THE HOURS OF 8 A.M. TO 6 P.M., MONDAY       F7516160
*      THROUGH FRIDAY                                                   F7516170
*   D) SECONDARY COST RATE IN THE SAME FORMAT AND TO BE APPLIED AT ALL  F7516180
*      OTHER TIMES.                                                     F7516190
         SPACE 2                                                        F7516200
RATETBL DS     0H                                                       F7516210
         DC    C'A ',HE2'4.85,4.85'                                        16220
         DC    C'B ',HE2'4.85,4.85'                                        16230
         DC    C'N ',HE2'4.85,4.85'                                        16240
         DC    C'0 ',HE2'4.85,4.85'                                        16250
         DC    C'P ',HE2'4.85,4.85'                                        16260
         DC    C'R ',HE2'4.85,4.85'                                        16270
         DC    C'T ',HE2'4.85,4.85'                                        16280
         DC    C'X ',HE2'4.85,4.85'                                        16290
         DC    C'$ ',HE2'4.85,4.85' SPARE ENTRY                         F7516300
         DC    C'$ ',HE2'4.85,4.85' SPARE ENTRY                         F7516310
         DC    C'$ ',HE2'4.85,4.85' SPARE ENTRY                         F7516320
         DC    C'$ ',HE2'4.85,4.85' SPARE ENTRY                         F7516330
         DC    C'$ ',HE2'4.85,4.85' SPARE ENTRY                         F7516340
         DC    C'$ ',HE2'4.85,4.85' SPARE ENTRY                         F7516350
         DC    C'$ ',HE2'4.85,4.85' SPARE ENTRY                         F7516360
         DC    C'$ ',HE2'4.85,4.85' SPARE ENTRY                         F7516370
         DC    C'$ ',HE2'4.85,4.85' SPARE ENTRY                         F7516380
         DC    C'$ ',HE2'4.85,4.85' SPARE ENTRY                         F7516390
RATEEND  DC    C'$ ',H'0,0'        LAST ENTRY IN RATE TABLE             F7516400
         DC    C'  ',HE2'4.85,4.85'     DEFAULT VALUES - USED IF NO HIT    16410
         EJECT                                                          F7516420
*                        DATE CONVERSION TABLES                         F7616430
         SPACE 3                                                        F7616440
*                                                                       F7616450
DAYSTBL  DC    PL2'0,31,59,90,120,151,181,212,243,273,304,334,365'      F7616460
         SPACE 2                                                        F7616470
*                                                                       F7616480
DAYSLPYR DC    PL2'0,31,60,91,121,152,182,213,244,274,305,335,366'      F7616490
         SPACE 2                                                        F7616500
*                                                                       F7616510
SHIFTTBL DC    AL1(0,3,2,5,0,3,5,1,4,6,2,4)                             F7616520
         SPACE 2                                                        F7616530
*                                                                       F7616540
MONNMTBL DC    C' JAN FEB MAR APR MAYJUNEJULY AUGSEPT OCT NOV DEC'      F7616550
         SPACE 2                                                        F7616560
*                                                                       F7616570
DOWNMTBL DC    C' SUN MONTUES WEDTHUR FRI SAT'                          F7616580
         EJECT                                                          F7916590
IEFACTRT CSECT                                                          F9116600
        $MDLENTH                                                        F9116610
         END   IEFACTRT                                                 F9916620
