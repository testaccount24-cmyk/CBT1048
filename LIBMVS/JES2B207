JES2B207 TITLE 'SET ADDRSPC=REAL          : CONTROL BLOCK GENERATION MA*B2070130
               CRO DEFINITIONS'                                         B2070140
*                                                                       B2070150
**** $HASPCB ****                  GENERATE HASP CONTROL BLOCKS         B2070160
*                                                                       B2070170
         MACRO                                                          B2070180
         $HASPCB &DOC=NO,&LIST=NO                                       B2070190
         GBLC  &GEN,&DATA,&PRINT                                        B2070200
         PUSH  PRINT                                                    B2070210
         PRINT &PRINT                                                   B2070220
         $HCT  DOC=&DOC            GENERATE HASP HCT DSECT              B2070230
         $AHCT DOC=&DOC            GENERATE AHCT DSECT                  B2070240
         $PCE  DOC=&DOC            GENERATE HASP PCE DSECT              B2070250
         $APCE DOC=&DOC            GENERATE MODS APCE DSECT             B2070260
         $APCE TYPE=SPCE,DOC=&DOC  GENERATE MODS SPCE DSECT             B2070270
         $TEXT LIST=&LIST          GENERATE INTERNAL TEXT DSECTS        B2070280
         $KEYS LIST=&LIST          GENERATE EQUATES FOR INTERNAL TEXT   B2070290
         $BUFFER DOC=&DOC          GENERATE HASP BUFFER DSECT           B2070300
         $JCT  DOC=&DOC            GENERATE HASP JCT DSECT              B2070310
         $CBPR DOC=&DOC            GENERATE MODS CBPR DSECT             B2070320
         $ADCT DOC=&DOC            GENERATE MODS ADCT DSECT             B2070330
         SPACE 1                                                        B2070340
         POP   PRINT                                                    B2070350
         PRINT &GEN,&DATA          SET ASSEMBLY PRINT OPTIONS           B2070360
         MEND                                                           B2070370
         TITLE 'JES2B207 - SET ADDRSPC=REAL   DEFAULT IN JOBCARD'       B2070380
JES2B207 CSECT                     SET ADDRSPC=REAL   DEFAULT           B2070390
         SPACE 2                                                        B2070400
*********************************************************************** B2070410
*                                                                     * B2070420
*        PROGRAM ID. :             JES2B207                           * B2070430
*                                                                     * B2070440
*        DATE WRITTEN :            JUNE 1977                          * B2070450
*                                                                     * B2070460
*        AUTHOR :                  D.H.CARTWRIGHT                     * B2070470
*                                                                     * B2070480
*        LOCATION :                MONSANTO MISD/TSG BRUSSELS         * B2070490
*                                                                     * B2070500
*********************************************************************** B2070510
         SPACE 3                                                        B2070520
*********************************************************************** B2070530
*                                                                     * B2070540
*        PURPOSE                                                      * B2070550
*       ---------                                                     * B2070560
*                                                                     * B2070570
*        THIS IS A MONSANTO JES2 MODIFICATION MODULE.                 * B2070580
*        IT IT LOADED AT JES2 INITIALISATION UPON REQUEST VIA         * B2070590
*        JES2B001,THE MONSANTO INITIALISATION MODULE,AND IS           * B2070600
*        ENTERED VIA A $CBAL FROM THE JCL CONVERSION SUB-TASK         * B2070610
*        INTERNAL TEXT EXIT ( XTXTEXIT ) IN HASPXEQ AT U2124600       * B2070620
*                                                                     * B2070630
*        THE PURPOSE OF THIS MODIFICATION IS TO IMPROVE PERFORMANCE   * B2070640
*        WHEN RUNNING MVS UNDER V/M370 BY RUNNING ALL JOBS WITH       * B2070650
*        ADDRSPC=REAL ADDED TO THE JOB CARD IN THE INTERPRETER EXIT.  * B2070660
*        IN ORDER TO ACHIEVE THE MONSANTO IDEAL OF TOTAL FLEXIBILITY  * B2070670
*        THIS OPTION MAY BE TURNED OFF BY CLASS BY REMOTE AT          * B2070680
*        INITIALISATION TIME BY MEANS OF DCT= CONTROL CARDS           * B2070690
*        SPECIFYING A STRING OF UP TO 36 CLASSES (A-Z,0-9) WHICH      * B2070700
*        SHOULD NOT BE CHANGED BY THIS ROUTINE IF ENTERED FROM THE    * B2070710
*        SPECIFIED REMOTE.                                            * B2070720
*                                                                     * B2070730
*        ON ENTRY:                                                    * B2070740
*        APCESR1  - ADDRESS OF INTERNAL TEXT PREFIX                   * B2070750
*        APCESR10 - ADDRESS OF JCT FOR JOB                            * B2070760
*                                                                     * B2070770
*                                                                     * B2070780
*********************************************************************** B2070790
         EJECT                                                          B2070800
         PRINT OFF                 SUPPRESS PRINT OF HASP OPTIONS       B2070810
         COPY  $HASPGEN            HASP OPTIONS                         B2070820
         PRINT ON                  RE-ESTABLISH PRINT FOR PROGRAM       B2070830
         TITLE 'CONTROL BLOCK OPTIONS'                                  B2070840
         $SYSPARM (OFF,GEN,NODATA,NO,NO)   SET DOCUMENTATION OPTIONS    B2070850
         SPACE 3                                                        B2070860
*                                                                       B2070870
*        GENERATE HASP CONTROL BLOCKS                                   B2070880
*                                                                       B2070890
         SPACE 2                                                        B2070900
         $HASPCB DOC=&DOC,LIST=YES               GENERATE HASP C/B      B2070910
         TITLE 'SET ADDRSPC=REAL AS THE DEFAULT VALUE'                  B2070920
*********************************************************************** B2070930
*        FORMAT OF APCE WORK AREA  ( AS USED BY JES2B207 )            * B2070940
*********************************************************************** B2070950
         SPACE 1                                                        B2070960
APCEDSCT DSECT                                                          B2070970
         ORG   APCEUSER            REDEFINE GENERAL PURPOSE WORK AREA   B2070980
B207USER DS    0CL40               WE HAVE 40 BYTES TO PLAY WITH        B2070990
         DS    0D                  ENSURE DOUBLEWORD ALIGNMENT          B2071000
B207DWRD DS    D                   DOUBLE-WORD WORK AREA                B2071010
TXTAKEY  DS    F                   ADDRESS OF REQUESTED KEY             B2071020
TXTANEXT DS    F                   ADDRESS OF NEXT KEY IN STRING        B2071030
TXTLKEY  DS    F                   LENGTH OF REQUESTED KEY + ITS PARMS  B2071040
TXTRLEN  DS    F                   LENGTH FROM NEXT KEY TO END OF STRNG B2071050
TXTSKEY  DS    C                   KEY FOR WHICH TO SEARCH              B2071060
         ORG                                                            B2071070
JES2B207 CSECT                                                          B2071080
         EJECT                                                          B2071090
*********************************************************************** B2071100
*        INITIALISATION                                               * B2071110
*********************************************************************** B2071120
         SPACE 1                                                        B2071130
JES2B207 $MODNTRY CSECT=YES,EXIT=EXITB207,DOC=&DOC MODIFICATION ENTRY   B2071140
         SPACE 2                                                        B2071150
         USING TXTDSECT,R5         ESTABLISH TEXT STRING ADDR'Y         B2071160
         SPACE 5                                                        B2071170
*        REGISTER USAGE IN THIS MODULE :-                               B2071180
         SPACE 1                                                        B2071190
*        R0    -                                                        B2071200
*        R1    - LENGTH OF KEY + ALL ITS PARM VALUES                    B2071210
*        R2    - ADDRESS OF REQUESTED TEXT KEY                          B2071220
*        R3    - LENGTH OF TEXT FROM NEXT KEY TO END OF STRING          B2071230
*        R4    - BAL RETURN ADDRESS                                     B2071240
*        R5    - ADDRESS OF TEXT STRING PREFIX                          B2071250
*        R6    - AHCT ADDRESS                                           B2071260
*        R7    - APCE ADDRESS                                           B2071270
*        R8    - ADDRESS OF NEXT TEXT KEY                               B2071280
*        R9    -                                                        B2071290
*        R10   - LENGTH OF REPLACEMENT REGION STRING / JCT ADDRESS      B2071300
*        R11   - HCT ADDRESS                                            B2071310
*        R12   - MODULE BASE REGISTER                                   B2071320
*        R13   - PCE ADDRESS                                            B2071330
*        R14   -                                                        B2071340
*        R15   -                                                        B2071350
         EJECT                                                          B2071360
*********************************************************************** B2071370
*        MAIN-LINE LOGIC: SET ADDRSPC=REAL AS DEFAULT                 * B2071380
*********************************************************************** B2071390
         SPACE 1                                                        B2071400
         L     R5,APCESR1          GET ADDRESS OF TEXT PREFIX           B2071410
         LA    R1,STRJKEY          POINT AT 1ST KEY IN STRING           B2071420
         MVI   TXTSKEY,ADRSPJK     SET TO SCAN FOR ADDRSPC= KEYWORD     B2071430
         BAL   R4,TXTFIND          LOCATE KEY IN TEXT STRING            B2071440
         BE    MAINLNEX            EXIT IF USER SUPPLIED                B2071450
         BAL   R4,ADCTCHEK         TEST IF WE SHOULD ADD ONE            B2071460
         NOP   MAINLNEX            EXIT IF IT IS ALRIGHT(NOP TEMP:BNE)  B2071470
         LA    R3,ADSPTXTL         SET R3 TO LENGTH OF SUBSTITUTE TEXT  B2071480
         LA    R8,ADSPTEXT         POINT AT ADDITIONAL TEXT             B2071490
         BAL   R4,TXTADD           ADD ADDRSPC=REAL TEXT                B2071500
         SPACE 1                                                        B2071510
MAINLNEX EQU   *                   END OF MAIN-LINE PROCESSING          B2071520
         EJECT                                                          B2071530
*********************************************************************** B2071540
*        RETURN TO JES2 MAINLINE CODE                                 * B2071550
*********************************************************************** B2071560
         SPACE 1                                                        B2071570
EXITB207 $MODEXIT DOC=&DOC         RETURN TO JES2 CODE                  B2071580
         TITLE 'ROUTINE TO CHECK ADCT JOB OPTIONS'                      B2071590
*********************************************************************** B2071600
*        THIS ROUTINE CHECKS THE ADCT JOB CLASS EXCEPTION             * B2071610
*        FLAGS TO SEE WHETHER THIS JOB SHOULD BE EXCLUDED FROM        * B2071620
*        RUNNING AS V=R.                                              * B2071630
*        REGISTER USAGE :-                                            * B2071640
*        R1    -                   ADCT ADDRESSABILITY                * B2071650
*        R2    -                   WORK REGISTER                      * B2071660
*        R10   -                   JCT ADDRESSABILITY                 * B2071670
*        ON EXIT THE CONDITION CODE IS SET AS FOLLOWS:                * B2071680
*        UNEQUAL -                 JOB SHOULD BYPASS THIS ROUTINE     * B2071690
*                                                                     * B2071700
*********************************************************************** B2071710
         SPACE 2                                                        B2071720
ADCTCHEK $SUBIN SAVE=(R1,R2,R4,R10) SUBROUTINE ENTRY                    B2071730
         L     R10,APCESR10        PICK UP JCT ADDRESS                  B2071740
         SR    R1,R1               CLEAR ADCT POINTER                   B2071750
         IC    R1,JCTROUTE+1       PICK UP JOBS INPUT ROUTE CODE        B2071760
         BAL   R4,FINDADCT         GO LOCATE THE ADCT FOR JOB           B2071770
         USING ADCTDSCT,R1         ESTABLISH ADCT ADDRESSABILITY        B2071780
         SR    R2,R2               CLEAR WORK REGISTER                  B2071790
         IC    R2,JCTJCLAS         PICK UP JOBCLASS                     B2071800
         SH    R2,CLASSA           SUBTRACT LOWEST CLASS OFFSET         B2071810
         LA    R2,ADCTCLSS(R2)     POINT AT CLASS EXCEPTION FLAGS       B2071820
         TM    0(R2),ADCTJVNR      TEST AND SET CONDITION CODE          B2071830
ADCTCHEX $SUBOUT ,                 RETURN TO MAIN LINE                  B2071840
         SPACE 1                                                        B2071850
         DROP  R1,R10              END ADCT AND JCT ADDRESSABILITY      B2071860
         TITLE 'A BRIEF DISSERTATION ON THE FORMAT OF INTERNAL TEXT'    B2071870
*********************************************************************** B2071880
*        DESCRIPTION OF INTERNAL TEXT                                 * B2071890
*********************************************************************** B2071900
         SPACE 1                                                        B2071910
*        THE MAPPING MACROS ARE SINGULARLY UNHELPFUL ABOUT THE FORMAT   B2071920
*         OF THE STRING OF INTERNAL TEXT, AND SO THAT YOU MAY BETTER    B2071930
*         UNDERSTAND WHAT THE FOLLOWING ROUTINES ARE DOING, I WILL      B2071940
*         ILLUSTRATE WITH AN EXAMPLE.                                   B2071950
         SPACE 1                                                        B2071960
*        CONSIDER THE STATEMENT :-                                      B2071970
*              SPACE=(TRK,(190,19),RLSE)                                B2071980
         SPACE 1                                                        B2071990
*        IN A STRING OF INTERNAL TEXT, THIS WOULD APPEAR AS :-          B2072000
*              X'47'               KEY REPRESENTING 'SPACE'             B2072010
*              X'03'               NO OF PARMS ( 'TRK', '(19,19)'       B2072020
*                                  AND 'RLSE' )                         B2072030
*              X'03'               LENGTH OF IST PARM ('TRK')           B2072040
*              C'TRK'              PARAMETER VALUE                      B2072050
*              X'82'               SUBPARM COUNT OF 2 (PRIMARY & SEC'Y  B2072060
*              X'03'               LENGTH OF 1ST SUBPARM OF SECOND PARM B2072070
*              C'190'              VALUE OF IST SUBPARM OF SECOND PARM  B2072080
*              X'02'               LENGTH OF 2ND SUBPARM OF 2ND PARM    B2072090
*              C'19'               VALUE OF 2ND SUBPARM OF 2ND PARM     B2072100
*              X'04'               LENGTH OF 3RD PARM                   B2072110
*              C'RLSE'             VALUE OF 3RD PARM                    B2072120
         SPACE 1                                                        B2072130
*        EASY, ISN'T IT ?                                               B2072140
         SPACE 5                                                        B2072150
*        NOTE:                                                          B2072160
*         1. IN THE ROUTINES THAT FOLLOW I REFER TO A PARM DESCRIPTOR.  B2072170
*            I MEAN BY THIS A FIELD THAT MAY EITHER CONTAIN THE LENGTH  B2072180
*            OF THE IMMEDIATELY ADJACENT PARM VALUE, OR MAY CONATIN     B2072190
*            A SUB-PARM COUNT.  IF IT CONTAINS A SUB-PARM COUNT, THEN   B2072200
*            THE FIRST BIT IS ON ( SO THAT IT WILL SET A MINUS          B2072210
*            CONDITION WHEN INSERTED INTO A REGISTER WITH 'ICM' ).      B2072220
         TITLE 'LOCATE KEY IN STRING OF INTERNAL TEXT'                  B2072230
*********************************************************************** B2072240
*        LOCATE KEY IN STRING OF INTERNAL TEXT                        * B2072250
*********************************************************************** B2072260
         SPACE 1                                                        B2072270
*        THE FOLLOWING ROUTINE LOCATES AN INTERNAL TEXT KEYWORD IN      B2072280
*         A STRING OF INTERNAL TEXT.                                    B2072290
         SPACE 1                                                        B2072300
*        ON ENTRY:                                                      B2072310
*        R1       - ADDRESS OF THE 1ST KEY IN THE STRING                B2072320
*        TXTSKEY  - KEY FOR WHICH TO SEARCH                             B2072330
         SPACE 1                                                        B2072340
*        ON EXIT:                                                       B2072350
*        R1       - LENGTH OF THE KEY PLUS ALL PARMS AND SUB-PARMS      B2072360
*        TXTLKEY  - DITTO                                               B2072370
*        R2       - ADDRESS OF THE REQUESTED KEY ( OR THE END KEY )     B2072380
*        TXTAKEY  - DITTO                                               B2072390
*        R3       - LENGTH OF THE REMAINDER (FROM NEXT KEY TO END )     B2072400
*        TXTRLEN  - DITTO                                               B2072410
*        R8       - ADDRESS OF THE NEXT KEY IN THE STRING               B2072420
*        TXTANEXT - DITTO                                               B2072430
         SPACE 1                                                        B2072440
*        UPON RETURN THE PSW COND CODE IS SET SUCH THAT:                B2072450
*         BE  - REQUESTED KEY LOCATED                                   B2072460
*         BNE - REQUESTED KEY NOT FOUND                                 B2072470
         EJECT                                                          B2072480
*********************************************************************** B2072490
*        LOCATE KEY IN STRING OF INTERNAL TEXT ( CONT'D )             * B2072500
*********************************************************************** B2072510
         SPACE 1                                                        B2072520
TXTFIND $SUBIN SAVE=R4             ENTER ROUTINE                        B2072530
         LR    R2,R5               POINT R2 AT START OF TEXT STRING     B2072540
         AH    R2,STRLTH           ADD LENGTH OF TEXT STRING .....      B2072550
         BCTR  R2,0                AND DECREMENT TO GET ADDR OF END KEY B2072560
         ST    R2,TXTAKEY          PRESERVE ADDR OF END KEY JUST IN CAS B2072570
         MVI   APCE$$X,$$Y         ASSUME REQUESTED KEY NOT PRESENT     B2072580
         XR    R2,R2               CLEAR WORK REGISTER                  B2072590
         XR    R3,R3               CLEAR WORK REGISTER                  B2072600
         SPACE 1                                                        B2072610
TXTFIND1 EQU   *                   AT THIS POINT R1 POINTS AT A KEY     B2072620
         BAL   R4,TXTGETKY         GET THE ADDRESS OF THE NEXT KEY      B2072630
*                                  R1 NOW POINTS AT THE NEXT KEY        B2072640
         CLI   0(R1),ENDK          IS THIS KEY THE END OF THE TEXT      B2072650
         BE    TXTFINDX            EXIT IF YES: REQUESTED KEY NOT THERE B2072660
         CLC   0(1,R1),TXTSKEY     IS THIS THE KEY WE ARE LOOKING FOR   B2072670
         BNE   TXTFIND1            BR IF NOT TO GET NEXT                B2072680
         SPACE 1                                                        B2072690
*                                  R1 POINTS AT THE KEY WE REQUIRE      B2072700
         ST    R1,TXTAKEY          PRESERVE ADDRESS OF DESIRED KEY      B2072710
         MVI   APCE$$X,$$X         PREPARE TO SET COND CODE FOR SUCCESS B2072720
         SPACE 1                                                        B2072730
         BAL   R4,TXTGETKY         GET ADDRESS OF NEXT KEY              B2072740
         ST    R1,TXTANEXT          ... AND PRESERVE ITS ADDRESS        B2072750
         LR    R8,R1               POINT R8 AT THE NEXT KEY             B2072760
         SPACE 1                                                        B2072770
         L     R2,TXTAKEY          POINT R2 AT THE DESIRED KEY          B2072780
         SR    R1,R2               CALCULATE LENGTH OF THE DESIRED KEY  B2072790
         ST    R1,TXTLKEY           ... AND PRESERVE IT                 B2072800
         SPACE 1                                                        B2072810
         LA    R3,STRLTH           POINT R3 AT START OF PREFIX          B2072820
         AH    R3,STRLTH           POINT R3 1 BYTE PAST END OF STRING   B2072830
         SR    R3,R8               DETERMINE LENGTH FROM NEXT KEY TO EN B2072840
         ST    R3,TXTRLEN           ... AND PRESERVE IT                 B2072850
         SPACE 1                                                        B2072860
TXTFINDX L     R2,TXTAKEY          GET ADDR OF REQUESTED OR END KEY     B2072870
         $SUBOUT SETCC=YES         RESTORE REG, SET COND CODE & RETURN  B2072880
         EJECT                                                          B2072890
*********************************************************************** B2072900
*        LOCATE NEXT KEY IN STRING                                    * B2072910
*********************************************************************** B2072920
         SPACE 1                                                        B2072930
*        THIS ROUTINE LOCATES THE NEXT KEY IN THE STRING OF TEXT        B2072940
         SPACE 1                                                        B2072950
*        ON INPUT:                                                      B2072960
*         R1  - ADDRESS OF CURRENT KEY                                  B2072970
         SPACE 1                                                        B2072980
*        ON OUTPUT:                                                     B2072990
*         R1  - ADDRESS OF NEXT KEY                                     B2073000
         SPACE 1                                                        B2073010
*        R2 AND R3 ARE USED AS WORK REGISTERS                           B2073020
         SPACE 1                                                        B2073030
TXTGETKY $SUBIN ,                  ENTER ROUTINE                        B2073040
         ICM   R2,1,1(R1)          SET R2 TO NUMBER OF PARMS FOR KEY    B2073050
         LA    R1,2(,R1)           POINT R1 AT 1ST PARM DESCRIPTION     B2073060
         BZ    TXTGKYX             IF PARM COUNT WAS ZERO, THEN WE ARE  B2073070
*                                  POINTING AT ANOTHER KEY, SO EXIT     B2073080
         SPACE 1                                                        B2073090
TXTGKY1  EQU   *                   R1 POINTS AT A PARM DESCRIPTOR       B2073100
         ICM   R3,1,0(R1)          SET R3 TO LENGTH OF PARM             B2073110
         BM    TXTGKY3             IF BIT ONE IS ON THEN THIS IS NOT A  B2073120
*                                  LENGTH FIELD BUT A SUBPARM COUNT SO  B2073130
*                                  BRANCH TO PROCESS IT                 B2073140
         LA    R1,0(R3,R1)         POINT AT END OF THIS PARM            B2073150
         SPACE 1                                                        B2073160
TXTGKY2  EQU   *                   R1 POINTS AT THE END OF A PARM VALUE B2073170
*                                  OR AT PURIFIED SUBPARM COUNT FIELD   B2073180
         LA    R1,1(,R1)           POINT AT LENGTH OF NEXT PARM -IF ANY B2073190
         BCT   R2,TXTGKY1          LOOP BACK IF ANY PARMS LEFT          B2073200
         B     TXTGKYX             IF NO PARMS LEFT WE ARE POINTING AT  B2073210
*                                  ANOTHER KEY SO EXIT                  B2073220
         SPACE 1                                                        B2073230
TXTGKY3  EQU   *                   R1 POINTS AT A SUBPARM COUNT         B2073240
         SL    R3,=A(X'80')        CLEAR HIGH-ORDER BIT OF COUNT        B2073250
         ALR   R2,R3               ADD SUBPARM COUNT TO PARM COUNT      B2073260
         B     TXTGKY2             LOOP ABCK TO INCH ALONG SUBPARMS     B2073270
         SPACE 1                                                        B2073280
TXTGKYX $SUBOUT ,                  RETURN TO CALLER                     B2073290
         TITLE 'DELETE STRING FROM STRING OF INTERNAL TEXT'             B2073300
*********************************************************************** B2073310
*        DELETE STRING FROM STRING OF INTERNAL TEXT                   * B2073320
*********************************************************************** B2073330
         SPACE 1                                                        B2073340
*        THIS ROUTINE DELETES A STRING FROM A STRING OF INTERNAL TEXT   B2073350
*         BY OVERWRITING IT WITH THE TEXT THAT FOLLOWS THE STRING TO BE B2073360
*         DELETED, PADDING THE REMAINDER WITH BLANKS, AND ALTERING THE  B2073370
*         LENGTH OF THE TOTAL TEXT ( IN THE STRING PREFIX ).            B2073380
         SPACE 1                                                        B2073390
*        ON ENTRY:                                                      B2073400
*         R1  - LENGTH OF STRING TO BE DELETED                          B2073410
*         R2  - ADDRESS OF TEXT TO BE OVERWRITTEN                       B2073420
*         R3  - LENGTH OF REMAINDER ( FROM NEXT KEY TO END OF STRING )  B2073430
*         R8  - ADDRESS OF NEXT KEY                                     B2073440
         SPACE 1                                                        B2073450
*        ON EXIT:                                                       B2073460
*         R2  - ADDRESS OF LAST BYTE IN TEXT STRING ( END KEY )         B2073470
*         R3  - NEW LENGTH OF TOTAL TEXT STRING                         B2073480
         SPACE 1                                                        B2073490
TXTDEL  $SUBIN ,                   ENTER ROUTINE                        B2073500
         LR    R10,R3              SET R9 TO LENGTH OF REMAINDER        B2073510
         ICM   R10,8,=C' '         SET PAD CHARACTER TO BLANK           B2073520
         MVCL  R2,R8               MOVE TEXT DOWN STRING TO OVERWRITE   B2073530
         BCTR  R2,0                DECREMENT R2 TO POINT AT LAST BYTE   B2073540
         LH    R3,STRLTH           GET ORIGINAL LENGTH OF TEXT STRING   B2073550
         SR    R3,R1               SUBTRACT LENGTH OF DELETED STRING    B2073560
         STH   R3,STRLTH           UPDATE LENGTH WITH NEW VALUE         B2073570
       $SUBOUT ,                   RETURN TO CALLER                     B2073580
         EJECT                                                          B2073590
*********************************************************************** B2073600
*        ADD TEXT TO STRING OF INTERNAL TEXT                          * B2073610
*********************************************************************** B2073620
         SPACE 1                                                        B2073630
*        THIS ROUTINE ADDS A STRING OF TEXT TO THE END OF AN EXISTING   B2073640
*         STRING OF INTERNAL TEXT, ADDS A NEW END KEY TO THE END OF THE B2073650
*         MODIFIED STRING, AND UPDATES THE LENGTH FIELD IN THE PREFIX.  B2073660
         SPACE 1                                                        B2073670
*        ON ENTRY:                                                      B2073680
*         R2  - ADDRESS OF CURRENT END KEY                              B2073690
*         R3  - LENGTH OF THE NEW TEXT                                  B2073700
*         R5  - ADDRESS OF THE INTERNAL TEXT STRING PREFIX              B2073710
*         R8  - ADDRESS OF THE NEW TEXT TO BE ADDED                     B2073720
         SPACE 1                                                        B2073730
*        ON EXIT:                                                       B2073740
*         R1  - NEW LENGTH OF TOTAL STRING                              B2073750
*         R2  - ADDRESS OF THE NEW END KEY                              B2073760
         SPACE 1                                                        B2073770
TXTADD  $SUBIN ,                   ENTER ROUTINE                        B2073780
         BCTR  R3,0                DECREMENT LENGTH FOR EXECUTE         B2073790
         EX    R3,TXTADDM          MOVE NEW TEXT TO END OF STRING       B2073800
         LA    R2,1(R3,R2)         POINT R2 PAST ADDED TEXT             B2073810
         MVI   0(R2),ENDK          INSERT NEW END KEY                   B2073820
         LH    R1,STRLTH           RETRIEVE PREVIOUS LENGTH OF STRING   B2073830
         LA    R1,1(R3,R1)         CALCULATE NEW STRING LENGTH          B2073840
         STH   R1,STRLTH           PRESERVE NEW STRING LENGTH IN PREFIX B2073850
        $SUBOUT ,                  RETURN TO CALLER                     B2073860
         SPACE 5                                                        B2073870
TXTADDM  MVC   0(0,R2),0(R8)       EXECUTED MOVE OF NEW TEXT            B2073880
         EJECT                                                          B2073890
*********************************************************************** B2073900
*        REPLACE SUBSTRING OF INTERNAL TEXT                           * B2073910
*********************************************************************** B2073920
         SPACE 1                                                        B2073930
*        THIS ROUTINE REPLACES ONE SUBSTRING OF INTERNAL TEXT WITH      B2073940
*         ANOTHER.  NOT THAT THE REPLACEMENT STRING MAY BE OF ANY       B2073950
*         LENGTH, AND NEED NOT BE THE SAME LENGTH AS THE STRING IT      B2073960
*         REPLACES.  THE LENGTH OF THE TOTAL STRING ( IN THE TEXT       B2073970
*         STRING PREFIX ) IS UPDATED.                                   B2073980
         SPACE 1                                                        B2073990
*        ON ENTRY:                                                      B2074000
*         R1  - LENGTH OF TEXT TO BE REPLACED                           B2074010
*         R2  - ADDRESS OF TEXT TO BE REPLACED                          B2074020
*         R3  - LENGTH OF REMAINDER ( FROM NEXT KEY TO THE END )        B2074030
*         R5  - ADDRESS OF THE TEXT PREFIX                              B2074040
*         R8  - ADDRESS OF NEXT KEY                                     B2074050
*         R10 - LENGTH OF REPLACEMENT STRING                            B2074060
*         R14 - ADDRESS OF THE REPLACEMENT STRING                       B2074070
         SPACE 1                                                        B2074080
*        ON EXIT:                                                       B2074090
*         R2  - ADDRESS OF NEW END KEY                                  B2074100
*         R3  - NEW LENGTH OF TOTAL STRING                              B2074110
         SPACE 1                                                        B2074120
TXTREP  $SUBIN ,                   ENTER ROUTINE                        B2074130
        $GETAPCE TXTR              ACQUIRE SECONDARY APCE FOR STORAGE   B2074140
         LR    R15,R1              PRESERVE ADDRESS OF SECONDARU APCE   B2074150
         USING SPCEDSCT,R15        ESTABLISH DSECT ADDRESSABILITY       B2074160
         BCTR  R3,0                DECREMENT LENGTH OF REMAINDER        B2074170
         EX    R3,TXTREPM1         PRESERVE REMAINDER OF STRING IN APCE B2074180
         BCTR  R10,0               DECREMENT LENGTH OF REPLACEMENT STRI B2074190
         EX    R10,TXTREPM3        MOVE REPLACEMENT STRING TO TEXT      B2074200
         LA    R2,1(R10,R2)        POINT R2 PAST END OF ADDED TEXT      B2074210
         EX    R3,TXTREPM2         RESTORE PRESERVED REMAINDER          B2074220
         EJECT                                                          B2074230
*********************************************************************** B2074240
*        REPLACE SUBSTRING OF INTERNAL TEXT ( CONT'D )                * B2074250
*********************************************************************** B2074260
         SPACE 1                                                        B2074270
         LA    R2,1(R3,R2)         POINT R2 AT NEW POSN OF END KEY      B2074280
         LA    R3,1(,R2)           POINT R3 PAST END KEY                B2074290
         SR    R3,R5               CALCULATE LENGTH OF TOTAL STRING     B2074300
         STH   R3,STRLTH           PRESERVE LENGTH IN PREFIX            B2074310
        $FREAPCE TXTR              RELEASE THE SECONDARY APCE           B2074320
        $SUBOUT ,                  RETURN TO THE CALLER                 B2074330
         SPACE 5                                                        B2074340
TXTREPM1 MVC   SPCEAREA(0),0(R8)   PRESERVE REMAINDER IN APCE           B2074350
TXTREPM2 MVC   0(0,R2),SPCEAREA    RESTORE PRESERVED REMAINDER          B2074360
TXTREPM3 MVC   0(0,R2),0(R14)      ADD NEW TEXT TO STRING               B2074370
         SPACE 1                                                        B2074380
         DROP  R15                 DROP SECONDARY APCE ADDR'Y           B2074390
         TITLE 'ADCT LOCATE SUBROUTINE'                                 B2074400
*********************************************************************** B2074410
*        SUB-ROUTINE TO LOCATE THE ADCT FOR A DESIRED REMOTE          * B2074420
*        NUMBER.                                                      * B2074430
*        ON ENTRY                  R1  =  REMOTE NUMBER (LOCAL = ZERO)* B2074440
*        ON EXIT                   R1  =  ADDRESS OF ITS ADCT         * B2074450
*********************************************************************** B2074460
         SPACE 3                                                        B2074470
FINDADCT $SUBIN SAVE=(R2,R3,R4)    ENTRY                                B2074480
         LA    R3,ADCTLGTH+CBPRLGTH SET LENGTH OF EACH ADCT             B2074490
         LR    R2,R1               GET NUMBER OF ADCT REQUIRED          B2074500
         MR    R2,R2               CALCULATE OFFSET IN ADCT LIST        B2074510
         L     R2,AHCTADCT         GET START OF ADCT LIST               B2074520
         LA    R1,0(R2,R3)         GET ADDRESS OF REQUIRED ADCT         B2074530
FINDADCX $SUBOUT ,                  RETURN TO CALLER                    B2074540
         TITLE 'DATA AREAS'                                             B2074550
*********************************************************************** B2074560
*        MISCELLANEOUS CONSTANTS                                      * B2074570
*********************************************************************** B2074580
         SPACE 1                                                        B2074590
*        THE FOLLOWING TEXT STRING REPRESENTS :                         B2074600
*              ADDRSPC=REAL                                             B2074610
         SPACE 1                                                        B2074620
ADSPTEXT EQU   *                   TEXT STRING FOR REGION               B2074630
         DC    AL1(ADRSPJK)        ADDRSPC= KEY                         B2074640
         DC    AL1(1)              1 PARAMETER                          B2074650
         DC    AL1(4)              PARAMETER IS 4 BYTES LONG            B2074660
         DC    CL4'REAL'           DEFAULT ADDRSPC PARAMETER            B2074670
ADSPTXTL EQU   *-ADSPTEXT          LENGTH OF SUBSTITUTE STRING          B2074680
         SPACE 2                                                        B2074690
CLASSA   DS    0H                  LOWEST CLASS OFFSET                  B2074700
         DC    AL1(0)                                                   B2074710
         DC    C'A'                IS CLASS A                           B2074720
         SPACE 2                                                        B2074730
         LTORG                                                          B2074740
         SPACE 1                                                        B2074750
         END                                                            B2074760
