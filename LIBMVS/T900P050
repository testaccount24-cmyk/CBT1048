 P050:  PROC(T900P050_PCB1,T900P050_PCB2) OPTIONS(MAIN);                PMF00010
    DCL 1 T900P050_PCB1,                                                PMF00020
          3 PCB1_DBNAME   CHAR(8),                                      PMF00030
          3 PCB1_LEVEL    CHAR(2),                                      PMF00040
          3 PCB1_STATUS   CHAR(2),                                      PMF00050
          3 PCB1_FIL1     CHAR(4),                                      PMF00060
          3 PCB1_RES      FIXED BIN(31),                                PMF00070
          3 PCB1_SEGNAME  CHAR(8),                                      PMF00080
          3 PCB1_LKFBA    FIXED BINM(31),                               PMF00090
          3 PCB1_KFBA     CHAR(37);                                     PMF00100
    DCL 1 T900P050_PCB2,                                                PMF00110
          3 PCB2_DBNAME   CHAR(8),                                      PMF00120
          3 PCB2_LEVEL    CHAR(2),                                      PMF00130
          3 PCB2_STATUS   CHAR(2),                                      PMF00140
          3 PCB2_FIL1     CHAR(4),                                      PMF00150
          3 PCB2_RES      FIXED BIN(31),                                PMF00160
          3 PCB2_SEGNAME  CHAR(8),                                      PMF00170
          3 PCB2_LKFBA    FIXED BIN(31),                                PMF00180
          3 PCB2_KFBA     CHAR(35);                                     PMF00190
    DCL THREE   STATIC FIXED BIN(31) INIT(3);                           PMF00200
    DCL FOUR    STATIC FIXED BIN(31) INIT(4);                           PMF00210
    DCL FIVE    STATIC FIXED BIN(31) INIT(5);                           PMF00220
    DCL GN      STATIC CHAR(4) INIT('GN  ');                            PMF00230
    DCL GU      STATIC CHAR(4) INIT('GU  ');                            PMF00240
    DCL GNP     STATIC CHAR(4) INIT('GNP ');                            PMF00250
    DCL IO_PCB2 CHAR(81),                                               PMF00260
        1 IO_SEG DEF IO_PCB2,                                           PMF00270
          3 IO-SEG-FILA    CHAR(2),                                     PMF00280
          3 IO-SEG-SYSTEM  CHAR(4),                                     PMF00290
          3 IO-SEG-SERVICE CHAR(4),                                     PMF00300
          3 IO-SEG-FILB    CHAR(24),                                    PMF00310
        1 IO_SEGUSER1 DEF IO_PCB2,                                      PMF00320
          3 IO_SEGUSER1-KEY  CHAR(1),                                   PMF00330
          3 IO_SEGUSER1-DATA CHAR(80);                                  PMF00340
    DCL 1 IO_SEGDTE,                                                    PMF00350
          3 IO_SEGDTE_FILA  CHAR(2),                                    PMF00360
          3 IO_SEGDTE_ELEM  CHAR(6),                                    PMF00370
          3 IO_SEGDTE_FILB  CHAR(27),                                   PMF00380
          3 IO_SEGDTE_KEYS  FIXED BIN(15),                              PMF00390
          3 IO_SEGDTE_ACSS  CHAR(1),                                    PMF00400
          3 IO_SEGDTE_LNNO  CHAR(1),                                    PMF00410
          3 IO_SEGDTE_DESC  CHAR(40);                                   PMF00420
    DCL IO_DUMMYSEG CHAR(34);                                           PMF00430
    DCL WS_USERSEG CHAR(80),                                            PMF00440
        1 WS_MISC DEF WS-USERSEG,                                       PMF00450
          3 WS_MISC_TYPE  CHAR(4),                                      PMF00460
          3 WS_MISC_SEQ   CHAR(2),                                      PMF00470
          3 WS_MISC_DATA  CHAR(74),                                     PMF00480
        1 WS_FREQ DEF WS_USERSEG,                                       PMF00490
          3 WS_FREQ_TYPE  CHAR(4),                                      PMF00500
          3 WS_FREQ_SEQ   CHAR(2),                                      PMF00510
          3 WS_FREQ_BORO  CHAR(1),                                      PMF00520
          3 WS_FREQ_VOL   PIC'999R',                                    PMF00530
          3 WS_FREQ_TIME  CHAR(10),                                     PMF00540
          3 WS_FREQ_BSZE  PIC'9999R',                                   PMF00550
          3 WS_FREQ_NARR  CHAR(64);                                     PMF00560
        1 WS_RESP DEF WS_USERSEG,                                       PMF00570
          3 WS_RESP_TYPE  CHAR(4),                                      PMF00580
          3 WS_RESP_SEQ   CHAR(2),                                      PMF00590
          3 WS_RESP_AVL   PIC'999R',                                    PMF00600
          3 WS_RESP_TIME  CHAR(6),                                      PMF00610
          3 WS_RESP_NARR  CHAR(64);                                     PMF00620
    DCL SSA1 CHAR(80) INIT('SEG');                                      PMF00630
    DCL SSA2 CHAR(80) INIT                                              PMF00640
       ('SEG     (SEGNAME =0A                               *)'),       PMF00650
 /******** ACTION NEEDED ***********/                                   PMF00660
 /******** THE ASTERISK IN THE ABOVE LINE **********/                   PMF00670
 /******** MUST BE CHANGED TO HEX '01' BEFORE RUNNING ********/         PMF00680
 /*                                                         |        */ PMF00690
 /*                                  THIS BYTE IS X'01' ----|        */ PMF00700
        SSA2_SEGNAME CHAR(8) DEF SSA2 POS(21);                          PMF00710
    DCL SSA3 CHAR(80) INIT('SEGDTE  *D');                               PMF00720
    DCL SSA4 CHAR(80) INIT('DTEDSCR (SEGTXTID=*)');                     PMF00730
 /******** ACTIION NEEDED *************/                                PMF00740
 /******** THE ASTERISK IN THE ABOVE LINE ***********/                  PMF00750
 /******** MUST BE CHANGED TO HEX'01' BEFORE RUNNING *********/         PMF00760
 /*                                           |                      */ PMF00770
 /*                    THIS BYTE IS X'01' ----|                      */ PMF00780
    DCL SYSIN FILE RECORD SEQUENTIAL;                                   PMF00790
    DCL 1 INREC,                                                        PMF00800
          3 IN_FILA CHAR(4),                                            PMF00810
          3 IN_SYST CHAR(4),                                            PMF00820
          3 IN_TYPE CHAR(4),                                            PMF00830
          3 IN_LOW  CHAR(4),                                            PMF00840
          3 IN_HIGH CHAR(4),                                            PMF00850
          3 IN_FILB CHAR(60);                                           PMF00860
    DCL 1 TABLE(50),                                                    PMF00870
          3 TAB_SYST CHAR(4),                                           PMF00880
          3 TAB_TYPE CHAR(4),                                           PMF00890
          3 TAB_LOW  CHAR(4),                                           PMF00900
          3 TAB_HIGH CHAR(4);                                           PMF00910
    DCL TAB_SUB FIXED BIN(31);                                          PMF00920
    DCL TAB_LEN FIXED BIN(31);                                          PMF00930
    DCL PRINT FILE RECORD SEQUENTIAL;                                   PMF00940
    DCL 1 HEAD1,                                                        PMF00950
          3 H1_FILA CHAR(50) INIT                                       PMF00960
              ('1IMSSA/R1         IMS SYSTEM SERVICE ANALYSIS ;   '),   PMF00970
          3 H1_FILB CHAR(83) INIT                                       PMF00980
              ('INPUT-FORMAT SERVICE LISTING');                         PMF00990
    DCL 1 HEAD2,                                                        PMF01000
          3 H2_FILA CHAR(28) INIT('0                 SYSTEM:'),         PMF01010
          3 H2_SYST CHAR(20),                                           PMF01020
          3 H2_FILB CHAR(11) INIT('SERVICE:'),                          PMF01030
          3 H2_SRVC CHAR(74);                                           PMF01040
    DCL 1 HEAD3,                                                        PMF01050
          3 H3_FILA CHAR(50) INIT('- DATA ELEMENTS:'),                  PMF01060
          3 H3_FILB CHAR(83) INIT('           DATA  ACSS KEY  KEY');    PMF01070
    DCL 1 HEAD4,                                                        PMF01080
          3 H4_FILA CHAR(50) INIT                                       PMF01090
              ('  --------------                  DESCRIPTION'),        PMF01100
          3 H4_FILB CHAR(83) INIT ('         ELEMENT TYPE NR. REFS');   PMF01110
    DCL 1 LINE1,                                                        PMF01120
          3 L1_CBYT CHAR(1),                                            PMF01130
          3 L1_NARR CHAR(17),                                           PMF01140
          3 L1_DATA CHAR(115);                                          PMF01150
    DCL 1 LINE2,                                                        PMF01160
          3 L2_CBYT CHAR(1)  INIT('-'),                                 PMF01170
          3 L2_FILA CHAR(24) INIT('     FREQUENCY   MODE = '),          PMF01180
          3 L2_MODE CHAR(10),                                           PMF01190
          3 L2_FILB CHAR(9)  INIT('VOLUME='),                           PMF01200
          3 L2_VOL  PIC'ZZZR',                                          PMF01210
          3 L2_PERT CHAR(13),                                           PMF01220
          3 L2_FILC CHAR(10) INIT('RUNSIZE='),                          PMF01230
          3 L2_RUNS PIC'ZZZZR',                                         PMF01240
          3 L2_FILD CHAR(57) INIT(' ');                                 PMF01250
    DCL 1 LINE3,                                                        PMF01260
          3 L3_CBYT CHAR(1)  INIT('0'),                                 PMF01270
          3 L3_FILA CHAR(27) INIT('                 COMMENTS: '),       PMF01280
          3 L3_NARR CHAR(105);                                          PMF01290
    DCL 1 LINE4,                                                        PMF01300
          3 L4_CBYT CHAR(1)  INIT('-'),                                 PMF01310
          3 L4_FILA CHAR(17) INIT(' RESPONSE TIME:  '),                 PMF01320
          3 L4_TIME PIC'ZZZRB',                                         PMF01330
          3 L4_UNTS CHAR(110);                                          PMF01340
    DCL 1 LINE5,                                                        PMF01350
          3 L5_CBYT    CHAR(1),                                         PMF01360
          3 L5_FILA    CHAR(17) INIT(' '),                              PMF01370
          3 L5_DESC    CHAR(42),                                        PMF01380
          3 L5_ELEM    CHAR(9),                                         PMF01390
          3 L5_ACSS    CHAR(4),                                         PMF01400
          3 L5_KEYN    PIC'ZBBB',                                       PMF01410
          3 L5_KEYR(3) PIC'Z',                                          PMF01420
          3 L5_FILB    CHAR(53);                                        PMF01430
    DCL LINECOUNT FIXED BIN(31);                                        PMF01440
    DCL CHAR4   CHAR(4),                                                PMF01450
        PIC4    PIC'9999' DEF CHAR4,                                    PMF01460
        PIC1    PIC'9'    DEF CHAR4,                                    PMF01470
        1 PIC3S           DEF CHAR4 POS(2),                             PMF01480
          3 PIC3(3) PIC'9';                                             PMF01490
    DCL ROOT_TO_BE_PRINTED CHAR(3);                                     PMF01500
    DCL DESC_STORE CHAR(40);                                            PMF01510
    DCL LAST_PRINT CHAR(4);                                             PMF01520
        CALL $INIT;                                                     PMF01530
        CALL $GNROOT;                                                   PMF01540
        DO WHILE(PCB2_STATUS ^= 'GB');                                  PMF01550
           CALL $TESTOK;                                                PMF01560
           IF ROOT_TO_BE_PRINTED = 'YES'                                PMF01570
           THEN CALL $MAIN;                                             PMF01580
           ELSE CALL $GNROOT;                                           PMF01590
        END;                                                            PMF01600
        CLOSE FILE(PRINT);                                              PMF01610
 $INIT: PROC;                                                           PMF01620
        OPEN FILE(SYSIN) INPUT;                                         PMF01630
        ON ENDFILE(SYSIN) IN_SYST = '****';                             PMF01640
        TAB_SUB = 0;                                                    PMF01650
        READ FILE(SYSIN) INTO(INREC);                                   PMF01660
        DO WHILE(IN_SYST ^= '****');                                    PMF01670
           TAB_SUB = TAB_SUB + 1;                                       PMF01680
           IF TAB_SUB > 50                                              PMF01690
           THEN DO;                                                     PMF01700
                   PUT EDIT('> 50 CONTROL CARDS - RUN ABORTED')(A);     PMF01710
                   CALL PLIDUMP;                                        PMF01720
                END;                                                    PMF01730
           TAB_SYST(TAB_SUB) = IN_SYST;                                 PMF01740
           TAB_TYPE(TAB_SUB) = IN_TYPE;                                 PMF01750
           TAB_LOW (TAB_SUB) = IN_LOW;                                  PMF01760
           TAB_HIGH(TAB_SUB) = IN_HIGH;                                 PMF01770
           READ FILE(SYSIN) INTO(INREC);                                PMF01780
        END;                                                            PMF01790
        TAB_LEN = TAB_SUB;                                              PMF01800
        CLOSE FILE(SYSIN);                                              PMF01810
        OPEN FILE(PRINT) OUTPUT;                                        PMF01820
        END;    /***** END OF PROC $INIT *****/                         PMF01830
$TESTOK: PROC;                                                          PMF01840
        ROOT_TO_BE_PRINTED = 'NO';                                      PMF01850
        TAB_SUB = 1;                                                    PMF01860
        DO WHILE(TAB_LEN >= TAB_SUB & ROOT_TO_BE_PRINTED = 'NO ');      PMF01870
           IF IO_SEG_SYSTEM = TAB_SYST(TAB_SUB)                         PMF01880
           THEN DO;                                                     PMF01890
                   IF TAB_TYPE(TAB_SUB) = 'USER'                        PMF01900
                    & IO_SEG_SERVICE >= '0000'                          PMF01910
                   THEN ROOT_TO_BE_PRINTED = 'YES';                     PMF01920
                   IF TAB_TYPE(TAB_SUB) = 'PROC'                        PMF01930
                    & IO_SEG_SERVICE <= 'Z999'                          PMF01940
                    & IO_SEG_SERVICE >= 'A   '                          PMF01950
                   THEN ROOT_TO_BE_PRINTED = 'YES';                     PMF01960
                   IF TAB_TYPE(TAB_SUB) = 'IFAC'                        PMF01970
                    & SUBSTR(IO_SEG_SERVICE,1,1) = '$'                  PMF01980
                   THEN ROOT_TO_BE_PRINTED = 'YES';                     PMF01990
                   IF TAB_TYPE(TAB_SUB) = 'FULL'                        PMF02000
                   THEN ROOT_TO_BE_PRINTED = 'YES';                     PMF02010
                   IF TAB_TYPE(TAB_SUB) = 'RNGE'                        PMF02020
                    & IO_SEG_SERVICE >= TAB_LOW (TAB_SUB)               PMF02030
                    & IO_SEG_SERVICE <= TAB_HIGH(TAB_SUB)               PMF02040
                   THEN ROOT_TO_BE_PRINTED = 'YES';                     PMF02050
                END;                                                    PMF02060
           TAB_SUB = TAB_SUB + 1;                                       PMF02070
        END;    /* END OF DOWHILE */                                    PMF02080
        END;    /***** END OF PROC $TESTOK *****/                       PMF02090
 $MAIN: PROC;                                                           PMF02100
        H2_SYST = IO_SEG_SYSTEM;                                        PMF02110
        H2_SRVC = IO_SEG_SERVICE;                                       PMF02120
        CALL $PHEAD;                                                    PMF02130
        DESC_STORE = ' ';                                               PMF02140
        CALL $GNSEG;                                                    PMF02150
        DO WHILE(PCB2_STATUS = '  ' | PCB2_STATUS = 'GK');              PMF02160
           WS_USERSEG = IO_SEGUSER1_DATA;                               PMF02170
           IF PCB2_SEGNAME = 'SEGDSCR '                                 PMF02180
           THEN DESC_STORE = WS_MISC_DATA;                              PMF02190
           ELSE CALL $PRINT;                                            PMF02200
           CALL $GNSEG;                                                 PMF02210
        END;                                                            PMF02220
        IF DESC_STORE ^= ' '                                            PMF02230
        THEN DO;                                                        PMF02240
                L1_CBYT = '-';                                          PMF02250
                L1_NARR = '   DESCRIPTION:';                            PMF02260
                L1_DATA = DESC_STORE;                                   PMF02270
                WRITE FILE(PRINT) FROM(LINE1);                          PMF02280
                DESC_STORE = ' ';                                       PMF02290
                LINECOUNT = LINECOUNT + 3;                              PMF02300
                LAST_PRINT = 'DESC';                                    PMF02310
             END;                                                       PMF02320
        CALL $GUROOT;                                                   PMF02330
        CALL $GNDATA;                                                   PMF02340
        DO WHILE(PCB1_STATUS ^= 'GE');                                  PMF02350
           CALL $PDATA;                                                 PMF02360
           CALL $GNDATA;                                                PMF02370
        END;                                                            PMF02380
        END;    /***** END OF PROC $MAIN *****/                         PMF02390
 $PRINT: PROC;                                                          PMF02400
        IF (WS_MISC_TYPE ^= 'CLNT' & DESC_STORE^= ' ')                  PMF02410
        THEN DO;                                                        PMF02420
                L1_CBYT = '-';                                          PMF02430
                L1_NARR = '   DESCRIPTION:';                            PMF02440
                L1_DATA = DESC_STORE;                                   PMF02450
                WRITE FILE(PRINT) FROM(LINE1);                          PMF02460
                LAST_PRINT = 'DESC';                                    PMF02470
                DESC_STORE = ' ';                                       PMF02480
                LINECOUNT = LINECOUNT + 3;                              PMF02490
             END;                                                       PMF02500
        IF LINECOUNT > 60                                               PMF02510
        THEN CALL $PHEAD;                                               PMF02520
        IF WS_FREQ_TYPE = 'FREQ'                                        PMF02530
        THEN CALL $PFREQ;                                               PMF02540
        ELSE                                                            PMF02550
        IF WS_RESP_TYPE = 'RESP'                                        PMF02560
        THEN CALL $PRESP;                                               PMF02570
        ELSE DO;                                                        PMF02580
                IF WS_MISC_TYPE = LAST_PRINT                            PMF02590
                THEN DO;                                                PMF02600
                        L1_CBYT = ' ';                                  PMF02610
                        L1_NARR = ' ';                                  PMF02620
                     END;                                               PMF02630
                ELSE DO;                                                PMF02640
                        L1_CBYT = '-';                                  PMF02650
                        LINECOUNT = LINECOUNT + 2;                      PMF02660
                        IF WS_MISC_TYPE = 'CLNT'                        PMF02670
                        THEN L1_NARR =  '        CLIENT:';              PMF02680
                        IF WS_MISC_TYPE = 'DESC'                        PMF02690
                        THEN L1_NARR = '   DESCRIPTION:';               PMF02700
                        IF WS_MISC_TYPE = 'SECU'                        PMF02710
                        THEN L1_NARR = '      SECURITY:';               PMF02720
                        IF WS_MISC_TYPE = 'TEXT'                        PMF02730
                        THEN L1_NARR = '         NOTES:';               PMF02740
                        LAST_PRINT = WS_MISC_TYPE;                      PMF02750
                     END;                                               PMF02760
                L1_DATA = WS_MISC_DATA;                                 PMF02770
                WRITE FILE(PRINT) FROM(LINE1);                          PMF02780
                LINECOUNT = LINECOUNT + 1;                              PMF02790
             END;                                                       PMF02800
        END;    /***** END OF PROC $PRINT *****/                        PMF02810
 $PFREQ: PROC;                                                          PMF02820
        IF WS_FREQ_BORO = 'B'                                           PMF02830
        THEN L2_MODE = 'BATCH';                                         PMF02840
        ELSE L2_MODE = 'ONLINE';                                        PMF02850
        L2_VOL  = WS_FREQ_VOL;                                          PMF02860
        L2_PERT = WS_FREQ_PERT;                                         PMF02870
        L2_RUNS = WS_FREQ_RUNS;                                         PMF02880
        WRITE FILE(PRINT) FROM(LINE2);                                  PMF02890
        L3_NARR = WS_FREQ_NARR;                                         PMF02900
        WRITE FILE(PRINT) FROM(LINE3);                                  PMF02910
        LINECOUNT = LINECOUNT + 5;                                      PMF02920
        LAST_PRINT = 'FREQ';                                            PMF02930
        END;    /***** END OF PROC $PFREQ *****/                        PMF02940
 $PRESP: PROC;                                                          PMF02950
        L4_TIME = WS_RESP_AVL;                                          PMF02960
        L4_UNTS = WS_RESP_TIME;                                         PMF02970
        WRITE FILE(PRINT) FROM(LINE4);                                  PMF02980
        L3_NARR = WS_RESP_NARR;                                         PMF02990
        WRITE FILE(PRINT) FROM(LINE3);                                  PMF03000
        LINECOUNT = LINECOUNT + 5;                                      PMF03010
        LAST_PRINT = 'RESP';                                            PMF03020
        END;    /***** END OF PROC $PRESP *****/                        PMF03030
 $PDATA: PROC;                                                          PMF03040
        IF (LINECOUNT > 60 | LAST_PRINT ^= 'DATA')                      PMF03050
        THEN DO;                                                        PMF03060
                IF LINECOUNT > 45                                       PMF03070
                THEN CALL $PHEAD;                                       PMF03080
                WRITE FILE(PRINT) FROM(HEAD3);                          PMF03090
                WRITE FILE(PRINT) FROM(HEAD4);                          PMF03100
                LINECOUNT = LINECOUNT + 5;                              PMF03110
                L5_CBYT = '0';                                          PMF03120
             END;                                                       PMF03130
        L5_ELEM = IO_SEGDTE_ELEM;                                       PMF03140
        L5_ACSS = IO_SEGDTE_ACSS;                                       PMF03150
        PIC4 = IO_SEGDTE_KEYS;                                          PMF03160
        L5_KEYN = PIC1;                                                 PMF03170
        L5_KEYR = PIC3;                                                 PMF03180
        IF PCB1_SEGNAME = 'DTEDSCR '                                    PMF03190
        THEN L5_DESC = IO_SEGDTE_DESC;                                  PMF03200
        ELSE L5_DESC = ' ';                                             PMF03210
        WRITE FILE(PRINT) FROM(LINE5);                                  PMF03220
        LINECOUNT = LINECOUNT + 1                                       PMF03230
        L5_CBYT = ' ';                                                  PMF03240
        END;    /***** END OF PROC $PDATA *****/                        PMF03250
 $PHEAD: PROC;                                                          PMF03260
        WRITE FILE(PRINT) FROM(HEAD1);                                  PMF03270
        WRITE FILE(PRINT) FROM(HEAD2);                                  PMF03280
        LINECOUNT = 5;                                                  PMF03290
        LAST_PRINT = ' ';                                               PMF03300
        END;    /***** END OF PROC $PHEAD *****/                        PMF03310
 $GNROOT: PROC;                                                         PMF03320
        CALL PLITDLI(FOUR,GN,T900P050_PCB2,IO_PCB2,SSA1);               PMF03330
        END;    /***** END OF PROC $GNROOT *****/                       PMF03340
 $GUROOT: PROC;                                                         PMF03350
        SSA2_SEGNAME = H2_SYST || H2_SRVC;                              PMF03360
        CALL PLITDLI(FOUR,GU,T900P050_PCB1,IO_DUMMYSEG,SSA2);           PMF03370
        IF PCB1_STATUS ^= '  '                                          PMF03380
        THEN DO;                                                        PMF03390
                PUT EDIT('PCBS SCREWED UP; ')(A);                       PMF03400
                PUT DATA(SSA2_SEGNAME);                                 PMF03410
                CALL PLIDUMP;                                           PMF03420
             END;                                                       PMF03430
        END;    /***** END OF PROC $GUROOT *****/                       PMF03440
 $GNSEG: PROC;                                                          PMF03450
        CALL PLITDLI(THREE,GN,T900P050_PCB2,IO_PCB2);                   PMF03460
        END;    /***** END OF PROC $GNSEG *****/                        PMF03470
 $GNDATA: PROC;                                                         PMF03480
        CALL PLITDLI(FIVE,GNP,T900P050_PCB1,IO_SEGDTE,SSA3,SSA4);       PMF03490
        END;    /***** END OF PROC $GNDATA *****/                       PMF03500
        END;   /********** END OF MAIN PROGRAM T900P050 **********/     PMF03510
